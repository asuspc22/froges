"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.restoreHttps = exports.replaceHttps = void 0;
const url_1 = require("url");
const http_impl_1 = require("./http-impl");
const https = require('https');
const originalHttpsRequest = https.request;
const originalHttpsGet = https.get;
function parseArgs(args) {
    const result = {
        options: {}
    };
    if (args.length > 0 && (0, http_impl_1.isStringOrURL)(args[0])) {
        const url = (0, http_impl_1.isString)(args[0]) ? new url_1.URL(args[0]) : args[0];
        result.options = (0, url_1.urlToHttpOptions)(url);
        args.shift();
    }
    if (args.length > 0 && (0, http_impl_1.isRequestOptions)(args[0])) {
        result.options = Object.assign(result.options, args[0]);
        args.shift();
    }
    if (args.length > 0 && (0, http_impl_1.isCallback)(args[0])) {
        result.callback = args[0];
        args.shift();
    }
    return result;
}
function request(...args) {
    var _a;
    const { options, callback } = parseArgs(args);
    if ((_a = options === null || options === void 0 ? void 0 : options.headers) === null || _a === void 0 ? void 0 : _a['Forge-Proxy-Authorization']) {
        return originalHttpsRequest(options, callback);
    }
    return new http_impl_1.Request(options, callback);
}
function get(...args) {
    const { options, callback } = parseArgs(args);
    const result = request(Object.assign(Object.assign({}, options), { method: 'GET' }), ...(callback ? [callback] : []));
    result.end();
    return result;
}
function replaceHttps() {
    https.request = request;
    https.get = get;
}
exports.replaceHttps = replaceHttps;
function restoreHttps() {
    https.request = originalHttpsGet;
    https.get = originalHttpsGet;
}
exports.restoreHttps = restoreHttps;
