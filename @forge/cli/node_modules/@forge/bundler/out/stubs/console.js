"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.restoreConsole = exports.replaceConsole = exports.forgeConsole = exports.emitLogEvent = exports.emitTunnelEvent = void 0;
const api_1 = require("@forge/api");
const runtime_1 = require("@forge/runtime");
const util_1 = require("util");
function emitTunnelEvent(event) {
    process.stdout.write(JSON.stringify(event) + '\n');
}
exports.emitTunnelEvent = emitTunnelEvent;
function emitLogEvent(event) {
    process.stdout.write(JSON.stringify(event) + '\n');
}
exports.emitLogEvent = emitLogEvent;
function customConsole(logLevel, header) {
    return (...rawData) => {
        var _a;
        const msg = (0, util_1.format)((_a = rawData[0]) !== null && _a !== void 0 ? _a : '');
        const rest = rawData.slice(1).map((val) => (0, util_1.format)(val));
        const invocationId = (0, api_1.getRuntime)().lambdaContext.awsRequestId;
        if (global.__forge_tunnel__) {
            const logEventData = { invocationId, logLevel, logArguments: [msg, ...rest] };
            emitTunnelEvent(logEventData);
        }
        else {
            const logLine = Object.assign(Object.assign({}, header), { type: runtime_1.LogType.LOG, id: invocationId, P: 3, ts: Date.now(), lvl: logLevel, msg, '*': rest });
            emitLogEvent(logLine);
        }
    };
}
function forgeConsole(consoleMethod, header) {
    switch (consoleMethod) {
        case 'debug':
            return customConsole(runtime_1.LogLevel.DEBUG, header);
        case 'warn':
            return customConsole(runtime_1.LogLevel.WARN, header);
        case 'error':
            return customConsole(runtime_1.LogLevel.ERROR, header);
        default:
            return customConsole(runtime_1.LogLevel.INFO, header);
    }
}
exports.forgeConsole = forgeConsole;
const originalConsole = new Map(runtime_1.CONSOLE_METHODS.map((method) => [method, global.console[method]]));
function replaceConsole(header) {
    for (const method of runtime_1.CONSOLE_METHODS) {
        global.console[method] = forgeConsole(method, header);
    }
}
exports.replaceConsole = replaceConsole;
function restoreConsole() {
    for (const method of runtime_1.CONSOLE_METHODS) {
        global.console[method] = originalConsole.get(method);
    }
}
exports.restoreConsole = restoreConsole;
