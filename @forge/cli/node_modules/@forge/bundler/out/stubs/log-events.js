"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitFailedFooterEvent = exports.emitSuccessfulFooterEvent = exports.emitHeaderEvent = exports.getRuntimeName = exports.RUNTIME_NAME_FALLBACK = exports.AWS_EXECUTION_ENV_PREFIX = void 0;
const api_1 = require("@forge/api");
const runtime_1 = require("@forge/runtime");
const console_1 = require("./console");
exports.AWS_EXECUTION_ENV_PREFIX = 'AWS_Lambda_';
exports.RUNTIME_NAME_FALLBACK = 'node';
function getRuntimeName() {
    const awsRuntime = process.env.AWS_EXECUTION_ENV;
    if (!awsRuntime) {
        return exports.RUNTIME_NAME_FALLBACK;
    }
    if (awsRuntime.startsWith(exports.AWS_EXECUTION_ENV_PREFIX)) {
        return awsRuntime.substring(exports.AWS_EXECUTION_ENV_PREFIX.length);
    }
    return awsRuntime;
}
exports.getRuntimeName = getRuntimeName;
function invocationHeaderLogs(lambdaEvent) {
    const { featureFlags, contextAri, appContext, tracing } = lambdaEvent === null || lambdaEvent === void 0 ? void 0 : lambdaEvent._meta;
    const { appId, environmentId, appVersion, functionKey, moduleKey, moduleType } = appContext !== null && appContext !== void 0 ? appContext : {};
    return {
        id: (0, api_1.getRuntime)().lambdaContext.awsRequestId,
        type: runtime_1.LogType.HEADER,
        appId,
        environmentId,
        appVersion,
        installationContext: contextAri,
        functionKey,
        moduleType,
        moduleKey,
        b3: `${tracing.traceId}-${tracing.spanId}`,
        featureFlags: featureFlags || [],
        runtime: getRuntimeName()
    };
}
function invocationFooterLogs(successfulInvocation) {
    return {
        id: (0, api_1.getRuntime)().lambdaContext.awsRequestId,
        type: runtime_1.LogType.FOOTER,
        success: successfulInvocation,
        logMetadata: {
            bytes: 0,
            truncated: false,
            errorCount: 0
        },
        outboundCalls: {
            count: 0,
            stargateCount: 0,
            externalCount: 0,
            rejectedCount: 0,
            bytesOut: 0,
            bytesIn: 0,
            msWaiting: 0
        },
        function: {
            bytesIn: 0,
            bytesOut: 0,
            durationMs: 0,
            mem: 0
        }
    };
}
function emitHeaderEvent(lambdaEvent) {
    const event = invocationHeaderLogs(lambdaEvent);
    (0, console_1.emitLogEvent)(event);
    return event;
}
exports.emitHeaderEvent = emitHeaderEvent;
function emitSuccessfulFooterEvent() {
    (0, console_1.emitLogEvent)(invocationFooterLogs(true));
}
exports.emitSuccessfulFooterEvent = emitSuccessfulFooterEvent;
function emitFailedFooterEvent() {
    (0, console_1.emitLogEvent)(invocationFooterLogs(false));
}
exports.emitFailedFooterEvent = emitFailedFooterEvent;
