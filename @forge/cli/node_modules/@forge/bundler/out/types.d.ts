import { Logger } from '@forge/cli-shared';
import { Compiler } from 'webpack';
import { EntryPoint } from './webpack';
export declare type BundledFiles = {
    [filename: string]: string;
};
export declare type BundleSourceMaps = {
    [filename: string]: string;
};
export interface BundlerOutput {
    output: BundledFiles;
    sourceMap?: BundleSourceMaps;
    metadata?: {
        [key: string]: any;
    };
}
export declare type BundleLogger = Pick<Logger, 'info' | 'warn'>;
export declare type Bundler<EP = EntryPoint> = (logger: BundleLogger, appDirectory: string, endpointPath: EP[]) => Promise<BundlerOutput>;
export declare type InDiskBundler = (logger: BundleLogger, entrypoints: EntryPoint[]) => Promise<{
    outputDir: string;
}>;
export declare type WatcherCallback = (err: Error | null, output?: BundlerOutput) => void;
export interface WatcherMonitor {
    stop(): void;
}
export declare type WatchRun = (compiler: Compiler, ...args: any[]) => void;
export declare type Watcher = (logger: Logger, endpointPath: EntryPoint[], isDebugMode: boolean, callback: WatcherCallback, watchRun?: WatchRun) => WatcherMonitor;
//# sourceMappingURL=types.d.ts.map