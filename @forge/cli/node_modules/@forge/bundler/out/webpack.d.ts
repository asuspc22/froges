import { IFs } from 'memfs';
import webpack, { Compiler, Configuration as WebpackConfig } from 'webpack';
import { Bundler, Watcher, InDiskBundler, BundlerOutput, BundleLogger } from './types';
import { FileSystemReader, FileSystemWriter } from '@forge/cli-shared';
import { LintLogger } from '@forge/lint';
import { CommonWebpackConfig, ConfigBuilder, EntryPoint, FunctionsEntryPoint } from './config/common';
export { EntryPoint };
export declare function handleWebpackCompilationResult(logger: BundleLogger, err: Error | null | undefined, stats: webpack.Stats | undefined): asserts stats is webpack.Stats;
export declare function getInMemoryBundle(config: CommonWebpackConfig, fileSystem?: IFs): BundlerOutput;
interface CompilerOptions {
    writeToDisk?: boolean;
}
export declare const getCompiler: (webpackConfig: WebpackConfig, options?: CompilerOptions) => Compiler;
export declare const runLinter: (logger?: LintLogger, fileSystemReader?: FileSystemReader, fileSystemWriter?: FileSystemWriter) => Promise<void>;
export declare const watch: Watcher;
export declare function createBundler<EP extends EntryPoint = EntryPoint>(getBuildConfig: (entrypoints: EP[], configBuilder: ConfigBuilder) => CommonWebpackConfig): Bundler<EP>;
export declare const sandboxBundle: Bundler;
export declare const nodeBundle: Bundler<FunctionsEntryPoint>;
export declare const nativeUiBundle: InDiskBundler;
//# sourceMappingURL=webpack.d.ts.map