"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSandboxedRuntimeBuildConfig = exports.SANDBOXED_WEBPACK_CONFIG_NAME = void 0;
const tslib_1 = require("tslib");
const webpack_1 = tslib_1.__importDefault(require("webpack"));
const stub_plugin_1 = require("../stub-plugin");
const common_1 = require("./common");
exports.SANDBOXED_WEBPACK_CONFIG_NAME = 'sandboxed-runtime';
const getCustomModulesAliases = () => {
    return {
        'browserify-cipher': (0, common_1.resolveModulePath)('browserify-cipher/browser.js'),
        'browserify-sign/algos': (0, common_1.resolveModulePath)('browserify-sign/algos.js'),
        'browserify-sign': (0, common_1.resolveModulePath)('browserify-sign/browser/index.js'),
        'create-ecdh': (0, common_1.resolveModulePath)('create-ecdh/browser.js'),
        'create-hash/md5': (0, common_1.resolveModulePath)('create-hash/md5.js'),
        'create-hash': (0, common_1.resolveModulePath)('create-hash/browser.js'),
        'create-hmac': (0, common_1.resolveModulePath)('create-hmac/browser.js'),
        'diffie-hellman': (0, common_1.resolveModulePath)('diffie-hellman/browser.js'),
        pbkdf2: (0, common_1.resolveModulePath)('pbkdf2/browser.js'),
        'public-encrypt': (0, common_1.resolveModulePath)('public-encrypt/browser.js'),
        randombytes: (0, common_1.resolveModulePath)('randombytes/browser.js'),
        randomfill: (0, common_1.resolveModulePath)('randomfill/browser.js'),
        assert: (0, common_1.resolveModulePath)('assert/'),
        buffer: (0, common_1.resolveModulePath)('buffer/'),
        console: (0, common_1.resolveModulePath)('console-browserify'),
        crypto: (0, common_1.resolveModulePath)('crypto-browserify'),
        events: (0, common_1.resolveModulePath)('events/'),
        os: (0, common_1.resolveModulePath)('os-browserify/browser'),
        punycode: (0, common_1.resolveModulePath)('punycode/'),
        process: (0, common_1.resolveModulePath)('process/browser.js'),
        string_decoder: (0, common_1.resolveModulePath)('string_decoder/'),
        timers: (0, common_1.resolveModulePath)('timers-browserify'),
        url: (0, common_1.resolveModulePath)('url/'),
        util: (0, common_1.resolveModulePath)('util/'),
        zlib: (0, common_1.resolveModulePath)('browserify-zlib'),
        fs: (0, common_1.resolveModulePath)('memfs'),
        http: (0, common_1.resolveStubPath)('http-sandbox'),
        https: (0, common_1.resolveStubPath)('http-sandbox'),
        path: (0, common_1.resolveModulePath)('path-browserify'),
        querystring: (0, common_1.resolveModulePath)('querystring-browser'),
        stream: (0, common_1.resolveModulePath)('readable-stream'),
        'supports-color': (0, common_1.resolveModulePath)('supports-color/index.js')
    };
};
const getSandboxedRuntimeBuildConfig = (entrypoints, config) => {
    const webpackConfig = (0, common_1.getCommonWebpackConfig)(entrypoints, config);
    const sandboxedConfigPlugins = [
        new webpack_1.default.ProvidePlugin({
            Buffer: [(0, common_1.resolveModulePath)('buffer/'), 'Buffer'],
            path: (0, common_1.resolveModulePath)('path-browserify'),
            querystring: (0, common_1.resolveModulePath)('querystring-browser'),
            stream: (0, common_1.resolveModulePath)('readable-stream'),
            TextDecoder: [(0, common_1.resolveModulePath)('text-encoder-lite'), 'TextDecoderLite'],
            TextEncoder: [(0, common_1.resolveModulePath)('text-encoder-lite'), 'TextEncoderLite'],
            URL: [(0, common_1.resolveModulePath)('whatwg-url'), 'URL'],
            URLSearchParams: [(0, common_1.resolveModulePath)('whatwg-url'), 'URLSearchParams']
        }),
        new stub_plugin_1.StubPlugin({
            modules: [
                'async_hooks',
                'child_process',
                'cluster',
                'constants',
                'dgram',
                'dns',
                'domain',
                'http2',
                'module',
                'net',
                'perf_hooks',
                'readline',
                'repl',
                'sys',
                'tls',
                'trace_events',
                'tty',
                'v8',
                'vm',
                'worker_threads'
            ],
            placeholder: 'requestedModule',
            stub: (0, common_1.resolveStubPath)('unsupported')
        })
    ];
    sandboxedConfigPlugins.forEach((plugin) => webpackConfig.plugins.push(plugin));
    const moduleRuls = [
        {
            test: /(readable-stream|pbkdf2|util)\//,
            resolve: {
                aliasFields: ['browser']
            }
        },
        {
            test: /axios\//,
            resolve: {
                aliasFields: []
            }
        }
    ];
    moduleRuls.forEach((rule) => webpackConfig.module.rules.push(rule));
    webpackConfig.target = 'webworker';
    webpackConfig.resolve = Object.assign(Object.assign({}, webpackConfig.resolve), { mainFields: ['main', 'module'], exportsFields: [], alias: getCustomModulesAliases() });
    webpackConfig.name = exports.SANDBOXED_WEBPACK_CONFIG_NAME;
    return webpackConfig;
};
exports.getSandboxedRuntimeBuildConfig = getSandboxedRuntimeBuildConfig;
