"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNativeUiBuildConfig = void 0;
const tslib_1 = require("tslib");
const path_1 = require("path");
const webpack_bundle_analyzer_1 = require("webpack-bundle-analyzer");
const html_webpack_plugin_1 = tslib_1.__importDefault(require("html-webpack-plugin"));
const tmp_1 = tslib_1.__importDefault(require("tmp"));
const getNativeUiBuildConfig = (entrypoints) => {
    const resolvedEntryPoints = {};
    for (const entrypoint of entrypoints) {
        resolvedEntryPoints[entrypoint.name] = (0, path_1.resolve)(entrypoint.path);
    }
    return {
        entry: Object.assign({}, resolvedEntryPoints),
        name: 'native-ui',
        mode: 'production',
        devtool: 'source-map',
        output: {
            filename: '[name].js',
            path: tmp_1.default.dirSync().name,
            publicPath: 'auto'
        },
        node: {
            __dirname: true
        },
        plugins: [
            new html_webpack_plugin_1.default({
                filename: 'index.html'
            }),
            new webpack_bundle_analyzer_1.BundleAnalyzerPlugin({ analyzerMode: 'disabled', generateStatsFile: true, logLevel: 'silent' })
        ],
        resolve: {
            extensions: ['.ts', '.tsx', '.js', '.jsx', '.jpg', '.jpeg', '.png', '.gif', '.svg']
        },
        resolveLoader: {
            modules: require.resolve.paths('babel-loader') || undefined
        },
        target: 'web',
        module: {
            rules: [
                {
                    test: /\.(jpe?g|png|gif|svg)$/i,
                    loader: 'file-loader',
                    options: {
                        name: '[name].[contenthash].[ext]',
                        outputPath: 'assets'
                    }
                },
                { test: /\.tsx?$/, loader: 'ts-loader' },
                {
                    test: /\.jsx?$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: 'babel-loader',
                            options: {
                                plugins: [
                                    [
                                        require.resolve('@babel/plugin-transform-react-jsx'),
                                        {
                                            pragma: 'React.createElement'
                                        }
                                    ],
                                    require.resolve('@babel/plugin-proposal-numeric-separator'),
                                    require.resolve('@babel/plugin-proposal-class-properties'),
                                    require.resolve('@babel/plugin-proposal-optional-chaining')
                                ],
                                cacheDirectory: true
                            }
                        }
                    ]
                }
            ]
        }
    };
};
exports.getNativeUiBuildConfig = getNativeUiBuildConfig;
