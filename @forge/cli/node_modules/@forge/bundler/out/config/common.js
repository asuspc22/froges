"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommonWebpackConfig = exports.getDevToolConfig = exports.resolveStubPath = exports.resolveModulePath = exports.getEntryPoints = void 0;
const tslib_1 = require("tslib");
const path_1 = require("path");
const webpack_1 = tslib_1.__importDefault(require("webpack"));
const text_1 = require("../text");
const cli_shared_1 = require("@forge/cli-shared");
const tsconfig_interactor_1 = require("../tsconfig-interactor");
function getEntryPoints(handlers) {
    const entryPointMap = new Map();
    for (const { module, func } of handlers) {
        if (!entryPointMap.has(module)) {
            entryPointMap.set(module, []);
        }
        entryPointMap.get(module).push(func);
    }
    const currentDirectory = process.cwd();
    return Array.from(entryPointMap.entries()).map(([module, functions]) => ({
        name: module,
        path: (0, path_1.join)(currentDirectory, 'src', module),
        functions
    }));
}
exports.getEntryPoints = getEntryPoints;
const resolveModulePath = (moduleName) => {
    return require.resolve(moduleName);
};
exports.resolveModulePath = resolveModulePath;
function resolveStubPath(stubName) {
    return (0, exports.resolveModulePath)(`../stubs/${stubName}`);
}
exports.resolveStubPath = resolveStubPath;
const getDevToolConfig = (config) => {
    if (!config.isWatchMode) {
        return 'source-map';
    }
    return config.isDebugMode ? 'eval-cheap-module-source-map' : 'cheap-source-map';
};
exports.getDevToolConfig = getDevToolConfig;
const getCommonWebpackConfig = (entrypoints, config) => {
    if (!require.main) {
        throw new Error(text_1.Text.noExecutableFile);
    }
    const resolvedEntryPoints = {};
    for (const entrypoint of entrypoints) {
        resolvedEntryPoints[entrypoint.name] = (0, path_1.resolve)(entrypoint.path);
    }
    return {
        entry: resolvedEntryPoints,
        mode: 'production',
        optimization: {
            minimize: false
        },
        devtool: (0, exports.getDevToolConfig)(config),
        output: {
            libraryTarget: 'commonjs',
            globalObject: 'this',
            filename: '[name].js',
            path: '/'
        },
        node: {
            __dirname: true
        },
        performance: false,
        resolve: {
            extensions: ['.ts', '.tsx', '.js', '.jsx', '.json']
        },
        resolveLoader: {
            modules: require.resolve.paths('babel-loader') || undefined
        },
        plugins: [new webpack_1.default.IgnorePlugin({ resourceRegExp: /^encoding$/, contextRegExp: /node-fetch/ })],
        module: {
            rules: [
                {
                    test: /\.jsx?$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: 'babel-loader',
                            options: {
                                presets: [
                                    [
                                        (0, exports.resolveModulePath)('@babel/preset-typescript'),
                                        {
                                            isTSX: true,
                                            jsxPragma: 'ForgeUI',
                                            allExtensions: true
                                        }
                                    ]
                                ],
                                plugins: [
                                    [
                                        (0, exports.resolveModulePath)('@babel/plugin-transform-react-jsx'),
                                        {
                                            pragma: 'ForgeUI.createElement'
                                        }
                                    ],
                                    (0, exports.resolveModulePath)('@forge/babel-plugin-transform-ui'),
                                    (0, exports.resolveModulePath)('@babel/plugin-proposal-numeric-separator'),
                                    (0, exports.resolveModulePath)('@babel/plugin-proposal-class-properties'),
                                    (0, exports.resolveModulePath)('@babel/plugin-proposal-optional-chaining')
                                ],
                                cacheDirectory: true
                            }
                        }
                    ]
                },
                {
                    test: /\.tsx?$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: 'ts-loader',
                            options: {
                                compilerOptions: {
                                    jsx: 'react',
                                    jsxFactory: 'ForgeUI.createElement'
                                },
                                configFile: new tsconfig_interactor_1.TSConfigInteractor(new cli_shared_1.FileSystemReader(), config.appDirectory).getTSConfigPath(),
                                context: config.appDirectory,
                                onlyCompileBundledFiles: true
                            }
                        }
                    ]
                }
            ]
        }
    };
};
exports.getCommonWebpackConfig = getCommonWebpackConfig;
