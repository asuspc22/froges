import { RequestInfo, RequestInit, Response, Headers } from 'node-fetch';
import { FetchAPI } from '..';
declare type FetchFunction = (url: RequestInfo, options?: RequestInit) => Promise<Response>;
declare type ProxyUrlProvider = 'app' | 'user' | 'none';
declare type ProxyUrlRemote = 'jira' | 'confluence' | 'stargate' | 'bitbucket';
declare type ProxyFetchArgs = {
    type: 'fpp';
    provider: ProxyUrlProvider;
    remote: ProxyUrlRemote;
} | {
    type: 'egress';
};
export declare const getRedirectUrl: (responseHeaders: Headers, original: string, isFromEgress: boolean) => string;
export declare const createProxyFetch: (args: ProxyFetchArgs) => FetchFunction;
export declare function getNodeRuntimeAPI(): FetchAPI;
export declare function getSandboxRuntimeAPI(api: any): FetchAPI;
export {};
//# sourceMappingURL=fetch.d.ts.map