"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConfluenceModules = void 0;
const types_1 = require("../../../types");
const validateSingleProperty_1 = require("./validateSingleProperty");
const validatePropertyUniqueness_1 = require("./validatePropertyUniqueness");
const validateKeyboardShortcuts_1 = require("./validateKeyboardShortcuts");
const validateCrossModulePropertyUniqueness_1 = require("./validateCrossModulePropertyUniqueness");
const validateCustomContentHierarchy_1 = require("./validateCustomContentHierarchy");
const ROUTE = 'route';
const USE_AS_CONFIG = 'useAsConfig';
const USE_AS_GET_STARTED = 'useAsGetStarted';
const KEYBOARD_SHORTCUT_ACCELERATOR = 'keyboardShortcut.accelerator';
const validateConfluenceModules = (modules, yamlContentByLine) => {
    const validationErrors = [];
    [
        types_1.AllModuleTypes.ConfluenceSpaceSettings,
        types_1.AllModuleTypes.ConfluenceGlobalPage,
        types_1.AllModuleTypes.ConfluenceSpacePage
    ].forEach((moduleType) => {
        validationErrors.push(...(0, validatePropertyUniqueness_1.validatePropertyUniqueness)(modules, moduleType, ROUTE, yamlContentByLine));
    });
    validationErrors.push(...(0, validateSingleProperty_1.validateSingleProperty)(modules, types_1.AllModuleTypes.ConfluenceGlobalSettings, USE_AS_CONFIG, yamlContentByLine));
    validationErrors.push(...(0, validateSingleProperty_1.validateSingleProperty)(modules, types_1.AllModuleTypes.ConfluenceGlobalSettings, USE_AS_GET_STARTED, yamlContentByLine));
    validationErrors.push(...(0, validateCustomContentHierarchy_1.validateCustomContentHierarchy)(modules, types_1.AllModuleTypes.ConfluenceCustomContent, yamlContentByLine));
    validationErrors.push(...(0, validateCrossModulePropertyUniqueness_1.validateCrossModulePropertyUniqueness)(modules, KEYBOARD_SHORTCUT_ACCELERATOR, yamlContentByLine), ...(0, validateKeyboardShortcuts_1.validateKeyboardShortcuts)(modules, yamlContentByLine));
    return validationErrors;
};
exports.validateConfluenceModules = validateConfluenceModules;
