"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFullAdminPage = void 0;
const types_1 = require("../../../types");
const text_1 = require("../../../text");
const utils_1 = require("../../../utils");
const validate_subpages_in_module_1 = require("./validate-subpages-in-module");
const jiraAdminPageType = types_1.AllModuleTypes.JiraAdminPage;
const validateSeparateAdminPageModule = (pageType, modules, currentModule, multiplePagesError, yamlContentByLine) => {
    const validationErrors = [];
    if ((currentModule === null || currentModule === void 0 ? void 0 : currentModule.length) > 1) {
        validationErrors.push(Object.assign({ message: multiplePagesError, reference: text_1.References.Modules, level: 'error' }, (0, utils_1.findPosition)(currentModule[1].key, yamlContentByLine)));
    }
    if ((currentModule === null || currentModule === void 0 ? void 0 : currentModule.length) === 1) {
        if (pageType === 'admin') {
            const adminModules = Object.assign(Object.assign({}, modules), { [jiraAdminPageType]: currentModule });
            validationErrors.push(...(0, validate_subpages_in_module_1.validateSubpagesInModule)(adminModules, jiraAdminPageType, yamlContentByLine));
        }
        if (['get-started', 'config'].includes(pageType)) {
            const { pages, sections, key } = currentModule[0];
            if (pages || sections)
                validationErrors.push(Object.assign({ message: text_1.errors.modules.subPages.invalidPagesAndSectionsForConfigurePages(jiraAdminPageType), reference: text_1.References.Modules, level: 'error' }, (0, utils_1.findPosition)(key, yamlContentByLine)));
        }
    }
    return validationErrors;
};
const validateFullAdminPage = (modules, yamlContentByLine) => {
    const validationErrors = [];
    const moduleArray = modules[jiraAdminPageType];
    const adminPageModules = moduleArray === null || moduleArray === void 0 ? void 0 : moduleArray.filter((module) => !(module === null || module === void 0 ? void 0 : module.useAsGetStarted) && !(module === null || module === void 0 ? void 0 : module.useAsConfig));
    const getStartedModules = moduleArray === null || moduleArray === void 0 ? void 0 : moduleArray.filter((module) => module === null || module === void 0 ? void 0 : module.useAsGetStarted);
    const configModules = moduleArray === null || moduleArray === void 0 ? void 0 : moduleArray.filter((module) => module === null || module === void 0 ? void 0 : module.useAsConfig);
    if (adminPageModules === null || adminPageModules === void 0 ? void 0 : adminPageModules.length) {
        validationErrors.push(...validateSeparateAdminPageModule('admin', modules, adminPageModules, text_1.errors.modules.singleEntryOfModuleWithoutConfigureAndStartedParams(jiraAdminPageType), yamlContentByLine));
    }
    if (getStartedModules === null || getStartedModules === void 0 ? void 0 : getStartedModules.length) {
        validationErrors.push(...validateSeparateAdminPageModule('get-started', modules, getStartedModules, text_1.errors.modules.singleEntryOfModuleWithGetStartedParam(jiraAdminPageType), yamlContentByLine));
    }
    if (configModules === null || configModules === void 0 ? void 0 : configModules.length) {
        validationErrors.push(...validateSeparateAdminPageModule('config', modules, configModules, text_1.errors.modules.singleEntryOfModuleWithConfigureParam(jiraAdminPageType), yamlContentByLine));
    }
    return validationErrors;
};
exports.validateFullAdminPage = validateFullAdminPage;
