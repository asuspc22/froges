"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionsValidator = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("../utils");
const text_1 = require("../text");
const egress_types_1 = require("../types/egress-types");
const url_1 = require("url");
const shipyard_scopes_json_1 = tslib_1.__importDefault(require("../scopes/shipyard-scopes.json"));
const deprecated_shipyard_scopes_json_1 = tslib_1.__importDefault(require("../scopes/deprecated-shipyard-scopes.json"));
class PermissionsValidator {
    constructor() {
        this.validationErrors = [];
    }
    isValidURL(inputURL) {
        const protocolRegex = /^(.*?:\/\/)/;
        const validURI = /^(\*\.)?[.a-zA-Z0-9_\-\/:~#%?=&]+$/;
        const allowedProtocols = ['https:', 'wss:'];
        const MAX_URL_LENGTH = 1000;
        if (inputURL.length > MAX_URL_LENGTH) {
            return false;
        }
        if (inputURL === '*') {
            return true;
        }
        if (!inputURL.includes('.') || inputURL.includes(' ')) {
            return false;
        }
        try {
            const domainOrUrlWithProtocol = protocolRegex.test(inputURL) ? inputURL : `https://${inputURL}`;
            const parsedUrl = new url_1.URL(domainOrUrlWithProtocol);
            if (!allowedProtocols.includes(parsedUrl.protocol)) {
                return false;
            }
            return validURI.test(parsedUrl.hostname);
        }
        catch (_) {
            return false;
        }
    }
    isValidHash(cspString) {
        const BASE_64_HASH_PATTERNS = [
            /^sha256-[a-zA-Z0-9=+/]{44}$/,
            /^sha384-[a-zA-Z0-9=+/]{64}$/,
            /^sha512-[a-zA-Z0-9=+/]{88}$/
        ];
        return BASE_64_HASH_PATTERNS.some((pattern) => pattern.test(cspString));
    }
    addValidationErrors(element, values, manifest) {
        values.forEach((value) => {
            this.validationErrors.push(Object.assign({ message: text_1.errors.permissions.invalidPermission(element, value), reference: text_1.References.Permissions, level: 'error' }, (0, utils_1.findPosition)(value, manifest.yamlContentByLine)));
        });
    }
    validateExternalPermissionURLs(extPermType, perms, manifest) {
        const invalidPerms = perms === null || perms === void 0 ? void 0 : perms.filter((key) => !this.isValidURL(key));
        if (invalidPerms === null || invalidPerms === void 0 ? void 0 : invalidPerms.length) {
            this.addValidationErrors(extPermType, invalidPerms, manifest);
        }
    }
    async validate(manifest) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
        if (!manifest || !manifest.typedContent || !manifest.typedContent.permissions) {
            return {
                success: false,
                manifestObject: manifest
            };
        }
        const ALL_SCOPES = shipyard_scopes_json_1.default.concat(deprecated_shipyard_scopes_json_1.default);
        const invalidScopes = (_a = manifest.typedContent.permissions.scopes) === null || _a === void 0 ? void 0 : _a.filter((key) => !ALL_SCOPES.includes(key));
        if (invalidScopes === null || invalidScopes === void 0 ? void 0 : invalidScopes.length) {
            this.addValidationErrors('scopes', invalidScopes, manifest);
        }
        const invalidScripts = (_c = (_b = manifest.typedContent.permissions.content) === null || _b === void 0 ? void 0 : _b.scripts) === null || _c === void 0 ? void 0 : _c.filter((key) => !egress_types_1.EGRESS_TYPES.ALLOWED_CSP_TYPES.includes(key) && !this.isValidHash(key));
        if (invalidScripts === null || invalidScripts === void 0 ? void 0 : invalidScripts.length) {
            this.addValidationErrors('content.scripts', invalidScripts, manifest);
        }
        const invalidBackendStrings = (_f = (_e = (_d = manifest.typedContent.permissions.external) === null || _d === void 0 ? void 0 : _d.fetch) === null || _e === void 0 ? void 0 : _e.backend) === null || _f === void 0 ? void 0 : _f.filter((item) => typeof item === 'string' && !this.isValidURL(item));
        if (invalidBackendStrings === null || invalidBackendStrings === void 0 ? void 0 : invalidBackendStrings.length) {
            this.addValidationErrors('external.fetch.backend', invalidBackendStrings, manifest);
        }
        const remoteMap = (_g = manifest.typedContent.remotes) === null || _g === void 0 ? void 0 : _g.reduce((prev, item) => prev.set(item.key, item.baseUrl), new Map());
        const invalidBackendRemotes = (_k = (_j = (_h = manifest.typedContent.permissions.external) === null || _h === void 0 ? void 0 : _h.fetch) === null || _j === void 0 ? void 0 : _j.backend) === null || _k === void 0 ? void 0 : _k.filter((item) => typeof item === 'object' &&
            (!remoteMap || !remoteMap.has(item.remote) || !this.isValidURL(remoteMap.get(item.remote)))).map((item) => item.remote);
        if (invalidBackendRemotes === null || invalidBackendRemotes === void 0 ? void 0 : invalidBackendRemotes.length) {
            this.addValidationErrors('external.fetch.backend', invalidBackendRemotes, manifest);
        }
        const invalidClientStrings = (_o = (_m = (_l = manifest.typedContent.permissions.external) === null || _l === void 0 ? void 0 : _l.fetch) === null || _m === void 0 ? void 0 : _m.client) === null || _o === void 0 ? void 0 : _o.filter((item) => typeof item === 'string' && !this.isValidURL(item));
        if (invalidClientStrings) {
            this.addValidationErrors('external.fetch.client', invalidClientStrings, manifest);
        }
        const invalidClients = (_r = (_q = (_p = manifest.typedContent.permissions.external) === null || _p === void 0 ? void 0 : _p.fetch) === null || _q === void 0 ? void 0 : _q.client) === null || _r === void 0 ? void 0 : _r.filter((item) => typeof item === 'object' &&
            (!remoteMap || !remoteMap.has(item.remote) || !this.isValidURL(remoteMap.get(item.remote)))).map((item) => item.remote);
        if (invalidClients) {
            this.addValidationErrors('external.fetch.client', invalidClients, manifest);
        }
        this.validateExternalPermissionURLs('external.navigation', (_s = manifest.typedContent.permissions.external) === null || _s === void 0 ? void 0 : _s.navigation, manifest);
        this.validateExternalPermissionURLs('external.images', (_t = manifest.typedContent.permissions.external) === null || _t === void 0 ? void 0 : _t.images, manifest);
        this.validateExternalPermissionURLs('external.frames', (_u = manifest.typedContent.permissions.external) === null || _u === void 0 ? void 0 : _u.frames, manifest);
        this.validateExternalPermissionURLs('external.scripts', (_v = manifest.typedContent.permissions.external) === null || _v === void 0 ? void 0 : _v.scripts, manifest);
        this.validateExternalPermissionURLs('external.styles', (_w = manifest.typedContent.permissions.external) === null || _w === void 0 ? void 0 : _w.styles, manifest);
        this.validateExternalPermissionURLs('external.media', (_x = manifest.typedContent.permissions.external) === null || _x === void 0 ? void 0 : _x.media, manifest);
        this.validateExternalPermissionURLs('external.fonts', (_y = manifest.typedContent.permissions.external) === null || _y === void 0 ? void 0 : _y.fonts, manifest);
        return {
            success: this.validationErrors.length === 0,
            errors: this.validationErrors
        };
    }
}
exports.PermissionsValidator = PermissionsValidator;
