"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvidersValidator = void 0;
const utils_1 = require("../utils");
const text_1 = require("../text");
class ProvidersValidator {
    async validate(manifest) {
        if (!manifest || !manifest.typedContent || !manifest.typedContent.providers) {
            return {
                success: true,
                manifestObject: manifest
            };
        }
        const validationErrors = [];
        const auth = manifest.typedContent.providers.auth;
        const remotes = manifest.typedContent.remotes;
        const permissions = manifest.typedContent.permissions;
        auth === null || auth === void 0 ? void 0 : auth.forEach((provider) => {
            var _a, _b;
            if ('remotes' in provider) {
                const hasMissing = (_a = provider.remotes) === null || _a === void 0 ? void 0 : _a.find((key) => !(remotes === null || remotes === void 0 ? void 0 : remotes.find((item) => item.key === key)));
                if (hasMissing) {
                    validationErrors.push(Object.assign({ message: text_1.errors.providers.missingRemote(provider.key, hasMissing), reference: text_1.References.Providers, level: 'error' }, (0, utils_1.findPosition)(hasMissing, manifest.yamlContentByLine)));
                }
                const missingEgressPermission = (_b = provider.remotes) === null || _b === void 0 ? void 0 : _b.find((key) => {
                    var _a, _b, _c;
                    const remote = remotes === null || remotes === void 0 ? void 0 : remotes.find((item) => item.key === key);
                    if (remote) {
                        const egressPermission = (_c = (_b = (_a = permissions === null || permissions === void 0 ? void 0 : permissions.external) === null || _a === void 0 ? void 0 : _a.fetch) === null || _b === void 0 ? void 0 : _b.backend) === null || _c === void 0 ? void 0 : _c.find((item) => typeof item === 'string' ? item === remote.baseUrl : item.remote === remote.key);
                        return !egressPermission;
                    }
                    return false;
                });
                if (missingEgressPermission) {
                    validationErrors.push(Object.assign({ message: text_1.errors.providers.missingEgress(missingEgressPermission), reference: text_1.References.Providers, level: 'error' }, (0, utils_1.findPosition)(missingEgressPermission, manifest.yamlContentByLine)));
                }
            }
        });
        auth === null || auth === void 0 ? void 0 : auth.filter((provider) => 'actions' in provider).forEach((provider) => {
            Object.values(provider.actions).forEach((action) => {
                const message = action && this.isActionValidRemote(provider, action, manifest, remotes);
                if (message) {
                    validationErrors.push(message);
                }
            });
        });
        auth === null || auth === void 0 ? void 0 : auth.forEach((provider) => {
            const message = this.isValidProfileRetrieverFunction(provider, manifest);
            if (message) {
                validationErrors.push(message);
            }
        });
        return {
            success: validationErrors.length === 0,
            errors: validationErrors
        };
    }
    isActionValidRemote(provider, action, manifest, remotes) {
        const remote = remotes === null || remotes === void 0 ? void 0 : remotes.find((item) => item.key === (action === null || action === void 0 ? void 0 : action.remote));
        if (action && !remote) {
            return Object.assign({ message: text_1.errors.providers.missingRemote(provider.key, action.remote), reference: text_1.References.Providers, level: 'error' }, (0, utils_1.findPosition)(action.remote, manifest.yamlContentByLine));
        }
    }
    isValidProfileRetrieverFunction(provider, manifest) {
        var _a, _b, _c;
        if ('actions' in provider && 'function' in provider.actions.retrieveProfile) {
            const { function: functionKey } = provider.actions.retrieveProfile;
            const hasFunction = (_c = (_b = (_a = manifest.typedContent) === null || _a === void 0 ? void 0 : _a.modules) === null || _b === void 0 ? void 0 : _b.function) === null || _c === void 0 ? void 0 : _c.find((func) => func.key === functionKey);
            if (!hasFunction) {
                return Object.assign({ message: text_1.errors.providers.missingProfileFunction(provider.key, functionKey), reference: text_1.References.Providers, level: 'error' }, (0, utils_1.findPosition)(functionKey, manifest.yamlContentByLine));
            }
        }
    }
}
exports.ProvidersValidator = ProvidersValidator;
