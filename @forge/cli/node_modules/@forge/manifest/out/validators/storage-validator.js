"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageValidator = void 0;
const text_1 = require("../text");
const utils_1 = require("../utils");
class StorageValidator {
    constructor() {
        this.entityAttributeMaxLength = 30;
        this.entityAttributesMaxCount = 50;
        this.entityIndexesMaxCount = 7;
        this.reservedIndexName = 'by-key';
    }
    async validate(manifest) {
        var _a, _b;
        if (!((_b = (_a = manifest === null || manifest === void 0 ? void 0 : manifest.typedContent) === null || _a === void 0 ? void 0 : _a.app) === null || _b === void 0 ? void 0 : _b.storage)) {
            return {
                success: true,
                manifestObject: manifest
            };
        }
        const validationErrors = [];
        if (!manifest.typedContent.app.storage.entities) {
            return {
                success: true,
                manifestObject: manifest
            };
        }
        const entities = manifest.typedContent.app.storage.entities;
        entities.forEach((entity) => {
            const { name, attributes } = entity;
            if (Object.keys(attributes).length > this.entityAttributesMaxCount) {
                validationErrors.push(Object.assign({ message: text_1.errors.app.storage.entities.tooManyAttributes(name, this.entityAttributesMaxCount), reference: text_1.References.App, level: 'error' }, (0, utils_1.findPosition)('entities', manifest.yamlContentByLine)));
            }
            Object.keys(attributes).forEach((attributeKey) => {
                if (attributeKey.length > this.entityAttributeMaxLength) {
                    validationErrors.push(Object.assign({ message: text_1.errors.app.storage.entities.attributeNameTooLong(name, attributeKey, this.entityAttributeMaxLength), reference: text_1.References.App, level: 'error' }, (0, utils_1.findPosition)('entities', manifest.yamlContentByLine)));
                }
            });
            if (entity.indexes) {
                const { indexes } = entity;
                if (indexes.length > this.entityIndexesMaxCount) {
                    validationErrors.push(Object.assign({ message: text_1.errors.app.storage.entities.tooManyIndexes(name, this.entityIndexesMaxCount), reference: text_1.References.App, level: 'error' }, (0, utils_1.findPosition)('entities', manifest.yamlContentByLine)));
                }
                const indexName = [];
                const indexRange = [];
                const indexPartition = [];
                indexes.forEach((index) => {
                    if (typeof index === 'string') {
                        indexRange.push(index);
                    }
                    else if (typeof index === 'object') {
                        indexName.push(index.name);
                        indexRange.push(...index.range);
                        if (index.partition) {
                            indexPartition.push(...index.partition);
                        }
                    }
                });
                if (indexName.find((name) => name === this.reservedIndexName)) {
                    validationErrors.push(Object.assign({ message: text_1.errors.app.storage.entities.reservedIndexName(name, this.reservedIndexName), reference: text_1.References.App, level: 'error' }, (0, utils_1.findPosition)('entities', manifest.yamlContentByLine)));
                }
                indexRange.forEach((range) => {
                    if (!Object.keys(attributes).length || !attributes[range]) {
                        validationErrors.push(Object.assign({ message: text_1.errors.app.storage.entities.invalidIndexRange(name, range), reference: text_1.References.App, level: 'error' }, (0, utils_1.findPosition)('entities', manifest.yamlContentByLine)));
                    }
                });
                indexPartition.forEach((partition) => {
                    if (!Object.keys(attributes).length || !attributes[partition]) {
                        validationErrors.push(Object.assign({ message: text_1.errors.app.storage.entities.invalidIndexPartition(name, partition), reference: text_1.References.App, level: 'error' }, (0, utils_1.findPosition)('entities', manifest.yamlContentByLine)));
                    }
                });
            }
        });
        return {
            success: validationErrors.length === 0,
            manifestObject: manifest,
            errors: validationErrors
        };
    }
}
exports.StorageValidator = StorageValidator;
