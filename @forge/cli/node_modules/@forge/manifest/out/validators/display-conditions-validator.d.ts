import { ManifestObject, ManifestValidationResult, ValidationError } from '../types';
import { ValidatorInterface } from './validator-interface';
import { ManifestSchema } from '../schema/manifest';
export declare class DisplayConditionsValidator<T> implements ValidatorInterface<ManifestObject<ManifestSchema> | undefined, ManifestSchema> {
    private readonly schema;
    private readonly validateSchema;
    private readonly moduleSchemas;
    private readonly supportedOperations;
    constructor(schema: object);
    flattenDisplayConditions(moduleKey: string, displayConditions: any, nesting?: number): any;
    toValidationError(message: string): ValidationError;
    validate(manifest: ManifestObject<ManifestSchema> | undefined): Promise<ManifestValidationResult<ManifestSchema>>;
}
//# sourceMappingURL=display-conditions-validator.d.ts.map