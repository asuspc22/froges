"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getScopesWithInteractiveConsent = exports.getMissingScopes = void 0;
const tslib_1 = require("tslib");
const shipyard_scopes_with_interactive_consent_json_1 = tslib_1.__importDefault(require("./shipyard-scopes-with-interactive-consent.json"));
async function getMissingScopes(existing, required) {
    var _a, _b;
    if (!(existing === null || existing === void 0 ? void 0 : existing.length)) {
        return required.current;
    }
    if (required.current.length === 0)
        return [];
    const missingCurrent = required.current.filter((scope) => !(existing === null || existing === void 0 ? void 0 : existing.includes(scope)));
    if (missingCurrent.length === 0)
        return [];
    const missingBeta = (_a = required.beta) === null || _a === void 0 ? void 0 : _a.filter((scope) => !(existing === null || existing === void 0 ? void 0 : existing.includes(scope)));
    if (required.beta && (missingBeta === null || missingBeta === void 0 ? void 0 : missingBeta.length) === 0)
        return [];
    const missingDeprecated = (_b = required.deprecated) === null || _b === void 0 ? void 0 : _b.filter((scope) => !(existing === null || existing === void 0 ? void 0 : existing.includes(scope)));
    if (required.deprecated && (missingDeprecated === null || missingDeprecated === void 0 ? void 0 : missingDeprecated.length) === 0)
        return [];
    return missingCurrent;
}
exports.getMissingScopes = getMissingScopes;
function getScopesWithInteractiveConsent() {
    return new Set(shipyard_scopes_with_interactive_consent_json_1.default);
}
exports.getScopesWithInteractiveConsent = getScopesWithInteractiveConsent;
