declare type Product = {
    isAdmin?: boolean;
    isLoggedIn?: boolean;
    isSiteAdmin?: boolean;
};
declare type Jira = Product & {
    hasSoftwareAccess?: boolean;
    hasServiceDeskAccess?: boolean;
    hasCoreAccess?: boolean;
};
declare type StringOrListOfStrings = string | string[];
declare type IssueView = Jira & {
    issueKey?: StringOrListOfStrings;
    issueId?: StringOrListOfStrings;
    issueType?: StringOrListOfStrings;
    projectKey?: StringOrListOfStrings;
    projectId?: StringOrListOfStrings;
    projectType?: StringOrListOfStrings;
    canAddComments?: boolean;
    canAdministerJira?: boolean;
    canAdministerProjects?: boolean;
    canAssignIssues?: boolean;
    canBeAssignedToIssues?: boolean;
    canCloneIssues?: boolean;
    canCreateAttachments?: boolean;
    canCreateChildren?: boolean;
    canCreateSubtasks?: boolean;
    canDeleteAllAttachments?: boolean;
    canDeleteAllComments?: boolean;
    canDeleteAllWorklogs?: boolean;
    canDeleteIssues?: boolean;
    canDeleteOwnAttachments?: boolean;
    canDeleteOwnComments?: boolean;
    canDeleteOwnWorklogs?: boolean;
    canEditAllComments?: boolean;
    canEditAllWorklogs?: boolean;
    canEditIssues?: boolean;
    canEditOwnComments?: boolean;
    canEditOwnWorklogs?: boolean;
    canLinkIssues?: boolean;
    canLogWork?: boolean;
    canManageWatchers?: boolean;
    canModifyReporters?: boolean;
    canMoveIssues?: boolean;
    canScheduleIssues?: boolean;
    canUseServiceManagementAgentFeatures?: boolean;
    canBrowseUsers?: boolean;
    canViewDevTools?: boolean;
    canViewWatchers?: boolean;
};
declare type ProjectPage = Jira & {
    projectKey?: StringOrListOfStrings;
    projectId?: StringOrListOfStrings;
    projectType?: StringOrListOfStrings;
    projectName?: StringOrListOfStrings;
    isProjectAdmin?: boolean;
    isProjectArchived?: boolean;
};
declare type ProjectSettingsPage = Jira & {
    projectKey?: StringOrListOfStrings;
    projectId?: StringOrListOfStrings;
    projectType?: StringOrListOfStrings;
    projectName?: StringOrListOfStrings;
};
declare enum EntityType {
    Space = "space",
    Content = "content"
}
interface EntityPropertyExists {
    entity: EntityType;
    propertyKey: string;
    objectName?: string;
}
interface EntityPropertyEqualTo extends EntityPropertyExists {
    value: string;
}
interface EntityPropertyContainsAny extends EntityPropertyExists {
    value: StringOrListOfStrings;
}
interface EntityPropertyContainsAll extends EntityPropertyExists {
    value: StringOrListOfStrings;
}
interface EntityPropertyExistsItem {
    entityPropertyExists: EntityPropertyExists;
}
interface EntityPropertyEqualToItem {
    entityPropertyEqualTo: EntityPropertyEqualTo;
}
interface EntityPropertyContainsAnyItem {
    entityPropertyContainsAny: EntityPropertyContainsAny;
}
interface EntityPropertyContainsAllItem {
    entityPropertyContainsAll: EntityPropertyContainsAll;
}
declare type EntityPropertyCondition = EntityPropertyExistsItem | EntityPropertyEqualToItem | EntityPropertyContainsAnyItem | EntityPropertyContainsAllItem;
declare type Confluence = Product | (Product & EntityPropertyCondition) | EntityPropertyCondition[];
export declare type DisplayConditions = {
    operations?: ('and' | 'or' | 'not')[];
    modules: {
        'jira:issuePanel'?: IssueView;
        'jira:issueActivity'?: IssueView;
        'jira:issueAction'?: IssueView;
        'jira:issueGlance'?: IssueView;
        'jira:issueContext'?: IssueView;
        'jira:customField'?: IssueView;
        'jira:adminPage'?: Jira;
        'jira:globalPage'?: Jira;
        'jira:projectPage'?: ProjectPage;
        'jira:projectSettingsPage'?: ProjectSettingsPage;
        'confluence:contentBylineItem'?: Confluence;
    };
};
export {};
//# sourceMappingURL=display-condition-types.d.ts.map