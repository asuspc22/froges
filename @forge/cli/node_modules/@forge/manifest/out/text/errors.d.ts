export declare const errors: {
    invalidManifest: (reason: string) => string;
    missingManifest: () => string;
    schemaError: (value: string | undefined, path: string[], reason: string | undefined) => string;
    schema: {
        oneOf: (props: string[][] | undefined) => string;
        enumValues: (props: string[]) => string;
        deprecatedValue: (section: string, field: string, additionalInfo?: string) => string;
        additionalProperties: (additionalProperty: string) => string;
        notAllowed: (props: string[] | undefined) => string;
    };
    permissions: {
        invalidPermission: (element: string, value: string) => string;
        missingPermissionFromScope: (scope: string, event: string) => string;
        missingEndpointPermissionFromScope: (scope: string, key: string) => string;
        deprecatedPermission: (element: string, value: string[]) => string;
    };
    connectModules: {
        invalidConnectModule: (module: string) => string;
        missingConnectModule: () => string;
        duplicateKeyFound: (key: string) => string;
        duplicatateLifecycleFound: (module: string) => string;
    };
    modules: {
        invalidModule: (module: string) => string;
        missingModule: () => string;
        missingFunction: () => string;
        duplicateKeyFound: (key: string) => string;
        wrongFunctionReference: (module: string, functionKey: string) => string;
        wrongEndpointReference: (module: string, endpointKey: string) => string;
        wrongResourceReference: (module: string, resourceKey: string) => string;
        wrongResourceType: (folder: string) => string;
        singleEntryOfTheModule: (moduleType: string) => string;
        singleEntryOfModuleWithoutConfigureAndStartedParams: (moduleType: string) => string;
        singleEntryOfModuleWithConfigureParam: (moduleType: string) => string;
        singleEntryOfModuleWithGetStartedParam: (moduleType: string) => string;
        displayConditions: {
            overcomplicated: (moduleKey: string) => string;
            invalid: (moduleKey: string) => string;
            propertyNotAllowed: (moduleKey: string, propertyName: string) => string;
            typeMismatch: (moduleKey: string, propertyName: string, errorDetails: string) => string;
        };
        confluence: {
            multipleProperty: (property: string, moduleKey: string, keys: string[]) => string;
            propertyUniqueness: (property: string, moduleKey: string, keys: string[]) => string;
            crossModulePropertyUniqueness: (property: string, keys: string[]) => string;
            validateCustomContentHierarchyUnknown: (property: string, moduleKey: string, unknownKey: string) => string;
            validateCustomContentCrossReferenceMissingContainer: (moduleKey: string, referredModuleKey: string) => string;
            validateCustomContentCrossReferenceMissingChild: (moduleKey: string, referredModuleKey: string) => string;
            keyboardShortcuts: {
                emptyAccelerator: () => string;
                spaceAroundAccelerator: (accelerator: string) => string;
                invalidPlusSyntax: (accelerator: string) => string;
                combinationKeysAreNotUnique: (accelerator: string) => string;
                invalidKey: (accelerator: string, key: string) => string;
                moreThanOneNonModifierKey: (accelerator: string) => string;
                modifierKeysShouldPrecedeNonModifierKey: (accelerator: string) => string;
            };
        };
        jiraWorkflowValidator: {
            missingProperty: (key: string) => string;
            invalidProperty: (key: string) => string;
        };
        jiraWorkflowCondition: {
            missingExpression: (key: string) => string;
        };
        jiraEntityProperty: {
            maxExtractionsPerApp: (limit: number) => string;
        };
        customFields: {
            searchAlias: (aliases: string[]) => string;
        };
        subPages: {
            invalidPagesAndSectionsForConfigurePages: (key: string) => string;
            subPagesWithUIKit: (key: string) => string;
            invalidPagesAndSections: (key: string) => string;
        };
        function: {
            invalidKeyLength: (key: string) => string;
            handler: {
                invalidRegex: (key: string, regex: RegExp) => string;
                fileNotExists: (key: string, fileName: string) => string;
            };
        };
        endpoint: {
            remote: {
                notExists: (key: string) => string;
            };
        };
        trigger: {
            filteringWorksOnlyWithJiraEvents: () => string;
            endpointOnlySupportSystemToken: (productEventKey: string, endpointModuleKey: string) => string;
        };
    };
    resources: {
        missingResource: (folder: string, key: string) => string;
        emptyDirectory: (folder: string, key: string) => string;
        missingEntrypoint: (folder: string, key: string) => string;
        deprecatedCspPolicyDefinition: (folder: string) => string;
        tooManyResourcesError: (limit: number) => string;
        nonDirectory: (folder: string, key: string) => string;
    };
    deprecationInfo: {
        app: {
            name: string;
        };
    };
    providers: {
        missingRemote: (provider: string, remote: string) => string;
        missingEgress: (remote: string) => string;
        missingProfileFunction: (provider: string, functionKey: string) => string;
    };
    app: {
        missingAppConnectRemote: () => string;
        missingRemoteForConnect: (key: string) => string;
        missingConnectModules: () => string;
        storage: {
            missingStorageInformation: () => string;
            entities: {
                entityNameTooLong: (entity: string, limit: number) => string;
                missingAttributes: (entity: string) => string;
                tooManyAttributes: (entity: string, limit: number) => string;
                attributeNameTooLong: (entity: string, attribute: string, limit: number) => string;
                tooManyIndexes: (entity: string, limit: number) => string;
                invalidIndexRange: (entity: string, index: string) => string;
                invalidIndexPartition: (entity: string, partition: string) => string;
                reservedIndexName: (entity: string, index: string) => string;
            };
        };
    };
};
export declare enum References {
    MissingManifest = "manifest-file-required",
    InvalidManifest = "valid-yaml-required",
    SchemaError = "valid-document-required",
    Permissions = "valid-permissions-required",
    MissingScopes = "permission-scope-required",
    Modules = "valid-module-required",
    ConnectModules = "valid-connect-module-required",
    DuplicateModuleKeys = "duplicate-module-keys",
    Resources = "valid-resource-required",
    Providers = "valid-provider-required",
    Deprecated = "deprecated-property",
    App = "valid-app-config-required"
}
//# sourceMappingURL=errors.d.ts.map