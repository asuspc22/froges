"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapLogLevel = exports.formatRuntimeLog = exports.formatTimestamp = exports.formatInvocation = exports.getRequestId = exports.toLambdaError = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const toLambdaError = (error) => {
    return {
        errorMessage: error.message,
        errorType: error.name,
        stack: (error.stack || '').split('\n'),
        serviceKey: error.serviceKey,
        metrics: error.metrics
    };
};
exports.toLambdaError = toLambdaError;
const getRequestId = (request, value = 'unknown') => {
    if (request._meta && request._meta.tracing) {
        return request._meta.tracing.traceId || value;
    }
    if (request.body && request.body.headers) {
        return request.body.headers['x-request-id'] || value;
    }
    return value;
};
exports.getRequestId = getRequestId;
const formatInvocation = (handler, request) => {
    const requestId = (0, exports.getRequestId)(request);
    return cli_shared_1.LogColor.trace(cli_shared_1.Text.tunnel.invoke(requestId, handler));
};
exports.formatInvocation = formatInvocation;
const formatInt = (n, digits) => {
    return `${n}`.padStart(digits, '0');
};
const formatTimestamp = () => {
    const date = new Date();
    const hh = formatInt(date.getHours(), 2);
    const mm = formatInt(date.getMinutes(), 2);
    const ss = formatInt(date.getSeconds(), 2);
    const ms = formatInt(date.getMilliseconds(), 3);
    return `${hh}:${mm}:${ss}.${ms}`;
};
exports.formatTimestamp = formatTimestamp;
const formatRuntimeLog = (event) => {
    return ((0, cli_shared_1.formatRuntimeLogLevel)(event.logLevel) +
        ' ' +
        (0, exports.formatTimestamp)() +
        '  ' +
        event.invocationId +
        '  ' +
        (0, cli_shared_1.formatRuntimeLogArgs)(event.logArguments));
};
exports.formatRuntimeLog = formatRuntimeLog;
const mapLogLevel = (level) => {
    switch (level) {
        case 'warning':
            return cli_shared_1.AppDeploymentEventLogLevel.Warning;
        case 'error':
            return cli_shared_1.AppDeploymentEventLogLevel.Error;
        case 'info':
        case 'debug':
            return cli_shared_1.AppDeploymentEventLogLevel.Info;
        default:
            throw new Error('Unexpected snapshot log level: ' + level);
    }
};
exports.mapLogLevel = mapLogLevel;
