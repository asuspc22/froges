"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CspReporterServer = void 0;
const tslib_1 = require("tslib");
const express_1 = tslib_1.__importDefault(require("express"));
const cli_shared_1 = require("@forge/cli-shared");
class CspReporterServer {
    constructor(port, logger, cache) {
        this.port = port;
        this.logger = logger;
        this.cache = cache;
        this.app = (0, express_1.default)();
        this.app.use(express_1.default.json({ type: 'application/csp-report' }));
        this.app.post(`/`, (req, res) => {
            const report = req.body['csp-report'];
            const originUrl = report['document-uri'];
            const violation = report['violated-directive'];
            const cacheKey = `${originUrl}#${violation}`;
            if (!this.cache.has(cacheKey)) {
                this.logger.warn(cli_shared_1.Text.tunnel.customUI.warning.cspViolation(originUrl, violation));
                this.cache.set(cacheKey, true, CspReporterServer.TTL_IN_SECONDS);
            }
            res.setHeader('content-type', 'application/json; charset=utf-8');
            res.status(200).send(JSON.stringify({ message: 'OK' }));
        });
    }
    getApp() {
        return this.app;
    }
    async start() {
        return new Promise((resolve, reject) => {
            this.server = this.app.listen(this.port, resolve);
            this.server.on('error', reject);
        });
    }
    async stop() {
        return new Promise((resolve, reject) => {
            var _a;
            (_a = this.server) === null || _a === void 0 ? void 0 : _a.close((err) => (err ? reject(err) : resolve()));
        });
    }
}
exports.CspReporterServer = CspReporterServer;
CspReporterServer.TTL_IN_SECONDS = 30;
