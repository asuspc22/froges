/// <reference types="node" />
/// <reference types="node" />
import express from 'express';
import * as http from 'http';
import { URL } from 'url';
import { ConfigFile, Logger } from '@forge/cli-shared';
import { ExternalRequestBody } from '@forge/runtime';
import { Permissions, Remotes } from '@forge/manifest';
import { BundlerOutput } from '@forge/bundler';
export interface WatchHooks<T = any> {
    onBuildWillStart: () => Promise<void>;
    onBuildFinished: (err: Error | null, result?: T) => Promise<void>;
}
export interface DevelopmentServer {
    start(port?: number, permissions?: Permissions, remotes?: Remotes): Promise<StartDevServerResult>;
    stop(): Promise<void>;
    compileAndWatch(hooks: WatchHooks<BundlerOutput>): Promise<any>;
}
export interface StartDevServerResult {
    port: number;
    devServer: DevelopmentServer;
    resourceKey?: string;
    tunnelUrl?: URL;
}
export interface InvocationService {
    invoke(handler: string, request: ExternalRequestBody): Promise<any>;
}
export declare function stopServer(server: http.Server | undefined): Promise<void>;
export declare class LocalDevelopmentServer implements DevelopmentServer {
    private readonly invocationService;
    private readonly logger;
    private readonly configFile;
    private app;
    private httpServer;
    private permissions;
    private remotes;
    constructor(invocationService: InvocationService, logger: Logger, configFile: ConfigFile);
    start(port?: number, permissions?: Permissions, remotes?: Remotes): Promise<StartDevServerResult>;
    stop(): Promise<void>;
    compileAndWatch({ onBuildWillStart, onBuildFinished }: WatchHooks<BundlerOutput>): Promise<BundlerOutput | undefined>;
    getApp(): express.Application;
    handleInvocation: express.Handler;
}
//# sourceMappingURL=dev-server.d.ts.map