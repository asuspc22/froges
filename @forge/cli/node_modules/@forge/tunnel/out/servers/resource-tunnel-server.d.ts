/// <reference types="node" />
import { RequestHandler } from 'http-proxy-middleware';
import { Resource, Logger } from '@forge/cli-shared';
import { CSPDetails } from '@forge/csp';
import type { Permissions, Remotes } from '@forge/manifest';
export interface ResourceTunnelServerArgs extends Resource {
    port: number;
    host: string;
    logger: Logger;
    permissions: Permissions;
    cspReporterServerPort: number;
    remotes: Remotes;
}
export declare abstract class ResourceTunnelServer {
    protected readonly port: number;
    protected readonly key: string;
    protected readonly path: string;
    protected readonly logger: Logger;
    protected cspReporterServerPort: number;
    constructor({ port, key, path, cspReporterServerPort, logger }: ResourceTunnelServerArgs);
    static transformPermissionsWithRemotes(permissions: Permissions, remotes: Remotes): {
        external: {
            fetch: {
                client: string[] | undefined;
                backend?: import("@forge/manifest").Backend | undefined;
            };
            fonts?: import("@forge/manifest").Fonts | undefined;
            frames?: import("@forge/manifest").Frames | undefined;
            navigation?: import("@forge/manifest").Navigation | undefined;
            images?: import("@forge/manifest").Images | undefined;
            media?: import("@forge/manifest").Media | undefined;
            scripts?: import("@forge/manifest").Scripts1 | undefined;
            styles?: import("@forge/manifest").Styles1 | undefined;
        };
        scopes?: import("@forge/manifest").Scopes | undefined;
        content?: import("@forge/manifest").Content1 | undefined;
    };
    protected logFileServed(reqUrl: string, textDecorator: (input: string) => string): void;
    protected getCspHeader: (existingCsp: CSPDetails) => string;
    protected injectGlobalBridgeScript: (htmlContent: Buffer) => Buffer;
    protected injectIframeResizerScript: (htmlContent: Buffer) => Buffer;
    protected getCustomUIHtmlTransformMiddleware: (permissions: Permissions, remotes: Remotes) => RequestHandler;
}
//# sourceMappingURL=resource-tunnel-server.d.ts.map