"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgrokCreateTunnelService = void 0;
const tslib_1 = require("tslib");
const ngrok = tslib_1.__importStar(require("ngrok"));
const url_1 = require("url");
const cli_shared_1 = require("@forge/cli-shared");
const path_1 = tslib_1.__importDefault(require("path"));
class NgrokError extends Error {
    constructor() {
        super(cli_shared_1.Text.tunnel.error.ngrok);
    }
}
class NgrokCreateTunnelService {
    constructor(logger) {
        this.logger = logger;
    }
    async establishTunnel(port) {
        const configPath = path_1.default.join(__dirname, '..', '..', 'config', 'ngrok.yml');
        try {
            const options = {
                addr: port,
                configPath,
                onStatusChange: (status) => {
                    this.logger.debug(cli_shared_1.Text.tunnel.tunnelStatusChange(status));
                },
                onLogEvent: (data) => {
                    this.logger.debug(`${data}`);
                }
            };
            this.endpoint = await ngrok.connect(options);
            this.logger.debug(cli_shared_1.Text.tunnel.startedTunnel(this.endpoint));
            return new url_1.URL(this.endpoint);
        }
        catch (e) {
            throw new NgrokError();
        }
    }
    async closeTunnel() {
        if (this.endpoint) {
            try {
                await ngrok.disconnect();
                await ngrok.kill();
            }
            catch (_a) { }
            this.endpoint = undefined;
        }
    }
}
exports.NgrokCreateTunnelService = NgrokCreateTunnelService;
