"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterTunnelServiceImpl = void 0;
const ONE_DAY = 1000 * 60 * 60 * 24;
class RegisterTunnelServiceImpl {
    constructor(tunnelClient) {
        this.tunnelClient = tunnelClient;
        this.keepAliveActive = true;
    }
    async registerTunnels(appId, environmentKey, tunnelDefinitions) {
        if (!this.keepAliveActive) {
            return;
        }
        const expiry = await this.tunnelClient.createAppTunnels(appId, environmentKey, tunnelDefinitions);
        await this.keepTunnelsAlive(appId, environmentKey, tunnelDefinitions, expiry);
    }
    async unregisterTunnels(appId, environmentKey) {
        if (this.keepAliveHandler) {
            clearTimeout(this.keepAliveHandler);
            this.keepAliveActive = false;
        }
        await this.tunnelClient.deleteTunnels(appId, environmentKey);
    }
    async keepTunnelsAlive(appId, environmentKey, tunnelDefinitions, expiry) {
        const ttl = this.getTTL(expiry);
        if (!ttl) {
            return;
        }
        if (!this.keepAliveActive) {
            return;
        }
        this.keepAliveHandler = setTimeout(async () => {
            await this.registerTunnels(appId, environmentKey, tunnelDefinitions);
        }, ttl);
    }
    getTTL(expiry) {
        if (!expiry) {
            return;
        }
        const expiryDate = new Date(parseInt(expiry, 10));
        const ttl = expiryDate.getTime() - Date.now();
        if (ttl >= ONE_DAY || ttl < 0) {
            return;
        }
        return ttl;
    }
}
exports.RegisterTunnelServiceImpl = RegisterTunnelServiceImpl;
