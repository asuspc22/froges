import { BundlerOutput } from '@forge/bundler';
import { AppConfigProvider, ConfigFile, Logger } from '@forge/cli-shared';
import { Inspector } from '@forge/runtime';
import { DevelopmentServer } from '../servers';
import { FunctionChangeWatcher } from './interactors';
import { TunnelDefinitions } from '../index';
import { RegisterTunnelService, CreateTunnelService } from '../services';
export interface StartTunnelOptions {
    port?: number;
    host: string;
    environmentKey: string;
    resourcePortMap?: Record<string, number>;
}
export interface StartTunnelResult {
    localPort: number;
    tunnelDefinitions: TunnelDefinitions;
    inspectorAddress?: string;
    devServers: DevelopmentServer[];
    stopFunction(): Promise<void>;
    reloadSandboxes(bundledCode: BundlerOutput): Promise<void>;
}
export declare class StartTunnelCommand {
    private readonly getAppConfig;
    private readonly devServer;
    private readonly tunnelFactory;
    private readonly tunnelClient;
    private readonly functionHost;
    private readonly inspector;
    private readonly logger;
    private readonly configFile;
    private tunnelServers;
    private cspReporterServer;
    constructor(getAppConfig: AppConfigProvider, devServer: DevelopmentServer, tunnelFactory: CreateTunnelService, tunnelClient: RegisterTunnelService, functionHost: FunctionChangeWatcher, inspector: Inspector, logger: Logger, configFile: ConfigFile);
    private stopServices;
    private startFaaSTunnelServer;
    private startResourceBasedTunnelsServers;
    execute(options: StartTunnelOptions): Promise<StartTunnelResult>;
}
//# sourceMappingURL=start-tunnel-command.d.ts.map