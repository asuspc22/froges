import { ConfigFile, Logger } from '@forge/cli-shared';
import { BundlerOutput } from '@forge/bundler';
import { Sandbox, SandboxConfig, SnapshotCreator } from '@forge/runtime';
export interface FunctionChangeWatcher {
    startWatching(bundledCode: BundlerOutput): Promise<void>;
    stopWatching(): Promise<void>;
}
export interface Bundle {
    bundleFilePath: string;
    bundleFileContent: string;
    bundleFileSourceMapPath: string;
    bundleFileSourceMap?: string;
}
export declare const INVOCATION_TIMEOUT = 25;
export declare const MEMORY_LIMIT = 256;
export declare class LocalFunctionHost implements FunctionChangeWatcher {
    private readonly configFile;
    private readonly logger;
    private readonly snapshot;
    private readonly createSandbox;
    private snapshotLogs;
    constructor(configFile: ConfigFile, logger: Logger, snapshot: SnapshotCreator | null, createSandbox: (cfg: SandboxConfig) => Promise<Sandbox>);
    private generateBundleFiles;
    startWatching(bundledCode: BundlerOutput): Promise<void>;
    stopWatching(): Promise<void>;
    private onRuntimeLog;
    private initializeSandboxes;
}
//# sourceMappingURL=function-change-watcher.d.ts.map