"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSPProcessingService = exports.InvalidConnectSrc = void 0;
const tslib_1 = require("tslib");
const cheerio_1 = tslib_1.__importDefault(require("cheerio"));
const content_security_policy_parser_1 = tslib_1.__importDefault(require("content-security-policy-parser"));
const crypto_1 = tslib_1.__importDefault(require("crypto"));
class InvalidConnectSrc extends Error {
    constructor() {
        super('fetch.client should be an array of strings');
    }
}
exports.InvalidConnectSrc = InvalidConnectSrc;
class CSPProcessingService {
    constructor(logger) {
        this.logger = logger;
        this.STYLE_SRC_ALLOWLIST = [`'unsafe-inline'`];
        this.QUOTED_SCRIPT_SRC_ALLOWLIST = ['unsafe-inline', 'unsafe-eval', 'unsafe-hashes'];
        this.UNQUOTED_SCRIPT_SRC_ALLOWLIST = ['blob:'];
        this.SCRIPT_SRC_ALLOWLIST = [...this.QUOTED_SCRIPT_SRC_ALLOWLIST, ...this.UNQUOTED_SCRIPT_SRC_ALLOWLIST];
        this.BASE_64_HASH_PATTERNS = [
            /^sha256-[a-zA-Z0-9=+/]{44}$/,
            /^sha384-[a-zA-Z0-9=+/]{64}$/,
            /^sha512-[a-zA-Z0-9=+/]{88}$/
        ];
    }
    getCspDetails(body, permissions) {
        var _a, _b;
        const { scripts, styles } = (_a = permissions === null || permissions === void 0 ? void 0 : permissions.content) !== null && _a !== void 0 ? _a : { scripts: [], styles: [] };
        const external = (_b = permissions === null || permissions === void 0 ? void 0 : permissions.external) !== null && _b !== void 0 ? _b : {};
        const $ = cheerio_1.default.load(body);
        const _c = this.mapExternalPermissionsToCsp(external), { 'script-src': scriptSrc, 'style-src': styleSrc } = _c, mappedExternalCsp = tslib_1.__rest(_c, ['script-src', 'style-src']);
        return Object.assign({ 'style-src': [...this.getStyleSrc($, styles), ...styleSrc], 'script-src': [...this.getScriptSrc($, scripts), ...scriptSrc] }, mappedExternalCsp);
    }
    getInvalidCspPermissions(contentPermissions) {
        var _a, _b;
        const { styles, scripts } = contentPermissions;
        const invalidStyles = (_a = styles === null || styles === void 0 ? void 0 : styles.filter((styleSrc) => !this.isValidUserStyleSrc(`'${styleSrc}'`))) !== null && _a !== void 0 ? _a : [];
        const invalidScripts = (_b = scripts === null || scripts === void 0 ? void 0 : scripts.filter((scriptSrc) => !this.isValidUserScriptSrc(scriptSrc))) !== null && _b !== void 0 ? _b : [];
        return [...invalidStyles, ...invalidScripts];
    }
    assertValidFetchClient(fetch) {
        if (fetch === null || fetch === void 0 ? void 0 : fetch.client) {
            for (const client of fetch === null || fetch === void 0 ? void 0 : fetch.client) {
                if (typeof client !== 'string') {
                    throw new InvalidConnectSrc();
                }
            }
        }
    }
    mapExternalPermissionsToCsp(externalPermissions) {
        var _a;
        const { images, media, scripts, fetch, styles, fonts, frames } = externalPermissions;
        this.assertValidFetchClient(fetch);
        return {
            'img-src': images !== null && images !== void 0 ? images : [],
            'media-src': media !== null && media !== void 0 ? media : [],
            'script-src': scripts !== null && scripts !== void 0 ? scripts : [],
            'style-src': styles !== null && styles !== void 0 ? styles : [],
            'connect-src': (_a = fetch === null || fetch === void 0 ? void 0 : fetch.client) !== null && _a !== void 0 ? _a : [],
            'font-src': fonts !== null && fonts !== void 0 ? fonts : [],
            'frame-src': frames !== null && frames !== void 0 ? frames : []
        };
    }
    getStyleSrc($, userStyleSrc) {
        var _a, _b;
        const quotedUserStyleSrc = (_a = userStyleSrc === null || userStyleSrc === void 0 ? void 0 : userStyleSrc.map((x) => `'${x}'`)) !== null && _a !== void 0 ? _a : [];
        const deprecatedUserStyleSrc = (_b = this.getDeprecatedUserCsp($)['style-src']) !== null && _b !== void 0 ? _b : [];
        const uniqueStyleSrc = [...new Set([...deprecatedUserStyleSrc, ...quotedUserStyleSrc])];
        return uniqueStyleSrc.filter((x) => this.isValidUserStyleSrc(x));
    }
    getScriptSrc($, userScriptSrc) {
        var _a;
        const validUserScriptSrc = (_a = userScriptSrc === null || userScriptSrc === void 0 ? void 0 : userScriptSrc.filter((x) => this.isValidUserScriptSrc(x))) !== null && _a !== void 0 ? _a : [];
        const generatedScriptHashes = validUserScriptSrc.includes('unsafe-inline') ? [] : this.getInlineScriptHashes($);
        const { scriptSrc, userScriptHashes } = this.extractUniqueHashes(validUserScriptSrc, generatedScriptHashes);
        return [...scriptSrc, ...generatedScriptHashes, ...userScriptHashes].map((x) => this.formatScriptSrc(x));
    }
    extractUniqueHashes(userScriptSrc, existingScriptHashes) {
        var _a;
        const userScriptHashes = [];
        const scriptSrc = (_a = userScriptSrc === null || userScriptSrc === void 0 ? void 0 : userScriptSrc.filter((scriptSrc) => {
            const isValidHash = this.isValidHash(scriptSrc);
            if (isValidHash && !existingScriptHashes.includes(scriptSrc)) {
                userScriptHashes.push(scriptSrc);
            }
            return !isValidHash;
        })) !== null && _a !== void 0 ? _a : [];
        return { scriptSrc, userScriptHashes };
    }
    getInlineScriptHashes($) {
        return $('script:not([src])')
            .map((_index, script) => {
            const html = $(script).html();
            return html && `sha256-${this.hashScript(html)}`;
        })
            .get();
    }
    hashScript(content) {
        const sha256 = crypto_1.default.createHash('sha256');
        return sha256.update(content).digest('base64');
    }
    formatScriptSrc(scriptSrc) {
        if (this.UNQUOTED_SCRIPT_SRC_ALLOWLIST.includes(scriptSrc)) {
            return scriptSrc;
        }
        return `'${scriptSrc}'`;
    }
    isValidUserScriptSrc(scriptSrc) {
        if (!this.isSafeCsp(scriptSrc))
            return false;
        return this.isValidHash(scriptSrc) || this.SCRIPT_SRC_ALLOWLIST.includes(scriptSrc);
    }
    isValidUserStyleSrc(styleSrc) {
        if (!this.isSafeCsp(styleSrc)) {
            this.logger.info('discarding potentially-malicious CSP');
            return false;
        }
        return this.STYLE_SRC_ALLOWLIST.includes(styleSrc);
    }
    isSafeCsp(cspString) {
        return /^([a-zA-Z0-9='"+\/ -]|blob:)*$/.test(cspString);
    }
    isValidHash(cspString) {
        return this.BASE_64_HASH_PATTERNS.some((pattern) => pattern.test(cspString));
    }
    getDeprecatedUserCsp($) {
        const cspContent = $('meta[http-equiv="Content-Security-Policy"]').attr('content');
        if (!cspContent) {
            return {};
        }
        if (!this.isSafeCsp(cspContent)) {
            this.logger.info('discarding potentially-malicious CSP');
            return {};
        }
        return (0, content_security_policy_parser_1.default)(cspContent);
    }
}
exports.CSPProcessingService = CSPProcessingService;
