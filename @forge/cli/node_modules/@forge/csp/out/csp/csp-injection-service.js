"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSPInjectionService = void 0;
const types_1 = require("../types");
const atlassianImageHosts = {
    dev: ['https://avatar-management--avatars.us-west-2.staging.public.atl-paas.net', 'https://api.dev.atlassian.com'],
    stg: ['https://avatar-management--avatars.us-west-2.staging.public.atl-paas.net', 'https://api.stg.atlassian.com'],
    prod: ['https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net', 'https://api.atlassian.com']
};
const gravatarUrl = 'https://secure.gravatar.com';
class CSPInjectionService {
    constructor() {
        this.getInjectableCSP = (existingCSPDetails, microsEnv, tunnelCSPReporterUri) => {
            const reportUri = tunnelCSPReporterUri || this.getCSPReportUri(microsEnv);
            const defaultSrc = `'self'`;
            const frameAncestors = ["'self'", ...this.getFrameAncestors(microsEnv)].join(' ');
            const frameSrc = ["'self'", ...this.getExistingCSPDetails(types_1.ExternalCspType.FRAME_SRC, existingCSPDetails)].join(' ');
            const fontSrc = ["'self'", ...this.getExistingCSPDetails(types_1.ExternalCspType.FONT_SRC, existingCSPDetails)].join(' ');
            const imgSrc = [
                "'self'",
                'data:',
                'blob:',
                gravatarUrl,
                ...atlassianImageHosts[microsEnv],
                ...this.getExistingCSPDetails(types_1.ExternalCspType.IMG_SRC, existingCSPDetails)
            ].join(' ');
            const mediaSrc = [
                "'self'",
                'data:',
                'blob:',
                ...this.getExistingCSPDetails(types_1.ExternalCspType.MEDIA_SRC, existingCSPDetails)
            ].join(' ');
            const connectSrc = [
                "'self'",
                ...this.getConnectSrc(microsEnv, !!tunnelCSPReporterUri),
                ...this.getExistingCSPDetails(types_1.ExternalCspType.CONNECT_SRC, existingCSPDetails)
            ].join(' ');
            const scriptSrc = [
                "'self'",
                this.getForgeGlobalCSP(microsEnv),
                ...this.getExistingCSPDetails(types_1.ExternalCspType.SCRIPT_SRC, existingCSPDetails)
            ].join(' ');
            const styleSrc = [
                "'self'",
                this.getForgeGlobalCSP(microsEnv),
                ...this.getExistingCSPDetails(types_1.ExternalCspType.STYLE_SRC, existingCSPDetails)
            ].join(' ');
            const navigateTo = ["'self'"];
            return [
                `default-src ${defaultSrc}`,
                `frame-ancestors ${frameAncestors}`,
                `frame-src ${frameSrc}`,
                `font-src ${fontSrc}`,
                `img-src ${imgSrc}`,
                `media-src ${mediaSrc}`,
                `connect-src ${connectSrc}`,
                `script-src ${scriptSrc}`,
                `navigate-to ${navigateTo}`,
                `style-src ${styleSrc}`,
                `form-action 'self'`,
                `sandbox allow-downloads allow-forms allow-modals allow-pointer-lock allow-same-origin allow-scripts`,
                `report-uri ${reportUri}`
            ];
        };
    }
    getCSPReportUri(microsEnv) {
        if (microsEnv === 'dev' || microsEnv === 'stg')
            return 'https://web-security-reports.stg.services.atlassian.com/csp-report/forge-cdn';
        return 'https://web-security-reports.services.atlassian.com/csp-report/forge-cdn';
    }
    getForgeGlobalCSP(microsEnv) {
        return `https://forge.cdn.${microsEnv}.atlassian-dev.net`;
    }
    getExistingCSPDetails(cspType, cspDetails) {
        var _a;
        return (_a = cspDetails[cspType]) !== null && _a !== void 0 ? _a : [];
    }
    getConnectSrc(microsEnv, isTunnelling) {
        const allowed = [];
        if (isTunnelling) {
            allowed.push(...['ws://localhost:*', 'http://localhost:*']);
        }
        allowed.push(`https://api.${microsEnv === 'prod' ? '' : 'stg.'}atlassian.com/metal/ingest`);
        return allowed;
    }
    getFrameAncestors(microsEnv) {
        if (microsEnv === 'dev' || microsEnv === 'stg') {
            return [
                '*.jira-dev.com',
                'http://localhost:*',
                '*.devbucket.org',
                'https://staging.bb-inf.net',
                'https://integration.bb-inf.net',
                '*.atl-paas.net'
            ];
        }
        return ['*.atlassian.net', 'bitbucket.org', '*.jira.com', '*.atlassian.com'];
    }
}
exports.CSPInjectionService = CSPInjectionService;
