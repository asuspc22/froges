import { ManifestSchema as Manifest } from '@forge/manifest';
import fs from 'fs';
import { tsParser } from '../parse';
import { LinterInterface, LintInput, LintLogger, LintResult } from './linter-interface';
export interface ProblemCount {
    errors: number;
    warnings: number;
}
export declare const reportLintResults: (logger: LintLogger, lintResults: LintResult[], showSummary?: boolean) => void;
export declare const problemCount: (lintResults: LintResult[]) => ProblemCount;
export declare const parseSourceFile: (filepath: string, parser: typeof tsParser, readFilePromise?: typeof fs.readFile.__promisify__) => Promise<LintInput>;
export declare const lint: (filesToLint: string[], manifest: Manifest, environment: string, logger: LintLogger, parseFunction?: (filepath: string, parser: typeof tsParser, readFilePromise?: typeof fs.readFile.__promisify__) => Promise<LintInput>, linters?: LinterInterface[]) => Promise<LintResult[]>;
export declare const litelint: (logger: LintLogger, linter?: LinterInterface) => Promise<LintResult[]>;
//# sourceMappingURL=lint.d.ts.map