import { ASTParseResult } from '../parse';
import { LintCriteriaMatch, LintFixer, LintInput, LintLogger, LintResult } from './linter-interface';
import { NodeVisitor } from './linters/node-visitor-interface';
import { LintIssueVerifier } from './linters/verifier-interface';
import { AbstractLinter } from './abstract-linter';
export interface ExecuteImplInput {
    ast: ASTParseResult | null;
    filepath: string;
    fixer?: LintFixer;
}
export default abstract class BaseLinter<T extends LintCriteriaMatch, M extends {
    [key: string]: V;
}, V> extends AbstractLinter {
    protected environment: string;
    protected readonly logger: LintLogger;
    protected nodeVisitors: NodeVisitor<T>[];
    protected matches: Map<string, M>;
    protected verifiers: Record<keyof M, LintIssueVerifier<V>>;
    protected constructor(environment: string, logger: LintLogger);
    protected abstract addLintCriteriaMatch(t: T, filepath: string): void;
    protected abstract setupMatchesMap(filePath: string): void;
    protected getFixer(): LintFixer | undefined;
    protected filterLintInput(inputs: LintInput[]): LintInput[];
    private traverse;
    private verifyLintCriteriaMatches;
    private execute;
    batchExecuteImpl(inputs: LintInput[]): Promise<LintResult[]>;
    abstract bootstrap(): Promise<void>;
}
//# sourceMappingURL=base-linter.d.ts.map