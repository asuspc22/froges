"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportedFunctionNodeVisitor = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
class ExportedFunctionNodeVisitor {
    visit(node, _parent, callback) {
        if (node.type === typescript_estree_1.AST_NODE_TYPES.MemberExpression &&
            node.object &&
            node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
            this.visitMemberExpression(node, callback);
        }
        if (node.type === typescript_estree_1.AST_NODE_TYPES.AssignmentExpression && node.operator === '=') {
            this.visitObjectAssignmentExpression(node, callback);
        }
        if (node.type === typescript_estree_1.AST_NODE_TYPES.ExportNamedDeclaration) {
            if (node.declaration) {
                this.visitInlineNamedExport(node, callback);
            }
            else {
                node.specifiers.forEach((specifier) => this.visitSpecifiedNamedExports(node, specifier, callback));
            }
        }
    }
    visitSpecifiedNamedExports(node, specifier, callback) {
        if (specifier.type === typescript_estree_1.AST_NODE_TYPES.ExportSpecifier && specifier.local.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
            callback(this.createExportedMethod(specifier.exported.name, Object.assign({}, node.loc.start)));
        }
    }
    visitInlineNamedExport(node, callback) {
        var _a, _b, _c, _d;
        if (((_a = node.declaration) === null || _a === void 0 ? void 0 : _a.type) === typescript_estree_1.AST_NODE_TYPES.VariableDeclaration) {
            node.declaration.declarations.forEach((declarator) => {
                if (declarator.id && declarator.id.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
                    callback(this.createExportedMethod(declarator.id.name, Object.assign({}, declarator.id.loc.start)));
                }
            });
        }
        else if (((_b = node.declaration) === null || _b === void 0 ? void 0 : _b.type) === typescript_estree_1.AST_NODE_TYPES.FunctionDeclaration) {
            if (((_c = node.declaration) === null || _c === void 0 ? void 0 : _c.id) && ((_d = node.declaration) === null || _d === void 0 ? void 0 : _d.id.type) === typescript_estree_1.AST_NODE_TYPES.Identifier) {
                callback(this.createExportedMethod(node.declaration.id.name, Object.assign({}, node.declaration.id.loc.start)));
            }
        }
    }
    visitObjectAssignmentExpression(node, callback) {
        if (this.isExports(node.left)) {
            this.tryAddObjectExpressionPropertiesExportedMethods(node, callback);
        }
    }
    visitMemberExpression(node, callback) {
        if (node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier && this.isExports(node.object)) {
            callback(this.createExportedMethod(node.property.name, Object.assign({}, node.property.loc.start)));
        }
    }
    tryAddObjectExpressionPropertiesExportedMethods(node, callback) {
        var _a, _b;
        if (((_a = node.right) === null || _a === void 0 ? void 0 : _a.type) === typescript_estree_1.AST_NODE_TYPES.ObjectExpression) {
            (_b = node.right.properties) === null || _b === void 0 ? void 0 : _b.forEach((property) => {
                if (property.key.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
                    callback(this.createExportedMethod(property.key.name, Object.assign({}, property.key.loc.start)));
                }
            });
        }
    }
    createExportedMethod(method, location) {
        return Object.assign({ method }, location);
    }
    isExports(node) {
        return ((node.type === typescript_estree_1.AST_NODE_TYPES.MemberExpression &&
            node.object.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
            node.object.name === 'module' &&
            node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
            node.property.name === 'exports') ||
            ((node === null || node === void 0 ? void 0 : node.type) === typescript_estree_1.AST_NODE_TYPES.Identifier && (node === null || node === void 0 ? void 0 : node.name) === 'exports'));
    }
}
exports.ExportedFunctionNodeVisitor = ExportedFunctionNodeVisitor;
