"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIHookVerifier = void 0;
const linter_interface_1 = require("../../../linter-interface");
const verifier_interface_1 = require("../../verifier-interface");
const text_1 = require("../../../text");
const manifest_1 = require("@forge/manifest");
const FORGE_UI_HOOK_PERMISSIONS = {
    useContentProperty: {
        beta: ['read:content-details:confluence', 'read:content.property:confluence', 'write:content.property:confluence'],
        current: ['read:confluence-props', 'write:confluence-props']
    },
    useSpaceProperty: {
        beta: ['read:content-details:confluence', 'read:space.property:confluence', 'write:space.property:confluence'],
        current: ['read:confluence-props', 'write:confluence-props']
    },
    useIssueProperty: {
        beta: ['read:issue.property:jira'],
        current: ['read:jira-work', 'write:jira-work']
    }
};
class UIHookVerifier extends verifier_interface_1.BaseLintIssueVerifier {
    getLintClass() {
        return linter_interface_1.LintClass.Error;
    }
    async process(apiCalls) {
        var _a;
        const rules = [];
        for (const apiCall of apiCalls) {
            const requiredPermissions = FORGE_UI_HOOK_PERMISSIONS[apiCall.hookName];
            if (!requiredPermissions)
                return rules;
            const missingPermissions = await (0, manifest_1.getMissingScopes)((_a = this.manifest.permissions) === null || _a === void 0 ? void 0 : _a.scopes, requiredPermissions);
            missingPermissions.forEach((perm) => rules.push(this.getHookRule(apiCall, perm)));
        }
        return rules;
    }
    getHookRule(apiCall, permission) {
        const { hookName, line, column } = apiCall;
        const product = permission.includes('confluence') ? 'Confluence' : 'Jira';
        return {
            class: this.getLintClass(),
            message: text_1.messages.verifiers.uiHook.message(product, hookName, permission),
            reference: text_1.messages.verifiers.uiHook.reference,
            line: line,
            column: column,
            metadata: {
                missingPermission: permission
            }
        };
    }
}
exports.UIHookVerifier = UIHookVerifier;
