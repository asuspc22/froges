import { ValidationTypes, ManifestValidationResult, ProcessorInterface, SchemaValidationError } from '@forge/manifest';
import { LintResult, LintResultRule, LintFixState, LintLogger } from '../../linter-interface';
import { AbstractLinter } from '../../abstract-linter';
export declare class AbstractManifestLinter extends AbstractLinter {
    private readonly type;
    private processor;
    constructor(type: ValidationTypes, logger: LintLogger);
    private mapManifestResponse;
    getProcessor(): ProcessorInterface<any> | undefined;
    batchExecuteImpl(): Promise<LintResult[]>;
    bootstrap(): Promise<void>;
    protected getFixer(): ((errors: LintResultRule[], warnings: LintResultRule[], state: LintFixState) => Promise<LintFixState>) | undefined;
    protected getResultsForFixer(results: ManifestValidationResult<any>): SchemaValidationError[];
}
//# sourceMappingURL=abstract-manifest-linter.d.ts.map