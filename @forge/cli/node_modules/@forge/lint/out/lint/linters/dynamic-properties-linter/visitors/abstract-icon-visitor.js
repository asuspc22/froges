"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractIconVisitor = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
class AbstractIconVisitor {
    constructor() {
        this.isBundledUri = (iconUri) => iconUri.startsWith('resource:') || iconUri.startsWith('data:image');
        this.handleIconNode = (iconNode, callback) => {
            if ((iconNode === null || iconNode === void 0 ? void 0 : iconNode.type) === typescript_estree_1.AST_NODE_TYPES.Literal && typeof (iconNode === null || iconNode === void 0 ? void 0 : iconNode.value) === 'string') {
                if (iconNode.value.trim() !== '' && !this.isBundledUri(iconNode.value.trim())) {
                    const iconUrl = this.transformArgsToIconUrl(iconNode);
                    callback(iconUrl);
                }
            }
        };
        this.transformArgsToIconUrl = (iconNode) => ({
            type: 'DYNAMIC_PROPERTIES_ICON',
            url: iconNode.value,
            line: iconNode.loc.start.line,
            column: iconNode.loc.start.column
        });
    }
    visit(node, parent, callback) {
        var _a, _b;
        switch (node.type) {
            case typescript_estree_1.AST_NODE_TYPES.ArrowFunctionExpression:
                if (((_a = node.body) === null || _a === void 0 ? void 0 : _a.type) === typescript_estree_1.AST_NODE_TYPES.ObjectExpression) {
                    const iconDefinitionNode = this.getIconDefinitionNode(node.body);
                    this.handleIconNode(iconDefinitionNode === null || iconDefinitionNode === void 0 ? void 0 : iconDefinitionNode.value, callback);
                }
                break;
            case typescript_estree_1.AST_NODE_TYPES.ReturnStatement:
                if (((_b = node.argument) === null || _b === void 0 ? void 0 : _b.type) === typescript_estree_1.AST_NODE_TYPES.ObjectExpression) {
                    const iconDefinitionNode = this.getIconDefinitionNode(node.argument);
                    this.handleIconNode(iconDefinitionNode === null || iconDefinitionNode === void 0 ? void 0 : iconDefinitionNode.value, callback);
                }
                break;
        }
    }
}
exports.AbstractIconVisitor = AbstractIconVisitor;
