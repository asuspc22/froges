"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductNodeVisitor = exports.ANY_TEXT_REGEX = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
const api_call_interface_1 = require("../api-call-interface");
exports.ANY_TEXT_REGEX = '\\S*';
class ProductNodeVisitor {
    visit(node, parent, callback) {
        switch (node.type) {
            case typescript_estree_1.AST_NODE_TYPES.CallExpression:
                if (node.callee.type === typescript_estree_1.AST_NODE_TYPES.Identifier && node.callee.name.match(/request(Jira|Confluence)/)) {
                    const apiCallProblem = this.checkProductApiCallArgs(node.callee.name, node.arguments);
                    apiCallProblem && callback(apiCallProblem);
                }
                break;
            case typescript_estree_1.AST_NODE_TYPES.MemberExpression:
                if (node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
                    node.property.name.match(/request(Jira|Confluence)/) &&
                    (parent === null || parent === void 0 ? void 0 : parent.type) === typescript_estree_1.AST_NODE_TYPES.CallExpression) {
                    const apiCallProblem = this.checkProductApiCallArgs(node.property.name, parent.arguments);
                    apiCallProblem && callback(apiCallProblem);
                }
                break;
        }
    }
    checkProductApiCallArgs(methodName, args) {
        const [endpointNode, optionsNode] = args;
        return this.transformArgstoApiCall(methodName === 'requestJira' ? 'jira' : 'confluence', endpointNode, optionsNode);
    }
    transformArgstoApiCall(product, endpointNode, optionsNode) {
        if ((optionsNode && optionsNode.type !== typescript_estree_1.AST_NODE_TYPES.ObjectExpression) ||
            (endpointNode.type !== typescript_estree_1.AST_NODE_TYPES.Literal &&
                endpointNode.type !== typescript_estree_1.AST_NODE_TYPES.TemplateLiteral &&
                endpointNode.type !== typescript_estree_1.AST_NODE_TYPES.TaggedTemplateExpression)) {
            return;
        }
        let endpointString = '';
        const getEndpointStringFromTemplateLiteral = (endpointNode) => {
            const expressions = endpointNode.expressions.map((node) => ({
                start: node.loc.start.column,
                value: exports.ANY_TEXT_REGEX
            }));
            const stringInterstitials = endpointNode.quasis.map((node) => ({
                start: node.loc.start.column,
                value: node.value.cooked
            }));
            return [...expressions, ...stringInterstitials]
                .sort((a, b) => a.start - b.start)
                .map(({ value }) => value)
                .join('');
        };
        if (endpointNode.type === typescript_estree_1.AST_NODE_TYPES.TemplateLiteral) {
            endpointString = getEndpointStringFromTemplateLiteral(endpointNode);
        }
        else if (endpointNode.type === typescript_estree_1.AST_NODE_TYPES.TaggedTemplateExpression) {
            endpointString = getEndpointStringFromTemplateLiteral(endpointNode.quasi);
        }
        else {
            const { value: endpointValue } = endpointNode;
            if (typeof endpointValue === 'string') {
                endpointString = endpointValue;
            }
        }
        if (!endpointString) {
            return;
        }
        const methodProperty = optionsNode === null || optionsNode === void 0 ? void 0 : optionsNode.properties.find((property) => property.type === typescript_estree_1.AST_NODE_TYPES.Property &&
            property.key.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
            property.key.name === 'method');
        const methodValue = (methodProperty === null || methodProperty === void 0 ? void 0 : methodProperty.value.type) === typescript_estree_1.AST_NODE_TYPES.Literal && typeof methodProperty.value.value === 'string'
            ? methodProperty.value.value
            : 'GET';
        return {
            product,
            type: api_call_interface_1.ApiCallTypes.PRODUCT,
            path: endpointString,
            method: methodValue,
            line: endpointNode.loc.start.line,
            column: endpointNode.loc.start.column
        };
    }
}
exports.ProductNodeVisitor = ProductNodeVisitor;
