"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicPropertiesIconVerifier = void 0;
const egress_1 = require("@forge/egress");
const linter_interface_1 = require("../../../linter-interface");
const utils_1 = require("../../utils");
const text_1 = require("../../../text");
const abstract_dynamic_properties_verifier_1 = require("./abstract-dynamic-properties-verifier");
class DynamicPropertiesIconVerifier extends abstract_dynamic_properties_verifier_1.AbstractDynamicPropertiesVerifier {
    constructor(environment, manifest) {
        var _a, _b, _c, _d;
        super(environment, manifest);
        const allowList = (_d = (_c = (_b = (_a = this.manifest) === null || _a === void 0 ? void 0 : _a.permissions) === null || _b === void 0 ? void 0 : _b.external) === null || _c === void 0 ? void 0 : _c.images) !== null && _d !== void 0 ? _d : [];
        const collectedUrls = allowList.filter((item) => typeof item === 'string');
        this.egressFilteringService = new egress_1.EgressFilteringService(collectedUrls);
    }
    getLintClass() {
        return linter_interface_1.LintClass.Error;
    }
    async process(iconUrls) {
        if (!this.shouldRunCheck) {
            return [];
        }
        return [
            ...iconUrls
                .filter(({ url }) => !this.egressFilteringService.isValidUrl(url))
                .map((iconUrl) => ({
                class: this.getLintClass(),
                message: text_1.messages.verifiers.dynamicPropertiesIcon.message(iconUrl.url),
                reference: text_1.messages.verifiers.dynamicPropertiesIcon.reference,
                column: iconUrl.column,
                line: iconUrl.line,
                metadata: {
                    missingExternalImagesPermission: (0, utils_1.extractDomain)(iconUrl)
                }
            }))
        ];
    }
}
exports.DynamicPropertiesIconVerifier = DynamicPropertiesIconVerifier;
