"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicPropertiesPermissionsLinter = void 0;
const tslib_1 = require("tslib");
const cli_shared_1 = require("@forge/cli-shared");
const base_linter_1 = tslib_1.__importDefault(require("../../base-linter"));
const dynamic_properties_icon_verifier_1 = require("./verifiers/dynamic-properties-icon-verifier");
const confluence_icon_visitor_1 = require("./visitors/confluence-icon-visitor");
const permission_linter_1 = require("../permission-linter/permission-linter");
const jira_icon_visitor_1 = require("./visitors/jira-icon-visitor");
class DynamicPropertiesPermissionsLinter extends base_linter_1.default {
    constructor(environment, manifest, logger) {
        super(environment, logger);
        this.manifest = manifest;
    }
    async bootstrap() {
        this.nodeVisitors = [new confluence_icon_visitor_1.ConfluenceIconVisitor(), new jira_icon_visitor_1.JiraIconVisitor()];
        const humanReadableEnvironment = (0, cli_shared_1.environmentToOption)(this.environment);
        this.verifiers = {
            dynamicPropertiesIcon: new dynamic_properties_icon_verifier_1.DynamicPropertiesIconVerifier(humanReadableEnvironment, this.manifest)
        };
    }
    getFixer() {
        return permission_linter_1.fixMissingPermissions;
    }
    setupMatchesMap(filepath) {
        this.matches.set(filepath, {
            dynamicPropertiesIcon: []
        });
    }
    addLintCriteriaMatch(dynamicPropertiesIconUrl, filepath) {
        const criteriaMatches = this.matches.get(filepath);
        criteriaMatches.dynamicPropertiesIcon.push(dynamicPropertiesIconUrl);
    }
}
exports.DynamicPropertiesPermissionsLinter = DynamicPropertiesPermissionsLinter;
