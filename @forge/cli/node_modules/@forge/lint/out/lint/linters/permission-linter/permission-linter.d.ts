import type { ManifestSchema as Manifest } from '@forge/manifest';
import BaseLinter from '../../base-linter';
import { LintFixState, LintLogger, LintResultRule } from '../../linter-interface';
import { ApiCall, ExternalApiCall, ImageUrl, ProductApiCall, StorageApiCall, UIHookApiCall } from './api-call-interface';
import { PathMethods } from './verifiers';
interface SwaggerFormat {
    paths: {
        [path: string]: PathMethods;
    };
}
export declare const NON_FWD_SLASH_REGEX = "[^\\/\\s]*";
export declare const findMissingPermissions: (errors: LintResultRule[], warnings: LintResultRule[], permissionsType: 'missingPermission' | 'missingExternalFetchPermission' | 'missingContentStylePermission' | 'missingExternalImagesPermission', state?: LintFixState) => Set<string>;
export declare const fixMissingPermissions: (errors: LintResultRule[], warnings: LintResultRule[], state: LintFixState) => Promise<LintFixState>;
interface PermissionLintCriteriaMatches {
    [key: string]: ApiCall[];
    confluence: ProductApiCall[];
    jira: ProductApiCall[];
    storage: StorageApiCall[];
    uiHook: UIHookApiCall[];
    external: ExternalApiCall[];
    image: ImageUrl[];
}
export declare class PermissionLinter extends BaseLinter<ApiCall, PermissionLintCriteriaMatches, ApiCall[]> {
    private manifest;
    static JIRA_CACHE_KEY: string;
    static JSM_CACHE_KEY: string;
    static JSW_CACHE_KEY: string;
    static CONFLUENCE_CACHE_KEY: string;
    private jira?;
    private confluence?;
    private cache?;
    constructor(environment: string, manifest: Manifest, logger: LintLogger);
    bootstrap(): Promise<void>;
    protected setupMatchesMap(filepath: string): void;
    protected getFixer(): ((errors: LintResultRule[], warnings: LintResultRule[], state: LintFixState) => Promise<LintFixState>) | undefined;
    protected addLintCriteriaMatch(apiCall: ApiCall, filepath: string): void;
    getProductPaths(cacheKey: string, url: string): Promise<SwaggerFormat>;
    getProductPathsFile(url: string): Promise<SwaggerFormat>;
    private processPaths;
}
export {};
//# sourceMappingURL=permission-linter.d.ts.map