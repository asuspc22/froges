"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalFetchVerifier = void 0;
const egress_1 = require("@forge/egress");
const linter_interface_1 = require("../../../linter-interface");
const verifier_interface_1 = require("../../verifier-interface");
const text_1 = require("../../../text");
const utils_1 = require("../../utils");
class ExternalFetchVerifier extends verifier_interface_1.BaseLintIssueVerifier {
    constructor(environment, manifest) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(environment, manifest);
        const allowList = (_e = (_d = (_c = (_b = (_a = this.manifest) === null || _a === void 0 ? void 0 : _a.permissions) === null || _b === void 0 ? void 0 : _b.external) === null || _c === void 0 ? void 0 : _c.fetch) === null || _d === void 0 ? void 0 : _d.backend) !== null && _e !== void 0 ? _e : [];
        const remoteList = (_g = (_f = this.manifest) === null || _f === void 0 ? void 0 : _f.remotes) !== null && _g !== void 0 ? _g : [];
        const collectedUrls = allowList.filter((item) => typeof item === 'string');
        const collectedRemotes = allowList
            .map((item) => { var _a; return typeof item !== 'string' && ((_a = remoteList.find((remoteItem) => remoteItem.key === item.remote)) === null || _a === void 0 ? void 0 : _a.baseUrl); })
            .filter((x) => typeof x === 'string');
        this.egressFilteringService = new egress_1.EgressFilteringService(collectedUrls.concat(collectedRemotes));
    }
    getLintClass() {
        return linter_interface_1.LintClass.Error;
    }
    async process(fetchCalls) {
        return fetchCalls
            .filter(({ url }) => !this.egressFilteringService.isValidUrl(url))
            .map((fetchCall) => ({
            class: this.getLintClass(),
            message: text_1.messages.verifiers.externalFetch.message(fetchCall.url),
            reference: text_1.messages.verifiers.externalFetch.reference,
            column: fetchCall.column,
            line: fetchCall.line,
            metadata: {
                missingExternalFetchPermission: (0, utils_1.extractDomain)(fetchCall)
            }
        }));
    }
}
exports.ExternalFetchVerifier = ExternalFetchVerifier;
