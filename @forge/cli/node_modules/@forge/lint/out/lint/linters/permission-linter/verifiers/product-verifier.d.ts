import { LintResultRule, LintClass } from '../../../linter-interface';
import { ApiCall, ProductApiCall } from '../api-call-interface';
import { LintIssueVerifier, BaseLintIssueVerifier } from '../../verifier-interface';
import { ManifestSchema as Manifest } from '@forge/manifest';
import { Swagger } from 'atlassian-openapi';
import OAuth2ScopesWithState = Swagger.OAuth2ScopesWithState;
export interface ProductMethod {
    originalPath: string;
    methods: PathMethods;
}
export interface PathMethods {
    [method: string]: {
        security: SecurityEntry[];
        'x-atlassian-oauth2-scopes'?: OAuth2ScopesWithState[];
    };
}
interface SecurityEntry {
    [authType: string]: string[];
}
export declare type ProductPathToMethodsMap = Map<RegExp, ProductMethod>;
export declare class ProductVerifier extends BaseLintIssueVerifier implements LintIssueVerifier<ApiCall[]> {
    private readonly pathMap;
    private readonly product;
    constructor(environment: string, manifest: Manifest, pathMap: ProductPathToMethodsMap, product: string);
    protected getLintClass(): LintClass;
    process(apiCalls: ProductApiCall[]): Promise<LintResultRule[]>;
    private lookupApiCall;
    private getMissingPermissionScopes;
    private getRequiredScopes;
    private getBetaScopes;
}
export {};
//# sourceMappingURL=product-verifier.d.ts.map