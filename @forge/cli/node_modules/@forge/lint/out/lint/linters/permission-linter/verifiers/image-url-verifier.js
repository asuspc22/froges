"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageUrlVerifier = void 0;
const egress_1 = require("@forge/egress");
const linter_interface_1 = require("../../../linter-interface");
const verifier_interface_1 = require("../../verifier-interface");
const text_1 = require("../../../text");
const utils_1 = require("../../utils");
class ImageUrlVerifier extends verifier_interface_1.BaseLintIssueVerifier {
    constructor(environment, manifest) {
        var _a, _b, _c, _d;
        super(environment, manifest);
        const allowList = (_d = (_c = (_b = (_a = this.manifest) === null || _a === void 0 ? void 0 : _a.permissions) === null || _b === void 0 ? void 0 : _b.external) === null || _c === void 0 ? void 0 : _c.images) !== null && _d !== void 0 ? _d : [];
        const collectedUrls = allowList.filter((item) => typeof item === 'string');
        this.egressFilteringService = new egress_1.EgressFilteringService(collectedUrls);
    }
    getLintClass() {
        return linter_interface_1.LintClass.Error;
    }
    async process(imageUrls) {
        return imageUrls
            .filter(({ url }) => !this.egressFilteringService.isValidUrl(url))
            .map((imageUrl) => ({
            class: this.getLintClass(),
            message: text_1.messages.verifiers.imageUrl.message(imageUrl.url),
            reference: text_1.messages.verifiers.imageUrl.reference,
            column: imageUrl.column,
            line: imageUrl.line,
            metadata: {
                missingExternalImagesPermission: (0, utils_1.extractDomain)(imageUrl)
            }
        }));
    }
}
exports.ImageUrlVerifier = ImageUrlVerifier;
