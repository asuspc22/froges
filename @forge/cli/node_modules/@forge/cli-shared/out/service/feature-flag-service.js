"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockFeatureFlagReader = exports.FeatureFlagService = exports.cachedMethod = exports.FeatureFlagReader = void 0;
const tslib_1 = require("tslib");
const launchdarkly_node_client_sdk_1 = tslib_1.__importStar(require("launchdarkly-node-client-sdk"));
const env_paths_1 = tslib_1.__importDefault(require("env-paths"));
const fs_1 = require("fs");
const util_1 = require("util");
const graphql_1 = require("../graphql");
class FeatureFlagReader {
    async readMeScopeAddedByXLS() {
        var _a;
        const doNotAddReadMeScope = (_a = (await this.readFlag('xls-do-not-automatically-add-read-me-scope'))) !== null && _a !== void 0 ? _a : false;
        return !doNotAddReadMeScope;
    }
    async isAutoConsentAllowed() {
        var _a;
        return (_a = (await this.readFlag('xis-allow-automatic-user-consent'))) !== null && _a !== void 0 ? _a : false;
    }
    async isMUAOEnabled() {
        return (await this.readFlag('forge-cli-enable-muao')) || process.env.ENABLE_MUAO === 'true';
    }
    async isConcurrentDevEnabled() {
        return ((await this.readFlag('forge-cli-enable-concurrent-development')) ||
            process.env.ENABLE_CONCURRENT_DEVELOPMENT === 'true');
    }
}
exports.FeatureFlagReader = FeatureFlagReader;
var CLIENT_SIDE_ID;
(function (CLIENT_SIDE_ID) {
    CLIENT_SIDE_ID["DEV"] = "5d22bfb52c6a0707aac5be90";
    CLIENT_SIDE_ID["STG"] = "5d1eed1f47274b07674b9395";
    CLIENT_SIDE_ID["PROD"] = "5d1eecfe47274b07674b938f";
})(CLIENT_SIDE_ID || (CLIENT_SIDE_ID = {}));
function cachedMethod(getter) {
    const cacheDict = new Map();
    return async function () {
        const cached = cacheDict.get(this);
        if (cached !== undefined) {
            return cached;
        }
        const value = await getter.call(this);
        cacheDict.set(this, value);
        return value;
    };
}
exports.cachedMethod = cachedMethod;
class FeatureFlagService extends FeatureFlagReader {
    constructor(logger, cliDetails, credentialStore, appConfigReader, getEnvironmentFn = graphql_1.getEnvironment, initializeLD = launchdarkly_node_client_sdk_1.default.initialize) {
        super();
        this.logger = logger;
        this.cliDetails = cliDetails;
        this.credentialStore = credentialStore;
        this.appConfigReader = appConfigReader;
        this.getEnvironmentFn = getEnvironmentFn;
        this.initializeLD = initializeLD;
        this.appID = cachedMethod(async () => {
            try {
                const config = await this.appConfigReader.readConfigSection();
                return config == 'missing' || config == 'invalid' ? null : config.id;
            }
            catch (e) {
                return null;
            }
        });
        this.user = cachedMethod(async () => {
            const custom = {};
            const appID = await this.appID();
            if (appID) {
                custom.appID = appID.split('/')[1];
            }
            if (this.cliDetails) {
                custom.version = this.cliDetails.version;
            }
            let key;
            try {
                key = (await this.credentialStore.getCredentials()).accountId;
            }
            catch (e) {
                key = 'anonymous';
            }
            return { key, anonymous: true, custom };
        });
        this.client = cachedMethod(async () => {
            const clientSideID = this.getEnvironmentFn(CLIENT_SIDE_ID);
            const user = await this.user();
            const cachePath = (0, env_paths_1.default)('@forge/cli').cache;
            await (0, util_1.promisify)(fs_1.mkdir)(cachePath, { recursive: true });
            const options = {
                logger: (0, launchdarkly_node_client_sdk_1.basicLogger)({ level: 'error' }),
                sendEvents: false
            };
            return this.initializeLD(clientSideID, user, options);
        });
    }
    async readFlag(flag) {
        try {
            const client = await this.client();
            await client.waitUntilReady();
            return client.variation(flag, null);
        }
        catch (e) {
            this.logger.error(new Error('Failed to read feature flags. Proceeding with defaults.'));
            return null;
        }
    }
}
exports.FeatureFlagService = FeatureFlagService;
class MockFeatureFlagReader extends FeatureFlagReader {
    constructor(featureFlags = undefined) {
        super();
        this.featureFlags = featureFlags;
    }
    async readFlag(flag) {
        var _a;
        return ((_a = this.featureFlags) === null || _a === void 0 ? void 0 : _a[flag]) || null;
    }
}
exports.MockFeatureFlagReader = MockFeatureFlagReader;
