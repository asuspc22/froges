import { LDClient, LDOptions, LDUser } from 'launchdarkly-node-client-sdk';
import { CredentialGetter } from '../auth';
import { ConfigSectionReader } from '../config';
import { getEnvironment } from '../graphql';
import { CLIDetails } from '../shared';
import { Logger } from '../ui';
declare type FeatureFlagType = {
    'forge-cli-test-flag': 'apple' | 'banana' | 'orange' | 'watermelon';
    'forge-cli-startup-warning': string;
    'forge-cli-enable-muao': boolean;
    'xls-do-not-automatically-add-read-me-scope': boolean;
    'forge-cli-enable-concurrent-development': boolean;
    'xis-allow-automatic-user-consent': boolean;
    'forge-cli-enable-csuik': boolean;
};
export declare type FeatureFlag = keyof FeatureFlagType;
export declare abstract class FeatureFlagReader {
    abstract readFlag<F extends FeatureFlag>(flag: F): Promise<FeatureFlagType[F] | null>;
    readMeScopeAddedByXLS(): Promise<boolean>;
    isAutoConsentAllowed(): Promise<boolean>;
    isMUAOEnabled(): Promise<boolean>;
    isConcurrentDevEnabled(): Promise<boolean>;
}
declare type ILaunchDarkly = Pick<LDClient, 'variation' | 'waitUntilReady'>;
declare type LaunchDarklyInitialize = (envKey: string, user: LDUser, options?: LDOptions) => ILaunchDarkly;
export declare function cachedMethod<C, T>(getter: (this: C) => Promise<T>): (this: C) => Promise<T>;
export declare class FeatureFlagService extends FeatureFlagReader {
    private readonly logger;
    private readonly cliDetails;
    private readonly credentialStore;
    private readonly appConfigReader;
    private readonly getEnvironmentFn;
    private readonly initializeLD;
    constructor(logger: Logger, cliDetails: Pick<CLIDetails, 'version'> | undefined, credentialStore: CredentialGetter, appConfigReader: ConfigSectionReader<{
        id: string;
    }>, getEnvironmentFn?: typeof getEnvironment, initializeLD?: LaunchDarklyInitialize);
    private appID;
    private user;
    private client;
    readFlag<F extends FeatureFlag>(flag: F): Promise<FeatureFlagType[F] | null>;
}
export declare class MockFeatureFlagReader extends FeatureFlagReader {
    private featureFlags;
    constructor(featureFlags?: {
        [key in FeatureFlag]: any;
    } | undefined);
    readFlag<F extends keyof FeatureFlagType>(flag: F): Promise<FeatureFlagType[F] | null>;
}
export {};
//# sourceMappingURL=feature-flag-service.d.ts.map