export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    AppStoredCustomEntityFieldValue: any;
    AppStoredEntityFieldValue: any;
    CardPaletteColor: any;
    CardTypeHierarchyLevelType: any;
    Date: any;
    DateTime: any;
    JSDependency: any;
    JSON: {
        [key: string]: any;
    };
    Long: any;
    SoftwareBoardFeatureKey: any;
    SoftwareBoardPermission: any;
    SprintScopeChangeEventType: any;
    TrelloShortLink: any;
    URL: any;
};
export declare enum AcceptableResponse {
    NotApplicable = "NOT_APPLICABLE",
    True = "TRUE",
    False = "FALSE"
}
export declare enum AccountStatus {
    Active = "active",
    Inactive = "inactive",
    Closed = "closed"
}
export declare type Activities = {
    __typename?: 'Activities';
    all: ActivitiesConnection;
    workedOn: ActivitiesConnection;
    myActivities?: Maybe<MyActivities>;
};
export declare type ActivitiesAllArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ActivitiesWorkedOnArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ActivitiesArguments = {
    accountIds?: Maybe<Array<Scalars['ID']>>;
    cloudIds?: Maybe<Array<Scalars['ID']>>;
    products?: Maybe<Array<ActivityProduct>>;
    eventTypes?: Maybe<Array<ActivityEventType>>;
    objectTypes?: Maybe<Array<ActivitiesObjectType>>;
    transitions?: Maybe<Array<ActivityTransition>>;
    containerIds?: Maybe<Array<Scalars['ID']>>;
    earliestStart?: Maybe<Scalars['DateTime']>;
    latestStart?: Maybe<Scalars['DateTime']>;
};
export declare type ActivitiesCommentedEvent = {
    __typename?: 'ActivitiesCommentedEvent';
    commentId: Scalars['ID'];
};
export declare type ActivitiesConnection = {
    __typename?: 'ActivitiesConnection';
    edges?: Maybe<Array<Maybe<ActivityEdge>>>;
    nodes: Array<ActivitiesItem>;
    pageInfo: ActivityPageInfo;
};
export declare type ActivitiesContainer = {
    __typename?: 'ActivitiesContainer';
    id: Scalars['ID'];
    localResourceId?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    type?: Maybe<ActivitiesContainerType>;
    product?: Maybe<ActivityProduct>;
    cloudId?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    iconUrl?: Maybe<Scalars['URL']>;
};
export declare enum ActivitiesContainerType {
    Site = "SITE",
    Project = "PROJECT",
    Space = "SPACE",
    Workspace = "WORKSPACE"
}
export declare type ActivitiesContributor = {
    __typename?: 'ActivitiesContributor';
    profile?: Maybe<User>;
    lastAccessedDate?: Maybe<Scalars['DateTime']>;
    count?: Maybe<Scalars['Int']>;
};
export declare type ActivitiesEvent = Node & {
    __typename?: 'ActivitiesEvent';
    id: Scalars['ID'];
    timestamp?: Maybe<Scalars['DateTime']>;
    eventType?: Maybe<ActivityEventType>;
    user?: Maybe<ActivitiesUser>;
    extension?: Maybe<ActivitiesEventExtension>;
};
export declare type ActivitiesEventExtension = ActivitiesTransitionedEvent | ActivitiesCommentedEvent;
export declare type ActivitiesFilter = {
    type?: Maybe<ActivitiesFilterType>;
    arguments?: Maybe<ActivitiesArguments>;
};
export declare enum ActivitiesFilterType {
    And = "AND",
    Or = "OR"
}
export declare type ActivitiesItem = Node & {
    __typename?: 'ActivitiesItem';
    id: Scalars['ID'];
    timestamp?: Maybe<Scalars['DateTime']>;
    object?: Maybe<ActivitiesObject>;
};
export declare type ActivitiesJiraIssue = {
    __typename?: 'ActivitiesJiraIssue';
    issueKey?: Maybe<Scalars['String']>;
};
export declare type ActivitiesObject = Node & {
    __typename?: 'ActivitiesObject';
    id: Scalars['ID'];
    localResourceId?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    type?: Maybe<ActivityObjectType>;
    product?: Maybe<ActivityProduct>;
    cloudId?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    iconUrl?: Maybe<Scalars['URL']>;
    containers?: Maybe<Array<ActivitiesContainer>>;
    contributors?: Maybe<Array<ActivitiesContributor>>;
    parent?: Maybe<ActivitiesObjectParent>;
    events?: Maybe<Array<ActivitiesEvent>>;
    extension?: Maybe<ActivitiesObjectExtension>;
};
export declare type ActivitiesObjectEventsArgs = {
    first?: Maybe<Scalars['Int']>;
};
export declare type ActivitiesObjectExtension = ActivitiesJiraIssue;
export declare type ActivitiesObjectParent = {
    __typename?: 'ActivitiesObjectParent';
    id: Scalars['ID'];
    type?: Maybe<ActivityObjectType>;
};
export declare enum ActivitiesObjectType {
    Issue = "ISSUE",
    Page = "PAGE",
    Blogpost = "BLOGPOST",
    Whiteboard = "WHITEBOARD",
    Project = "PROJECT",
    Goal = "GOAL"
}
export declare type ActivitiesTransitionedEvent = {
    __typename?: 'ActivitiesTransitionedEvent';
    from?: Maybe<Scalars['String']>;
    to?: Maybe<Scalars['String']>;
};
export declare type ActivitiesUser = {
    __typename?: 'ActivitiesUser';
    profile?: Maybe<User>;
};
export declare type Activity = {
    __typename?: 'Activity';
    all: ActivityConnection;
    workedOn: ActivityConnection;
    myActivity?: Maybe<MyActivity>;
};
export declare type ActivityAllArgs = {
    filter?: Maybe<ActivityFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ActivityWorkedOnArgs = {
    filter?: Maybe<ActivityFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ActivityConnection = {
    __typename?: 'ActivityConnection';
    edges: Array<ActivityItemEdge>;
    pageInfo: ActivityPageInfo;
};
export declare type ActivityContributor = {
    __typename?: 'ActivityContributor';
    profile?: Maybe<User>;
    lastAccessedDate: Scalars['DateTime'];
    count?: Maybe<Scalars['Int']>;
};
export declare type ActivityEdge = {
    __typename?: 'ActivityEdge';
    cursor: Scalars['String'];
    node?: Maybe<ActivitiesItem>;
};
export declare type ActivityEvent = {
    __typename?: 'ActivityEvent';
    id: Scalars['ID'];
    timestamp: Scalars['DateTime'];
    eventType: Scalars['String'];
    actor?: Maybe<User>;
    extension?: Maybe<ActivitiesEventExtension>;
};
export declare enum ActivityEventType {
    Assigned = "ASSIGNED",
    Unassigned = "UNASSIGNED",
    Viewed = "VIEWED",
    Commented = "COMMENTED",
    Updated = "UPDATED",
    Created = "CREATED",
    Liked = "LIKED",
    Transitioned = "TRANSITIONED",
    Published = "PUBLISHED",
    Edited = "EDITED"
}
export declare type ActivityFilter = {
    actors?: Maybe<Array<Scalars['ID']>>;
    rootContainerIds?: Maybe<Array<Scalars['ID']>>;
    type?: Maybe<ActivitiesFilterType>;
    arguments?: Maybe<ActivityFilterArgs>;
};
export declare type ActivityFilterArgs = {
    products?: Maybe<Array<Scalars['String']>>;
    eventTypes?: Maybe<Array<Scalars['String']>>;
    objectTypes?: Maybe<Array<Scalars['String']>>;
    containerIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type ActivityItemEdge = {
    __typename?: 'ActivityItemEdge';
    cursor: Scalars['String'];
    node: ActivityNode;
};
export declare type ActivityNode = Node & {
    __typename?: 'ActivityNode';
    id: Scalars['ID'];
    object: ActivityObject;
    event: ActivityEvent;
};
export declare type ActivityObject = {
    __typename?: 'ActivityObject';
    id: Scalars['ID'];
    rootContainerId: Scalars['ID'];
    type: Scalars['String'];
    product: Scalars['String'];
    subProduct?: Maybe<Scalars['String']>;
    contributors?: Maybe<Array<ActivityContributor>>;
    data?: Maybe<ActivityObjectData>;
};
export declare type ActivityObjectData = TownsquareProject | TownsquareGoal | TownsquareComment | ConfluencePage | ConfluenceBlogPost | ConfluenceFooterComment | ConfluenceInlineComment | JiraIssue | JiraPlatformComment | JiraServiceManagementComment | TrelloBoard | TrelloCard;
export declare enum ActivityObjectType {
    Site = "SITE",
    Project = "PROJECT",
    Issue = "ISSUE",
    Comment = "COMMENT",
    Space = "SPACE",
    Page = "PAGE",
    Blogpost = "BLOGPOST",
    Whiteboard = "WHITEBOARD",
    Task = "TASK",
    Goal = "GOAL"
}
export declare type ActivityPageInfo = {
    __typename?: 'ActivityPageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
};
export declare enum ActivityProduct {
    Jira = "JIRA",
    JiraBusiness = "JIRA_BUSINESS",
    JiraSoftware = "JIRA_SOFTWARE",
    JiraOps = "JIRA_OPS",
    JiraServiceDesk = "JIRA_SERVICE_DESK",
    Confluence = "CONFLUENCE",
    Townsquare = "TOWNSQUARE"
}
export declare type ActivityTransition = {
    from?: Maybe<Scalars['String']>;
    to?: Maybe<Scalars['String']>;
};
export declare type ActivityUser = {
    __typename?: 'ActivityUser';
    accountId: Scalars['ID'];
};
export declare type AddAppContributorInput = {
    appId: Scalars['ID'];
    newContributorEmail: Scalars['String'];
    role: AppContributorRole;
};
export declare type AddAppContributorResponsePayload = Payload & {
    __typename?: 'AddAppContributorResponsePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AddBetaUserAsSiteCreatorInput = {
    cloudID: Scalars['String'];
};
export declare type AddBetaUserAsSiteCreatorPayload = Payload & {
    __typename?: 'AddBetaUserAsSiteCreatorPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AddCompassComponentLabelsInput = {
    componentId: Scalars['ID'];
    labelNames: Array<Scalars['String']>;
};
export declare type AddCompassComponentLabelsPayload = Payload & {
    __typename?: 'AddCompassComponentLabelsPayload';
    addedLabels?: Maybe<Array<CompassComponentLabel>>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type AddPolarisColumnInput = {
    before?: Maybe<Scalars['ID']>;
    field: Scalars['ID'];
    format?: Maybe<Scalars['String']>;
    width?: Maybe<Scalars['Int']>;
    heading?: Maybe<Scalars['String']>;
};
export declare type Admin = JiraUser | JiraUserGroup;
export declare enum ApiContext {
    Devops = "DEVOPS"
}
export declare enum ApiGroup {
    Compass = "COMPASS",
    Confluence = "CONFLUENCE",
    Jira = "JIRA",
    Forge = "FORGE",
    Polaris = "POLARIS",
    Caas = "CAAS",
    XenLogsApi = "XEN_LOGS_API",
    DevopsService = "DEVOPS_SERVICE",
    DevopsContainerRelationship = "DEVOPS_CONTAINER_RELATIONSHIP",
    Teams = "TEAMS",
    ContentPlatformApi = "CONTENT_PLATFORM_API",
    Identity = "IDENTITY",
    DevopsAriGraph = "DEVOPS_ARI_GRAPH",
    Help = "HELP",
    VirtualAgent = "VIRTUAL_AGENT",
    CollaborationGraph = "COLLABORATION_GRAPH",
    DevopsThirdParty = "DEVOPS_THIRD_PARTY",
    DevopsToolchain = "DEVOPS_TOOLCHAIN",
    CloudAdmin = "CLOUD_ADMIN",
    CustomerService = "CUSTOMER_SERVICE",
    SurfacePlatform = "SURFACE_PLATFORM",
    AppRecommendations = "APP_RECOMMENDATIONS"
}
export declare type App = {
    __typename?: 'App';
    id: Scalars['ID'];
    name: Scalars['String'];
    description: Scalars['String'];
    distributionStatus: Scalars['String'];
    avatarFileId?: Maybe<Scalars['String']>;
    createdBy?: Maybe<User>;
    storesPersonalData: Scalars['Boolean'];
    privacyPolicy?: Maybe<Scalars['String']>;
    termsOfService?: Maybe<Scalars['String']>;
    contactLink?: Maybe<Scalars['String']>;
    vendorName?: Maybe<Scalars['String']>;
    environments: Array<AppEnvironment>;
    environmentByKey?: Maybe<AppEnvironment>;
    tags?: Maybe<Array<Scalars['String']>>;
    ensureCollaborator: Scalars['Boolean'];
    marketplaceApp?: Maybe<MarketplaceApp>;
};
export declare type AppEnvironmentByKeyArgs = {
    key: Scalars['String'];
};
export declare type AppAdminQuery = {
    __typename?: 'AppAdminQuery';
    appId: Scalars['ID'];
    getQuotaInfo?: Maybe<Array<QuotaInfo>>;
    listStorage?: Maybe<AppStoredEntityConnection>;
};
export declare type AppAdminQueryGetQuotaInfoArgs = {
    contextAri: Scalars['ID'];
    environmentId: Scalars['ID'];
};
export declare type AppAdminQueryListStorageArgs = {
    input: ListStorageInput;
};
export declare type AppAuditConnection = {
    __typename?: 'AppAuditConnection';
    edges?: Maybe<Array<Maybe<AuditEventEdge>>>;
    nodes?: Maybe<Array<Maybe<AuditEvent>>>;
    pageInfo?: Maybe<AuditsPageInfo>;
};
export declare type AppConnection = {
    __typename?: 'AppConnection';
    edges?: Maybe<Array<Maybe<AppEdge>>>;
    nodes?: Maybe<Array<Maybe<App>>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type AppContributor = {
    __typename?: 'AppContributor';
    accountId: Scalars['String'];
    publicName: Scalars['String'];
    email?: Maybe<Scalars['String']>;
    status: Scalars['String'];
    isOwner?: Maybe<Scalars['Boolean']>;
    avatarUrl?: Maybe<Scalars['String']>;
};
export declare enum AppContributorRole {
    Admin = "ADMIN"
}
export declare type AppDeployment = {
    __typename?: 'AppDeployment';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    status: AppDeploymentStatus;
    errorDetails?: Maybe<ErrorDetails>;
    createdBy?: Maybe<User>;
    createdAt: Scalars['String'];
    stages?: Maybe<Array<AppDeploymentStage>>;
};
export declare type AppDeploymentEvent = {
    createdAt: Scalars['String'];
    stepName: Scalars['String'];
};
export declare enum AppDeploymentEventLogLevel {
    Info = "INFO",
    Warning = "WARNING",
    Error = "ERROR"
}
export declare type AppDeploymentLogEvent = AppDeploymentEvent & {
    __typename?: 'AppDeploymentLogEvent';
    stepName: Scalars['String'];
    message?: Maybe<Scalars['String']>;
    level?: Maybe<AppDeploymentEventLogLevel>;
    createdAt: Scalars['String'];
};
export declare type AppDeploymentSnapshotLogEvent = AppDeploymentEvent & {
    __typename?: 'AppDeploymentSnapshotLogEvent';
    stepName: Scalars['String'];
    message?: Maybe<Scalars['String']>;
    level?: Maybe<AppDeploymentEventLogLevel>;
    createdAt: Scalars['String'];
};
export declare type AppDeploymentStage = {
    __typename?: 'AppDeploymentStage';
    key: Scalars['String'];
    description: Scalars['String'];
    progress: AppDeploymentStageProgress;
    events?: Maybe<Array<AppDeploymentEvent>>;
};
export declare type AppDeploymentStageProgress = {
    __typename?: 'AppDeploymentStageProgress';
    totalSteps: Scalars['Int'];
    doneSteps: Scalars['Int'];
};
export declare enum AppDeploymentStatus {
    InProgress = "IN_PROGRESS",
    Done = "DONE",
    Failed = "FAILED"
}
export declare enum AppDeploymentStepStatus {
    Started = "STARTED",
    Done = "DONE",
    Failed = "FAILED"
}
export declare type AppDeploymentTransitionEvent = AppDeploymentEvent & {
    __typename?: 'AppDeploymentTransitionEvent';
    stepName: Scalars['String'];
    newStatus?: Maybe<AppDeploymentStepStatus>;
    createdAt: Scalars['String'];
};
export declare type AppEdge = {
    __typename?: 'AppEdge';
    cursor: Scalars['String'];
    node?: Maybe<App>;
};
export declare type AppEnvironment = {
    __typename?: 'AppEnvironment';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    key: Scalars['String'];
    type: AppEnvironmentType;
    createdBy?: Maybe<User>;
    createdAt: Scalars['String'];
    scopes?: Maybe<Array<Scalars['String']>>;
    versions?: Maybe<AppEnvironmentVersionConnection>;
    oauthClient: AtlassianOAuthClient;
    app?: Maybe<App>;
    variables?: Maybe<Array<AppEnvironmentVariable>>;
    installations?: Maybe<Array<AppInstallation>>;
    deployments?: Maybe<Array<AppDeployment>>;
};
export declare type AppEnvironmentVersionsArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    interval?: Maybe<IntervalFilter>;
};
export declare type AppEnvironmentInput = {
    appId: Scalars['ID'];
    key: Scalars['String'];
};
export declare enum AppEnvironmentType {
    Development = "DEVELOPMENT",
    Staging = "STAGING",
    Production = "PRODUCTION"
}
export declare type AppEnvironmentVariable = {
    __typename?: 'AppEnvironmentVariable';
    key: Scalars['String'];
    value?: Maybe<Scalars['String']>;
    encrypt: Scalars['Boolean'];
};
export declare type AppEnvironmentVariableInput = {
    key: Scalars['String'];
    value: Scalars['String'];
    encrypt?: Maybe<Scalars['Boolean']>;
};
export declare type AppEnvironmentVersion = {
    __typename?: 'AppEnvironmentVersion';
    id: Scalars['ID'];
    version: Scalars['String'];
    createdAt: Scalars['String'];
    updatedAt: Scalars['String'];
    isLatest: Scalars['Boolean'];
    requiresLicense: Scalars['Boolean'];
    permissions: Array<AppPermission>;
    migrationKeys?: Maybe<MigrationKeys>;
    storage: Storage;
};
export declare type AppEnvironmentVersionConnection = {
    __typename?: 'AppEnvironmentVersionConnection';
    edges?: Maybe<Array<Maybe<AppEnvironmentVersionEdge>>>;
    nodes?: Maybe<Array<Maybe<AppEnvironmentVersion>>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type AppEnvironmentVersionEdge = {
    __typename?: 'AppEnvironmentVersionEdge';
    cursor: Scalars['String'];
    node?: Maybe<AppEnvironmentVersion>;
};
export declare type AppHostService = {
    __typename?: 'AppHostService';
    serviceId: Scalars['ID'];
    name: Scalars['String'];
    description: Scalars['String'];
    scopes?: Maybe<Array<AppHostServiceScope>>;
};
export declare type AppHostServiceScope = {
    __typename?: 'AppHostServiceScope';
    key: Scalars['String'];
    name: Scalars['String'];
    description: Scalars['String'];
    service: AppHostService;
};
export declare type AppInstallation = {
    __typename?: 'AppInstallation';
    id: Scalars['ID'];
    installationContext: Scalars['ID'];
    createdAt: Scalars['DateTime'];
    createdBy?: Maybe<User>;
    version?: Maybe<AppVersion>;
    app?: Maybe<App>;
    appEnvironmentVersion?: Maybe<AppEnvironmentVersion>;
    appEnvironment?: Maybe<AppEnvironment>;
    license?: Maybe<AppInstallationLicense>;
};
export declare type AppInstallationByIndexConnection = {
    __typename?: 'AppInstallationByIndexConnection';
    edges?: Maybe<Array<Maybe<AppInstallationByIndexEdge>>>;
    nodes?: Maybe<Array<Maybe<AppInstallation>>>;
    pageInfo: AppInstallationPageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type AppInstallationByIndexEdge = {
    __typename?: 'AppInstallationByIndexEdge';
    cursor: Scalars['String'];
    node?: Maybe<AppInstallation>;
};
export declare type AppInstallationConnection = {
    __typename?: 'AppInstallationConnection';
    edges?: Maybe<Array<Maybe<AppInstallationEdge>>>;
    nodes?: Maybe<Array<Maybe<AppInstallation>>>;
    pageInfo: PageInfo;
};
export declare type AppInstallationContext = {
    __typename?: 'AppInstallationContext';
    id: Scalars['ID'];
};
export declare type AppInstallationCreationTask = AppInstallationTask & {
    __typename?: 'AppInstallationCreationTask';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    appEnvironmentId?: Maybe<Scalars['ID']>;
    appVersionId?: Maybe<Scalars['ID']>;
    context: Scalars['ID'];
    state: AppTaskState;
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppInstallationDeletionTask = AppInstallationTask & {
    __typename?: 'AppInstallationDeletionTask';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    appEnvironmentId?: Maybe<Scalars['ID']>;
    context: Scalars['ID'];
    state: AppTaskState;
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppInstallationEdge = {
    __typename?: 'AppInstallationEdge';
    cursor: Scalars['String'];
    node?: Maybe<AppInstallation>;
};
export declare type AppInstallationInput = {
    installationContext: Scalars['ID'];
    appId: Scalars['ID'];
    versionId?: Maybe<Scalars['ID']>;
    environmentKey: Scalars['String'];
    async?: Maybe<Scalars['Boolean']>;
    licenseOverride?: Maybe<LicenseOverrideState>;
    provisionRequestId?: Maybe<Scalars['ID']>;
};
export declare type AppInstallationLicense = {
    __typename?: 'AppInstallationLicense';
    active: Scalars['Boolean'];
    type?: Maybe<Scalars['String']>;
    supportEntitlementNumber?: Maybe<Scalars['String']>;
    trialEndDate?: Maybe<Scalars['DateTime']>;
    subscriptionEndDate?: Maybe<Scalars['DateTime']>;
    isEvaluation?: Maybe<Scalars['Boolean']>;
    billingPeriod?: Maybe<Scalars['String']>;
    ccpEntitlementId?: Maybe<Scalars['String']>;
    ccpEntitlementSlug?: Maybe<Scalars['String']>;
};
export declare type AppInstallationPageInfo = {
    __typename?: 'AppInstallationPageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
    startCursor?: Maybe<Scalars['String']>;
    endCursor?: Maybe<Scalars['String']>;
};
export declare type AppInstallationResponse = Payload & {
    __typename?: 'AppInstallationResponse';
    installationId?: Maybe<Scalars['ID']>;
    taskId?: Maybe<Scalars['ID']>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppInstallationSubscribeTask = AppInstallationTask & {
    __typename?: 'AppInstallationSubscribeTask';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    appEnvironmentId?: Maybe<Scalars['ID']>;
    context: Scalars['ID'];
    state: AppTaskState;
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppInstallationTask = {
    id: Scalars['ID'];
    appId: Scalars['ID'];
    appEnvironmentId?: Maybe<Scalars['ID']>;
    state: AppTaskState;
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppInstallationUnsubscribeTask = AppInstallationTask & {
    __typename?: 'AppInstallationUnsubscribeTask';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    appEnvironmentId?: Maybe<Scalars['ID']>;
    context: Scalars['ID'];
    state: AppTaskState;
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppInstallationUpgradeInput = {
    installationContext: Scalars['ID'];
    appId: Scalars['ID'];
    versionId?: Maybe<Scalars['ID']>;
    environmentKey: Scalars['String'];
    async?: Maybe<Scalars['Boolean']>;
    sourceBillingType?: Maybe<SourceBillingType>;
};
export declare type AppInstallationUpgradeResponse = Payload & {
    __typename?: 'AppInstallationUpgradeResponse';
    installationId?: Maybe<Scalars['ID']>;
    taskId?: Maybe<Scalars['ID']>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppInstallationUpgradeTask = AppInstallationTask & {
    __typename?: 'AppInstallationUpgradeTask';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    appEnvironmentId?: Maybe<Scalars['ID']>;
    appVersionId?: Maybe<Scalars['ID']>;
    context: Scalars['ID'];
    state: AppTaskState;
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppInstallationsByAppFilter = {
    apps: InstallationsListFilterByApps;
    appEnvironments?: Maybe<InstallationsListFilterByAppEnvironments>;
    appInstallations?: Maybe<InstallationsListFilterByAppInstallations>;
    includeSystemApps?: Maybe<Scalars['Boolean']>;
};
export declare type AppInstallationsByContextFilter = {
    appInstallations: InstallationsListFilterByAppInstallationsWithCompulsoryContexts;
    apps?: Maybe<InstallationsListFilterByApps>;
};
export declare type AppInstallationsFilter = {
    appId: Scalars['ID'];
    environmentType?: Maybe<AppEnvironmentType>;
};
export declare type AppLog = FunctionInvocationMetadata & Node & {
    __typename?: 'AppLog';
    id: Scalars['ID'];
    appVersion: Scalars['String'];
    installationContext?: Maybe<AppInstallationContext>;
    function?: Maybe<FunctionDescription>;
    trigger?: Maybe<FunctionTrigger>;
    moduleType?: Maybe<Scalars['String']>;
    startTime?: Maybe<Scalars['String']>;
    traceId?: Maybe<Scalars['ID']>;
    appLogLines?: Maybe<AppLogLines>;
};
export declare type AppLogAppLogLinesArgs = {
    first?: Maybe<Scalars['Int']>;
};
export declare type AppLogConnection = {
    __typename?: 'AppLogConnection';
    edges?: Maybe<Array<Maybe<AppLogEdge>>>;
    nodes?: Maybe<Array<Maybe<AppLog>>>;
    pageInfo: PageInfo;
};
export declare type AppLogEdge = {
    __typename?: 'AppLogEdge';
    node: AppLog;
    cursor: Scalars['String'];
};
export declare type AppLogLine = {
    __typename?: 'AppLogLine';
    timestamp: Scalars['String'];
    level?: Maybe<Scalars['String']>;
    message?: Maybe<Scalars['String']>;
    other?: Maybe<Scalars['JSON']>;
};
export declare type AppLogLineConnection = {
    __typename?: 'AppLogLineConnection';
    edges?: Maybe<Array<Maybe<AppLogLineEdge>>>;
    nodes?: Maybe<Array<Maybe<AppLogLine>>>;
    pageInfo: PageInfo;
    metadata: FunctionInvocationMetadata;
};
export declare type AppLogLineEdge = {
    __typename?: 'AppLogLineEdge';
    node: AppLogLine;
    cursor: Scalars['String'];
};
export declare type AppLogLines = {
    __typename?: 'AppLogLines';
    edges?: Maybe<Array<Maybe<AppLogLineEdge>>>;
    nodes?: Maybe<Array<Maybe<AppLogLine>>>;
    pageInfo: PageInfo;
};
export declare type AppNetworkEgressPermission = {
    __typename?: 'AppNetworkEgressPermission';
    type?: Maybe<AppNetworkPermissionType>;
    addresses?: Maybe<Array<Scalars['String']>>;
};
export declare type AppNetworkEgressPermissionExtension = {
    __typename?: 'AppNetworkEgressPermissionExtension';
    type?: Maybe<AppNetworkPermissionTypeExtension>;
    addresses?: Maybe<Array<Scalars['String']>>;
};
export declare enum AppNetworkPermissionType {
    Navigation = "NAVIGATION",
    Images = "IMAGES",
    Media = "MEDIA",
    Scripts = "SCRIPTS",
    Styles = "STYLES",
    FetchBackendSide = "FETCH_BACKEND_SIDE",
    FetchClientSide = "FETCH_CLIENT_SIDE",
    Fonts = "FONTS",
    Frames = "FRAMES"
}
export declare enum AppNetworkPermissionTypeExtension {
    Navigation = "NAVIGATION",
    Images = "IMAGES",
    Media = "MEDIA",
    Scripts = "SCRIPTS",
    Styles = "STYLES",
    FetchBackendSide = "FETCH_BACKEND_SIDE",
    FetchClientSide = "FETCH_CLIENT_SIDE",
    Fonts = "FONTS",
    Frames = "FRAMES"
}
export declare type AppPermission = {
    __typename?: 'AppPermission';
    scopes: Array<AppHostServiceScope>;
    egress?: Maybe<Array<AppNetworkEgressPermission>>;
    securityPolicies?: Maybe<Array<AppSecurityPoliciesPermission>>;
};
export declare type AppPrincipal = {
    __typename?: 'AppPrincipal';
    id?: Maybe<Scalars['ID']>;
};
export declare type AppRecContext = {
    userId?: Maybe<Scalars['ID']>;
    tenantId?: Maybe<Scalars['ID']>;
    product?: Maybe<Scalars['String']>;
    subproduct?: Maybe<Scalars['String']>;
    containers?: Maybe<Scalars['JSON']>;
    locale?: Maybe<Scalars['String']>;
    sessionId?: Maybe<Scalars['ID']>;
};
export declare type AppRecDismissRecommendationInput = {
    productId: Scalars['ID'];
    context?: Maybe<AppRecContext>;
};
export declare type AppRecDismissRecommendationPayload = Payload & {
    __typename?: 'AppRecDismissRecommendationPayload';
    dismissal?: Maybe<AppRecDismissal>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type AppRecDismissal = {
    __typename?: 'AppRecDismissal';
    dismissedAt: Scalars['String'];
    productId: Scalars['ID'];
};
export declare type AppRecMutation = {
    __typename?: 'AppRecMutation';
    dismissRecommendation?: Maybe<AppRecDismissRecommendationPayload>;
    undoDismissal?: Maybe<AppRecUndoDismissalPayload>;
};
export declare type AppRecMutationDismissRecommendationArgs = {
    input: AppRecDismissRecommendationInput;
};
export declare type AppRecMutationUndoDismissalArgs = {
    input: AppRecUndoDismissalInput;
};
export declare type AppRecQuery = {
    __typename?: 'AppRecQuery';
    recommendations?: Maybe<Array<AppRecRecommendationResult>>;
};
export declare type AppRecQueryRecommendationsArgs = {
    context?: Maybe<AppRecContext>;
    first?: Maybe<Scalars['Int']>;
};
export declare type AppRecRecommendation = {
    __typename?: 'AppRecRecommendation';
    productId: Scalars['ID'];
    reasons?: Maybe<Array<Scalars['String']>>;
};
export declare type AppRecRecommendationResult = QueryError | AppRecRecommendation;
export declare type AppRecUndoDismissalInput = {
    productId: Scalars['ID'];
    context: AppRecContext;
};
export declare type AppRecUndoDismissalPayload = Payload & {
    __typename?: 'AppRecUndoDismissalPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    result?: Maybe<AppRecUndoDismissalResult>;
};
export declare type AppRecUndoDismissalResult = {
    __typename?: 'AppRecUndoDismissalResult';
    undone: Scalars['Boolean'];
    description: Scalars['String'];
};
export declare type AppSecurityPoliciesPermission = {
    __typename?: 'AppSecurityPoliciesPermission';
    type?: Maybe<AppSecurityPoliciesPermissionType>;
    policies?: Maybe<Array<Scalars['String']>>;
};
export declare type AppSecurityPoliciesPermissionExtension = {
    __typename?: 'AppSecurityPoliciesPermissionExtension';
    type?: Maybe<AppSecurityPoliciesPermissionTypeExtension>;
    policies?: Maybe<Array<Scalars['String']>>;
};
export declare enum AppSecurityPoliciesPermissionType {
    Scripts = "SCRIPTS",
    Styles = "STYLES"
}
export declare enum AppSecurityPoliciesPermissionTypeExtension {
    Scripts = "SCRIPTS",
    Styles = "STYLES"
}
export declare type AppServicesFilter = {
    name: Scalars['String'];
};
export declare type AppStorageCustomEntityMutation = {
    __typename?: 'AppStorageCustomEntityMutation';
    setAppStoredCustomEntity?: Maybe<SetAppStoredCustomEntityPayload>;
    deleteAppStoredCustomEntity?: Maybe<DeleteAppStoredCustomEntityPayload>;
};
export declare type AppStorageCustomEntityMutationSetAppStoredCustomEntityArgs = {
    input: SetAppStoredCustomEntityMutationInput;
};
export declare type AppStorageCustomEntityMutationDeleteAppStoredCustomEntityArgs = {
    input: DeleteAppStoredCustomEntityMutationInput;
};
export declare type AppStorageMutation = {
    __typename?: 'AppStorageMutation';
    setAppStoredEntity?: Maybe<SetAppStoredEntityPayload>;
    deleteAppStoredEntity?: Maybe<DeleteAppStoredEntityPayload>;
};
export declare type AppStorageMutationSetAppStoredEntityArgs = {
    input: SetAppStoredEntityMutationInput;
};
export declare type AppStorageMutationDeleteAppStoredEntityArgs = {
    input: DeleteAppStoredEntityMutationInput;
};
export declare type AppStoredCustomEntity = {
    __typename?: 'AppStoredCustomEntity';
    value?: Maybe<Scalars['JSON']>;
    key: Scalars['ID'];
    entityName: Scalars['String'];
};
export declare type AppStoredCustomEntityConnection = {
    __typename?: 'AppStoredCustomEntityConnection';
    edges?: Maybe<Array<Maybe<AppStoredCustomEntityEdge>>>;
    nodes?: Maybe<Array<Maybe<AppStoredEntity>>>;
    pageInfo?: Maybe<AppStoredEntityPageInfo>;
    totalCount?: Maybe<Scalars['Int']>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type AppStoredCustomEntityEdge = {
    __typename?: 'AppStoredCustomEntityEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<AppStoredEntity>;
};
export declare type AppStoredCustomEntityFilter = {
    property: Scalars['String'];
    condition: AppStoredCustomEntityFilterCondition;
    values: Array<Scalars['AppStoredCustomEntityFieldValue']>;
};
export declare enum AppStoredCustomEntityFilterCondition {
    BeginsWith = "BEGINS_WITH",
    Between = "BETWEEN",
    Contains = "CONTAINS",
    NotContains = "NOT_CONTAINS",
    Exists = "EXISTS",
    NotExists = "NOT_EXISTS",
    EqualTo = "EQUAL_TO",
    NotEqualTo = "NOT_EQUAL_TO",
    GreaterThanEqualTo = "GREATER_THAN_EQUAL_TO",
    GreaterThan = "GREATER_THAN",
    LessThanEqualTo = "LESS_THAN_EQUAL_TO",
    LessThan = "LESS_THAN"
}
export declare type AppStoredCustomEntityFilters = {
    or?: Maybe<Array<AppStoredCustomEntityFilter>>;
    and?: Maybe<Array<AppStoredCustomEntityFilter>>;
};
export declare type AppStoredCustomEntityRange = {
    condition: AppStoredCustomEntityRangeCondition;
    values: Array<Scalars['AppStoredCustomEntityFieldValue']>;
};
export declare enum AppStoredCustomEntityRangeCondition {
    BeginsWith = "BEGINS_WITH",
    Between = "BETWEEN",
    GreaterThanEqualTo = "GREATER_THAN_EQUAL_TO",
    GreaterThan = "GREATER_THAN",
    LessThanEqualTo = "LESS_THAN_EQUAL_TO",
    LessThan = "LESS_THAN",
    EqualTo = "EQUAL_TO"
}
export declare type AppStoredEntity = {
    __typename?: 'AppStoredEntity';
    value?: Maybe<Scalars['JSON']>;
    key: Scalars['ID'];
};
export declare enum AppStoredEntityCondition {
    StartsWith = "STARTS_WITH",
    NotEqualTo = "NOT_EQUAL_TO",
    In = "IN"
}
export declare type AppStoredEntityConnection = {
    __typename?: 'AppStoredEntityConnection';
    edges?: Maybe<Array<Maybe<AppStoredEntityEdge>>>;
    nodes?: Maybe<Array<Maybe<AppStoredEntity>>>;
    pageInfo?: Maybe<AppStoredEntityPageInfo>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type AppStoredEntityEdge = {
    __typename?: 'AppStoredEntityEdge';
    cursor: Scalars['String'];
    node?: Maybe<AppStoredEntity>;
};
export declare type AppStoredEntityFilter = {
    field: Scalars['String'];
    condition: AppStoredEntityCondition;
    value: Scalars['AppStoredEntityFieldValue'];
};
export declare type AppStoredEntityPageInfo = {
    __typename?: 'AppStoredEntityPageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
};
export declare type AppSubscribeInput = {
    installationContext: Scalars['ID'];
    appId: Scalars['ID'];
    envKey: Scalars['String'];
};
export declare type AppSubscribePayload = Payload & {
    __typename?: 'AppSubscribePayload';
    taskId?: Maybe<Scalars['ID']>;
    installation?: Maybe<AppInstallation>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare enum AppTaskState {
    Pending = "PENDING",
    Running = "RUNNING",
    Complete = "COMPLETE",
    Failed = "FAILED"
}
export declare enum AppTrustInformationState {
    Draft = "DRAFT",
    Live = "LIVE"
}
export declare type AppTunnelDefinitions = {
    __typename?: 'AppTunnelDefinitions';
    faasTunnelUrl?: Maybe<Scalars['URL']>;
    customUI?: Maybe<Array<Maybe<CustomUiTunnelDefinition>>>;
};
export declare type AppUninstallationInput = {
    installationContext?: Maybe<Scalars['ID']>;
    installationId?: Maybe<Scalars['ID']>;
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    async?: Maybe<Scalars['Boolean']>;
    licenseOverride?: Maybe<LicenseOverrideState>;
    sourceBillingType?: Maybe<SourceBillingType>;
};
export declare type AppUninstallationResponse = Payload & {
    __typename?: 'AppUninstallationResponse';
    taskId?: Maybe<Scalars['ID']>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppUnsubscribeInput = {
    installationContext: Scalars['ID'];
    appId: Scalars['ID'];
    envKey: Scalars['String'];
};
export declare type AppUnsubscribePayload = Payload & {
    __typename?: 'AppUnsubscribePayload';
    taskId?: Maybe<Scalars['ID']>;
    installation?: Maybe<AppInstallation>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppUser = User & {
    __typename?: 'AppUser';
    id: Scalars['ID'];
    accountId: Scalars['ID'];
    canonicalAccountId: Scalars['ID'];
    accountStatus: AccountStatus;
    name: Scalars['String'];
    picture: Scalars['URL'];
};
export declare type AppVersion = {
    __typename?: 'AppVersion';
    isLatest: Scalars['Boolean'];
};
export declare type ApplyCompassScorecardToComponentPayload = Payload & {
    __typename?: 'ApplyCompassScorecardToComponentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type ApplyPolarisProjectTemplateInput = {
    project: Scalars['ID'];
    ideaType: Scalars['ID'];
    template: Scalars['ID'];
};
export declare type ApplyPolarisProjectTemplatePayload = Payload & {
    __typename?: 'ApplyPolarisProjectTemplatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AppsFilter = {
    isPublishable?: Maybe<Scalars['Boolean']>;
    migrationKey?: Maybe<Scalars['String']>;
};
export declare type AquaIssueContext = {
    __typename?: 'AquaIssueContext';
    commentId?: Maybe<Scalars['Long']>;
    issueId?: Maybe<Scalars['Long']>;
};
export declare type AquaNotificationDetails = {
    __typename?: 'AquaNotificationDetails';
    errorKey?: Maybe<Scalars['String']>;
    mailboxMessage?: Maybe<Scalars['String']>;
};
export declare type AquaOutgoingEmailLog = Node & {
    __typename?: 'AquaOutgoingEmailLog';
    id: Scalars['ID'];
    logs?: Maybe<AquaOutgoingEmailLogConnection>;
};
export declare type AquaOutgoingEmailLogLogsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
};
export declare type AquaOutgoingEmailLogConnection = {
    __typename?: 'AquaOutgoingEmailLogConnection';
    edges?: Maybe<Array<Maybe<AquaOutgoingEmailLogItemEdge>>>;
    pageInfo: PageInfo;
};
export declare type AquaOutgoingEmailLogItem = {
    __typename?: 'AquaOutgoingEmailLogItem';
    actionTimestamp: Scalars['DateTime'];
    author?: Maybe<User>;
    issueContext?: Maybe<AquaIssueContext>;
    notificationDetails?: Maybe<AquaNotificationDetails>;
    notificationActionType?: Maybe<Scalars['String']>;
    notificationType?: Maybe<Scalars['String']>;
    projectContext?: Maybe<AquaProjectContext>;
    recipient?: Maybe<User>;
};
export declare type AquaOutgoingEmailLogItemEdge = {
    __typename?: 'AquaOutgoingEmailLogItemEdge';
    cursor: Scalars['String'];
    node?: Maybe<AquaOutgoingEmailLogItem>;
};
export declare type AquaOutgoingEmailLogsQueryApi = {
    __typename?: 'AquaOutgoingEmailLogsQueryApi';
    GetNotificationLogs?: Maybe<AquaOutgoingEmailLogsQueryResult>;
};
export declare type AquaOutgoingEmailLogsQueryApiGetNotificationLogsArgs = {
    fromTimestamp?: Maybe<Scalars['DateTime']>;
    notificationActionType?: Maybe<Scalars['String']>;
    notificationType?: Maybe<Scalars['String']>;
    projectId?: Maybe<Scalars['Long']>;
    toTimestamp?: Maybe<Scalars['DateTime']>;
};
export declare type AquaOutgoingEmailLogsQueryResult = AquaOutgoingEmailLog | QueryError;
export declare type AquaProjectContext = {
    __typename?: 'AquaProjectContext';
    id?: Maybe<Scalars['Long']>;
};
export declare type ArchivePolarisInsightsPayload = Payload & {
    __typename?: 'ArchivePolarisInsightsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AriGraph = {
    __typename?: 'AriGraph';
    hasRelationship?: Maybe<Scalars['Boolean']>;
    relationship?: Maybe<AriGraphRelationship>;
    relationships?: Maybe<AriGraphRelationshipConnection>;
};
export declare type AriGraphHasRelationshipArgs = {
    from?: Maybe<Scalars['ID']>;
    type: Scalars['ID'];
    to?: Maybe<Scalars['ID']>;
};
export declare type AriGraphRelationshipArgs = {
    from: Scalars['ID'];
    type: Scalars['ID'];
    to: Scalars['ID'];
};
export declare type AriGraphRelationshipsArgs = {
    type?: Maybe<Scalars['String']>;
    from?: Maybe<Scalars['ID']>;
    to?: Maybe<Scalars['ID']>;
    filter?: Maybe<AriGraphRelationshipsFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    sort?: Maybe<AriGraphRelationshipsSort>;
};
export declare type AriGraphCreateRelationshipsInput = {
    relationships: Array<AriGraphCreateRelationshipsInputRelationship>;
};
export declare type AriGraphCreateRelationshipsInputRelationship = {
    from: Scalars['ID'];
    to: Scalars['ID'];
    type: Scalars['ID'];
    sequenceNumber?: Maybe<Scalars['Long']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
};
export declare type AriGraphCreateRelationshipsPayload = Payload & {
    __typename?: 'AriGraphCreateRelationshipsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    createdRelationships?: Maybe<Array<AriGraphRelationship>>;
};
export declare type AriGraphDeleteRelationshipsInput = {
    from?: Maybe<Scalars['ID']>;
    to?: Maybe<Scalars['ID']>;
    type?: Maybe<Scalars['ID']>;
};
export declare type AriGraphDeleteRelationshipsPayload = Payload & {
    __typename?: 'AriGraphDeleteRelationshipsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AriGraphMutation = {
    __typename?: 'AriGraphMutation';
    createRelationships?: Maybe<AriGraphCreateRelationshipsPayload>;
    replaceRelationships?: Maybe<AriGraphReplaceRelationshipsPayload>;
    deleteRelationships?: Maybe<AriGraphDeleteRelationshipsPayload>;
};
export declare type AriGraphMutationCreateRelationshipsArgs = {
    input: AriGraphCreateRelationshipsInput;
};
export declare type AriGraphMutationReplaceRelationshipsArgs = {
    input: AriGraphReplaceRelationshipsInput;
};
export declare type AriGraphMutationDeleteRelationshipsArgs = {
    input: AriGraphDeleteRelationshipsInput;
};
export declare type AriGraphRelationship = {
    __typename?: 'AriGraphRelationship';
    from: AriGraphRelationshipNode;
    type: Scalars['ID'];
    to: AriGraphRelationshipNode;
    lastUpdated: Scalars['DateTime'];
};
export declare type AriGraphRelationshipConnection = {
    __typename?: 'AriGraphRelationshipConnection';
    nodes?: Maybe<Array<Maybe<AriGraphRelationship>>>;
    edges?: Maybe<Array<Maybe<AriGraphRelationshipEdge>>>;
    pageInfo: PageInfo;
};
export declare type AriGraphRelationshipEdge = {
    __typename?: 'AriGraphRelationshipEdge';
    cursor: Scalars['String'];
    node: AriGraphRelationship;
};
export declare type AriGraphRelationshipNode = {
    __typename?: 'AriGraphRelationshipNode';
    id: Scalars['ID'];
    data?: Maybe<AriGraphRelationshipNodeData>;
};
export declare type AriGraphRelationshipNodeData = DeploymentSummary | ConfluencePage | ConfluenceSpace | ThirdPartySecurityWorkspace | ThirdPartySecurityContainer | DevOpsDocument | DevOpsFeatureFlag | DevOpsPullRequestDetails | DevOpsSecurityVulnerabilityDetails | JiraIssue | JiraProject | JiraVersion | OpsgenieTeam | TownsquareGoal | TownsquareProject | TownsquareComment;
export declare type AriGraphRelationshipsErrorReference = {
    __typename?: 'AriGraphRelationshipsErrorReference';
    from?: Maybe<Scalars['ID']>;
    to?: Maybe<Scalars['ID']>;
    type: Scalars['ID'];
};
export declare type AriGraphRelationshipsFilter = {
    type?: Maybe<Scalars['ID']>;
    from?: Maybe<Scalars['ID']>;
    to?: Maybe<Scalars['ID']>;
    updatedFrom?: Maybe<Scalars['DateTime']>;
    updatedTo?: Maybe<Scalars['DateTime']>;
};
export declare type AriGraphRelationshipsMutationErrorExtension = MutationErrorExtension & {
    __typename?: 'AriGraphRelationshipsMutationErrorExtension';
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
    reference: AriGraphRelationshipsErrorReference;
};
export declare type AriGraphRelationshipsSort = {
    lastUpdatedSortDirection?: Maybe<AriGraphRelationshipsSortDirection>;
};
export declare enum AriGraphRelationshipsSortDirection {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type AriGraphReplaceRelationshipsInput = {
    type: Scalars['ID'];
    sequenceNumber?: Maybe<Scalars['Long']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    relationships: Array<AriGraphReplaceRelationshipsInputRelationship>;
};
export declare type AriGraphReplaceRelationshipsInputRelationship = {
    from: Scalars['ID'];
    to: Scalars['ID'];
};
export declare type AriGraphReplaceRelationshipsPayload = Payload & {
    __typename?: 'AriGraphReplaceRelationshipsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AriGraphSubscriptions = {
    __typename?: 'AriGraphSubscriptions';
    onPullRequestCreatedOrUpdatedForProject?: Maybe<AriGraphRelationshipConnection>;
};
export declare type AriGraphSubscriptionsOnPullRequestCreatedOrUpdatedForProjectArgs = {
    projectId: Scalars['ID'];
    type?: Scalars['String'];
};
export declare type ArjConfiguration = {
    __typename?: 'ArjConfiguration';
    parentCustomFieldId?: Maybe<Scalars['String']>;
    epicLinkCustomFieldId?: Maybe<Scalars['String']>;
};
export declare type ArjHierarchyConfigurationLevel = {
    __typename?: 'ArjHierarchyConfigurationLevel';
    issueTypes?: Maybe<Array<Scalars['String']>>;
    title: Scalars['String'];
};
export declare type AssignIssueParentInput = {
    boardId: Scalars['ID'];
    issueIds: Array<Scalars['ID']>;
    issueParentId: Scalars['ID'];
};
export declare type AssignIssueParentOutput = MutationResponse & {
    __typename?: 'AssignIssueParentOutput';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type AtlassianAccountUser = User & LocalizationContext & {
    __typename?: 'AtlassianAccountUser';
    id: Scalars['ID'];
    accountId: Scalars['ID'];
    canonicalAccountId: Scalars['ID'];
    accountStatus: AccountStatus;
    name: Scalars['String'];
    picture: Scalars['URL'];
    email?: Maybe<Scalars['String']>;
    zoneinfo?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
    nickname?: Maybe<Scalars['String']>;
    orgId?: Maybe<Scalars['ID']>;
    extendedProfile?: Maybe<AtlassianAccountUserExtendedProfile>;
};
export declare type AtlassianAccountUserExtendedProfile = {
    __typename?: 'AtlassianAccountUserExtendedProfile';
    jobTitle?: Maybe<Scalars['String']>;
    organization?: Maybe<Scalars['String']>;
    department?: Maybe<Scalars['String']>;
    location?: Maybe<Scalars['String']>;
};
export declare type AtlassianOAuthClient = {
    __typename?: 'AtlassianOAuthClient';
    clientID: Scalars['ID'];
    callbacks?: Maybe<Array<Scalars['String']>>;
    refreshToken?: Maybe<RefreshToken>;
};
export declare enum AtlassianProductHostingType {
    Cloud = "CLOUD",
    Server = "SERVER",
    DataCenter = "DATA_CENTER"
}
export declare type AttachCompassComponentDataManagerInput = {
    componentId: Scalars['ID'];
    externalSourceURL?: Maybe<Scalars['URL']>;
};
export declare type AttachCompassComponentDataManagerPayload = Payload & {
    __typename?: 'AttachCompassComponentDataManagerPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type AttachEventSourceInput = {
    eventSourceId: Scalars['ID'];
    componentId: Scalars['ID'];
};
export declare type AttachEventSourcePayload = Payload & {
    __typename?: 'AttachEventSourcePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type AuditEvent = {
    __typename?: 'AuditEvent';
    id: Scalars['ID'];
    attributes: AuditEventAttributes;
    message?: Maybe<AuditMessageObject>;
};
export declare type AuditEventAttributes = {
    __typename?: 'AuditEventAttributes';
    actor?: Maybe<User>;
    action: Scalars['String'];
    time: Scalars['String'];
    context: Array<Maybe<ContextEventObject>>;
    container: Array<Maybe<ContainerEventObject>>;
};
export declare type AuditEventEdge = {
    __typename?: 'AuditEventEdge';
    cursor: Scalars['String'];
    node?: Maybe<AuditEvent>;
};
export declare type AuditMessageObject = {
    __typename?: 'AuditMessageObject';
    content?: Maybe<Scalars['String']>;
    format?: Maybe<Scalars['String']>;
};
export declare type AuditsPageInfo = {
    __typename?: 'AuditsPageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
    startCursor?: Maybe<Scalars['String']>;
    endCursor?: Maybe<Scalars['String']>;
};
export declare type AuthToken = {
    __typename?: 'AuthToken';
    token: Scalars['String'];
    ttl: Scalars['Int'];
};
export declare type AuthenticationContext = {
    __typename?: 'AuthenticationContext';
    user?: Maybe<User>;
};
export declare type Author = {
    __typename?: 'Author';
    id?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
export declare type AuxEffectsInvocationPayload = {
    state: Scalars['JSON'];
    effects: Array<Scalars['JSON']>;
    context: Scalars['JSON'];
    contextToken?: Maybe<Scalars['String']>;
    extensionPayload?: Maybe<Scalars['JSON']>;
    config?: Maybe<Scalars['JSON']>;
};
export declare type AuxEffectsResult = {
    __typename?: 'AuxEffectsResult';
    effects: Array<Scalars['JSON']>;
    contextToken?: Maybe<ForgeContextToken>;
    metrics?: Maybe<InvocationMetrics>;
};
export declare type AvailableEstimations = {
    __typename?: 'AvailableEstimations';
    statisticFieldId: Scalars['String'];
    name: Scalars['String'];
};
export declare type AvatarInput = {
    webUrl?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type Backlog = {
    __typename?: 'Backlog';
    boardIssueListKey?: Maybe<Scalars['String']>;
    requestColumnMigration: Scalars['Boolean'];
    extension?: Maybe<BacklogExtension>;
    cards: Array<Maybe<SoftwareCard>>;
    assignees?: Maybe<Array<Maybe<User>>>;
    cardTypes: Array<Maybe<CardType>>;
    labels: Array<Maybe<Scalars['String']>>;
};
export declare type BacklogCardsArgs = {
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    customFilterIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type BacklogExtension = {
    __typename?: 'BacklogExtension';
    operations?: Maybe<Array<Maybe<SoftwareOperation>>>;
};
export declare type BaseSprint = {
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    goal?: Maybe<Scalars['String']>;
    sprintState: SprintState;
    sprintMetadata?: Maybe<SoftwareSprintMetadata>;
};
export declare type BasicBoardFeatureView = Node & {
    __typename?: 'BasicBoardFeatureView';
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    canEnable?: Maybe<Scalars['Boolean']>;
    learnMoreLink?: Maybe<Scalars['String']>;
    learnMoreArticleId?: Maybe<Scalars['String']>;
    imageUri?: Maybe<Scalars['String']>;
    dependents?: Maybe<Array<Maybe<BoardFeatureView>>>;
    prerequisites?: Maybe<Array<Maybe<BoardFeatureView>>>;
};
export declare enum BitbucketPermission {
    Admin = "ADMIN"
}
export declare type BitbucketQuery = {
    __typename?: 'BitbucketQuery';
    bitbucketRepository?: Maybe<BitbucketRepository>;
    bitbucketRepositories?: Maybe<Array<Maybe<BitbucketRepository>>>;
    bitbucketWorkspace?: Maybe<BitbucketWorkspace>;
};
export declare type BitbucketQueryBitbucketRepositoryArgs = {
    id: Scalars['ID'];
};
export declare type BitbucketQueryBitbucketRepositoriesArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type BitbucketQueryBitbucketWorkspaceArgs = {
    id: Scalars['ID'];
};
export declare type BitbucketRepository = CodeRepository & Node & {
    __typename?: 'BitbucketRepository';
    id: Scalars['ID'];
    name: Scalars['String'];
    webUrl?: Maybe<Scalars['URL']>;
    href?: Maybe<Scalars['URL']>;
    avatar?: Maybe<BitbucketRepositoryAvatar>;
    workspace?: Maybe<BitbucketWorkspace>;
    jiraProjectRelationships?: Maybe<JiraProjectAndRepositoryRelationshipConnection>;
    devOpsServiceRelationships?: Maybe<DevOpsServiceAndRepositoryRelationshipConnection>;
};
export declare type BitbucketRepositoryJiraProjectRelationshipsArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectAndRepositoryRelationshipFilter>;
    sort?: Maybe<JiraProjectAndRepositoryRelationshipSort>;
};
export declare type BitbucketRepositoryDevOpsServiceRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServiceAndRepositoryRelationshipFilter>;
    sort?: Maybe<DevOpsServiceAndRepositoryRelationshipSort>;
};
export declare type BitbucketRepositoryAvatar = {
    __typename?: 'BitbucketRepositoryAvatar';
    url: Scalars['URL'];
};
export declare type BitbucketRepositoryConnection = {
    __typename?: 'BitbucketRepositoryConnection';
    edges?: Maybe<Array<Maybe<BitbucketRepositoryEdge>>>;
    nodes?: Maybe<Array<Maybe<BitbucketRepository>>>;
    pageInfo: PageInfo;
};
export declare type BitbucketRepositoryEdge = {
    __typename?: 'BitbucketRepositoryEdge';
    cursor: Scalars['String'];
    node?: Maybe<BitbucketRepository>;
};
export declare type BitbucketRepositoryIdConnection = {
    __typename?: 'BitbucketRepositoryIdConnection';
    edges?: Maybe<Array<Maybe<BitbucketRepositoryIdEdge>>>;
    pageInfo: PageInfo;
};
export declare type BitbucketRepositoryIdEdge = {
    __typename?: 'BitbucketRepositoryIdEdge';
    cursor: Scalars['String'];
    node?: Maybe<BitbucketRepository>;
};
export declare type BitbucketWorkspace = Node & {
    __typename?: 'BitbucketWorkspace';
    id: Scalars['ID'];
    name: Scalars['String'];
    repositories?: Maybe<BitbucketRepositoryConnection>;
};
export declare type BitbucketWorkspaceRepositoriesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    permissionFilter?: Maybe<BitbucketPermission>;
};
export declare type BoardCardMoveInput = {
    boardId?: Maybe<Scalars['ID']>;
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    swimlaneId?: Maybe<Scalars['ID']>;
    transition?: Maybe<Scalars['ID']>;
    rank?: Maybe<CardRank>;
};
export declare type BoardEditConfig = {
    __typename?: 'BoardEditConfig';
    inlineCardCreate?: Maybe<InlineCardCreateConfig>;
    inlineColumnEdit?: Maybe<InlineColumnEditConfig>;
};
export declare type BoardFeature = {
    __typename?: 'BoardFeature';
    key?: Maybe<Scalars['SoftwareBoardFeatureKey']>;
    status?: Maybe<BoardFeatureStatus>;
    toggle?: Maybe<BoardFeatureToggleStatus>;
    category: Scalars['String'];
    prerequisites?: Maybe<Array<Maybe<BoardFeature>>>;
};
export declare type BoardFeatureConnection = {
    __typename?: 'BoardFeatureConnection';
    pageInfo?: Maybe<PageInfo>;
    edges?: Maybe<Array<Maybe<BoardFeatureEdge>>>;
};
export declare type BoardFeatureEdge = {
    __typename?: 'BoardFeatureEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<BoardFeatureView>;
};
export declare type BoardFeatureGroup = Node & {
    __typename?: 'BoardFeatureGroup';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    features?: Maybe<BoardFeatureConnection>;
};
export declare type BoardFeatureGroupFeaturesArgs = {
    ids?: Maybe<Array<Scalars['String']>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type BoardFeatureGroupConnection = {
    __typename?: 'BoardFeatureGroupConnection';
    pageInfo?: Maybe<PageInfo>;
    edges?: Maybe<Array<Maybe<BoardFeatureGroupEdge>>>;
};
export declare type BoardFeatureGroupEdge = {
    __typename?: 'BoardFeatureGroupEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<BoardFeatureGroup>;
};
export declare enum BoardFeatureStatus {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    ComingSoon = "COMING_SOON"
}
export declare enum BoardFeatureToggleStatus {
    Enabled = "ENABLED",
    Disabled = "DISABLED"
}
export declare type BoardFeatureView = BasicBoardFeatureView | EstimationBoardFeatureView;
export declare type BoardScope = Node & {
    __typename?: 'BoardScope';
    id: Scalars['ID'];
    board?: Maybe<SoftwareBoard>;
    userSwimlaneStrategy?: Maybe<SwimlaneStrategy>;
    backlog?: Maybe<Backlog>;
    sprints?: Maybe<Array<Maybe<Sprint>>>;
    projectLocation: SoftwareProject;
    cardParents: Array<Maybe<CardParent>>;
    features: Array<Maybe<BoardFeature>>;
    featureGroups?: Maybe<BoardFeatureGroupConnection>;
    reports?: Maybe<SoftwareReports>;
    cards: Array<Maybe<SoftwareCard>>;
    estimation?: Maybe<EstimationConfig>;
    currentUser: CurrentUser;
    sprint?: Maybe<Sprint>;
    startSprintPrototype?: Maybe<Sprint>;
    customFilters?: Maybe<Array<Maybe<CustomFilter>>>;
    filteredCardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    globalCardCreateAdditionalFields?: Maybe<GlobalCardCreateAdditionalFields>;
    name?: Maybe<Scalars['String']>;
    admins?: Maybe<Array<Maybe<Admin>>>;
    canAdministerBoard?: Maybe<Scalars['Boolean']>;
    jql?: Maybe<Scalars['String']>;
    sprintWithStatistics?: Maybe<Array<Maybe<SprintWithStatistics>>>;
};
export declare type BoardScopeSprintsArgs = {
    state?: Maybe<Array<Maybe<SprintState>>>;
};
export declare type BoardScopeCardsArgs = {
    cardIds: Array<Maybe<Scalars['ID']>>;
    customFilterIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type BoardScopeSprintArgs = {
    sprintId: Scalars['ID'];
};
export declare type BoardScopeStartSprintPrototypeArgs = {
    sprintId: Scalars['ID'];
};
export declare type BoardScopeFilteredCardIdsArgs = {
    issueIds: Array<Maybe<Scalars['ID']>>;
    customFilterIds: Array<Maybe<Scalars['ID']>>;
};
export declare type BoardScopeSprintWithStatisticsArgs = {
    sprintIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type BoardScopeConnection = {
    __typename?: 'BoardScopeConnection';
    edges?: Maybe<Array<Maybe<BoardScopeEdge>>>;
    pageInfo?: Maybe<PageInfo>;
};
export declare type BoardScopeEdge = {
    __typename?: 'BoardScopeEdge';
    node?: Maybe<BoardScope>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type Book = {
    __typename?: 'Book';
    id?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    author?: Maybe<Array<Maybe<Author>>>;
};
export declare enum BuiltinPolarisIdeaField {
    Assignee = "ASSIGNEE",
    Created = "CREATED",
    Creator = "CREATOR",
    Description = "DESCRIPTION",
    IssueId = "ISSUE_ID",
    IssueType = "ISSUE_TYPE",
    Key = "KEY",
    Labels = "LABELS",
    Reporter = "REPORTER",
    Status = "STATUS",
    Summary = "SUMMARY",
    Updated = "UPDATED",
    Votes = "VOTES",
    Archived = "ARCHIVED",
    ArchivedBy = "ARCHIVED_BY",
    ArchivedOn = "ARCHIVED_ON",
    DeliveryProgress = "DELIVERY_PROGRESS",
    DeliveryStatus = "DELIVERY_STATUS",
    IssueComments = "ISSUE_COMMENTS",
    LinkedIssues = "LINKED_ISSUES",
    NumDataPoints = "NUM_DATA_POINTS",
    AtlasGoal = "ATLAS_GOAL",
    AtlasProject = "ATLAS_PROJECT",
    AtlasProjectStatus = "ATLAS_PROJECT_STATUS",
    AtlasProjectTarget = "ATLAS_PROJECT_TARGET"
}
export declare type BurndownChart = {
    __typename?: 'BurndownChart';
    chart: BurndownChartData;
    filters: SprintReportsFilters;
};
export declare type BurndownChartChartArgs = {
    sprintId?: Maybe<Scalars['ID']>;
    estimation?: Maybe<SprintReportsEstimationStatisticType>;
};
export declare type BurndownChartData = {
    __typename?: 'BurndownChartData';
    startTime?: Maybe<Scalars['DateTime']>;
    endTime?: Maybe<Scalars['DateTime']>;
    sprintStartEvent: SprintStartData;
    scopeChangeEvents: Array<Maybe<SprintScopeChangeData>>;
    sprintEndEvent?: Maybe<SprintEndData>;
    table?: Maybe<BurndownChartDataTable>;
    timeZone?: Maybe<Scalars['String']>;
};
export declare type BurndownChartDataTable = {
    __typename?: 'BurndownChartDataTable';
    scopeChanges: Array<Maybe<BurndownChartDataTableScopeChangeRow>>;
    incompleteIssues: Array<Maybe<BurndownChartDataTableIssueRow>>;
    completedIssues: Array<Maybe<BurndownChartDataTableIssueRow>>;
    completedIssuesOutsideOfSprint: Array<Maybe<BurndownChartDataTableIssueRow>>;
    issuesRemovedFromSprint: Array<Maybe<BurndownChartDataTableIssueRow>>;
};
export declare type BurndownChartDataTableIssueRow = {
    __typename?: 'BurndownChartDataTableIssueRow';
    issueKey: Scalars['String'];
    issueSummary: Scalars['String'];
    cardType?: Maybe<CardType>;
    cardParent?: Maybe<CardParent>;
    cardStatus?: Maybe<CardStatus>;
    assignee?: Maybe<User>;
    estimate?: Maybe<Scalars['Float']>;
};
export declare type BurndownChartDataTableScopeChangeRow = {
    __typename?: 'BurndownChartDataTableScopeChangeRow';
    timestamp: Scalars['DateTime'];
    sprintScopeChange: SprintScopeChangeData;
    cardType?: Maybe<CardType>;
    cardParent?: Maybe<CardParent>;
};
export declare type Business = {
    __typename?: 'Business';
    isAppBusiness: AcceptableResponse;
    endUserDataTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type Caiq = {
    __typename?: 'CAIQ';
    isCAIQCompleted: Scalars['Boolean'];
    CAIQLiteLink?: Maybe<Scalars['String']>;
};
export declare type CcpaDetails = {
    __typename?: 'CCPADetails';
    business?: Maybe<Business>;
    serviceProvider?: Maybe<ServiceProvider>;
};
export declare type CfdChartConnection = {
    __typename?: 'CFDChartConnection';
    edges: Array<Maybe<CfdChartEdge>>;
    pageInfo: PageInfo;
};
export declare type CfdChartData = {
    __typename?: 'CFDChartData';
    timestamp: Scalars['DateTime'];
    changes: Array<Maybe<CfdIssueColumnChangeEntry>>;
    columnCounts: Array<Maybe<CfdColumnCount>>;
};
export declare type CfdChartEdge = {
    __typename?: 'CFDChartEdge';
    cursor: Scalars['String'];
    node: CfdChartData;
};
export declare type CfdColumn = {
    __typename?: 'CFDColumn';
    name: Scalars['String'];
};
export declare type CfdColumnCount = {
    __typename?: 'CFDColumnCount';
    columnIndex: Scalars['Int'];
    count: Scalars['Int'];
};
export declare type CfdFilters = {
    __typename?: 'CFDFilters';
    columns: Array<Maybe<CfdColumn>>;
};
export declare type CfdIssueColumnChangeEntry = {
    __typename?: 'CFDIssueColumnChangeEntry';
    key?: Maybe<Scalars['ID']>;
    timestamp: Scalars['String'];
    columnFrom?: Maybe<Scalars['Int']>;
    columnTo?: Maybe<Scalars['Int']>;
    statusTo?: Maybe<Scalars['ID']>;
    point?: Maybe<TimeSeriesPoint>;
};
export declare type CardCoverMedia = {
    __typename?: 'CardCoverMedia';
    attachmentMediaApiId?: Maybe<Scalars['ID']>;
    attachmentId?: Maybe<Scalars['Long']>;
    token?: Maybe<Scalars['String']>;
    clientId?: Maybe<Scalars['String']>;
    endpointUrl?: Maybe<Scalars['String']>;
    hiddenByUser: Scalars['Boolean'];
};
export declare enum CardHierarchyLevelEnumType {
    Child = "CHILD",
    Base = "BASE",
    Parent = "PARENT"
}
export declare type CardMediaConfig = {
    __typename?: 'CardMediaConfig';
    enabled: Scalars['Boolean'];
};
export declare type CardParent = {
    __typename?: 'CardParent';
    id: Scalars['ID'];
    key: Scalars['String'];
    summary: Scalars['String'];
    cardType?: Maybe<CardType>;
    color?: Maybe<Scalars['CardPaletteColor']>;
    status?: Maybe<CardStatus>;
    childrenInfo?: Maybe<SoftwareCardChildrenInfo>;
    startDate?: Maybe<Scalars['String']>;
    dueDate?: Maybe<Scalars['String']>;
};
export declare type CardParentCreateInput = {
    boardId: Scalars['ID'];
    newIssueParents: Array<NewCardParent>;
};
export declare type CardParentCreateOutput = MutationResponse & {
    __typename?: 'CardParentCreateOutput';
    newCardParents?: Maybe<Array<Maybe<CardParent>>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type CardParentRankInput = {
    issueParentIds: Array<Scalars['ID']>;
    boardId: Scalars['ID'];
    rankBeforeIssueParentId?: Maybe<Scalars['Long']>;
    rankAfterIssueParentId?: Maybe<Scalars['Long']>;
};
export declare type CardPriority = {
    __typename?: 'CardPriority';
    name?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['String']>;
};
export declare type CardRank = {
    afterCardId?: Maybe<Scalars['ID']>;
    beforeCardId?: Maybe<Scalars['ID']>;
};
export declare type CardStatus = {
    __typename?: 'CardStatus';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
};
export declare type CardType = {
    __typename?: 'CardType';
    id?: Maybe<Scalars['ID']>;
    externalId?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
    inlineCardCreate?: Maybe<InlineCardCreateConfig>;
    hierarchyLevelType?: Maybe<Scalars['CardTypeHierarchyLevelType']>;
    hasRequiredFields?: Maybe<Scalars['Boolean']>;
};
export declare type CcpAccountDetails = {
    __typename?: 'CcpAccountDetails';
    invoiceGroupId?: Maybe<Scalars['ID']>;
    transactionAccountId?: Maybe<Scalars['ID']>;
};
export declare type CcpApplicationReason = {
    __typename?: 'CcpApplicationReason';
    id?: Maybe<Scalars['ID']>;
};
export declare type CcpBenefit = {
    __typename?: 'CcpBenefit';
    value?: Maybe<Scalars['Float']>;
    duration?: Maybe<CcpDuration>;
    iterations?: Maybe<Scalars['Int']>;
};
export declare type CcpBillEstimate = {
    __typename?: 'CcpBillEstimate';
    id?: Maybe<Scalars['ID']>;
};
export declare type CcpBillingPeriodDetails = {
    __typename?: 'CcpBillingPeriodDetails';
    billingAnchorTimestamp?: Maybe<Scalars['Float']>;
    nextBillingTimestamp?: Maybe<Scalars['Float']>;
};
export declare type CcpChargeDetails = {
    __typename?: 'CcpChargeDetails';
    offeringId?: Maybe<Scalars['ID']>;
    pricingPlanId?: Maybe<Scalars['ID']>;
    chargeQuantities?: Maybe<Array<Maybe<CcpChargeQuantity>>>;
    promotionInstances?: Maybe<Array<Maybe<CcpPromotionInstance>>>;
};
export declare type CcpChargeQuantity = {
    __typename?: 'CcpChargeQuantity';
    chargeElement?: Maybe<Scalars['String']>;
    quantity?: Maybe<Scalars['Float']>;
    lastUpdatedAt?: Maybe<Scalars['Float']>;
};
export declare type CcpContext = {
    __typename?: 'CcpContext';
    subject?: Maybe<Scalars['String']>;
    subjectType?: Maybe<Scalars['String']>;
    authMechanism?: Maybe<Scalars['String']>;
    clientAsapIssuer?: Maybe<Scalars['String']>;
};
export declare type CcpCustomisedValues = {
    __typename?: 'CcpCustomisedValues';
    applicationReason?: Maybe<CcpApplicationReason>;
    benefits?: Maybe<Array<Maybe<CcpBenefit>>>;
};
export declare enum CcpDuration {
    Forever = "FOREVER",
    Once = "ONCE",
    Repeating = "REPEATING"
}
export declare type CcpEntitlement = Node & {
    __typename?: 'CcpEntitlement';
    id: Scalars['ID'];
    version?: Maybe<Scalars['Int']>;
    status?: Maybe<CcpEntitlementStatus>;
    slug?: Maybe<Scalars['String']>;
    metadata?: Maybe<Array<Maybe<CcpMapEntry>>>;
    changeReason?: Maybe<Scalars['String']>;
    offeringKey?: Maybe<Scalars['String']>;
    entitlementTemplate?: Maybe<CcpEntitlementTemplate>;
    featureOverrides?: Maybe<Array<Maybe<CcpMapEntry>>>;
    featureVariables?: Maybe<Array<Maybe<CcpMapEntry>>>;
    parentId?: Maybe<Scalars['ID']>;
    childrenIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    transactionAccountId?: Maybe<Scalars['ID']>;
    order?: Maybe<CcpOrder>;
    relatesToEntitlements?: Maybe<Array<Maybe<CcpEntitlementRelationship>>>;
    relatesFromEntitlements?: Maybe<Array<Maybe<CcpEntitlementRelationship>>>;
    enableAbuseProneFeatures?: Maybe<Scalars['Boolean']>;
    createdAt?: Maybe<Scalars['Float']>;
    updatedAt?: Maybe<Scalars['Float']>;
    subscription?: Maybe<CcpSubscription>;
    context?: Maybe<CcpContext>;
};
export declare type CcpEntitlementRelationship = {
    __typename?: 'CcpEntitlementRelationship';
    entitlementId?: Maybe<Scalars['ID']>;
    relationshipType?: Maybe<Scalars['String']>;
    relationshipId?: Maybe<Scalars['ID']>;
};
export declare enum CcpEntitlementStatus {
    Active = "ACTIVE",
    Inactive = "INACTIVE"
}
export declare type CcpEntitlementTemplate = {
    __typename?: 'CcpEntitlementTemplate';
    key?: Maybe<Scalars['String']>;
    version?: Maybe<Scalars['Int']>;
    data?: Maybe<Scalars['String']>;
    provisionedBy?: Maybe<Scalars['String']>;
};
export declare type CcpMapEntry = {
    __typename?: 'CcpMapEntry';
    key?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['String']>;
};
export declare type CcpOrder = Node & {
    __typename?: 'CcpOrder';
    id: Scalars['ID'];
    itemId?: Maybe<Scalars['String']>;
};
export declare type CcpPricingPlan = Node & {
    __typename?: 'CcpPricingPlan';
    id: Scalars['ID'];
};
export declare type CcpPromotion = {
    __typename?: 'CcpPromotion';
    id?: Maybe<Scalars['ID']>;
};
export declare type CcpPromotionDefinition = {
    __typename?: 'CcpPromotionDefinition';
    promotionId?: Maybe<Scalars['ID']>;
    promotionCode?: Maybe<Scalars['String']>;
    customisedValues?: Maybe<CcpCustomisedValues>;
};
export declare type CcpPromotionInstance = {
    __typename?: 'CcpPromotionInstance';
    promotionInstanceId?: Maybe<Scalars['ID']>;
    promotionDefinition?: Maybe<CcpPromotionDefinition>;
};
export declare type CcpQueryApi = {
    __typename?: 'CcpQueryApi';
    entitlement?: Maybe<CcpEntitlement>;
};
export declare type CcpQueryApiEntitlementArgs = {
    id: Scalars['ID'];
};
export declare type CcpSubscription = {
    __typename?: 'CcpSubscription';
    id: Scalars['ID'];
    orderItemId?: Maybe<Scalars['ID']>;
    entitlementId?: Maybe<Scalars['ID']>;
    version?: Maybe<Scalars['Int']>;
    endTimestamp?: Maybe<Scalars['Float']>;
    accountDetails?: Maybe<CcpAccountDetails>;
    chargeDetails?: Maybe<CcpChargeDetails>;
    trial?: Maybe<CcpTrial>;
    billingPeriodDetails?: Maybe<CcpBillingPeriodDetails>;
    metadata?: Maybe<Array<Maybe<CcpMapEntry>>>;
    subscriptionSchedule?: Maybe<CcpSubscriptionSchedule>;
    status?: Maybe<CcpSubscriptionStatus>;
    startTimestamp?: Maybe<Scalars['Float']>;
};
export declare type CcpSubscriptionSchedule = {
    __typename?: 'CcpSubscriptionSchedule';
    nextChangeTimestamp?: Maybe<Scalars['Float']>;
    subscriptionScheduleAction?: Maybe<CcpSubscriptionScheduleAction>;
    offeringId?: Maybe<Scalars['ID']>;
    pricingPlanId?: Maybe<Scalars['ID']>;
    chargeQuantities?: Maybe<Array<Maybe<CcpChargeQuantity>>>;
    promotionIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    promotionInstances?: Maybe<Array<Maybe<CcpPromotionInstance>>>;
    trial?: Maybe<CcpTrial>;
    transactionAccountId?: Maybe<Scalars['ID']>;
    invoiceGroupId?: Maybe<Scalars['ID']>;
    orderItemId?: Maybe<Scalars['ID']>;
};
export declare enum CcpSubscriptionScheduleAction {
    Update = "UPDATE",
    Cancel = "CANCEL"
}
export declare enum CcpSubscriptionStatus {
    Processing = "PROCESSING",
    Active = "ACTIVE",
    Cancelled = "CANCELLED"
}
export declare type CcpTransactionAccount = Node & {
    __typename?: 'CcpTransactionAccount';
    id: Scalars['ID'];
    billingAdmins?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type CcpTrial = {
    __typename?: 'CcpTrial';
    startTimestamp?: Maybe<Scalars['Float']>;
    endTimestamp?: Maybe<Scalars['Float']>;
    pricingPlanId?: Maybe<Scalars['ID']>;
    offeringId?: Maybe<Scalars['ID']>;
};
export declare type CheckConsentPermissionByOAuthClientIdInput = {
    cloudId: Scalars['ID'];
    userId: Scalars['ID'];
    oauthClientId: Scalars['ID'];
    scopes: Array<Scalars['String']>;
};
export declare type ChildCardsMetadata = {
    __typename?: 'ChildCardsMetadata';
    complete?: Maybe<Scalars['Int']>;
    total?: Maybe<Scalars['Int']>;
};
export declare enum Classification {
    Ugc = "ugc",
    Pii = "pii",
    Other = "other"
}
export declare type CloudAppScope = {
    __typename?: 'CloudAppScope';
    id: Scalars['ID'];
    name: Scalars['String'];
    capability: Scalars['String'];
};
export declare type CodeInJira = {
    __typename?: 'CodeInJira';
    siteConfiguration?: Maybe<CodeInJiraSiteConfiguration>;
    userConfiguration?: Maybe<CodeInJiraUserConfiguration>;
};
export declare type CodeInJiraBitbucketWorkspace = {
    __typename?: 'CodeInJiraBitbucketWorkspace';
    uuid: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
};
export declare type CodeInJiraSiteConfiguration = {
    __typename?: 'CodeInJiraSiteConfiguration';
    connectedVcsProviders?: Maybe<Array<Maybe<CodeInJiraVcsProvider>>>;
};
export declare type CodeInJiraUserConfiguration = {
    __typename?: 'CodeInJiraUserConfiguration';
    ownedBitbucketWorkspaces?: Maybe<Array<Maybe<CodeInJiraBitbucketWorkspace>>>;
};
export declare type CodeInJiraVcsProvider = {
    __typename?: 'CodeInJiraVcsProvider';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    providerNamespace?: Maybe<Scalars['String']>;
    providerId?: Maybe<Scalars['String']>;
    baseUrl?: Maybe<Scalars['String']>;
};
export declare type CodeRepository = {
    name: Scalars['String'];
    href?: Maybe<Scalars['URL']>;
};
export declare type Column = {
    __typename?: 'Column';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    cards: Array<Maybe<SoftwareCard>>;
    maxCardCount?: Maybe<Scalars['Int']>;
    columnStatus: Array<ColumnStatus>;
    isInitial: Scalars['Boolean'];
    isDone: Scalars['Boolean'];
};
export declare type ColumnCardsArgs = {
    customFilterIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type ColumnConfigSwimlane = {
    __typename?: 'ColumnConfigSwimlane';
    id?: Maybe<Scalars['ID']>;
    issueTypes?: Maybe<Array<Maybe<CardType>>>;
    uniqueStatuses?: Maybe<Array<Maybe<RawStatus>>>;
    sharedStatuses?: Maybe<Array<Maybe<RawStatus>>>;
};
export declare type ColumnInSwimlane = {
    __typename?: 'ColumnInSwimlane';
    columnDetails?: Maybe<Column>;
    cards: Array<Maybe<SoftwareCard>>;
};
export declare type ColumnInSwimlaneCardsArgs = {
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    customFilterIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type ColumnStatus = {
    __typename?: 'ColumnStatus';
    transitions: Array<SoftwareCardTransition>;
    status: CardStatus;
    cardTypeTransitions?: Maybe<Array<SoftwareCardTypeTransition>>;
};
export declare type ColumnsConfig = {
    __typename?: 'ColumnsConfig';
    columnConfigSwimlanes?: Maybe<Array<Maybe<ColumnConfigSwimlane>>>;
    unmappedStatuses?: Maybe<Array<Maybe<RawStatus>>>;
    isUpdating?: Maybe<Scalars['Boolean']>;
};
export declare type CompassAcknowledgeAnnouncementInput = {
    announcementId: Scalars['ID'];
    componentId: Scalars['ID'];
};
export declare type CompassAcknowledgeAnnouncementPayload = Payload & {
    __typename?: 'CompassAcknowledgeAnnouncementPayload';
    acknowledgement?: Maybe<CompassAnnouncementAcknowledgement>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassAddTeamLabelsInput = {
    cloudId: Scalars['ID'];
    teamId: Scalars['ID'];
    labels: Array<Scalars['String']>;
};
export declare type CompassAddTeamLabelsPayload = Payload & {
    __typename?: 'CompassAddTeamLabelsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    addedLabels?: Maybe<Array<CompassTeamLabel>>;
};
export declare type CompassAlertEvent = CompassEvent & {
    __typename?: 'CompassAlertEvent';
    eventType: CompassEventType;
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    alertProperties: CompassAlertEventProperties;
};
export declare type CompassAlertEventProperties = {
    __typename?: 'CompassAlertEventProperties';
    id: Scalars['ID'];
};
export declare type CompassAlertEventPropertiesInput = {
    id: Scalars['ID'];
};
export declare type CompassAnnouncement = {
    __typename?: 'CompassAnnouncement';
    id: Scalars['ID'];
    component?: Maybe<CompassComponent>;
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    targetDate?: Maybe<Scalars['DateTime']>;
    acknowledgements?: Maybe<Array<CompassAnnouncementAcknowledgement>>;
};
export declare type CompassAnnouncementAcknowledgement = {
    __typename?: 'CompassAnnouncementAcknowledgement';
    component?: Maybe<CompassComponent>;
    hasAcknowledged?: Maybe<Scalars['Boolean']>;
};
export declare type CompassApplicationManagedComponentsConnection = {
    __typename?: 'CompassApplicationManagedComponentsConnection';
    nodes?: Maybe<Array<CompassComponent>>;
    edges?: Maybe<Array<CompassApplicationManagedComponentsEdge>>;
    pageInfo: PageInfo;
};
export declare type CompassApplicationManagedComponentsEdge = {
    __typename?: 'CompassApplicationManagedComponentsEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassComponent>;
};
export declare type CompassApplicationManagedComponentsQuery = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type CompassApplicationManagedComponentsResult = CompassApplicationManagedComponentsConnection | QueryError;
export declare type CompassBuildEvent = CompassEvent & {
    __typename?: 'CompassBuildEvent';
    eventType: CompassEventType;
    lastUpdated: Scalars['DateTime'];
    displayName: Scalars['String'];
    updateSequenceNumber: Scalars['Long'];
    url?: Maybe<Scalars['URL']>;
    description?: Maybe<Scalars['String']>;
    buildProperties: CompassBuildEventProperties;
};
export declare type CompassBuildEventPipeline = {
    __typename?: 'CompassBuildEventPipeline';
    pipelineId: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
};
export declare type CompassBuildEventPipelineInput = {
    pipelineId: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
};
export declare type CompassBuildEventProperties = {
    __typename?: 'CompassBuildEventProperties';
    state: CompassBuildEventState;
    pipeline?: Maybe<CompassBuildEventPipeline>;
    startedAt: Scalars['DateTime'];
    completedAt?: Maybe<Scalars['DateTime']>;
};
export declare type CompassBuildEventPropertiesInput = {
    state: CompassBuildEventState;
    pipeline: CompassBuildEventPipelineInput;
    startedAt: Scalars['DateTime'];
    completedAt?: Maybe<Scalars['DateTime']>;
};
export declare enum CompassBuildEventState {
    InProgress = "IN_PROGRESS",
    Successful = "SUCCESSFUL",
    Cancelled = "CANCELLED",
    Failed = "FAILED",
    Error = "ERROR",
    TimedOut = "TIMED_OUT",
    Unknown = "UNKNOWN"
}
export declare type CompassCatalogMutationApi = {
    __typename?: 'CompassCatalogMutationApi';
    createComponent?: Maybe<CreateCompassComponentPayload>;
    updateComponent?: Maybe<UpdateCompassComponentPayload>;
    updateComponentType?: Maybe<UpdateCompassComponentTypePayload>;
    deleteComponent?: Maybe<DeleteCompassComponentPayload>;
    createComponentLink?: Maybe<CreateCompassComponentLinkPayload>;
    updateComponentLink?: Maybe<UpdateCompassComponentLinkPayload>;
    deleteComponentLink?: Maybe<DeleteCompassComponentLinkPayload>;
    attachComponentDataManager?: Maybe<AttachCompassComponentDataManagerPayload>;
    detachComponentDataManager?: Maybe<DetachCompassComponentDataManagerPayload>;
    updateComponentDataManagerMetadata?: Maybe<UpdateCompassComponentDataManagerMetadataPayload>;
    createComponentExternalAlias?: Maybe<CreateCompassComponentExternalAliasPayload>;
    deleteComponentExternalAlias?: Maybe<DeleteCompassComponentExternalAliasPayload>;
    createComponentSubscription?: Maybe<CompassCreateComponentSubscriptionPayload>;
    deleteComponentSubscription?: Maybe<CompassDeleteComponentSubscriptionPayload>;
    unlinkExternalSource?: Maybe<UnlinkExternalSourcePayload>;
    createRelationship?: Maybe<CreateCompassRelationshipPayload>;
    deleteRelationship?: Maybe<DeleteCompassRelationshipPayload>;
    addComponentLabels?: Maybe<AddCompassComponentLabelsPayload>;
    removeComponentLabels?: Maybe<RemoveCompassComponentLabelsPayload>;
    createScorecard?: Maybe<CreateCompassScorecardPayload>;
    updateScorecard?: Maybe<UpdateCompassScorecardPayload>;
    deleteScorecard?: Maybe<DeleteCompassScorecardPayload>;
    applyScorecardToComponent?: Maybe<ApplyCompassScorecardToComponentPayload>;
    removeScorecardFromComponent?: Maybe<RemoveCompassScorecardFromComponentPayload>;
    createScorecardCriterias?: Maybe<CreateCompassScorecardCriteriasPayload>;
    updateScorecardCriterias?: Maybe<UpdateCompassScorecardCriteriasPayload>;
    deleteScorecardCriterias?: Maybe<DeleteCompassScorecardCriteriasPayload>;
    createAnnouncement?: Maybe<CompassCreateAnnouncementPayload>;
    updateAnnouncement?: Maybe<CompassUpdateAnnouncementPayload>;
    deleteAnnouncement?: Maybe<CompassDeleteAnnouncementPayload>;
    acknowledgeAnnouncement?: Maybe<CompassAcknowledgeAnnouncementPayload>;
    createEventSource?: Maybe<CreateEventSourcePayload>;
    deleteEventSource?: Maybe<DeleteEventSourcePayload>;
    createCompassEvent?: Maybe<CompassCreateEventsPayload>;
    attachEventSource?: Maybe<AttachEventSourcePayload>;
    detachEventSource?: Maybe<DetachEventSourcePayload>;
    createTeamCheckin?: Maybe<CompassCreateTeamCheckinPayload>;
    updateTeamCheckin?: Maybe<CompassUpdateTeamCheckinPayload>;
    deleteTeamCheckin?: Maybe<CompassDeleteTeamCheckinPayload>;
    addTeamLabels?: Maybe<CompassAddTeamLabelsPayload>;
    removeTeamLabels?: Maybe<CompassRemoveTeamLabelsPayload>;
    createMetricDefinition?: Maybe<CompassCreateMetricDefinitionPayload>;
    updateMetricDefinition?: Maybe<CompassUpdateMetricDefinitionPayload>;
    deleteMetricDefinition?: Maybe<CompassDeleteMetricDefinitionPayload>;
    createMetricSource?: Maybe<CompassCreateMetricSourcePayload>;
    deleteMetricSource?: Maybe<CompassDeleteMetricSourcePayload>;
    insertMetricValue?: Maybe<CompassInsertMetricValuePayload>;
    insertMetricValueByExternalId?: Maybe<CompassInsertMetricValueByExternalIdPayload>;
    synchronizeLinkAssociations?: Maybe<CompassSynchronizeLinkAssociationsPayload>;
    createCustomFieldDefinition?: Maybe<CompassCreateCustomFieldDefinitionPayload>;
    updateCustomFieldDefinition?: Maybe<CompassUpdateCustomFieldDefinitionPayload>;
    deleteCustomFieldDefinition?: Maybe<CompassDeleteCustomFieldDefinitionPayload>;
    createComponentFromTemplate?: Maybe<CreateCompassComponentFromTemplatePayload>;
    createStarredComponent?: Maybe<CreateCompassStarredComponentPayload>;
    deleteStarredComponent?: Maybe<DeleteCompassStarredComponentPayload>;
    createWebhook?: Maybe<CompassCreateWebhookPayload>;
};
export declare type CompassCatalogMutationApiCreateComponentArgs = {
    cloudId: Scalars['ID'];
    input: CreateCompassComponentInput;
};
export declare type CompassCatalogMutationApiUpdateComponentArgs = {
    input: UpdateCompassComponentInput;
};
export declare type CompassCatalogMutationApiUpdateComponentTypeArgs = {
    input: UpdateCompassComponentTypeInput;
};
export declare type CompassCatalogMutationApiDeleteComponentArgs = {
    input: DeleteCompassComponentInput;
};
export declare type CompassCatalogMutationApiCreateComponentLinkArgs = {
    input: CreateCompassComponentLinkInput;
};
export declare type CompassCatalogMutationApiUpdateComponentLinkArgs = {
    input: UpdateCompassComponentLinkInput;
};
export declare type CompassCatalogMutationApiDeleteComponentLinkArgs = {
    input: DeleteCompassComponentLinkInput;
};
export declare type CompassCatalogMutationApiAttachComponentDataManagerArgs = {
    input: AttachCompassComponentDataManagerInput;
};
export declare type CompassCatalogMutationApiDetachComponentDataManagerArgs = {
    input: DetachCompassComponentDataManagerInput;
};
export declare type CompassCatalogMutationApiUpdateComponentDataManagerMetadataArgs = {
    input: UpdateCompassComponentDataManagerMetadataInput;
};
export declare type CompassCatalogMutationApiCreateComponentExternalAliasArgs = {
    input: CreateCompassComponentExternalAliasInput;
};
export declare type CompassCatalogMutationApiDeleteComponentExternalAliasArgs = {
    input: DeleteCompassComponentExternalAliasInput;
};
export declare type CompassCatalogMutationApiCreateComponentSubscriptionArgs = {
    input: CompassCreateComponentSubscriptionInput;
};
export declare type CompassCatalogMutationApiDeleteComponentSubscriptionArgs = {
    input: CompassDeleteComponentSubscriptionInput;
};
export declare type CompassCatalogMutationApiUnlinkExternalSourceArgs = {
    input: UnlinkExternalSourceInput;
};
export declare type CompassCatalogMutationApiCreateRelationshipArgs = {
    input: CreateCompassRelationshipInput;
};
export declare type CompassCatalogMutationApiDeleteRelationshipArgs = {
    input: DeleteCompassRelationshipInput;
};
export declare type CompassCatalogMutationApiAddComponentLabelsArgs = {
    input: AddCompassComponentLabelsInput;
};
export declare type CompassCatalogMutationApiRemoveComponentLabelsArgs = {
    input: RemoveCompassComponentLabelsInput;
};
export declare type CompassCatalogMutationApiCreateScorecardArgs = {
    cloudId: Scalars['ID'];
    input: CreateCompassScorecardInput;
};
export declare type CompassCatalogMutationApiUpdateScorecardArgs = {
    scorecardId: Scalars['ID'];
    input: UpdateCompassScorecardInput;
};
export declare type CompassCatalogMutationApiDeleteScorecardArgs = {
    scorecardId: Scalars['ID'];
};
export declare type CompassCatalogMutationApiApplyScorecardToComponentArgs = {
    scorecardId: Scalars['ID'];
    componentId: Scalars['ID'];
};
export declare type CompassCatalogMutationApiRemoveScorecardFromComponentArgs = {
    scorecardId: Scalars['ID'];
    componentId: Scalars['ID'];
};
export declare type CompassCatalogMutationApiCreateScorecardCriteriasArgs = {
    scorecardId: Scalars['ID'];
    input: CreateCompassScorecardCriteriasInput;
};
export declare type CompassCatalogMutationApiUpdateScorecardCriteriasArgs = {
    scorecardId: Scalars['ID'];
    input: UpdateCompassScorecardCriteriasInput;
};
export declare type CompassCatalogMutationApiDeleteScorecardCriteriasArgs = {
    scorecardId: Scalars['ID'];
    input: DeleteCompassScorecardCriteriasInput;
};
export declare type CompassCatalogMutationApiCreateAnnouncementArgs = {
    input: CompassCreateAnnouncementInput;
};
export declare type CompassCatalogMutationApiUpdateAnnouncementArgs = {
    input: CompassUpdateAnnouncementInput;
};
export declare type CompassCatalogMutationApiDeleteAnnouncementArgs = {
    input: CompassDeleteAnnouncementInput;
};
export declare type CompassCatalogMutationApiAcknowledgeAnnouncementArgs = {
    input: CompassAcknowledgeAnnouncementInput;
};
export declare type CompassCatalogMutationApiCreateEventSourceArgs = {
    input: CreateEventSourceInput;
};
export declare type CompassCatalogMutationApiDeleteEventSourceArgs = {
    input: DeleteEventSourceInput;
};
export declare type CompassCatalogMutationApiCreateCompassEventArgs = {
    input: CompassCreateEventInput;
};
export declare type CompassCatalogMutationApiAttachEventSourceArgs = {
    input: AttachEventSourceInput;
};
export declare type CompassCatalogMutationApiDetachEventSourceArgs = {
    input: DetachEventSourceInput;
};
export declare type CompassCatalogMutationApiCreateTeamCheckinArgs = {
    input: CompassCreateTeamCheckinInput;
};
export declare type CompassCatalogMutationApiUpdateTeamCheckinArgs = {
    input: CompassUpdateTeamCheckinInput;
};
export declare type CompassCatalogMutationApiDeleteTeamCheckinArgs = {
    input: CompassDeleteTeamCheckinInput;
};
export declare type CompassCatalogMutationApiAddTeamLabelsArgs = {
    input: CompassAddTeamLabelsInput;
};
export declare type CompassCatalogMutationApiRemoveTeamLabelsArgs = {
    input: CompassRemoveTeamLabelsInput;
};
export declare type CompassCatalogMutationApiCreateMetricDefinitionArgs = {
    input: CompassCreateMetricDefinitionInput;
};
export declare type CompassCatalogMutationApiUpdateMetricDefinitionArgs = {
    input: CompassUpdateMetricDefinitionInput;
};
export declare type CompassCatalogMutationApiDeleteMetricDefinitionArgs = {
    input: CompassDeleteMetricDefinitionInput;
};
export declare type CompassCatalogMutationApiCreateMetricSourceArgs = {
    input: CompassCreateMetricSourceInput;
};
export declare type CompassCatalogMutationApiDeleteMetricSourceArgs = {
    input: CompassDeleteMetricSourceInput;
};
export declare type CompassCatalogMutationApiInsertMetricValueArgs = {
    input: CompassInsertMetricValueInput;
};
export declare type CompassCatalogMutationApiInsertMetricValueByExternalIdArgs = {
    input: CompassInsertMetricValueByExternalIdInput;
};
export declare type CompassCatalogMutationApiSynchronizeLinkAssociationsArgs = {
    input?: Maybe<CompassSynchronizeLinkAssociationsInput>;
};
export declare type CompassCatalogMutationApiCreateCustomFieldDefinitionArgs = {
    input: CompassCreateCustomFieldDefinitionInput;
};
export declare type CompassCatalogMutationApiUpdateCustomFieldDefinitionArgs = {
    input: CompassUpdateCustomFieldDefinitionInput;
};
export declare type CompassCatalogMutationApiDeleteCustomFieldDefinitionArgs = {
    input: CompassDeleteCustomFieldDefinitionInput;
};
export declare type CompassCatalogMutationApiCreateComponentFromTemplateArgs = {
    input: CreateCompassComponentFromTemplateInput;
};
export declare type CompassCatalogMutationApiCreateStarredComponentArgs = {
    input: CreateCompassStarredComponentInput;
};
export declare type CompassCatalogMutationApiDeleteStarredComponentArgs = {
    input: DeleteCompassStarredComponentInput;
};
export declare type CompassCatalogMutationApiCreateWebhookArgs = {
    input: CompassCreateWebhookInput;
};
export declare type CompassCatalogQueryApi = {
    __typename?: 'CompassCatalogQueryApi';
    component?: Maybe<CompassComponentResult>;
    componentByExternalAlias?: Maybe<CompassComponentResult>;
    componentType?: Maybe<CompassComponentTypeResult>;
    componentTypes?: Maybe<CompassComponentTypesQueryResult>;
    fieldDefinitionsByComponentType?: Maybe<CompassFieldDefinitionsResult>;
    searchComponents?: Maybe<CompassComponentQueryResult>;
    searchComponentLabels?: Maybe<CompassComponentLabelsQueryResult>;
    scorecard?: Maybe<CompassScorecardResult>;
    scorecards?: Maybe<CompassScorecardsQueryResult>;
    teamCheckins?: Maybe<Array<CompassTeamCheckin>>;
    teamData?: Maybe<CompassTeamDataResult>;
    searchTeams?: Maybe<CompassSearchTeamsConnectionResult>;
    searchTeamLabels?: Maybe<CompassSearchTeamLabelsConnectionResult>;
    metricDefinitions?: Maybe<CompassMetricDefinitionsQueryResult>;
    metricDefinition?: Maybe<CompassMetricDefinitionResult>;
    eventSource?: Maybe<CompassEventSourceResult>;
    customFieldDefinitions?: Maybe<CompassCustomFieldDefinitionsResult>;
    metricValuesTimeSeries?: Maybe<CompassMetricValuesTimeseriesResult>;
    starredComponents?: Maybe<CompassStarredComponentsResult>;
    applicationManagedComponents?: Maybe<CompassApplicationManagedComponentsResult>;
};
export declare type CompassCatalogQueryApiComponentArgs = {
    id: Scalars['ID'];
};
export declare type CompassCatalogQueryApiComponentByExternalAliasArgs = {
    cloudId: Scalars['ID'];
    externalSource: Scalars['ID'];
    externalID: Scalars['ID'];
};
export declare type CompassCatalogQueryApiComponentTypeArgs = {
    cloudId: Scalars['ID'];
    id: Scalars['ID'];
};
export declare type CompassCatalogQueryApiComponentTypesArgs = {
    cloudId: Scalars['ID'];
    query?: Maybe<CompassComponentTypeQueryInput>;
};
export declare type CompassCatalogQueryApiFieldDefinitionsByComponentTypeArgs = {
    cloudId: Scalars['ID'];
    input: CompassComponentType;
};
export declare type CompassCatalogQueryApiSearchComponentsArgs = {
    cloudId: Scalars['String'];
    query?: Maybe<CompassSearchComponentQuery>;
};
export declare type CompassCatalogQueryApiSearchComponentLabelsArgs = {
    cloudId: Scalars['String'];
    query?: Maybe<CompassSearchComponentLabelsQuery>;
};
export declare type CompassCatalogQueryApiScorecardArgs = {
    id: Scalars['ID'];
};
export declare type CompassCatalogQueryApiScorecardsArgs = {
    cloudId: Scalars['ID'];
    query?: Maybe<CompassScorecardsQuery>;
};
export declare type CompassCatalogQueryApiTeamCheckinsArgs = {
    input: CompassTeamCheckinsInput;
};
export declare type CompassCatalogQueryApiTeamDataArgs = {
    input: CompassTeamDataInput;
};
export declare type CompassCatalogQueryApiSearchTeamsArgs = {
    input: CompassSearchTeamsInput;
};
export declare type CompassCatalogQueryApiSearchTeamLabelsArgs = {
    input: CompassSearchTeamLabelsInput;
};
export declare type CompassCatalogQueryApiMetricDefinitionsArgs = {
    query: CompassMetricDefinitionsQuery;
};
export declare type CompassCatalogQueryApiMetricDefinitionArgs = {
    cloudId: Scalars['ID'];
    metricDefinitionId: Scalars['ID'];
};
export declare type CompassCatalogQueryApiEventSourceArgs = {
    cloudId: Scalars['ID'];
    eventType: CompassEventType;
    externalEventSourceId: Scalars['ID'];
};
export declare type CompassCatalogQueryApiCustomFieldDefinitionsArgs = {
    query: CompassCustomFieldDefinitionsQuery;
};
export declare type CompassCatalogQueryApiMetricValuesTimeSeriesArgs = {
    cloudId: Scalars['ID'];
    metricSourceId: Scalars['ID'];
};
export declare type CompassCatalogQueryApiStarredComponentsArgs = {
    cloudId: Scalars['ID'];
};
export declare type CompassCatalogQueryApiApplicationManagedComponentsArgs = {
    query: CompassApplicationManagedComponentsQuery;
};
export declare type CompassChangeMetadata = {
    __typename?: 'CompassChangeMetadata';
    createdAt?: Maybe<Scalars['DateTime']>;
    createdBy?: Maybe<User>;
    lastUserModificationAt?: Maybe<Scalars['DateTime']>;
    lastUserModificationBy?: Maybe<User>;
};
export declare type CompassComponent = Node & {
    __typename?: 'CompassComponent';
    id: Scalars['ID'];
    type: CompassComponentType;
    typeId: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    ownerId?: Maybe<Scalars['ID']>;
    dataManager?: Maybe<CompassComponentDataManager>;
    changeMetadata: CompassChangeMetadata;
    fields?: Maybe<Array<CompassField>>;
    links?: Maybe<Array<CompassLink>>;
    relationships?: Maybe<CompassRelationshipConnectionResult>;
    externalAliases?: Maybe<Array<CompassExternalAlias>>;
    labels?: Maybe<Array<CompassComponentLabel>>;
    scorecards?: Maybe<Array<CompassScorecard>>;
    scorecardScores?: Maybe<Array<CompassScorecardScore>>;
    applicableScorecards?: Maybe<Array<CompassScorecard>>;
    announcements?: Maybe<Array<CompassAnnouncement>>;
    events?: Maybe<CompassEventsQueryResult>;
    eventSources?: Maybe<Array<EventSource>>;
    scorecardScore?: Maybe<CompassScorecardScore>;
    metricSources?: Maybe<CompassComponentMetricSourcesQueryResult>;
    viewerSubscription?: Maybe<CompassViewerSubscription>;
    customFields?: Maybe<Array<CompassCustomField>>;
};
export declare type CompassComponentRelationshipsArgs = {
    query?: Maybe<CompassRelationshipQuery>;
};
export declare type CompassComponentEventsArgs = {
    query?: Maybe<CompassEventsQuery>;
};
export declare type CompassComponentScorecardScoreArgs = {
    query?: Maybe<CompassComponentScorecardScoreQuery>;
};
export declare type CompassComponentMetricSourcesArgs = {
    query?: Maybe<CompassComponentMetricSourcesQuery>;
};
export declare type CompassComponentDataManager = {
    __typename?: 'CompassComponentDataManager';
    ecosystemAppId: Scalars['ID'];
    externalSourceURL?: Maybe<Scalars['URL']>;
    lastSyncEvent?: Maybe<ComponentSyncEvent>;
};
export declare type CompassComponentLabel = {
    __typename?: 'CompassComponentLabel';
    name?: Maybe<Scalars['String']>;
};
export declare type CompassComponentLabelsQueryResult = CompassSearchComponentLabelsConnection | QueryError;
export declare type CompassComponentMetricSourcesConnection = {
    __typename?: 'CompassComponentMetricSourcesConnection';
    edges?: Maybe<Array<CompassMetricSourceEdge>>;
    nodes?: Maybe<Array<CompassMetricSource>>;
    pageInfo: PageInfo;
};
export declare type CompassComponentMetricSourcesQuery = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type CompassComponentMetricSourcesQueryResult = CompassComponentMetricSourcesConnection | QueryError;
export declare type CompassComponentQueryResult = CompassSearchComponentConnection | QueryError;
export declare type CompassComponentResult = CompassComponent | QueryError;
export declare type CompassComponentScorecardScoreQuery = {
    scorecardId: Scalars['ID'];
};
export declare type CompassComponentStats = {
    __typename?: 'CompassComponentStats';
    passing: Scalars['Int'];
    needsWork: Scalars['Int'];
    failing: Scalars['Int'];
};
export declare type CompassComponentTier = {
    __typename?: 'CompassComponentTier';
    value?: Maybe<Scalars['String']>;
};
export declare enum CompassComponentType {
    Application = "APPLICATION",
    Library = "LIBRARY",
    Service = "SERVICE",
    Other = "OTHER"
}
export declare type CompassComponentTypeConnection = {
    __typename?: 'CompassComponentTypeConnection';
    edges?: Maybe<Array<CompassComponentTypeEdge>>;
    nodes?: Maybe<Array<CompassComponentTypeObject>>;
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
};
export declare type CompassComponentTypeEdge = {
    __typename?: 'CompassComponentTypeEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassComponentTypeObject>;
};
export declare type CompassComponentTypeObject = {
    __typename?: 'CompassComponentTypeObject';
    id: Scalars['ID'];
    fieldDefinitions?: Maybe<CompassFieldDefinitionsResult>;
};
export declare type CompassComponentTypeQueryInput = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type CompassComponentTypeResult = CompassComponentTypeObject | QueryError;
export declare type CompassComponentTypesQueryResult = CompassComponentTypeConnection | QueryError;
export declare type CompassCreateAlertEventInput = {
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description: Scalars['String'];
    url: Scalars['URL'];
    externalEventSourceId: Scalars['ID'];
    alertProperties: CompassAlertEventPropertiesInput;
};
export declare type CompassCreateAnnouncementInput = {
    componentId: Scalars['ID'];
    title: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    targetDate: Scalars['DateTime'];
};
export declare type CompassCreateAnnouncementPayload = Payload & {
    __typename?: 'CompassCreateAnnouncementPayload';
    createdAnnouncement?: Maybe<CompassAnnouncement>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassCreateBuildEventInput = {
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description: Scalars['String'];
    url: Scalars['URL'];
    externalEventSourceId: Scalars['ID'];
    buildProperties: CompassBuildEventPropertiesInput;
};
export declare type CompassCreateComponentSubscriptionInput = {
    componentId: Scalars['ID'];
};
export declare type CompassCreateComponentSubscriptionPayload = Payload & {
    __typename?: 'CompassCreateComponentSubscriptionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassCreateCustomBooleanFieldDefinitionInput = {
    cloudId: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCreateCustomEventInput = {
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description: Scalars['String'];
    url: Scalars['URL'];
    externalEventSourceId: Scalars['ID'];
    customEventProperties: CompassCustomEventPropertiesInput;
};
export declare type CompassCreateCustomFieldDefinitionInput = {
    booleanFieldDefinition?: Maybe<CompassCreateCustomBooleanFieldDefinitionInput>;
    textFieldDefinition?: Maybe<CompassCreateCustomTextFieldDefinitionInput>;
    numberFieldDefinition?: Maybe<CompassCreateCustomNumberFieldDefinitionInput>;
    userFieldDefinition?: Maybe<CompassCreateCustomUserFieldDefinitionInput>;
};
export declare type CompassCreateCustomFieldDefinitionPayload = Payload & {
    __typename?: 'CompassCreateCustomFieldDefinitionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    customFieldDefinition?: Maybe<CompassCustomFieldDefinition>;
};
export declare type CompassCreateCustomNumberFieldDefinitionInput = {
    cloudId: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCreateCustomTextFieldDefinitionInput = {
    cloudId: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCreateCustomUserFieldDefinitionInput = {
    cloudId: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCreateDeploymentEventInput = {
    updateSequenceNumber: Scalars['Long'];
    displayName: Scalars['String'];
    url: Scalars['URL'];
    description: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    externalEventSourceId: Scalars['ID'];
    deploymentProperties: CompassCreateDeploymentEventPropertiesInput;
};
export declare type CompassCreateDeploymentEventPropertiesInput = {
    sequenceNumber: Scalars['Long'];
    state: CompassDeploymentEventState;
    pipeline: CompassDeploymentEventPipelineInput;
    environment: CompassDeploymentEventEnvironmentInput;
    startedAt?: Maybe<Scalars['DateTime']>;
    completedAt?: Maybe<Scalars['DateTime']>;
};
export declare type CompassCreateEventInput = {
    cloudId: Scalars['ID'];
    event: CompassEventInput;
};
export declare type CompassCreateEventsPayload = Payload & {
    __typename?: 'CompassCreateEventsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassCreateFlagEventInput = {
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description: Scalars['String'];
    url: Scalars['URL'];
    externalEventSourceId: Scalars['ID'];
    flagProperties: CompassCreateFlagEventPropertiesInput;
};
export declare type CompassCreateFlagEventPropertiesInput = {
    id: Scalars['ID'];
    status?: Maybe<Scalars['String']>;
};
export declare type CompassCreateHasCustomBooleanFieldScorecardCriteriaInput = {
    weight: Scalars['Int'];
    customFieldDefinitionId: Scalars['ID'];
    booleanComparator: CompassCriteriaBooleanComparatorOptions;
    booleanComparatorValue: Scalars['Boolean'];
};
export declare type CompassCreateHasCustomNumberFieldScorecardCriteriaInput = {
    weight: Scalars['Int'];
    customFieldDefinitionId: Scalars['ID'];
    numberComparator: CompassCriteriaNumberComparatorOptions;
    numberComparatorValue: Scalars['Float'];
};
export declare type CompassCreateHasCustomTextFieldScorecardCriteriaInput = {
    weight: Scalars['Int'];
    customFieldDefinitionId: Scalars['ID'];
};
export declare type CompassCreateIncidentEventInput = {
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description: Scalars['String'];
    url: Scalars['URL'];
    externalEventSourceId: Scalars['ID'];
    incidentProperties: CompassCreateIncidentEventPropertiesInput;
};
export declare type CompassCreateIncidentEventPropertiesInput = {
    id: Scalars['ID'];
    state: CompassIncidentEventState;
    severity?: Maybe<CompassIncidentEventSeverityInput>;
    startTime: Scalars['DateTime'];
    endTime?: Maybe<Scalars['DateTime']>;
};
export declare type CompassCreateLifecycleEventInput = {
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description: Scalars['String'];
    url: Scalars['URL'];
    externalEventSourceId: Scalars['ID'];
    lifecycleProperties: CompassLifecycleEventInputProperties;
};
export declare type CompassCreateMetricDefinitionInput = {
    cloudId: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    format?: Maybe<CompassMetricDefinitionFormatInput>;
};
export declare type CompassCreateMetricDefinitionPayload = Payload & {
    __typename?: 'CompassCreateMetricDefinitionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    createdMetricDefinition?: Maybe<CompassMetricDefinition>;
};
export declare type CompassCreateMetricSourceInput = {
    componentId: Scalars['ID'];
    metricDefinitionId: Scalars['ID'];
    externalMetricSourceId: Scalars['ID'];
    url?: Maybe<Scalars['String']>;
    derived?: Maybe<Scalars['Boolean']>;
    externalConfiguration?: Maybe<CompassExternalMetricSourceConfigurationInput>;
    forgeAppId?: Maybe<Scalars['ID']>;
};
export declare type CompassCreateMetricSourcePayload = Payload & {
    __typename?: 'CompassCreateMetricSourcePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    createdMetricSource?: Maybe<CompassMetricSource>;
};
export declare type CompassCreatePushEventInput = {
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description: Scalars['String'];
    url: Scalars['URL'];
    externalEventSourceId: Scalars['ID'];
    pushEventProperties: CompassPushEventInputProperties;
};
export declare type CompassCreateTeamCheckinActionInput = {
    actionText: Scalars['String'];
    completed?: Maybe<Scalars['Boolean']>;
};
export declare type CompassCreateTeamCheckinInput = {
    cloudId: Scalars['ID'];
    teamId: Scalars['ID'];
    mood: Scalars['Int'];
    response1?: Maybe<Scalars['String']>;
    response2?: Maybe<Scalars['String']>;
    response3?: Maybe<Scalars['String']>;
    response1RichText?: Maybe<CompassCreateTeamCheckinResponseRichText>;
    response2RichText?: Maybe<CompassCreateTeamCheckinResponseRichText>;
    response3RichText?: Maybe<CompassCreateTeamCheckinResponseRichText>;
    actions?: Maybe<Array<CompassCreateTeamCheckinActionInput>>;
};
export declare type CompassCreateTeamCheckinPayload = Payload & {
    __typename?: 'CompassCreateTeamCheckinPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    createdTeamCheckin?: Maybe<CompassTeamCheckin>;
};
export declare type CompassCreateTeamCheckinResponseRichText = {
    adf?: Maybe<Scalars['String']>;
};
export declare type CompassCreateWebhookInput = {
    url: Scalars['String'];
    componentId: Scalars['ID'];
};
export declare type CompassCreateWebhookPayload = Payload & {
    __typename?: 'CompassCreateWebhookPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    webhookDetails?: Maybe<CompassWebhook>;
};
export declare enum CompassCriteriaBooleanComparatorOptions {
    Equals = "EQUALS"
}
export declare enum CompassCriteriaNumberComparatorOptions {
    Equals = "EQUALS",
    GreaterThan = "GREATER_THAN",
    LessThan = "LESS_THAN",
    GreaterThanOrEqualTo = "GREATER_THAN_OR_EQUAL_TO",
    LessThanOrEqualTo = "LESS_THAN_OR_EQUAL_TO"
}
export declare enum CompassCriteriaTextComparatorOptions {
    IsPresent = "IS_PRESENT",
    MatchesRegex = "MATCHES_REGEX"
}
export declare type CompassCustomBooleanField = CompassCustomField & {
    __typename?: 'CompassCustomBooleanField';
    definition?: Maybe<CompassCustomBooleanFieldDefinition>;
    booleanValue?: Maybe<Scalars['Boolean']>;
};
export declare type CompassCustomBooleanFieldDefinition = CompassCustomFieldDefinition & Node & {
    __typename?: 'CompassCustomBooleanFieldDefinition';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCustomBooleanFieldInput = {
    definitionId: Scalars['ID'];
    booleanValue: Scalars['Boolean'];
};
export declare type CompassCustomEvent = CompassEvent & {
    __typename?: 'CompassCustomEvent';
    eventType: CompassEventType;
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    customEventProperties: CompassCustomEventProperties;
};
export declare enum CompassCustomEventIcon {
    Info = "INFO",
    Warning = "WARNING",
    Checkpoint = "CHECKPOINT"
}
export declare type CompassCustomEventProperties = {
    __typename?: 'CompassCustomEventProperties';
    id: Scalars['ID'];
    icon?: Maybe<CompassCustomEventIcon>;
};
export declare type CompassCustomEventPropertiesInput = {
    id: Scalars['ID'];
    icon: CompassCustomEventIcon;
};
export declare type CompassCustomField = {
    definition?: Maybe<CompassCustomFieldDefinition>;
};
export declare type CompassCustomFieldDefinition = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCustomFieldDefinitionEdge = {
    __typename?: 'CompassCustomFieldDefinitionEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassCustomFieldDefinition>;
};
export declare type CompassCustomFieldDefinitionsConnection = {
    __typename?: 'CompassCustomFieldDefinitionsConnection';
    edges?: Maybe<Array<CompassCustomFieldDefinitionEdge>>;
    nodes?: Maybe<Array<CompassCustomFieldDefinition>>;
    pageInfo: PageInfo;
};
export declare type CompassCustomFieldDefinitionsQuery = {
    cloudId: Scalars['ID'];
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCustomFieldDefinitionsResult = CompassCustomFieldDefinitionsConnection | QueryError;
export declare type CompassCustomFieldInput = {
    booleanField?: Maybe<CompassCustomBooleanFieldInput>;
    textField?: Maybe<CompassCustomTextFieldInput>;
    numberField?: Maybe<CompassCustomNumberFieldInput>;
    userField?: Maybe<CompassCustomUserFieldInput>;
};
export declare type CompassCustomFieldScorecardCriteria = {
    id: Scalars['ID'];
    weight: Scalars['Int'];
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassCustomFieldScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassCustomMultiSelectFieldDefinition = CompassCustomFieldDefinition & Node & {
    __typename?: 'CompassCustomMultiSelectFieldDefinition';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
    options?: Maybe<Array<CompassCustomSelectFieldOption>>;
};
export declare type CompassCustomNumberField = CompassCustomField & {
    __typename?: 'CompassCustomNumberField';
    definition?: Maybe<CompassCustomNumberFieldDefinition>;
    numberValue?: Maybe<Scalars['Float']>;
};
export declare type CompassCustomNumberFieldDefinition = CompassCustomFieldDefinition & Node & {
    __typename?: 'CompassCustomNumberFieldDefinition';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCustomNumberFieldInput = {
    definitionId: Scalars['ID'];
    numberValue?: Maybe<Scalars['Float']>;
};
export declare type CompassCustomSelectFieldOption = Node & {
    __typename?: 'CompassCustomSelectFieldOption';
    id: Scalars['ID'];
    value: Scalars['String'];
};
export declare type CompassCustomSingleSelectFieldDefinition = CompassCustomFieldDefinition & Node & {
    __typename?: 'CompassCustomSingleSelectFieldDefinition';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
    options?: Maybe<Array<CompassCustomSelectFieldOption>>;
};
export declare type CompassCustomTextField = CompassCustomField & {
    __typename?: 'CompassCustomTextField';
    definition?: Maybe<CompassCustomTextFieldDefinition>;
    textValue?: Maybe<Scalars['String']>;
};
export declare type CompassCustomTextFieldDefinition = CompassCustomFieldDefinition & Node & {
    __typename?: 'CompassCustomTextFieldDefinition';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCustomTextFieldInput = {
    definitionId: Scalars['ID'];
    textValue?: Maybe<Scalars['String']>;
};
export declare type CompassCustomUserField = CompassCustomField & {
    __typename?: 'CompassCustomUserField';
    definition?: Maybe<CompassCustomUserFieldDefinition>;
    userIdValue?: Maybe<Scalars['ID']>;
    userValue?: Maybe<User>;
};
export declare type CompassCustomUserFieldDefinition = CompassCustomFieldDefinition & Node & {
    __typename?: 'CompassCustomUserFieldDefinition';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassCustomUserFieldInput = {
    definitionId: Scalars['ID'];
    userIdValue?: Maybe<Scalars['ID']>;
};
export declare type CompassDeleteAnnouncementInput = {
    cloudId: Scalars['ID'];
    id: Scalars['ID'];
};
export declare type CompassDeleteAnnouncementPayload = Payload & {
    __typename?: 'CompassDeleteAnnouncementPayload';
    deletedAnnouncementId?: Maybe<Scalars['ID']>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassDeleteComponentSubscriptionInput = {
    componentId: Scalars['ID'];
};
export declare type CompassDeleteComponentSubscriptionPayload = Payload & {
    __typename?: 'CompassDeleteComponentSubscriptionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassDeleteCustomFieldDefinitionInput = {
    id: Scalars['ID'];
};
export declare type CompassDeleteCustomFieldDefinitionPayload = Payload & {
    __typename?: 'CompassDeleteCustomFieldDefinitionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    customFieldDefinitionId?: Maybe<Scalars['ID']>;
};
export declare type CompassDeleteExternalAliasInput = {
    externalId: Scalars['ID'];
    externalSource: Scalars['ID'];
};
export declare type CompassDeleteMetricDefinitionInput = {
    id: Scalars['ID'];
};
export declare type CompassDeleteMetricDefinitionPayload = Payload & {
    __typename?: 'CompassDeleteMetricDefinitionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    deletedMetricDefinitionId?: Maybe<Scalars['ID']>;
};
export declare type CompassDeleteMetricSourceInput = {
    id: Scalars['ID'];
};
export declare type CompassDeleteMetricSourcePayload = Payload & {
    __typename?: 'CompassDeleteMetricSourcePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    deletedMetricSourceId?: Maybe<Scalars['ID']>;
};
export declare type CompassDeleteTeamCheckinActionInput = {
    id: Scalars['ID'];
};
export declare type CompassDeleteTeamCheckinInput = {
    cloudId: Scalars['ID'];
    id: Scalars['ID'];
};
export declare type CompassDeleteTeamCheckinPayload = Payload & {
    __typename?: 'CompassDeleteTeamCheckinPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    deletedTeamCheckinId?: Maybe<Scalars['ID']>;
};
export declare type CompassDeploymentEvent = CompassEvent & {
    __typename?: 'CompassDeploymentEvent';
    eventType: CompassEventType;
    lastUpdated: Scalars['DateTime'];
    displayName: Scalars['String'];
    deploymentSequenceNumber?: Maybe<Scalars['Long']>;
    updateSequenceNumber: Scalars['Long'];
    url?: Maybe<Scalars['URL']>;
    description?: Maybe<Scalars['String']>;
    state?: Maybe<CompassDeploymentEventState>;
    pipeline?: Maybe<CompassDeploymentEventPipeline>;
    environment?: Maybe<CompassDeploymentEventEnvironment>;
    deploymentProperties: CompassDeploymentEventProperties;
};
export declare type CompassDeploymentEventEnvironment = {
    __typename?: 'CompassDeploymentEventEnvironment';
    category?: Maybe<CompassDeploymentEventEnvironmentCategory>;
    displayName?: Maybe<Scalars['String']>;
    environmentId?: Maybe<Scalars['String']>;
};
export declare enum CompassDeploymentEventEnvironmentCategory {
    Production = "PRODUCTION",
    Staging = "STAGING",
    Testing = "TESTING",
    Development = "DEVELOPMENT",
    Unmapped = "UNMAPPED"
}
export declare type CompassDeploymentEventEnvironmentInput = {
    category: CompassDeploymentEventEnvironmentCategory;
    displayName: Scalars['String'];
    environmentId: Scalars['String'];
};
export declare type CompassDeploymentEventFilters = {
    environments?: Maybe<Array<CompassDeploymentEventEnvironmentCategory>>;
};
export declare type CompassDeploymentEventPipeline = {
    __typename?: 'CompassDeploymentEventPipeline';
    pipelineId?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
};
export declare type CompassDeploymentEventPipelineInput = {
    pipelineId: Scalars['String'];
    url: Scalars['String'];
    displayName: Scalars['String'];
};
export declare type CompassDeploymentEventProperties = {
    __typename?: 'CompassDeploymentEventProperties';
    sequenceNumber?: Maybe<Scalars['Long']>;
    state?: Maybe<CompassDeploymentEventState>;
    pipeline?: Maybe<CompassDeploymentEventPipeline>;
    environment?: Maybe<CompassDeploymentEventEnvironment>;
    startedAt?: Maybe<Scalars['DateTime']>;
    completedAt?: Maybe<Scalars['DateTime']>;
};
export declare enum CompassDeploymentEventState {
    Pending = "PENDING",
    InProgress = "IN_PROGRESS",
    Successful = "SUCCESSFUL",
    Cancelled = "CANCELLED",
    Failed = "FAILED",
    RolledBack = "ROLLED_BACK",
    Unknown = "UNKNOWN"
}
export declare type CompassEnumField = CompassField & {
    __typename?: 'CompassEnumField';
    definition?: Maybe<CompassFieldDefinition>;
    value?: Maybe<Array<Scalars['String']>>;
};
export declare type CompassEnumFieldDefinitionOptions = {
    __typename?: 'CompassEnumFieldDefinitionOptions';
    values?: Maybe<Array<Scalars['String']>>;
    default?: Maybe<Array<Scalars['String']>>;
};
export declare type CompassEnumFieldValueInput = {
    value?: Maybe<Array<Scalars['String']>>;
};
export declare type CompassEvent = {
    eventType: CompassEventType;
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
};
export declare type CompassEventConnection = {
    __typename?: 'CompassEventConnection';
    edges?: Maybe<Array<Maybe<CompassEventEdge>>>;
    nodes?: Maybe<Array<CompassEvent>>;
    pageInfo: PageInfo;
};
export declare type CompassEventEdge = {
    __typename?: 'CompassEventEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassEvent>;
};
export declare type CompassEventFilters = {
    deployments?: Maybe<CompassDeploymentEventFilters>;
};
export declare type CompassEventInput = {
    deployment?: Maybe<CompassCreateDeploymentEventInput>;
    build?: Maybe<CompassCreateBuildEventInput>;
    incident?: Maybe<CompassCreateIncidentEventInput>;
    flag?: Maybe<CompassCreateFlagEventInput>;
    alert?: Maybe<CompassCreateAlertEventInput>;
    lifecycle?: Maybe<CompassCreateLifecycleEventInput>;
    custom?: Maybe<CompassCreateCustomEventInput>;
    push?: Maybe<CompassCreatePushEventInput>;
};
export declare type CompassEventSourceResult = EventSource | QueryError;
export declare type CompassEventTimeParameters = {
    startFrom?: Maybe<Scalars['DateTime']>;
    endAt?: Maybe<Scalars['DateTime']>;
};
export declare enum CompassEventType {
    Deployment = "DEPLOYMENT",
    Build = "BUILD",
    Incident = "INCIDENT",
    Flag = "FLAG",
    Alert = "ALERT",
    Lifecycle = "LIFECYCLE",
    Custom = "CUSTOM",
    Push = "PUSH"
}
export declare type CompassEventsInEventSourceQuery = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    timeParameters?: Maybe<CompassEventTimeParameters>;
    eventFilters?: Maybe<CompassEventFilters>;
};
export declare type CompassEventsQuery = {
    eventTypes?: Maybe<Array<CompassEventType>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    timeParameters?: Maybe<CompassEventTimeParameters>;
    eventFilters?: Maybe<CompassEventFilters>;
};
export declare type CompassEventsQueryResult = CompassEventConnection | QueryError;
export declare type CompassExternalAlias = {
    __typename?: 'CompassExternalAlias';
    externalSource: Scalars['ID'];
    externalAliasId: Scalars['ID'];
    url?: Maybe<Scalars['String']>;
};
export declare type CompassExternalAliasInput = {
    externalId: Scalars['ID'];
    externalSource: Scalars['ID'];
    url?: Maybe<Scalars['String']>;
};
export declare type CompassExternalMetricSourceConfigurationInput = {
    slo?: Maybe<CompassSloMetricSourceConfigurationInput>;
    plain?: Maybe<CompassPlainMetricSourceConfigurationInput>;
};
export declare type CompassField = {
    definition?: Maybe<CompassFieldDefinition>;
};
export declare type CompassFieldDefinition = {
    __typename?: 'CompassFieldDefinition';
    id: Scalars['ID'];
    name: Scalars['String'];
    options: CompassFieldDefinitionOptions;
    description: Scalars['String'];
    type: CompassFieldType;
};
export declare type CompassFieldDefinitionOptions = CompassEnumFieldDefinitionOptions;
export declare type CompassFieldDefinitions = {
    __typename?: 'CompassFieldDefinitions';
    definitions: Array<CompassFieldDefinition>;
};
export declare type CompassFieldDefinitionsResult = CompassFieldDefinitions | QueryError;
export declare enum CompassFieldType {
    Text = "TEXT",
    Number = "NUMBER",
    Date = "DATE",
    Enum = "ENUM"
}
export declare type CompassFieldValueInput = {
    enum?: Maybe<CompassEnumFieldValueInput>;
};
export declare type CompassFlagEvent = CompassEvent & {
    __typename?: 'CompassFlagEvent';
    eventType: CompassEventType;
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    flagProperties: CompassFlagEventProperties;
};
export declare type CompassFlagEventProperties = {
    __typename?: 'CompassFlagEventProperties';
    id: Scalars['ID'];
    status?: Maybe<Scalars['String']>;
};
export declare type CompassHasCustomBooleanFieldScorecardCriteria = CompassScorecardCriteria & CompassCustomFieldScorecardCriteria & {
    __typename?: 'CompassHasCustomBooleanFieldScorecardCriteria';
    id: Scalars['ID'];
    weight: Scalars['Int'];
    customFieldDefinition?: Maybe<CompassCustomBooleanFieldDefinition>;
    booleanComparator?: Maybe<CompassCriteriaBooleanComparatorOptions>;
    booleanComparatorValue?: Maybe<Scalars['Boolean']>;
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassHasCustomBooleanFieldScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassHasCustomNumberFieldScorecardCriteria = CompassScorecardCriteria & CompassCustomFieldScorecardCriteria & {
    __typename?: 'CompassHasCustomNumberFieldScorecardCriteria';
    id: Scalars['ID'];
    weight: Scalars['Int'];
    customFieldDefinition?: Maybe<CompassCustomNumberFieldDefinition>;
    numberComparator?: Maybe<CompassCriteriaNumberComparatorOptions>;
    numberComparatorValue?: Maybe<Scalars['Float']>;
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassHasCustomNumberFieldScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassHasCustomTextFieldScorecardCriteria = CompassScorecardCriteria & CompassCustomFieldScorecardCriteria & {
    __typename?: 'CompassHasCustomTextFieldScorecardCriteria';
    id: Scalars['ID'];
    weight: Scalars['Int'];
    customFieldDefinition?: Maybe<CompassCustomTextFieldDefinition>;
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassHasCustomTextFieldScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassHasDescriptionScorecardCriteria = CompassScorecardCriteria & {
    __typename?: 'CompassHasDescriptionScorecardCriteria';
    id: Scalars['ID'];
    weight: Scalars['Int'];
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassHasDescriptionScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassHasFieldScorecardCriteria = CompassScorecardCriteria & {
    __typename?: 'CompassHasFieldScorecardCriteria';
    id: Scalars['ID'];
    weight: Scalars['Int'];
    fieldDefinition: CompassFieldDefinition;
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassHasFieldScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassHasLinkScorecardCriteria = CompassScorecardCriteria & {
    __typename?: 'CompassHasLinkScorecardCriteria';
    id: Scalars['ID'];
    weight: Scalars['Int'];
    linkType: CompassLinkType;
    textComparator?: Maybe<CompassCriteriaTextComparatorOptions>;
    textComparatorValue?: Maybe<Scalars['String']>;
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassHasLinkScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassHasMetricValueScorecardCriteria = CompassScorecardCriteria & {
    __typename?: 'CompassHasMetricValueScorecardCriteria';
    id: Scalars['ID'];
    weight: Scalars['Int'];
    comparatorValue: Scalars['Float'];
    metricDefinitionId: Scalars['ID'];
    metricDefinition?: Maybe<CompassMetricDefinition>;
    comparator: CompassCriteriaNumberComparatorOptions;
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassHasMetricValueScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassHasOwnerScorecardCriteria = CompassScorecardCriteria & {
    __typename?: 'CompassHasOwnerScorecardCriteria';
    id: Scalars['ID'];
    weight: Scalars['Int'];
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassHasOwnerScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassIncidentEvent = CompassEvent & {
    __typename?: 'CompassIncidentEvent';
    eventType: CompassEventType;
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    incidentProperties: CompassIncidentEventProperties;
};
export declare type CompassIncidentEventProperties = {
    __typename?: 'CompassIncidentEventProperties';
    id: Scalars['ID'];
    state?: Maybe<CompassIncidentEventState>;
    severity?: Maybe<CompassIncidentEventSeverity>;
    startTime?: Maybe<Scalars['DateTime']>;
    endTime?: Maybe<Scalars['DateTime']>;
};
export declare type CompassIncidentEventSeverity = {
    __typename?: 'CompassIncidentEventSeverity';
    label?: Maybe<Scalars['String']>;
    level?: Maybe<CompassIncidentEventSeverityLevel>;
};
export declare type CompassIncidentEventSeverityInput = {
    label?: Maybe<Scalars['String']>;
    level?: Maybe<CompassIncidentEventSeverityLevel>;
};
export declare enum CompassIncidentEventSeverityLevel {
    One = "ONE",
    Two = "TWO",
    Three = "THREE",
    Four = "FOUR",
    Five = "FIVE"
}
export declare enum CompassIncidentEventState {
    Open = "OPEN",
    Resolved = "RESOLVED",
    Deleted = "DELETED"
}
export declare type CompassInsertMetricValueByExternalIdInput = {
    cloudId: Scalars['ID'];
    metricDefinitionId: Scalars['ID'];
    externalMetricSourceId: Scalars['ID'];
    value: CompassMetricValueInput;
};
export declare type CompassInsertMetricValueByExternalIdPayload = Payload & {
    __typename?: 'CompassInsertMetricValueByExternalIdPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassInsertMetricValueInput = {
    metricSourceId: Scalars['ID'];
    value: CompassMetricValueInput;
};
export declare type CompassInsertMetricValuePayload = Payload & {
    __typename?: 'CompassInsertMetricValuePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    metricSource?: Maybe<CompassMetricSource>;
};
export declare type CompassLifecycleEvent = CompassEvent & {
    __typename?: 'CompassLifecycleEvent';
    eventType: CompassEventType;
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    lifecycleProperties: CompassLifecycleEventProperties;
};
export declare type CompassLifecycleEventInputProperties = {
    id: Scalars['ID'];
    stage: CompassLifecycleEventStage;
};
export declare type CompassLifecycleEventProperties = {
    __typename?: 'CompassLifecycleEventProperties';
    id: Scalars['ID'];
    stage?: Maybe<CompassLifecycleEventStage>;
};
export declare enum CompassLifecycleEventStage {
    PreRelease = "PRE_RELEASE",
    Production = "PRODUCTION",
    Deprecation = "DEPRECATION",
    EndOfLife = "END_OF_LIFE"
}
export declare type CompassLink = {
    __typename?: 'CompassLink';
    id: Scalars['ID'];
    type: CompassLinkType;
    url: Scalars['URL'];
    name?: Maybe<Scalars['String']>;
    eventSources?: Maybe<Array<EventSource>>;
};
export declare enum CompassLinkType {
    Document = "DOCUMENT",
    ChatChannel = "CHAT_CHANNEL",
    Repository = "REPOSITORY",
    Project = "PROJECT",
    Dashboard = "DASHBOARD",
    OnCall = "ON_CALL",
    OtherLink = "OTHER_LINK"
}
export declare type CompassMetricDefinition = Node & {
    __typename?: 'CompassMetricDefinition';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    format?: Maybe<CompassMetricDefinitionFormat>;
    type: CompassMetricDefinitionType;
    metricSources?: Maybe<CompassMetricSourcesQueryResult>;
    derivedEventTypes?: Maybe<Array<CompassEventType>>;
    isPinned?: Maybe<Scalars['Boolean']>;
};
export declare type CompassMetricDefinitionMetricSourcesArgs = {
    query?: Maybe<CompassMetricSourcesQuery>;
};
export declare type CompassMetricDefinitionEdge = {
    __typename?: 'CompassMetricDefinitionEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassMetricDefinition>;
};
export declare type CompassMetricDefinitionFormat = CompassMetricDefinitionFormatSuffix;
export declare type CompassMetricDefinitionFormatInput = {
    suffix?: Maybe<CompassMetricDefinitionFormatSuffixInput>;
};
export declare type CompassMetricDefinitionFormatSuffix = {
    __typename?: 'CompassMetricDefinitionFormatSuffix';
    suffix?: Maybe<Scalars['String']>;
};
export declare type CompassMetricDefinitionFormatSuffixInput = {
    suffix: Scalars['String'];
};
export declare type CompassMetricDefinitionResult = CompassMetricDefinition | QueryError;
export declare enum CompassMetricDefinitionType {
    BuiltIn = "BUILT_IN",
    Custom = "CUSTOM"
}
export declare type CompassMetricDefinitionsConnection = {
    __typename?: 'CompassMetricDefinitionsConnection';
    edges?: Maybe<Array<CompassMetricDefinitionEdge>>;
    nodes?: Maybe<Array<CompassMetricDefinition>>;
    pageInfo: PageInfo;
};
export declare type CompassMetricDefinitionsQuery = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type CompassMetricDefinitionsQueryResult = CompassMetricDefinitionsConnection | QueryError;
export declare type CompassMetricSource = {
    __typename?: 'CompassMetricSource';
    id: Scalars['ID'];
    metricDefinition?: Maybe<CompassMetricDefinition>;
    externalMetricSourceId?: Maybe<Scalars['ID']>;
    url?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    forgeAppId?: Maybe<Scalars['ID']>;
    values?: Maybe<CompassMetricSourceValuesQueryResult>;
    component?: Maybe<CompassComponent>;
    derivedFrom?: Maybe<Array<EventSource>>;
};
export declare type CompassMetricSourceValuesArgs = {
    query?: Maybe<CompassMetricSourceValuesQuery>;
};
export declare type CompassMetricSourceEdge = {
    __typename?: 'CompassMetricSourceEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassMetricSource>;
};
export declare type CompassMetricSourceValuesConnection = {
    __typename?: 'CompassMetricSourceValuesConnection';
    edges?: Maybe<Array<CompassMetricValueEdge>>;
    nodes?: Maybe<Array<CompassMetricValue>>;
    pageInfo: PageInfo;
};
export declare type CompassMetricSourceValuesQuery = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type CompassMetricSourceValuesQueryResult = CompassMetricSourceValuesConnection | QueryError;
export declare type CompassMetricSourcesConnection = {
    __typename?: 'CompassMetricSourcesConnection';
    edges?: Maybe<Array<CompassMetricSourceEdge>>;
    nodes?: Maybe<Array<CompassMetricSource>>;
    pageInfo: PageInfo;
};
export declare type CompassMetricSourcesQuery = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type CompassMetricSourcesQueryResult = CompassMetricSourcesConnection | QueryError;
export declare type CompassMetricValue = {
    __typename?: 'CompassMetricValue';
    timestamp?: Maybe<Scalars['DateTime']>;
    value?: Maybe<Scalars['Float']>;
};
export declare type CompassMetricValueEdge = {
    __typename?: 'CompassMetricValueEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassMetricValue>;
};
export declare type CompassMetricValueInput = {
    timestamp: Scalars['DateTime'];
    value: Scalars['Float'];
};
export declare type CompassMetricValuesTimeseries = {
    __typename?: 'CompassMetricValuesTimeseries';
    values?: Maybe<Array<Maybe<CompassMetricValue>>>;
};
export declare type CompassMetricValuesTimeseriesResult = CompassMetricValuesTimeseries | QueryError;
export declare type CompassPlainMetricSourceConfigurationInput = {
    query: Scalars['String'];
};
export declare type CompassPushEvent = CompassEvent & {
    __typename?: 'CompassPushEvent';
    eventType: CompassEventType;
    displayName: Scalars['String'];
    lastUpdated: Scalars['DateTime'];
    updateSequenceNumber: Scalars['Long'];
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    pushEventProperties: CompassPushEventProperties;
};
export declare type CompassPushEventAuthorInput = {
    name?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
};
export declare type CompassPushEventInputProperties = {
    id: Scalars['ID'];
    branchName: Scalars['String'];
    author?: Maybe<CompassPushEventAuthorInput>;
};
export declare type CompassPushEventProperties = {
    __typename?: 'CompassPushEventProperties';
    id: Scalars['ID'];
    branchName?: Maybe<Scalars['String']>;
};
export declare type CompassQueryFieldFilter = {
    name: Scalars['String'];
    filter?: Maybe<CompassQueryFilter>;
};
export declare type CompassQueryFilter = {
    eq?: Maybe<Scalars['String']>;
    neq?: Maybe<Scalars['String']>;
    in?: Maybe<Array<Maybe<Scalars['String']>>>;
    gt?: Maybe<Scalars['String']>;
    lt?: Maybe<Scalars['String']>;
    gte?: Maybe<Scalars['String']>;
    lte?: Maybe<Scalars['String']>;
};
export declare type CompassQuerySort = {
    name?: Maybe<Scalars['String']>;
    order?: Maybe<CompassQuerySortOrder>;
};
export declare enum CompassQuerySortOrder {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type CompassRelationship = {
    __typename?: 'CompassRelationship';
    type: CompassRelationshipType;
    startNode?: Maybe<CompassComponent>;
    endNode?: Maybe<CompassComponent>;
    changeMetadata?: Maybe<CompassChangeMetadata>;
};
export declare type CompassRelationshipConnection = {
    __typename?: 'CompassRelationshipConnection';
    edges?: Maybe<Array<CompassRelationshipEdge>>;
    nodes?: Maybe<Array<CompassRelationship>>;
    pageInfo: PageInfo;
};
export declare type CompassRelationshipConnectionResult = CompassRelationshipConnection | QueryError;
export declare enum CompassRelationshipDirection {
    Inward = "INWARD",
    Outward = "OUTWARD"
}
export declare type CompassRelationshipEdge = {
    __typename?: 'CompassRelationshipEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassRelationship>;
};
export declare type CompassRelationshipQuery = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    direction?: CompassRelationshipDirection;
    filters?: Maybe<CompassRelationshipQueryFilters>;
};
export declare type CompassRelationshipQueryFilters = {
    types?: Maybe<Array<CompassRelationshipType>>;
};
export declare enum CompassRelationshipType {
    DependsOn = "DEPENDS_ON"
}
export declare type CompassRemoveTeamLabelsInput = {
    cloudId: Scalars['ID'];
    teamId: Scalars['ID'];
    labels: Array<Scalars['String']>;
};
export declare type CompassRemoveTeamLabelsPayload = Payload & {
    __typename?: 'CompassRemoveTeamLabelsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    removedLabels?: Maybe<Array<CompassTeamLabel>>;
};
export declare type CompassRichTextObject = {
    __typename?: 'CompassRichTextObject';
    adf?: Maybe<Scalars['String']>;
};
export declare type CompassScorecard = Node & {
    __typename?: 'CompassScorecard';
    id: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    criterias?: Maybe<Array<CompassScorecardCriteria>>;
    owner?: Maybe<User>;
    componentType: CompassComponentType;
    componentTypeId: Scalars['ID'];
    componentTypeIds: Array<Scalars['ID']>;
    importance: CompassScorecardImportance;
    scorecardScore?: Maybe<CompassScorecardScore>;
    appliedToComponents?: Maybe<CompassScorecardAppliedToComponentsQueryResult>;
    appliedToComponentStats?: Maybe<CompassScorecardComponentStatsQueryResult>;
    componentLabels?: Maybe<Array<CompassComponentLabel>>;
    componentTiers?: Maybe<Array<CompassComponentTier>>;
    changeMetadata: CompassChangeMetadata;
};
export declare type CompassScorecardScorecardScoreArgs = {
    query?: Maybe<CompassScorecardScoreQuery>;
};
export declare type CompassScorecardAppliedToComponentsArgs = {
    query?: Maybe<CompassScorecardAppliedToComponentsQuery>;
};
export declare type CompassScorecardAppliedToComponentsConnection = {
    __typename?: 'CompassScorecardAppliedToComponentsConnection';
    edges?: Maybe<Array<CompassScorecardAppliedToComponentsEdge>>;
    nodes?: Maybe<Array<CompassComponent>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type CompassScorecardAppliedToComponentsCriteriaFilter = {
    id: Scalars['ID'];
    statuses: Array<Scalars['ID']>;
};
export declare type CompassScorecardAppliedToComponentsEdge = {
    __typename?: 'CompassScorecardAppliedToComponentsEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassComponent>;
};
export declare type CompassScorecardAppliedToComponentsFieldFilter = {
    definition: Scalars['ID'];
    in: Array<CompassFieldValueInput>;
};
export declare type CompassScorecardAppliedToComponentsOwnerFilter = {
    in: Array<Scalars['ID']>;
};
export declare type CompassScorecardAppliedToComponentsQuery = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<CompassScorecardAppliedToComponentsQueryFilter>;
};
export declare type CompassScorecardAppliedToComponentsQueryFilter = {
    score?: Maybe<CompassScorecardAppliedToComponentsThresholdFilter>;
    types?: Maybe<CompassScorecardAppliedToComponentsTypesFilter>;
    owners?: Maybe<CompassScorecardAppliedToComponentsOwnerFilter>;
    fields?: Maybe<Array<CompassScorecardAppliedToComponentsFieldFilter>>;
    scoreRanges?: Maybe<CompassScorecardAppliedToComponentsScoreRangeFilter>;
    scorecardCriteria?: Maybe<Array<CompassScorecardAppliedToComponentsCriteriaFilter>>;
};
export declare type CompassScorecardAppliedToComponentsQueryResult = CompassScorecardAppliedToComponentsConnection | QueryError;
export declare type CompassScorecardAppliedToComponentsScoreRange = {
    from: Scalars['Int'];
    to: Scalars['Int'];
};
export declare type CompassScorecardAppliedToComponentsScoreRangeFilter = {
    in: Array<CompassScorecardAppliedToComponentsScoreRange>;
};
export declare type CompassScorecardAppliedToComponentsThresholdFilter = {
    lt: Scalars['Int'];
};
export declare type CompassScorecardAppliedToComponentsTypesFilter = {
    in: Array<Scalars['ID']>;
};
export declare type CompassScorecardComponentStats = {
    __typename?: 'CompassScorecardComponentStats';
    componentStats?: Maybe<CompassComponentStats>;
    scorecardCriteriaStats?: Maybe<Array<CompassScorecardCriteriaStats>>;
    totalCount: Scalars['Int'];
};
export declare type CompassScorecardComponentStatsQueryResult = CompassScorecardComponentStats | QueryError;
export declare type CompassScorecardConnection = {
    __typename?: 'CompassScorecardConnection';
    edges?: Maybe<Array<CompassScorecardEdge>>;
    nodes?: Maybe<Array<CompassScorecard>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type CompassScorecardCriteria = {
    id: Scalars['ID'];
    weight: Scalars['Int'];
    scorecardCriteriaScore?: Maybe<CompassScorecardCriteriaScore>;
};
export declare type CompassScorecardCriteriaScorecardCriteriaScoreArgs = {
    query?: Maybe<CompassScorecardCriteriaScoreQuery>;
};
export declare type CompassScorecardCriteriaScore = {
    __typename?: 'CompassScorecardCriteriaScore';
    score: Scalars['Int'];
    maxScore: Scalars['Int'];
    explanation?: Maybe<Scalars['String']>;
    dataSourceLastUpdated?: Maybe<Scalars['DateTime']>;
    status?: Maybe<Scalars['String']>;
};
export declare type CompassScorecardCriteriaScoreQuery = {
    componentId: Scalars['ID'];
};
export declare type CompassScorecardCriteriaStats = {
    __typename?: 'CompassScorecardCriteriaStats';
    scorecardCriteriaId: Scalars['ID'];
    weight: Scalars['Int'];
    passing: Scalars['Int'];
    failing: Scalars['Int'];
    error: Scalars['Int'];
};
export declare type CompassScorecardEdge = {
    __typename?: 'CompassScorecardEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassScorecard>;
};
export declare enum CompassScorecardImportance {
    Required = "REQUIRED",
    Recommended = "RECOMMENDED",
    UserDefined = "USER_DEFINED"
}
export declare type CompassScorecardQueryFilter = {
    name?: Maybe<Scalars['String']>;
    componentTypeIds?: Maybe<CompassScorecardAppliedToComponentsTypesFilter>;
};
export declare type CompassScorecardQuerySort = {
    name: Scalars['String'];
    order: CompassScorecardQuerySortOrder;
};
export declare enum CompassScorecardQuerySortOrder {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type CompassScorecardResult = CompassScorecard | QueryError;
export declare type CompassScorecardScore = {
    __typename?: 'CompassScorecardScore';
    totalScore: Scalars['Int'];
    maxTotalScore: Scalars['Int'];
    criteriaScores?: Maybe<Array<CompassScorecardCriteriaScore>>;
};
export declare type CompassScorecardScoreQuery = {
    componentId: Scalars['ID'];
};
export declare type CompassScorecardsQuery = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<CompassScorecardQueryFilter>;
    sort?: Maybe<CompassScorecardQuerySort>;
};
export declare type CompassScorecardsQueryResult = CompassScorecardConnection | QueryError;
export declare type CompassSearchComponentConnection = {
    __typename?: 'CompassSearchComponentConnection';
    edges?: Maybe<Array<CompassSearchComponentEdge>>;
    totalCount?: Maybe<Scalars['Int']>;
    nodes?: Maybe<Array<CompassSearchComponentResult>>;
    pageInfo: PageInfo;
};
export declare type CompassSearchComponentEdge = {
    __typename?: 'CompassSearchComponentEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassSearchComponentResult>;
};
export declare type CompassSearchComponentLabelsConnection = {
    __typename?: 'CompassSearchComponentLabelsConnection';
    edges?: Maybe<Array<CompassSearchComponentLabelsEdge>>;
    nodes?: Maybe<Array<CompassComponentLabel>>;
    pageInfo: PageInfo;
};
export declare type CompassSearchComponentLabelsEdge = {
    __typename?: 'CompassSearchComponentLabelsEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassComponentLabel>;
};
export declare type CompassSearchComponentLabelsQuery = {
    query?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    sort?: Maybe<Array<Maybe<CompassQuerySort>>>;
};
export declare type CompassSearchComponentQuery = {
    query?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    fieldFilters?: Maybe<Array<Maybe<CompassQueryFieldFilter>>>;
    sort?: Maybe<Array<Maybe<CompassQuerySort>>>;
};
export declare type CompassSearchComponentResult = {
    __typename?: 'CompassSearchComponentResult';
    component?: Maybe<CompassComponent>;
    link: Scalars['URL'];
};
export declare type CompassSearchTeamLabelsConnection = {
    __typename?: 'CompassSearchTeamLabelsConnection';
    edges?: Maybe<Array<CompassSearchTeamLabelsEdge>>;
    nodes?: Maybe<Array<CompassTeamLabel>>;
    pageInfo: PageInfo;
};
export declare type CompassSearchTeamLabelsConnectionResult = CompassSearchTeamLabelsConnection | QueryError;
export declare type CompassSearchTeamLabelsEdge = {
    __typename?: 'CompassSearchTeamLabelsEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassTeamLabel>;
};
export declare type CompassSearchTeamLabelsInput = {
    cloudId: Scalars['ID'];
};
export declare type CompassSearchTeamsConnection = {
    __typename?: 'CompassSearchTeamsConnection';
    edges?: Maybe<Array<CompassSearchTeamsEdge>>;
    nodes?: Maybe<Array<CompassTeamData>>;
    pageInfo: PageInfo;
};
export declare type CompassSearchTeamsConnectionResult = CompassSearchTeamsConnection | QueryError;
export declare type CompassSearchTeamsEdge = {
    __typename?: 'CompassSearchTeamsEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassTeamData>;
};
export declare type CompassSearchTeamsInput = {
    cloudId: Scalars['ID'];
    term?: Maybe<Scalars['String']>;
    labels?: Maybe<Array<Scalars['String']>>;
};
export declare type CompassSloMetricSourceConfigurationInput = {
    goodQuery: Scalars['String'];
    badQuery: Scalars['String'];
};
export declare type CompassStarredComponentConnection = {
    __typename?: 'CompassStarredComponentConnection';
    nodes?: Maybe<Array<CompassComponent>>;
    edges?: Maybe<Array<CompassStarredComponentEdge>>;
    pageInfo: PageInfo;
};
export declare type CompassStarredComponentEdge = {
    __typename?: 'CompassStarredComponentEdge';
    cursor: Scalars['String'];
    node?: Maybe<CompassComponent>;
};
export declare type CompassStarredComponentsResult = CompassStarredComponentConnection | QueryError;
export declare type CompassSynchronizeLinkAssociationsInput = {
    cloudId: Scalars['ID'];
    forgeAppId: Scalars['ID'];
};
export declare type CompassSynchronizeLinkAssociationsPayload = Payload & {
    __typename?: 'CompassSynchronizeLinkAssociationsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassTeamCheckin = {
    __typename?: 'CompassTeamCheckin';
    teamId?: Maybe<Scalars['ID']>;
    id: Scalars['ID'];
    mood?: Maybe<Scalars['Int']>;
    response1?: Maybe<Scalars['String']>;
    response2?: Maybe<Scalars['String']>;
    response3?: Maybe<Scalars['String']>;
    response1RichText?: Maybe<CompassRichTextObject>;
    response2RichText?: Maybe<CompassRichTextObject>;
    response3RichText?: Maybe<CompassRichTextObject>;
    changeMetadata: CompassChangeMetadata;
    actions?: Maybe<Array<CompassTeamCheckinAction>>;
};
export declare type CompassTeamCheckinAction = {
    __typename?: 'CompassTeamCheckinAction';
    id: Scalars['ID'];
    actionText?: Maybe<Scalars['String']>;
    completed?: Maybe<Scalars['Boolean']>;
    completedBy?: Maybe<User>;
    completedAt?: Maybe<Scalars['DateTime']>;
    changeMetadata: CompassChangeMetadata;
};
export declare type CompassTeamCheckinActionInput = {
    create?: Maybe<CompassCreateTeamCheckinActionInput>;
    update?: Maybe<CompassUpdateTeamCheckinActionInput>;
    delete?: Maybe<CompassDeleteTeamCheckinActionInput>;
};
export declare type CompassTeamCheckinsInput = {
    cloudId: Scalars['ID'];
    teamId: Scalars['ID'];
};
export declare type CompassTeamData = {
    __typename?: 'CompassTeamData';
    teamId?: Maybe<Scalars['ID']>;
    labels?: Maybe<Array<CompassTeamLabel>>;
    currentCheckin?: Maybe<CompassTeamCheckin>;
};
export declare type CompassTeamDataInput = {
    cloudId: Scalars['ID'];
    teamId: Scalars['ID'];
};
export declare type CompassTeamDataResult = CompassTeamData | QueryError;
export declare type CompassTeamLabel = {
    __typename?: 'CompassTeamLabel';
    name: Scalars['String'];
};
export declare type CompassUpdateAnnouncementInput = {
    cloudId: Scalars['ID'];
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    targetDate?: Maybe<Scalars['DateTime']>;
    clearAcknowledgements?: Maybe<Scalars['Boolean']>;
};
export declare type CompassUpdateAnnouncementPayload = Payload & {
    __typename?: 'CompassUpdateAnnouncementPayload';
    updatedAnnouncement?: Maybe<CompassAnnouncement>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CompassUpdateCustomBooleanFieldDefinitionInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassUpdateCustomFieldDefinitionInput = {
    booleanFieldDefinition?: Maybe<CompassUpdateCustomBooleanFieldDefinitionInput>;
    textFieldDefinition?: Maybe<CompassUpdateCustomTextFieldDefinitionInput>;
    numberFieldDefinition?: Maybe<CompassUpdateCustomNumberFieldDefinitionInput>;
    userFieldDefinition?: Maybe<CompassUpdateCustomUserFieldDefinitionInput>;
};
export declare type CompassUpdateCustomFieldDefinitionPayload = Payload & {
    __typename?: 'CompassUpdateCustomFieldDefinitionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    customFieldDefinition?: Maybe<CompassCustomFieldDefinition>;
};
export declare type CompassUpdateCustomNumberFieldDefinitionInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassUpdateCustomTextFieldDefinitionInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassUpdateCustomUserFieldDefinitionInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    componentTypes?: Maybe<Array<CompassComponentType>>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type CompassUpdateHasCustomBooleanFieldScorecardCriteriaInput = {
    id: Scalars['ID'];
    weight?: Maybe<Scalars['Int']>;
    customFieldDefinitionId?: Maybe<Scalars['ID']>;
    booleanComparator?: Maybe<CompassCriteriaBooleanComparatorOptions>;
    booleanComparatorValue?: Maybe<Scalars['Boolean']>;
};
export declare type CompassUpdateHasCustomNumberFieldScorecardCriteriaInput = {
    id: Scalars['ID'];
    weight?: Maybe<Scalars['Int']>;
    customFieldDefinitionId?: Maybe<Scalars['ID']>;
    numberComparator?: Maybe<CompassCriteriaNumberComparatorOptions>;
    numberComparatorValue?: Maybe<Scalars['Float']>;
};
export declare type CompassUpdateHasCustomTextFieldScorecardCriteriaInput = {
    id: Scalars['ID'];
    weight?: Maybe<Scalars['Int']>;
    customFieldDefinitionId?: Maybe<Scalars['ID']>;
};
export declare type CompassUpdateMetricDefinitionInput = {
    id: Scalars['ID'];
    cloudId?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    format?: Maybe<CompassMetricDefinitionFormatInput>;
    isPinned?: Maybe<Scalars['Boolean']>;
};
export declare type CompassUpdateMetricDefinitionPayload = Payload & {
    __typename?: 'CompassUpdateMetricDefinitionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    updatedMetricDefinition?: Maybe<CompassMetricDefinition>;
};
export declare type CompassUpdateTeamCheckinActionInput = {
    id: Scalars['ID'];
    actionText?: Maybe<Scalars['String']>;
    completed?: Maybe<Scalars['Boolean']>;
};
export declare type CompassUpdateTeamCheckinInput = {
    cloudId: Scalars['ID'];
    id: Scalars['ID'];
    mood: Scalars['Int'];
    response1?: Maybe<Scalars['String']>;
    response2?: Maybe<Scalars['String']>;
    response3?: Maybe<Scalars['String']>;
    response1RichText?: Maybe<CompassUpdateTeamCheckinResponseRichText>;
    response2RichText?: Maybe<CompassUpdateTeamCheckinResponseRichText>;
    response3RichText?: Maybe<CompassUpdateTeamCheckinResponseRichText>;
    actions?: Maybe<Array<CompassTeamCheckinActionInput>>;
};
export declare type CompassUpdateTeamCheckinPayload = Payload & {
    __typename?: 'CompassUpdateTeamCheckinPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    updatedTeamCheckin?: Maybe<CompassTeamCheckin>;
};
export declare type CompassUpdateTeamCheckinResponseRichText = {
    adf?: Maybe<Scalars['String']>;
};
export declare type CompassViewerSubscription = {
    __typename?: 'CompassViewerSubscription';
    subscribed: Scalars['Boolean'];
};
export declare type CompassWebhook = {
    __typename?: 'CompassWebhook';
    id: Scalars['ID'];
    url: Scalars['String'];
};
export declare type CompatibleAtlassianCloudProduct = CompatibleAtlassianProduct & {
    __typename?: 'CompatibleAtlassianCloudProduct';
    id: Scalars['ID'];
    name: Scalars['String'];
    atlassianProduct?: Maybe<MarketplaceSupportedAtlassianProduct>;
};
export declare type CompatibleAtlassianDataCenterProduct = CompatibleAtlassianProduct & {
    __typename?: 'CompatibleAtlassianDataCenterProduct';
    id: Scalars['ID'];
    name: Scalars['String'];
    atlassianProduct?: Maybe<MarketplaceSupportedAtlassianProduct>;
    minimumVersion: Scalars['String'];
    maximumVersion: Scalars['String'];
};
export declare type CompatibleAtlassianProduct = {
    id: Scalars['ID'];
    name: Scalars['String'];
    atlassianProduct?: Maybe<MarketplaceSupportedAtlassianProduct>;
};
export declare type CompatibleAtlassianServerProduct = CompatibleAtlassianProduct & {
    __typename?: 'CompatibleAtlassianServerProduct';
    id: Scalars['ID'];
    name: Scalars['String'];
    atlassianProduct?: Maybe<MarketplaceSupportedAtlassianProduct>;
    minimumVersion: Scalars['String'];
    maximumVersion: Scalars['String'];
};
export declare type CompleteSprintInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
    incompleteCardsDestination: SoftwareCardsDestination;
};
export declare type CompleteSprintResponse = MutationResponse & {
    __typename?: 'CompleteSprintResponse';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type ComponentSyncEvent = {
    __typename?: 'ComponentSyncEvent';
    time: Scalars['DateTime'];
    status: ComponentSyncEventStatus;
    lastSyncErrors?: Maybe<Array<Scalars['String']>>;
};
export declare type ComponentSyncEventInput = {
    status: ComponentSyncEventStatus;
    lastSyncErrors?: Maybe<Array<Scalars['String']>>;
};
export declare enum ComponentSyncEventStatus {
    Success = "SUCCESS",
    UserError = "USER_ERROR",
    ServerError = "SERVER_ERROR"
}
export declare type ConfigurePolarisRefreshInput = {
    project: Scalars['ID'];
    subject?: Maybe<Scalars['ID']>;
    disable?: Maybe<Scalars['Boolean']>;
    timeToLiveSeconds?: Maybe<Scalars['Int']>;
    autoRefreshTimeSeconds?: Maybe<Scalars['Int']>;
    clearError?: Maybe<Scalars['Boolean']>;
    setError?: Maybe<PolarisRefreshError>;
};
export declare type ConfigurePolarisRefreshPayload = Payload & {
    __typename?: 'ConfigurePolarisRefreshPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<Scalars['Int']>;
};
export declare type ConfluenceBlogPost = {
    __typename?: 'ConfluenceBlogPost';
    author?: Maybe<ConfluenceUserInfo>;
    blogPostId: Scalars['ID'];
    body?: Maybe<ConfluenceBodies>;
    comments?: Maybe<Array<Maybe<ConfluenceComment>>>;
    id: Scalars['ID'];
    latestVersion?: Maybe<ConfluenceBlogPostVersion>;
    links?: Maybe<ConfluenceBlogPostLinks>;
    metadata?: Maybe<ConfluenceContentMetadata>;
    properties?: Maybe<Array<Maybe<ConfluenceBlogPostProperty>>>;
    space?: Maybe<ConfluenceSpace>;
    status?: Maybe<ConfluenceBlogPostStatus>;
    title?: Maybe<Scalars['String']>;
    type?: Maybe<ConfluenceContentType>;
    viewer?: Maybe<ConfluenceBlogPostViewerSummary>;
};
export declare type ConfluenceBlogPostCommentsArgs = {
    commentType?: Maybe<ConfluenceCommentType>;
};
export declare type ConfluenceBlogPostPropertiesArgs = {
    keys: Array<Maybe<Scalars['String']>>;
};
export declare type ConfluenceBlogPostLinks = {
    __typename?: 'ConfluenceBlogPostLinks';
    base?: Maybe<Scalars['String']>;
    webUi?: Maybe<Scalars['String']>;
};
export declare type ConfluenceBlogPostProperty = {
    __typename?: 'ConfluenceBlogPostProperty';
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare enum ConfluenceBlogPostStatus {
    Archived = "ARCHIVED",
    Current = "CURRENT",
    Deleted = "DELETED",
    Draft = "DRAFT",
    Historical = "HISTORICAL",
    Trashed = "TRASHED"
}
export declare type ConfluenceBlogPostVersion = {
    __typename?: 'ConfluenceBlogPostVersion';
    author?: Maybe<ConfluenceUserInfo>;
    createdAt?: Maybe<Scalars['DateTime']>;
    number?: Maybe<Scalars['Int']>;
};
export declare type ConfluenceBlogPostViewerSummary = {
    __typename?: 'ConfluenceBlogPostViewerSummary';
    favoritedSummary?: Maybe<ConfluenceFavoritedSummary>;
    lastContribution?: Maybe<ConfluenceContribution>;
    lastSeenAt?: Maybe<Scalars['DateTime']>;
};
export declare type ConfluenceBodies = {
    __typename?: 'ConfluenceBodies';
    anonymousExportView?: Maybe<ConfluenceBody>;
    atlasDocFormat?: Maybe<ConfluenceBody>;
    dynamic?: Maybe<ConfluenceBody>;
    editor?: Maybe<ConfluenceBody>;
    editor2?: Maybe<ConfluenceBody>;
    excerpt?: Maybe<Scalars['String']>;
    exportView?: Maybe<ConfluenceBody>;
    storage?: Maybe<ConfluenceBody>;
    styledView?: Maybe<ConfluenceBody>;
    view?: Maybe<ConfluenceBody>;
};
export declare type ConfluenceBodiesExcerptArgs = {
    length?: Maybe<Scalars['Int']>;
};
export declare type ConfluenceBody = {
    __typename?: 'ConfluenceBody';
    representation?: Maybe<ConfluenceBodyRepresentation>;
    value?: Maybe<Scalars['String']>;
};
export declare enum ConfluenceBodyRepresentation {
    AnonymousExportView = "ANONYMOUS_EXPORT_VIEW",
    AtlasDocFormat = "ATLAS_DOC_FORMAT",
    Dynamic = "DYNAMIC",
    Editor = "EDITOR",
    Editor2 = "EDITOR2",
    ExportView = "EXPORT_VIEW",
    Storage = "STORAGE",
    StyledView = "STYLED_VIEW",
    View = "VIEW"
}
export declare enum ConfluenceCollaborativeEditingService {
    Ncs = "NCS",
    Synchrony = "SYNCHRONY"
}
export declare type ConfluenceComment = {
    author?: Maybe<ConfluenceUserInfo>;
    body?: Maybe<ConfluenceBodies>;
    commentId?: Maybe<Scalars['ID']>;
    container?: Maybe<ConfluenceCommentContainer>;
    id: Scalars['ID'];
    links?: Maybe<ConfluenceCommentLinks>;
    name?: Maybe<Scalars['String']>;
    status?: Maybe<ConfluenceCommentStatus>;
};
export declare type ConfluenceCommentContainer = ConfluenceBlogPost | ConfluencePage;
export declare type ConfluenceCommentCountSummary = {
    __typename?: 'ConfluenceCommentCountSummary';
    total?: Maybe<Scalars['Int']>;
};
export declare type ConfluenceCommentLinks = {
    __typename?: 'ConfluenceCommentLinks';
    base?: Maybe<Scalars['String']>;
    webUi?: Maybe<Scalars['String']>;
};
export declare enum ConfluenceCommentStatus {
    Current = "CURRENT",
    Draft = "DRAFT"
}
export declare enum ConfluenceCommentType {
    Footer = "FOOTER",
    Inline = "INLINE"
}
export declare type ConfluenceContentBody = {
    __typename?: 'ConfluenceContentBody';
    adf?: Maybe<Scalars['String']>;
    editor?: Maybe<Scalars['String']>;
    editor2?: Maybe<Scalars['String']>;
    exportView?: Maybe<Scalars['String']>;
    storage?: Maybe<Scalars['String']>;
    styledView?: Maybe<Scalars['String']>;
    view?: Maybe<Scalars['String']>;
};
export declare type ConfluenceContentBodyInput = {
    representation: ConfluenceContentRepresentation;
    value: Scalars['String'];
};
export declare type ConfluenceContentMetadata = {
    __typename?: 'ConfluenceContentMetadata';
    collaborativeEditingService?: Maybe<ConfluenceCollaborativeEditingService>;
    titleEmojiDraft?: Maybe<ConfluenceContentTitleEmoji>;
    titleEmojiPublished?: Maybe<ConfluenceContentTitleEmoji>;
};
export declare enum ConfluenceContentRepresentation {
    AtlasDocFormat = "ATLAS_DOC_FORMAT",
    Editor = "EDITOR",
    Editor2 = "EDITOR2",
    ExportView = "EXPORT_VIEW",
    Plain = "PLAIN",
    Raw = "RAW",
    Storage = "STORAGE",
    StyledView = "STYLED_VIEW",
    View = "VIEW",
    Wiki = "WIKI"
}
export declare type ConfluenceContentTitleEmoji = {
    __typename?: 'ConfluenceContentTitleEmoji';
    id?: Maybe<Scalars['String']>;
    key?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['String']>;
};
export declare enum ConfluenceContentType {
    Attachment = "ATTACHMENT",
    BlogPost = "BLOG_POST",
    Comment = "COMMENT",
    Page = "PAGE"
}
export declare type ConfluenceContribution = {
    __typename?: 'ConfluenceContribution';
    status: ConfluenceContributionStatus;
};
export declare enum ConfluenceContributionStatus {
    Current = "CURRENT",
    Draft = "DRAFT",
    Unknown = "UNKNOWN",
    Unpublished = "UNPUBLISHED"
}
export declare type ConfluenceCopyPageTaskResult = {
    __typename?: 'ConfluenceCopyPageTaskResult';
    page?: Maybe<ConfluencePage>;
};
export declare type ConfluenceCreateBlogPostInput = {
    body?: Maybe<ConfluenceContentBodyInput>;
    spaceId: Scalars['ID'];
    status?: Maybe<ConfluenceMutationContentStatus>;
    title?: Maybe<Scalars['String']>;
};
export declare type ConfluenceCreateBlogPostPayload = Payload & {
    __typename?: 'ConfluenceCreateBlogPostPayload';
    blogPost?: Maybe<ConfluenceBlogPost>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceCreateBlogPostPropertyInput = {
    blogPostId: Scalars['ID'];
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type ConfluenceCreateBlogPostPropertyPayload = Payload & {
    __typename?: 'ConfluenceCreateBlogPostPropertyPayload';
    blogPostProperty?: Maybe<ConfluenceBlogPostProperty>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceCreateFooterCommentOnBlogPostInput = {
    blogPostId: Scalars['ID'];
    body: ConfluenceContentBodyInput;
};
export declare type ConfluenceCreateFooterCommentOnBlogPostPayload = Payload & {
    __typename?: 'ConfluenceCreateFooterCommentOnBlogPostPayload';
    comment?: Maybe<ConfluenceFooterComment>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceCreateFooterCommentOnPageInput = {
    body: ConfluenceContentBodyInput;
    pageId: Scalars['ID'];
};
export declare type ConfluenceCreateFooterCommentOnPagePayload = Payload & {
    __typename?: 'ConfluenceCreateFooterCommentOnPagePayload';
    comment?: Maybe<ConfluenceFooterComment>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceCreatePageInput = {
    body?: Maybe<ConfluenceContentBodyInput>;
    spaceId: Scalars['ID'];
    status?: Maybe<ConfluenceMutationContentStatus>;
    title?: Maybe<Scalars['String']>;
};
export declare type ConfluenceCreatePagePayload = Payload & {
    __typename?: 'ConfluenceCreatePagePayload';
    page?: Maybe<ConfluencePage>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceCreatePagePropertyInput = {
    key: Scalars['String'];
    pageId: Scalars['ID'];
    value: Scalars['String'];
};
export declare type ConfluenceCreatePagePropertyPayload = Payload & {
    __typename?: 'ConfluenceCreatePagePropertyPayload';
    errors?: Maybe<Array<MutationError>>;
    pageProperty?: Maybe<ConfluencePageProperty>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceCreateSpaceInput = {
    key: Scalars['String'];
    name: Scalars['String'];
    type?: Maybe<ConfluenceSpaceType>;
};
export declare type ConfluenceCreateSpacePayload = Payload & {
    __typename?: 'ConfluenceCreateSpacePayload';
    space?: Maybe<ConfluenceSpace>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceCreateUserPropertyInput = {
    key: Scalars['String'];
    userId: Scalars['String'];
    value: Scalars['String'];
};
export declare type ConfluenceCreateUserPropertyPayload = Payload & {
    __typename?: 'ConfluenceCreateUserPropertyPayload';
    userProperty?: Maybe<ConfluenceUserProperty>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceDeleteBlogPostPropertyInput = {
    blogPostId: Scalars['ID'];
    key: Scalars['String'];
};
export declare type ConfluenceDeleteBlogPostPropertyPayload = Payload & {
    __typename?: 'ConfluenceDeleteBlogPostPropertyPayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceDeleteCommentInput = {
    id: Scalars['ID'];
};
export declare type ConfluenceDeleteCommentPayload = {
    __typename?: 'ConfluenceDeleteCommentPayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceDeleteDraftBlogPostInput = {
    id: Scalars['ID'];
};
export declare type ConfluenceDeleteDraftBlogPostPayload = Payload & {
    __typename?: 'ConfluenceDeleteDraftBlogPostPayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceDeleteDraftPageInput = {
    id: Scalars['ID'];
};
export declare type ConfluenceDeleteDraftPagePayload = Payload & {
    __typename?: 'ConfluenceDeleteDraftPagePayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceDeletePagePropertyInput = {
    key: Scalars['String'];
    pageId: Scalars['ID'];
};
export declare type ConfluenceDeletePagePropertyPayload = Payload & {
    __typename?: 'ConfluenceDeletePagePropertyPayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceDeleteUserPropertyInput = {
    id: Scalars['ID'];
};
export declare type ConfluenceDeleteUserPropertyPayload = Payload & {
    __typename?: 'ConfluenceDeleteUserPropertyPayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceFavoritedSummary = {
    __typename?: 'ConfluenceFavoritedSummary';
    favoritedAt?: Maybe<Scalars['String']>;
    isFavorite: Scalars['Boolean'];
};
export declare type ConfluenceFooterComment = ConfluenceComment & {
    __typename?: 'ConfluenceFooterComment';
    author?: Maybe<ConfluenceUserInfo>;
    body?: Maybe<ConfluenceBodies>;
    commentId?: Maybe<Scalars['ID']>;
    container?: Maybe<ConfluenceCommentContainer>;
    id: Scalars['ID'];
    links?: Maybe<ConfluenceCommentLinks>;
    name?: Maybe<Scalars['String']>;
    status?: Maybe<ConfluenceCommentStatus>;
};
export declare type ConfluenceInlineComment = ConfluenceComment & {
    __typename?: 'ConfluenceInlineComment';
    author?: Maybe<ConfluenceUserInfo>;
    body?: Maybe<ConfluenceBodies>;
    commentId?: Maybe<Scalars['ID']>;
    container?: Maybe<ConfluenceCommentContainer>;
    id: Scalars['ID'];
    links?: Maybe<ConfluenceCommentLinks>;
    name?: Maybe<Scalars['String']>;
    resolutionStatus?: Maybe<ConfluenceInlineCommentResolutionStatus>;
    status?: Maybe<ConfluenceCommentStatus>;
};
export declare enum ConfluenceInlineCommentResolutionStatus {
    Resolved = "RESOLVED",
    Unresolved = "UNRESOLVED"
}
export declare type ConfluenceInlineTask = {
    __typename?: 'ConfluenceInlineTask';
    assignedTo?: Maybe<ConfluenceUserInfo>;
    body?: Maybe<ConfluenceContentBody>;
    completedBy?: Maybe<ConfluenceUserInfo>;
    container?: Maybe<ConfluenceInlineTaskContainer>;
    createdBy?: Maybe<ConfluenceUserInfo>;
    createdAt?: Maybe<Scalars['DateTime']>;
    dueAt?: Maybe<Scalars['DateTime']>;
    globalId?: Maybe<Scalars['ID']>;
    id: Scalars['ID'];
    status?: Maybe<ConfluenceInlineTaskStatus>;
    taskId?: Maybe<Scalars['ID']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
};
export declare type ConfluenceInlineTaskContainer = ConfluenceBlogPost | ConfluencePage;
export declare enum ConfluenceInlineTaskStatus {
    Complete = "COMPLETE",
    Incomplete = "INCOMPLETE"
}
export declare type ConfluenceLabel = {
    __typename?: 'ConfluenceLabel';
    id?: Maybe<Scalars['ID']>;
    label?: Maybe<Scalars['String']>;
    prefix?: Maybe<Scalars['String']>;
};
export declare type ConfluenceLike = {
    __typename?: 'ConfluenceLike';
    likedAt?: Maybe<Scalars['String']>;
    user?: Maybe<ConfluenceUserInfo>;
};
export declare type ConfluenceLikesSummary = {
    __typename?: 'ConfluenceLikesSummary';
    count?: Maybe<Scalars['Int']>;
    likes?: Maybe<Array<Maybe<ConfluenceLike>>>;
};
export declare type ConfluenceLongTask = {
    __typename?: 'ConfluenceLongTask';
    id: Scalars['ID'];
    state?: Maybe<ConfluenceLongTaskState>;
    taskId?: Maybe<Scalars['ID']>;
};
export declare type ConfluenceLongTaskFailed = ConfluenceLongTaskState & {
    __typename?: 'ConfluenceLongTaskFailed';
    elapsedTime?: Maybe<Scalars['Long']>;
    errorMessages?: Maybe<Array<Maybe<Scalars['String']>>>;
    name?: Maybe<Scalars['String']>;
};
export declare type ConfluenceLongTaskInProgress = ConfluenceLongTaskState & {
    __typename?: 'ConfluenceLongTaskInProgress';
    elapsedTime?: Maybe<Scalars['Long']>;
    name?: Maybe<Scalars['String']>;
    percentageComplete?: Maybe<Scalars['Int']>;
};
export declare type ConfluenceLongTaskResult = ConfluenceCopyPageTaskResult;
export declare type ConfluenceLongTaskState = {
    elapsedTime?: Maybe<Scalars['Long']>;
    name?: Maybe<Scalars['String']>;
};
export declare type ConfluenceLongTaskSuccess = ConfluenceLongTaskState & {
    __typename?: 'ConfluenceLongTaskSuccess';
    elapsedTime?: Maybe<Scalars['Long']>;
    name?: Maybe<Scalars['String']>;
    result?: Maybe<ConfluenceLongTaskResult>;
};
export declare type ConfluenceMutationApi = {
    __typename?: 'ConfluenceMutationApi';
    createBlogPost?: Maybe<ConfluenceCreateBlogPostPayload>;
    createBlogPostProperty?: Maybe<ConfluenceCreateBlogPostPropertyPayload>;
    createFooterCommentOnBlogPost?: Maybe<ConfluenceCreateFooterCommentOnBlogPostPayload>;
    createFooterCommentOnPage?: Maybe<ConfluenceCreateFooterCommentOnPagePayload>;
    createPage?: Maybe<ConfluenceCreatePagePayload>;
    createPageProperty?: Maybe<ConfluenceCreatePagePropertyPayload>;
    createSpace?: Maybe<ConfluenceCreateSpacePayload>;
    deleteBlogPostProperty?: Maybe<ConfluenceDeleteBlogPostPropertyPayload>;
    deleteComment?: Maybe<ConfluenceDeleteCommentPayload>;
    deleteDraftBlogPost?: Maybe<ConfluenceDeleteDraftBlogPostPayload>;
    deleteDraftPage?: Maybe<ConfluenceDeleteDraftPagePayload>;
    deletePageProperty?: Maybe<ConfluenceDeletePagePropertyPayload>;
    publishBlogPost?: Maybe<ConfluencePublishBlogPostPayload>;
    publishPage?: Maybe<ConfluencePublishPagePayload>;
    purgeBlogPost?: Maybe<ConfluencePurgeBlogPostPayload>;
    purgePage?: Maybe<ConfluencePurgePagePayload>;
    reopenInlineComment?: Maybe<ConfluenceReopenInlineCommentPayload>;
    replyToComment?: Maybe<ConfluenceReplyToCommentPayload>;
    resolveInlineComment?: Maybe<ConfluenceResolveInlineCommentPayload>;
    trashBlogPost?: Maybe<ConfluenceTrashBlogPostPayload>;
    trashPage?: Maybe<ConfluenceTrashPagePayload>;
    updateComment?: Maybe<ConfluenceUpdateCommentPayload>;
    updateCurrentBlogPost?: Maybe<ConfluenceUpdateCurrentBlogPostPayload>;
    updateCurrentPage?: Maybe<ConfluenceUpdateCurrentPagePayload>;
    updateDraftBlogPost?: Maybe<ConfluenceUpdateDraftBlogPostPayload>;
    updateDraftPage?: Maybe<ConfluenceUpdateDraftPagePayload>;
    updateSpace?: Maybe<ConfluenceUpdateSpacePayload>;
    updateSpaceSettings?: Maybe<ConfluenceUpdateSpaceSettingsPayload>;
    updateValueBlogPostProperty?: Maybe<ConfluenceUpdateValueBlogPostPropertyPayload>;
    updateValuePageProperty?: Maybe<ConfluenceUpdateValuePagePropertyPayload>;
    createUserProperty?: Maybe<ConfluenceCreateUserPropertyPayload>;
    updateValueUserProperty?: Maybe<ConfluenceUpdateValueUserPropertyPayload>;
    deleteUserProperty?: Maybe<ConfluenceDeleteUserPropertyPayload>;
};
export declare type ConfluenceMutationApiCreateBlogPostArgs = {
    input: ConfluenceCreateBlogPostInput;
};
export declare type ConfluenceMutationApiCreateBlogPostPropertyArgs = {
    input: ConfluenceCreateBlogPostPropertyInput;
};
export declare type ConfluenceMutationApiCreateFooterCommentOnBlogPostArgs = {
    input: ConfluenceCreateFooterCommentOnBlogPostInput;
};
export declare type ConfluenceMutationApiCreateFooterCommentOnPageArgs = {
    input: ConfluenceCreateFooterCommentOnPageInput;
};
export declare type ConfluenceMutationApiCreatePageArgs = {
    input: ConfluenceCreatePageInput;
};
export declare type ConfluenceMutationApiCreatePagePropertyArgs = {
    input: ConfluenceCreatePagePropertyInput;
};
export declare type ConfluenceMutationApiCreateSpaceArgs = {
    cloudId: Scalars['ID'];
    input: ConfluenceCreateSpaceInput;
};
export declare type ConfluenceMutationApiDeleteBlogPostPropertyArgs = {
    input: ConfluenceDeleteBlogPostPropertyInput;
};
export declare type ConfluenceMutationApiDeleteCommentArgs = {
    input: ConfluenceDeleteCommentInput;
};
export declare type ConfluenceMutationApiDeleteDraftBlogPostArgs = {
    input: ConfluenceDeleteDraftBlogPostInput;
};
export declare type ConfluenceMutationApiDeleteDraftPageArgs = {
    input: ConfluenceDeleteDraftPageInput;
};
export declare type ConfluenceMutationApiDeletePagePropertyArgs = {
    input: ConfluenceDeletePagePropertyInput;
};
export declare type ConfluenceMutationApiPublishBlogPostArgs = {
    input: ConfluencePublishBlogPostInput;
};
export declare type ConfluenceMutationApiPublishPageArgs = {
    input: ConfluencePublishPageInput;
};
export declare type ConfluenceMutationApiPurgeBlogPostArgs = {
    input: ConfluencePurgeBlogPostInput;
};
export declare type ConfluenceMutationApiPurgePageArgs = {
    input: ConfluencePurgePageInput;
};
export declare type ConfluenceMutationApiReopenInlineCommentArgs = {
    input: ConfluenceReopenInlineCommentInput;
};
export declare type ConfluenceMutationApiReplyToCommentArgs = {
    input: ConfluenceReplyToCommentInput;
};
export declare type ConfluenceMutationApiResolveInlineCommentArgs = {
    input: ConfluenceResolveInlineCommentInput;
};
export declare type ConfluenceMutationApiTrashBlogPostArgs = {
    input: ConfluenceTrashBlogPostInput;
};
export declare type ConfluenceMutationApiTrashPageArgs = {
    input: ConfluenceTrashPageInput;
};
export declare type ConfluenceMutationApiUpdateCommentArgs = {
    input: ConfluenceUpdateCommentInput;
};
export declare type ConfluenceMutationApiUpdateCurrentBlogPostArgs = {
    input: ConfluenceUpdateCurrentBlogPostInput;
};
export declare type ConfluenceMutationApiUpdateCurrentPageArgs = {
    input: ConfluenceUpdateCurrentPageInput;
};
export declare type ConfluenceMutationApiUpdateDraftBlogPostArgs = {
    input: ConfluenceUpdateDraftBlogPostInput;
};
export declare type ConfluenceMutationApiUpdateDraftPageArgs = {
    input: ConfluenceUpdateDraftPageInput;
};
export declare type ConfluenceMutationApiUpdateSpaceArgs = {
    input: ConfluenceUpdateSpaceInput;
};
export declare type ConfluenceMutationApiUpdateSpaceSettingsArgs = {
    input: ConfluenceUpdateSpaceSettingsInput;
};
export declare type ConfluenceMutationApiUpdateValueBlogPostPropertyArgs = {
    input: ConfluenceUpdateValueBlogPostPropertyInput;
};
export declare type ConfluenceMutationApiUpdateValuePagePropertyArgs = {
    input: ConfluenceUpdateValuePagePropertyInput;
};
export declare type ConfluenceMutationApiCreateUserPropertyArgs = {
    cloudId: Scalars['String'];
    input: ConfluenceCreateUserPropertyInput;
};
export declare type ConfluenceMutationApiUpdateValueUserPropertyArgs = {
    input: ConfluenceUpdateValueUserPropertyInput;
};
export declare type ConfluenceMutationApiDeleteUserPropertyArgs = {
    input: ConfluenceDeleteUserPropertyInput;
};
export declare enum ConfluenceMutationContentStatus {
    Current = "CURRENT",
    Draft = "DRAFT"
}
export declare type ConfluenceOperationCheck = {
    __typename?: 'ConfluenceOperationCheck';
    operation?: Maybe<ConfluenceOperationName>;
    target?: Maybe<ConfluenceOperationTarget>;
};
export declare enum ConfluenceOperationName {
    Administer = "ADMINISTER",
    Archive = "ARCHIVE",
    Copy = "COPY",
    Create = "CREATE",
    CreateSpace = "CREATE_SPACE",
    Delete = "DELETE",
    Export = "EXPORT",
    Move = "MOVE",
    Purge = "PURGE",
    PurgeVersion = "PURGE_VERSION",
    Read = "READ",
    Restore = "RESTORE",
    RestrictContent = "RESTRICT_CONTENT",
    Update = "UPDATE",
    Use = "USE"
}
export declare enum ConfluenceOperationTarget {
    Application = "APPLICATION",
    Attachment = "ATTACHMENT",
    BlogPost = "BLOG_POST",
    Comment = "COMMENT",
    Page = "PAGE",
    Space = "SPACE",
    UserProfile = "USER_PROFILE"
}
export declare type ConfluencePage = {
    __typename?: 'ConfluencePage';
    ancestors?: Maybe<Array<Maybe<ConfluencePage>>>;
    author?: Maybe<ConfluenceUserInfo>;
    body?: Maybe<ConfluenceBodies>;
    commentCountSummary?: Maybe<ConfluenceCommentCountSummary>;
    comments?: Maybe<Array<Maybe<ConfluenceComment>>>;
    id: Scalars['ID'];
    latestVersion?: Maybe<ConfluencePageVersion>;
    likesSummary?: Maybe<ConfluenceLikesSummary>;
    links?: Maybe<ConfluencePageLinks>;
    metadata?: Maybe<ConfluenceContentMetadata>;
    properties?: Maybe<Array<Maybe<ConfluencePageProperty>>>;
    pageId: Scalars['ID'];
    space?: Maybe<ConfluenceSpace>;
    status?: Maybe<ConfluencePageStatus>;
    title?: Maybe<Scalars['String']>;
    type?: Maybe<ConfluenceContentType>;
    viewer?: Maybe<ConfluencePageViewerSummary>;
};
export declare type ConfluencePageCommentsArgs = {
    commentType?: Maybe<ConfluenceCommentType>;
};
export declare type ConfluencePagePropertiesArgs = {
    keys: Array<Maybe<Scalars['String']>>;
};
export declare type ConfluencePageInfo = {
    __typename?: 'ConfluencePageInfo';
    endCursor?: Maybe<Scalars['String']>;
    hasNextPage: Scalars['Boolean'];
};
export declare type ConfluencePageLinks = {
    __typename?: 'ConfluencePageLinks';
    base?: Maybe<Scalars['String']>;
    webUi?: Maybe<Scalars['String']>;
};
export declare type ConfluencePageProperty = {
    __typename?: 'ConfluencePageProperty';
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare enum ConfluencePageStatus {
    Archived = "ARCHIVED",
    Current = "CURRENT",
    Deleted = "DELETED",
    Draft = "DRAFT",
    Historical = "HISTORICAL",
    Trashed = "TRASHED"
}
export declare type ConfluencePageVersion = {
    __typename?: 'ConfluencePageVersion';
    author?: Maybe<ConfluenceUserInfo>;
    createdAt?: Maybe<Scalars['DateTime']>;
    number?: Maybe<Scalars['Int']>;
};
export declare type ConfluencePageViewerSummary = {
    __typename?: 'ConfluencePageViewerSummary';
    favoritedSummary?: Maybe<ConfluenceFavoritedSummary>;
    lastContribution?: Maybe<ConfluenceContribution>;
    lastSeenAt?: Maybe<Scalars['DateTime']>;
};
export declare type ConfluencePublishBlogPostInput = {
    id: Scalars['ID'];
    publishTitle?: Maybe<Scalars['String']>;
};
export declare type ConfluencePublishBlogPostPayload = Payload & {
    __typename?: 'ConfluencePublishBlogPostPayload';
    blogPost?: Maybe<ConfluenceBlogPost>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluencePublishPageInput = {
    id: Scalars['ID'];
    publishTitle?: Maybe<Scalars['String']>;
};
export declare type ConfluencePublishPagePayload = Payload & {
    __typename?: 'ConfluencePublishPagePayload';
    page?: Maybe<ConfluencePage>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluencePurgeBlogPostInput = {
    id: Scalars['ID'];
};
export declare type ConfluencePurgeBlogPostPayload = Payload & {
    __typename?: 'ConfluencePurgeBlogPostPayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluencePurgePageInput = {
    id: Scalars['ID'];
};
export declare type ConfluencePurgePagePayload = Payload & {
    __typename?: 'ConfluencePurgePagePayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceQueryApi = {
    __typename?: 'ConfluenceQueryApi';
    blogPost?: Maybe<ConfluenceBlogPost>;
    blogPosts?: Maybe<Array<Maybe<ConfluenceBlogPost>>>;
    comment?: Maybe<ConfluenceComment>;
    comments?: Maybe<Array<Maybe<ConfluenceComment>>>;
    inlineTask?: Maybe<ConfluenceInlineTask>;
    longTask?: Maybe<ConfluenceLongTask>;
    findSpaces?: Maybe<ConfluenceSpaceConnection>;
    page?: Maybe<ConfluencePage>;
    pages?: Maybe<Array<Maybe<ConfluencePage>>>;
    space?: Maybe<ConfluenceSpace>;
    spaces?: Maybe<Array<Maybe<ConfluenceSpace>>>;
    validateSpaceKey?: Maybe<ConfluenceValidateSpaceKeyResponse>;
    whiteboard?: Maybe<ConfluenceWhiteboard>;
    whiteboards?: Maybe<Array<Maybe<ConfluenceWhiteboard>>>;
    userProperty?: Maybe<ConfluenceUserProperty>;
    userProperties?: Maybe<Array<Maybe<ConfluenceUserProperty>>>;
};
export declare type ConfluenceQueryApiBlogPostArgs = {
    id: Scalars['ID'];
};
export declare type ConfluenceQueryApiBlogPostsArgs = {
    ids: Array<Maybe<Scalars['ID']>>;
};
export declare type ConfluenceQueryApiCommentArgs = {
    id: Scalars['ID'];
};
export declare type ConfluenceQueryApiCommentsArgs = {
    ids: Array<Maybe<Scalars['ID']>>;
};
export declare type ConfluenceQueryApiInlineTaskArgs = {
    id: Scalars['ID'];
};
export declare type ConfluenceQueryApiLongTaskArgs = {
    id: Scalars['ID'];
};
export declare type ConfluenceQueryApiFindSpacesArgs = {
    after?: Maybe<Scalars['String']>;
    cloudId: Scalars['ID'];
    filters?: Maybe<ConfluenceSpaceFilters>;
    first?: Maybe<Scalars['Int']>;
};
export declare type ConfluenceQueryApiPageArgs = {
    id: Scalars['ID'];
};
export declare type ConfluenceQueryApiPagesArgs = {
    ids: Array<Maybe<Scalars['ID']>>;
};
export declare type ConfluenceQueryApiSpaceArgs = {
    id: Scalars['ID'];
};
export declare type ConfluenceQueryApiSpacesArgs = {
    ids: Array<Maybe<Scalars['ID']>>;
};
export declare type ConfluenceQueryApiValidateSpaceKeyArgs = {
    cloudId: Scalars['ID'];
    generateUniqueKey?: Maybe<Scalars['Boolean']>;
    spaceKey: Scalars['String'];
    validateUniqueness?: Maybe<Scalars['Boolean']>;
};
export declare type ConfluenceQueryApiWhiteboardArgs = {
    id: Scalars['ID'];
};
export declare type ConfluenceQueryApiWhiteboardsArgs = {
    ids: Array<Maybe<Scalars['ID']>>;
};
export declare type ConfluenceQueryApiUserPropertyArgs = {
    id: Scalars['ID'];
};
export declare type ConfluenceQueryApiUserPropertiesArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type ConfluenceReopenInlineCommentInput = {
    id: Scalars['ID'];
};
export declare type ConfluenceReopenInlineCommentPayload = {
    __typename?: 'ConfluenceReopenInlineCommentPayload';
    comment?: Maybe<ConfluenceInlineComment>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceReplyToCommentInput = {
    body: ConfluenceContentBodyInput;
    parentCommentId: Scalars['ID'];
};
export declare type ConfluenceReplyToCommentPayload = {
    __typename?: 'ConfluenceReplyToCommentPayload';
    comment?: Maybe<ConfluenceComment>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceResolveInlineCommentInput = {
    id: Scalars['ID'];
};
export declare type ConfluenceResolveInlineCommentPayload = {
    __typename?: 'ConfluenceResolveInlineCommentPayload';
    comment?: Maybe<ConfluenceInlineComment>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceSpace = {
    __typename?: 'ConfluenceSpace';
    createdBy?: Maybe<ConfluenceUserInfo>;
    createdDate?: Maybe<Scalars['String']>;
    description?: Maybe<ConfluenceSpaceDescription>;
    homepage?: Maybe<ConfluencePage>;
    icon?: Maybe<ConfluenceSpaceIcon>;
    id: Scalars['ID'];
    key?: Maybe<Scalars['String']>;
    links?: Maybe<ConfluenceSpaceLinks>;
    metadata?: Maybe<ConfluenceSpaceMetadata>;
    name?: Maybe<Scalars['String']>;
    operations?: Maybe<Array<Maybe<ConfluenceOperationCheck>>>;
    spaceId: Scalars['ID'];
    settings?: Maybe<ConfluenceSpaceSettings>;
    status?: Maybe<ConfluenceSpaceStatus>;
    type?: Maybe<ConfluenceSpaceType>;
};
export declare type ConfluenceSpaceConnection = {
    __typename?: 'ConfluenceSpaceConnection';
    edges?: Maybe<Array<Maybe<ConfluenceSpaceEdge>>>;
    nodes?: Maybe<Array<Maybe<ConfluenceSpace>>>;
    pageInfo: ConfluencePageInfo;
};
export declare type ConfluenceSpaceDescription = {
    __typename?: 'ConfluenceSpaceDescription';
    plain?: Maybe<Scalars['String']>;
    view?: Maybe<Scalars['String']>;
};
export declare type ConfluenceSpaceEdge = {
    __typename?: 'ConfluenceSpaceEdge';
    cursor: Scalars['String'];
    node?: Maybe<ConfluenceSpace>;
};
export declare type ConfluenceSpaceFilters = {
    type?: Maybe<ConfluenceSpaceType>;
};
export declare type ConfluenceSpaceIcon = {
    __typename?: 'ConfluenceSpaceIcon';
    height?: Maybe<Scalars['Int']>;
    isDefault?: Maybe<Scalars['Boolean']>;
    path?: Maybe<Scalars['String']>;
    width?: Maybe<Scalars['Int']>;
};
export declare type ConfluenceSpaceLinks = {
    __typename?: 'ConfluenceSpaceLinks';
    base?: Maybe<Scalars['String']>;
    webUi?: Maybe<Scalars['String']>;
};
export declare type ConfluenceSpaceMetadata = {
    __typename?: 'ConfluenceSpaceMetadata';
    labels?: Maybe<Array<Maybe<ConfluenceLabel>>>;
    recentCommenters?: Maybe<Array<Maybe<ConfluenceUserInfo>>>;
    recentWatchers?: Maybe<Array<Maybe<ConfluenceUserInfo>>>;
    totalCommenters?: Maybe<Scalars['Int']>;
    totalCurrentPages?: Maybe<Scalars['Int']>;
    totalWatchers?: Maybe<Scalars['Int']>;
};
export declare enum ConfluenceSpaceSettingEditorVersion {
    V1 = "V1",
    V2 = "V2"
}
export declare type ConfluenceSpaceSettings = {
    __typename?: 'ConfluenceSpaceSettings';
    editorVersions?: Maybe<ConfluenceSpaceSettingsEditorVersions>;
    routeOverrideEnabled?: Maybe<Scalars['Boolean']>;
};
export declare type ConfluenceSpaceSettingsEditorVersions = {
    __typename?: 'ConfluenceSpaceSettingsEditorVersions';
    blogPost?: Maybe<ConfluenceSpaceSettingEditorVersion>;
    default?: Maybe<ConfluenceSpaceSettingEditorVersion>;
    page?: Maybe<ConfluenceSpaceSettingEditorVersion>;
};
export declare enum ConfluenceSpaceStatus {
    Archived = "ARCHIVED",
    Current = "CURRENT"
}
export declare enum ConfluenceSpaceType {
    Global = "GLOBAL",
    Personal = "PERSONAL"
}
export declare type ConfluenceTrashBlogPostInput = {
    id: Scalars['ID'];
};
export declare type ConfluenceTrashBlogPostPayload = Payload & {
    __typename?: 'ConfluenceTrashBlogPostPayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceTrashPageInput = {
    id: Scalars['ID'];
};
export declare type ConfluenceTrashPagePayload = Payload & {
    __typename?: 'ConfluenceTrashPagePayload';
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateCommentInput = {
    body: ConfluenceContentBodyInput;
    id: Scalars['ID'];
};
export declare type ConfluenceUpdateCommentPayload = {
    __typename?: 'ConfluenceUpdateCommentPayload';
    comment?: Maybe<ConfluenceComment>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateCurrentBlogPostInput = {
    body?: Maybe<ConfluenceContentBodyInput>;
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
};
export declare type ConfluenceUpdateCurrentBlogPostPayload = Payload & {
    __typename?: 'ConfluenceUpdateCurrentBlogPostPayload';
    blogPost?: Maybe<ConfluenceBlogPost>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateCurrentPageInput = {
    body?: Maybe<ConfluenceContentBodyInput>;
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
};
export declare type ConfluenceUpdateCurrentPagePayload = Payload & {
    __typename?: 'ConfluenceUpdateCurrentPagePayload';
    page?: Maybe<ConfluencePage>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateDraftBlogPostInput = {
    body?: Maybe<ConfluenceContentBodyInput>;
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
};
export declare type ConfluenceUpdateDraftBlogPostPayload = Payload & {
    __typename?: 'ConfluenceUpdateDraftBlogPostPayload';
    blogPost?: Maybe<ConfluenceBlogPost>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateDraftPageInput = {
    body?: Maybe<ConfluenceContentBodyInput>;
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
};
export declare type ConfluenceUpdateDraftPagePayload = Payload & {
    __typename?: 'ConfluenceUpdateDraftPagePayload';
    page?: Maybe<ConfluencePage>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateSpaceInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type ConfluenceUpdateSpacePayload = Payload & {
    __typename?: 'ConfluenceUpdateSpacePayload';
    space?: Maybe<ConfluenceSpace>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateSpaceSettingsInput = {
    id: Scalars['String'];
    routeOverrideEnabled: Scalars['Boolean'];
};
export declare type ConfluenceUpdateSpaceSettingsPayload = Payload & {
    __typename?: 'ConfluenceUpdateSpaceSettingsPayload';
    confluenceSpaceSettings?: Maybe<ConfluenceSpaceSettings>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateValueBlogPostPropertyInput = {
    blogPostId: Scalars['ID'];
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type ConfluenceUpdateValueBlogPostPropertyPayload = Payload & {
    __typename?: 'ConfluenceUpdateValueBlogPostPropertyPayload';
    blogPostProperty?: Maybe<ConfluenceBlogPostProperty>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateValuePagePropertyInput = {
    key: Scalars['String'];
    pageId: Scalars['ID'];
    value: Scalars['String'];
};
export declare type ConfluenceUpdateValuePagePropertyPayload = Payload & {
    __typename?: 'ConfluenceUpdateValuePagePropertyPayload';
    errors?: Maybe<Array<MutationError>>;
    pageProperty?: Maybe<ConfluencePageProperty>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUpdateValueUserPropertyInput = {
    id: Scalars['ID'];
    value: Scalars['String'];
};
export declare type ConfluenceUpdateValueUserPropertyPayload = Payload & {
    __typename?: 'ConfluenceUpdateValueUserPropertyPayload';
    userProperty?: Maybe<ConfluenceUserProperty>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ConfluenceUserInfo = {
    __typename?: 'ConfluenceUserInfo';
    user?: Maybe<User>;
    type: ConfluenceUserType;
};
export declare type ConfluenceUserProperty = {
    __typename?: 'ConfluenceUserProperty';
    createdDate: Scalars['String'];
    id: Scalars['ID'];
    key: Scalars['String'];
    lastModifiedDate: Scalars['String'];
    propertyId: Scalars['ID'];
    value: Scalars['String'];
};
export declare enum ConfluenceUserType {
    Anonymous = "ANONYMOUS",
    Known = "KNOWN"
}
export declare type ConfluenceValidateSpaceKeyResponse = {
    __typename?: 'ConfluenceValidateSpaceKeyResponse';
    generatedUniqueKey?: Maybe<Scalars['String']>;
    isValid: Scalars['Boolean'];
};
export declare type ConfluenceWhiteboard = {
    __typename?: 'ConfluenceWhiteboard';
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    whiteboardId: Scalars['ID'];
};
export declare type ConnectAppScope = {
    __typename?: 'ConnectAppScope';
    scopeId: Scalars['ID'];
    id: Scalars['ID'];
    name: Scalars['String'];
    capability: Scalars['String'];
    atlassianProductName: Scalars['String'];
};
export declare type ConnectedAppsAppVersion = {
    __typename?: 'ConnectedAppsAppVersion';
    id: Scalars['ID'];
    version?: Maybe<Scalars['String']>;
    permissions?: Maybe<ConnectedAppsPermissions>;
};
export declare type ConnectedAppsConnectApp = {
    __typename?: 'ConnectedAppsConnectApp';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    vendorName?: Maybe<Scalars['String']>;
    installationsByContext?: Maybe<Array<ConnectedAppsConnectInstallations>>;
};
export declare type ConnectedAppsConnectAppInstallationsByContextArgs = {
    contexts: Array<Scalars['ID']>;
};
export declare type ConnectedAppsConnectInstallations = {
    __typename?: 'ConnectedAppsConnectInstallations';
    id: Scalars['String'];
    appId: Scalars['String'];
    context: Scalars['String'];
    appVersion?: Maybe<ConnectedAppsAppVersion>;
};
export declare type ConnectedAppsPermissions = {
    __typename?: 'ConnectedAppsPermissions';
    scopes?: Maybe<Array<ConnectedAppsScope>>;
    egress?: Maybe<Array<ConnectedAppsScopeAppNetworkEgressPermission>>;
};
export declare type ConnectedAppsScope = {
    __typename?: 'ConnectedAppsScope';
    key: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type ConnectedAppsScopeAppNetworkEgressPermission = {
    __typename?: 'ConnectedAppsScopeAppNetworkEgressPermission';
    type?: Maybe<Scalars['String']>;
    addresses?: Maybe<Array<Scalars['String']>>;
};
export declare type ContainerEventObject = {
    __typename?: 'ContainerEventObject';
    id: Scalars['ID'];
    type: Scalars['String'];
    attributes: Scalars['JSON'];
};
export declare type ContentPlatformAnyContext = ContentPlatformContextProduct | ContentPlatformContextApp | ContentPlatformContextTheme;
export declare enum ContentPlatformBooleanOperators {
    And = "AND",
    Or = "OR"
}
export declare type ContentPlatformContentEdge = {
    __typename?: 'ContentPlatformContentEdge';
    node: ContentPlatformContentFacet;
    cursor: Scalars['String'];
};
export declare type ContentPlatformContentFacet = {
    __typename?: 'ContentPlatformContentFacet';
    contentType: Scalars['String'];
    field: Scalars['String'];
    totalCount: Scalars['Float'];
    context: Scalars['JSON'];
};
export declare type ContentPlatformContentFacetClause = {
    and?: Maybe<Array<ContentPlatformContentFacetClause>>;
    or?: Maybe<Array<ContentPlatformContentFacetClause>>;
    not?: Maybe<Array<ContentPlatformContentFacetClause>>;
    isNull?: Maybe<Scalars['String']>;
    isNotNull?: Maybe<Scalars['String']>;
    withLocales?: Maybe<Array<Scalars['String']>>;
    returnDefaultLocaleIfNoResult?: Maybe<Scalars['Boolean']>;
    fieldNamed?: Maybe<Scalars['String']>;
    havingValues?: Maybe<Array<Scalars['String']>>;
};
export declare type ContentPlatformContentFacetClauseType = {
    __typename?: 'ContentPlatformContentFacetClauseType';
    and?: Maybe<Array<ContentPlatformContentFacetClauseType>>;
    or?: Maybe<Array<ContentPlatformContentFacetClauseType>>;
    not?: Maybe<Array<ContentPlatformContentFacetClauseType>>;
    isNull?: Maybe<Scalars['String']>;
    isNotNull?: Maybe<Scalars['String']>;
    withLocales?: Maybe<Array<Scalars['String']>>;
    returnDefaultLocaleIfNoResult?: Maybe<Scalars['Boolean']>;
    fieldNamed?: Maybe<Scalars['String']>;
    havingValues?: Maybe<Array<Scalars['String']>>;
};
export declare type ContentPlatformContentFacetConnection = {
    __typename?: 'ContentPlatformContentFacetConnection';
    pageInfo: PageInfo;
    edges: Array<ContentPlatformContentEdge>;
};
export declare type ContentPlatformContextApp = {
    __typename?: 'ContentPlatformContextApp';
    contextId: Scalars['String'];
    title: Scalars['String'];
    preventProdPublishing?: Maybe<Scalars['Boolean']>;
    appName: Scalars['String'];
    parentProductContext: Array<ContentPlatformContextProduct>;
    icon?: Maybe<ContentPlatformImageAsset>;
    url?: Maybe<Scalars['String']>;
};
export declare type ContentPlatformContextProduct = {
    __typename?: 'ContentPlatformContextProduct';
    contextId: Scalars['String'];
    title: Scalars['String'];
    preventProdPublishing?: Maybe<Scalars['Boolean']>;
    productName: Scalars['String'];
    deployment: Scalars['String'];
    version?: Maybe<Scalars['String']>;
    icon?: Maybe<ContentPlatformImageAsset>;
    productBlurb?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    supportTitle?: Maybe<Scalars['String']>;
    customSupportFormAuthenticated?: Maybe<Scalars['String']>;
    customSupportFormUnauthenticated?: Maybe<Scalars['String']>;
};
export declare type ContentPlatformContextProductEntry = {
    __typename?: 'ContentPlatformContextProductEntry';
    contextId: Scalars['String'];
    title: Scalars['String'];
    preventProdPublishing?: Maybe<Scalars['Boolean']>;
    productName: Scalars['String'];
    deployment: Scalars['String'];
    version?: Maybe<Scalars['String']>;
    icon?: Maybe<ContentPlatformImageAssetEntry>;
    productBlurb?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    supportTitle?: Maybe<Scalars['String']>;
    customSupportFormAuthenticated?: Maybe<Scalars['String']>;
    customSupportFormUnauthenticated?: Maybe<Scalars['String']>;
};
export declare type ContentPlatformContextTheme = {
    __typename?: 'ContentPlatformContextTheme';
    contextId: Scalars['String'];
    title: Scalars['String'];
    preventProdPublishing: Scalars['Boolean'];
    hubName: Scalars['String'];
    icon?: Maybe<ContentPlatformImageAsset>;
    url?: Maybe<Scalars['String']>;
};
export declare type ContentPlatformDateRangeFilter = {
    before: Scalars['DateTime'];
    after: Scalars['DateTime'];
};
export declare type ContentPlatformField = {
    field: ContentPlatformFieldNames;
};
export declare enum ContentPlatformFieldNames {
    Title = "TITLE",
    Description = "DESCRIPTION"
}
export declare type ContentPlatformFieldType = {
    __typename?: 'ContentPlatformFieldType';
    field: ContentPlatformFieldNames;
};
export declare type ContentPlatformImageAsset = {
    __typename?: 'ContentPlatformImageAsset';
    title: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    url: Scalars['String'];
    details: Scalars['JSON'];
    fileName: Scalars['String'];
    contentType: Scalars['String'];
};
export declare type ContentPlatformImageAssetEntry = {
    __typename?: 'ContentPlatformImageAssetEntry';
    title: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    url: Scalars['String'];
    details: Scalars['JSON'];
    fileName: Scalars['String'];
    contentType: Scalars['String'];
};
export declare type ContentPlatformImageComponent = {
    __typename?: 'ContentPlatformImageComponent';
    name: Scalars['String'];
    altTag: Scalars['String'];
    image: ContentPlatformImageAsset;
    contextReference: Array<ContentPlatformAnyContext>;
};
export declare enum ContentPlatformOperators {
    Any = "ANY",
    All = "ALL"
}
export declare type ContentPlatformReleaseNote = {
    __typename?: 'ContentPlatformReleaseNote';
    releaseNoteId: Scalars['String'];
    updatedAt?: Maybe<Scalars['String']>;
    createdAt?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    fdIssueLink?: Maybe<Scalars['String']>;
    fdIssueKey?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    changeTargetSchedule?: Maybe<Scalars['String']>;
    announcementPlan?: Maybe<ContentPlatformTaxonomyAnnouncementPlan>;
    changeType?: Maybe<ContentPlatformTypeOfChange>;
    changeStatus?: Maybe<ContentPlatformStatusOfChange>;
    relatedContexts?: Maybe<Array<ContentPlatformAnyContext>>;
    affectedUsers?: Maybe<Array<ContentPlatformTaxonomyUserRole>>;
    usersNeedingInformed?: Maybe<Array<ContentPlatformTaxonomyUserRole>>;
    description?: Maybe<Scalars['JSON']>;
    featuredImage?: Maybe<ContentPlatformImageComponent>;
    keyChanges?: Maybe<Scalars['JSON']>;
    reasonForChange?: Maybe<Scalars['JSON']>;
    prepareForChange?: Maybe<Scalars['JSON']>;
    supportingVisuals?: Maybe<Array<ContentPlatformImageComponent>>;
    relatedContentLinks?: Maybe<Array<Scalars['String']>>;
    featureRolloutDate?: Maybe<Scalars['String']>;
    featureRolloutEndDate?: Maybe<Scalars['String']>;
    changeCategory?: Maybe<ContentPlatformTaxonomyChangeCategory>;
    releaseNoteFlag?: Maybe<Scalars['String']>;
    releaseNoteFlagProject?: Maybe<Scalars['String']>;
    releaseNoteFlagEnvironment?: Maybe<Scalars['String']>;
    releaseNoteFlagOffValue?: Maybe<Scalars['String']>;
    publishStatus?: Maybe<Scalars['String']>;
    benefitsList?: Maybe<Scalars['JSON']>;
    getStarted?: Maybe<Scalars['JSON']>;
};
export declare type ContentPlatformReleaseNoteFilterOptions = {
    fdIssueLinks?: Maybe<Array<Scalars['String']>>;
    contextId?: Maybe<Scalars['String']>;
    fdIssueKeys?: Maybe<Array<Scalars['String']>>;
    changeTypes?: Maybe<Array<Scalars['String']>>;
    productNames?: Maybe<Array<Scalars['String']>>;
    changeStatus?: Maybe<Array<Scalars['String']>>;
    featureRolloutDates?: Maybe<Array<Scalars['String']>>;
    releaseNoteFlags?: Maybe<Array<Scalars['String']>>;
    productFeatureFlags?: Maybe<Scalars['JSON']>;
    featureFlagEnvironment?: Maybe<Scalars['String']>;
    featureFlagProject?: Maybe<Scalars['String']>;
    releaseNoteFlagOffValues?: Maybe<Array<Scalars['String']>>;
    updatedAt?: Maybe<ContentPlatformDateRangeFilter>;
};
export declare type ContentPlatformReleaseNotesConnection = {
    __typename?: 'ContentPlatformReleaseNotesConnection';
    pageInfo: PageInfo;
    edges: Array<ContentPlatformReleaseNotesEdge>;
};
export declare type ContentPlatformReleaseNotesEdge = {
    __typename?: 'ContentPlatformReleaseNotesEdge';
    node: ContentPlatformReleaseNote;
    cursor: Scalars['String'];
};
export declare type ContentPlatformSearchOptions = {
    queries: Array<ContentPlatformSearchQuery>;
    operator?: Maybe<ContentPlatformBooleanOperators>;
};
export declare type ContentPlatformSearchQuery = {
    searchType: ContentPlatformSearchTypes;
    terms: Array<Scalars['String']>;
    termOperator?: Maybe<ContentPlatformOperators>;
    fields?: Maybe<Array<ContentPlatformField>>;
    fieldOperator?: Maybe<ContentPlatformOperators>;
};
export declare type ContentPlatformSearchQueryType = {
    __typename?: 'ContentPlatformSearchQueryType';
    searchType: ContentPlatformSearchTypes;
    terms: Array<Scalars['String']>;
    termOperator?: Maybe<ContentPlatformOperators>;
    fields?: Maybe<Array<ContentPlatformFieldType>>;
    fieldOperator?: Maybe<ContentPlatformOperators>;
};
export declare enum ContentPlatformSearchTypes {
    Contains = "CONTAINS",
    ExactMatch = "EXACT_MATCH"
}
export declare type ContentPlatformStatusOfChange = {
    __typename?: 'ContentPlatformStatusOfChange';
    label: Scalars['String'];
    description: Scalars['String'];
};
export declare type ContentPlatformTaxonomyAnnouncementPlan = {
    __typename?: 'ContentPlatformTaxonomyAnnouncementPlan';
    title: Scalars['String'];
    description: Scalars['String'];
};
export declare type ContentPlatformTaxonomyAnnouncementPlanEntry = {
    __typename?: 'ContentPlatformTaxonomyAnnouncementPlanEntry';
    title: Scalars['String'];
    description: Scalars['String'];
};
export declare type ContentPlatformTaxonomyChangeCategory = {
    __typename?: 'ContentPlatformTaxonomyChangeCategory';
    title: Scalars['String'];
    description: Scalars['String'];
};
export declare type ContentPlatformTaxonomyUserRole = {
    __typename?: 'ContentPlatformTaxonomyUserRole';
    title: Scalars['String'];
    description: Scalars['String'];
};
export declare type ContentPlatformTypeOfChange = {
    __typename?: 'ContentPlatformTypeOfChange';
    label: Scalars['String'];
    icon: ContentPlatformImageAsset;
};
export declare type ContextEventObject = {
    __typename?: 'ContextEventObject';
    id: Scalars['ID'];
    type: Scalars['String'];
    attributes: Scalars['JSON'];
};
export declare type CopyPolarisInsightsContainerInput = {
    project: Scalars['ID'];
    container?: Maybe<Scalars['ID']>;
};
export declare type CopyPolarisInsightsInput = {
    source: CopyPolarisInsightsContainerInput;
    destination: CopyPolarisInsightsContainerInput;
    insights?: Maybe<Array<Scalars['String']>>;
};
export declare type CopyPolarisInsightsPayload = Payload & {
    __typename?: 'CopyPolarisInsightsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    copiedInsights?: Maybe<Array<PolarisInsight>>;
};
export declare type CreateAppDeploymentInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    artifactUrl: Scalars['URL'];
    hostedResourceUploadId?: Maybe<Scalars['ID']>;
};
export declare type CreateAppDeploymentResponse = Payload & {
    __typename?: 'CreateAppDeploymentResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    deployment?: Maybe<AppDeployment>;
};
export declare type CreateAppDeploymentUrlInput = {
    appId: Scalars['ID'];
};
export declare type CreateAppDeploymentUrlResponse = Payload & {
    __typename?: 'CreateAppDeploymentUrlResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    deploymentUrl?: Maybe<Scalars['String']>;
};
export declare type CreateAppEnvironmentInput = {
    appAri: Scalars['String'];
    environmentKey: Scalars['String'];
    environmentType: AppEnvironmentType;
};
export declare type CreateAppEnvironmentResponse = Payload & {
    __typename?: 'CreateAppEnvironmentResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    environment?: Maybe<AppEnvironment>;
};
export declare type CreateAppInput = {
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
};
export declare type CreateAppResponse = Payload & {
    __typename?: 'CreateAppResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    app?: Maybe<App>;
};
export declare type CreateAppTunnelResponse = Payload & {
    __typename?: 'CreateAppTunnelResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    keepAlive?: Maybe<Scalars['String']>;
    expiry?: Maybe<Scalars['String']>;
};
export declare type CreateAppTunnelsInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    tunnelDefinitions: TunnelDefinitionsInput;
    force?: Maybe<Scalars['Boolean']>;
};
export declare type CreateCardsOutput = {
    __typename?: 'CreateCardsOutput';
    boardScope?: Maybe<BoardScope>;
    newCards?: Maybe<Array<Maybe<SoftwareCard>>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type CreateColumnInput = {
    boardId: Scalars['ID'];
    columnName: Scalars['String'];
};
export declare type CreateColumnOutput = MutationResponse & {
    __typename?: 'CreateColumnOutput';
    newColumn?: Maybe<Column>;
    columns?: Maybe<Array<Maybe<Column>>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type CreateCompassComponentExternalAliasInput = {
    componentId: Scalars['ID'];
    externalAlias: CompassExternalAliasInput;
};
export declare type CreateCompassComponentExternalAliasPayload = Payload & {
    __typename?: 'CreateCompassComponentExternalAliasPayload';
    createdCompassExternalAlias?: Maybe<CompassExternalAlias>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type CreateCompassComponentFromTemplateArgumentInput = {
    key: Scalars['String'];
    value?: Maybe<Scalars['String']>;
};
export declare type CreateCompassComponentFromTemplateInput = {
    templateComponentId: Scalars['ID'];
    templateArguments?: Maybe<Array<CreateCompassComponentFromTemplateArgumentInput>>;
    createComponentDetails: CreateCompassComponentInput;
};
export declare type CreateCompassComponentFromTemplatePayload = Payload & {
    __typename?: 'CreateCompassComponentFromTemplatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type CreateCompassComponentInput = {
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    type?: Maybe<CompassComponentType>;
    typeId?: Maybe<Scalars['ID']>;
    ownerId?: Maybe<Scalars['ID']>;
    fields?: Maybe<Array<CreateCompassFieldInput>>;
    links?: Maybe<Array<CreateCompassLinkInput>>;
    labels?: Maybe<Array<Scalars['String']>>;
    customFields?: Maybe<Array<CompassCustomFieldInput>>;
};
export declare type CreateCompassComponentLinkInput = {
    componentId: Scalars['ID'];
    link: CreateCompassLinkInput;
};
export declare type CreateCompassComponentLinkPayload = Payload & {
    __typename?: 'CreateCompassComponentLinkPayload';
    createdComponentLink?: Maybe<CompassLink>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type CreateCompassComponentPayload = Payload & {
    __typename?: 'CreateCompassComponentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type CreateCompassFieldInput = {
    definition: Scalars['ID'];
    value: CompassFieldValueInput;
};
export declare type CreateCompassHasDescriptionScorecardCriteriaInput = {
    weight: Scalars['Int'];
};
export declare type CreateCompassHasFieldScorecardCriteriaInput = {
    weight: Scalars['Int'];
    fieldDefinitionId: Scalars['ID'];
};
export declare type CreateCompassHasLinkScorecardCriteriaInput = {
    weight: Scalars['Int'];
    linkType: CompassLinkType;
    textComparator?: Maybe<CompassCriteriaTextComparatorOptions>;
    textComparatorValue?: Maybe<Scalars['String']>;
};
export declare type CreateCompassHasMetricValueCriteriaInput = {
    weight: Scalars['Int'];
    metricDefinitionId: Scalars['ID'];
    comparatorValue: Scalars['Float'];
    comparator: CompassCriteriaNumberComparatorOptions;
};
export declare type CreateCompassHasOwnerScorecardCriteriaInput = {
    weight: Scalars['Int'];
};
export declare type CreateCompassLinkInput = {
    name?: Maybe<Scalars['String']>;
    type: CompassLinkType;
    url: Scalars['URL'];
};
export declare type CreateCompassRelationshipInput = {
    type: CompassRelationshipType;
    startNodeId: Scalars['ID'];
    endNodeId: Scalars['ID'];
};
export declare type CreateCompassRelationshipPayload = Payload & {
    __typename?: 'CreateCompassRelationshipPayload';
    createdCompassRelationship?: Maybe<CompassRelationship>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CreateCompassScorecardCriteriaInput = {
    hasLink?: Maybe<CreateCompassHasLinkScorecardCriteriaInput>;
    hasField?: Maybe<CreateCompassHasFieldScorecardCriteriaInput>;
    hasDescription?: Maybe<CreateCompassHasDescriptionScorecardCriteriaInput>;
    hasOwner?: Maybe<CreateCompassHasOwnerScorecardCriteriaInput>;
    hasMetricValue?: Maybe<CreateCompassHasMetricValueCriteriaInput>;
    hasCustomTextValue?: Maybe<CompassCreateHasCustomTextFieldScorecardCriteriaInput>;
    hasCustomBooleanValue?: Maybe<CompassCreateHasCustomBooleanFieldScorecardCriteriaInput>;
    hasCustomNumberValue?: Maybe<CompassCreateHasCustomNumberFieldScorecardCriteriaInput>;
};
export declare type CreateCompassScorecardCriteriasInput = {
    criterias: Array<CreateCompassScorecardCriteriaInput>;
};
export declare type CreateCompassScorecardCriteriasPayload = Payload & {
    __typename?: 'CreateCompassScorecardCriteriasPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    scorecard?: Maybe<CompassScorecard>;
};
export declare type CreateCompassScorecardInput = {
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    ownerId?: Maybe<Scalars['ID']>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
    importance: CompassScorecardImportance;
    criterias?: Maybe<Array<CreateCompassScorecardCriteriaInput>>;
    componentLabelNames?: Maybe<Array<Scalars['String']>>;
    componentTierValues?: Maybe<Array<Scalars['String']>>;
};
export declare type CreateCompassScorecardPayload = Payload & {
    __typename?: 'CreateCompassScorecardPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    scorecardDetails?: Maybe<CompassScorecard>;
};
export declare type CreateCompassStarredComponentInput = {
    componentId: Scalars['ID'];
};
export declare type CreateCompassStarredComponentPayload = Payload & {
    __typename?: 'CreateCompassStarredComponentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CreateCustomFilterInput = {
    boardId: Scalars['ID'];
    name: Scalars['String'];
    jql: Scalars['String'];
    description?: Maybe<Scalars['String']>;
};
export declare type CreateDevOpsServiceAndJiraProjectRelationshipInput = {
    cloudId: Scalars['ID'];
    jiraProjectId: Scalars['ID'];
    serviceId: Scalars['ID'];
    relationshipType: DevOpsServiceAndJiraProjectRelationshipType;
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsContainerRelationshipEntityPropertyInput>>;
};
export declare type CreateDevOpsServiceAndJiraProjectRelationshipPayload = Payload & {
    __typename?: 'CreateDevOpsServiceAndJiraProjectRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    serviceAndJiraProjectRelationship?: Maybe<DevOpsServiceAndJiraProjectRelationship>;
};
export declare type CreateDevOpsServiceAndOpsgenieTeamRelationshipInput = {
    cloudId: Scalars['ID'];
    serviceId: Scalars['ID'];
    opsgenieTeamId: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsContainerRelationshipEntityPropertyInput>>;
};
export declare type CreateDevOpsServiceAndOpsgenieTeamRelationshipPayload = Payload & {
    __typename?: 'CreateDevOpsServiceAndOpsgenieTeamRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    serviceAndOpsgenieTeamRelationship?: Maybe<DevOpsServiceAndOpsgenieTeamRelationship>;
};
export declare type CreateDevOpsServiceAndRepositoryRelationshipInput = {
    serviceId: Scalars['ID'];
    bitbucketRepositoryId?: Maybe<Scalars['ID']>;
    thirdPartyRepository?: Maybe<ThirdPartyRepositoryInput>;
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsContainerRelationshipEntityPropertyInput>>;
};
export declare type CreateDevOpsServiceAndRepositoryRelationshipPayload = Payload & {
    __typename?: 'CreateDevOpsServiceAndRepositoryRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    serviceAndRepositoryRelationship?: Maybe<DevOpsServiceAndRepositoryRelationship>;
};
export declare type CreateDevOpsServiceInput = {
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsServiceEntityPropertyInput>>;
    cloudId: Scalars['String'];
    serviceTier: DevOpsServiceTierInput;
};
export declare type CreateDevOpsServicePayload = Payload & {
    __typename?: 'CreateDevOpsServicePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    service?: Maybe<DevOpsService>;
};
export declare type CreateDevOpsServiceRelationshipInput = {
    startId: Scalars['ID'];
    endId: Scalars['ID'];
    type: DevOpsServiceRelationshipType;
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsServiceEntityPropertyInput>>;
};
export declare type CreateDevOpsServiceRelationshipPayload = Payload & {
    __typename?: 'CreateDevOpsServiceRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    serviceRelationship?: Maybe<DevOpsServiceRelationship>;
};
export declare type CreateEventSourceInput = {
    cloudId: Scalars['ID'];
    externalEventSourceId: Scalars['ID'];
    eventType: CompassEventType;
};
export declare type CreateEventSourcePayload = Payload & {
    __typename?: 'CreateEventSourcePayload';
    eventSource?: Maybe<EventSource>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CreateHostedResourceUploadUrlInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    resourceKeys: Array<Scalars['String']>;
};
export declare type CreateHostedResourceUploadUrlPayload = Payload & {
    __typename?: 'CreateHostedResourceUploadUrlPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    preSignedUrls?: Maybe<Array<HostedResourcePreSignedUrl>>;
    uploadId: Scalars['ID'];
};
export declare type CreateJiraProjectAndOpsgenieTeamRelationshipInput = {
    jiraProjectId: Scalars['ID'];
    jiraProjectType?: Maybe<DevOpsJiraProjectType>;
    opsgenieTeamId: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsContainerRelationshipEntityPropertyInput>>;
};
export declare type CreateJiraProjectAndOpsgenieTeamRelationshipPayload = Payload & {
    __typename?: 'CreateJiraProjectAndOpsgenieTeamRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jiraProjectAndOpsgenieTeamRelationship?: Maybe<JiraProjectAndOpsgenieTeamRelationship>;
};
export declare type CreateJiraProjectAndRepositoryRelationshipInput = {
    jiraProjectId: Scalars['ID'];
    bitbucketRepositoryId?: Maybe<Scalars['ID']>;
    thirdPartyRepository?: Maybe<ThirdPartyRepositoryInput>;
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsContainerRelationshipEntityPropertyInput>>;
};
export declare type CreateJiraProjectAndRepositoryRelationshipPayload = Payload & {
    __typename?: 'CreateJiraProjectAndRepositoryRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jiraProjectAndRepositoryRelationship?: Maybe<JiraProjectAndRepositoryRelationship>;
};
export declare type CreatePolarisCalculatedField = {
    project: Scalars['ID'];
    label: Scalars['String'];
    formula: Scalars['JSON'];
    presentation?: Maybe<PolarisPresentationInput>;
};
export declare type CreatePolarisCalculatedFieldPayload = Payload & {
    __typename?: 'CreatePolarisCalculatedFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisIdeaField>;
};
export declare type CreatePolarisCommentInput = {
    kind?: Maybe<PolarisCommentKind>;
    subject?: Maybe<Scalars['ID']>;
    content?: Maybe<Scalars['JSON']>;
};
export declare type CreatePolarisCommentPayload = Payload & {
    __typename?: 'CreatePolarisCommentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisComment>;
};
export declare type CreatePolarisDecorationInput = {
    field: Scalars['ID'];
    update: UpdatePolarisDecorationInput;
};
export declare type CreatePolarisDecorationPayload = Payload & {
    __typename?: 'CreatePolarisDecorationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisDecoration>;
};
export declare type CreatePolarisIdeaTemplateInput = {
    project: Scalars['ID'];
    title: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    template?: Maybe<Scalars['JSON']>;
};
export declare type CreatePolarisIdeaTemplatePayload = {
    __typename?: 'CreatePolarisIdeaTemplatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisIdeaTemplate>;
};
export declare type CreatePolarisInsightFromPlayContributionInput = {
    contribution: Scalars['ID'];
    subject?: Maybe<Scalars['ID']>;
};
export declare type CreatePolarisInsightInput = {
    cloudID: Scalars['String'];
    projectID: Scalars['Int'];
    issueID?: Maybe<Scalars['Int']>;
    data?: Maybe<Array<Scalars['JSON']>>;
    snippets?: Maybe<Array<CreatePolarisSnippetInput>>;
    description?: Maybe<Scalars['JSON']>;
};
export declare type CreatePolarisInsightPayload = Payload & {
    __typename?: 'CreatePolarisInsightPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisInsight>;
};
export declare type CreatePolarisPlayContribution = {
    play: Scalars['ID'];
    subject: Scalars['ID'];
    amount?: Maybe<Scalars['Int']>;
    comment?: Maybe<Scalars['JSON']>;
};
export declare type CreatePolarisPlayContributionPayload = {
    __typename?: 'CreatePolarisPlayContributionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisPlayContribution>;
};
export declare type CreatePolarisPlayInput = {
    project: Scalars['ID'];
    kind: PolarisPlayKind;
    label: Scalars['String'];
    summary?: Maybe<Scalars['String']>;
    parameters?: Maybe<Scalars['JSON']>;
    fromView?: Maybe<Scalars['ID']>;
    description?: Maybe<Scalars['JSON']>;
};
export declare type CreatePolarisPlayPayload = {
    __typename?: 'CreatePolarisPlayPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisPlay>;
};
export declare type CreatePolarisProjectInput = {
    tenant: Scalars['ID'];
    key: Scalars['String'];
    name: Scalars['String'];
};
export declare type CreatePolarisSnippetInput = {
    oauthClientId: Scalars['String'];
    data?: Maybe<Scalars['JSON']>;
    url?: Maybe<Scalars['String']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type CreatePolarisStandardFieldInput = {
    project: Scalars['ID'];
    ideaType: Scalars['ID'];
    name: Scalars['String'];
    fieldType: PolarisFieldType;
    presentation?: Maybe<PolarisPresentationInput>;
};
export declare type CreatePolarisStandardFieldPayload = Payload & {
    __typename?: 'CreatePolarisStandardFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisIdeaField>;
};
export declare type CreatePolarisViewInput = {
    container: Scalars['ID'];
    visualizationType?: Maybe<PolarisVisualizationType>;
    copyView?: Maybe<Scalars['ID']>;
    update?: Maybe<UpdatePolarisViewInput>;
};
export declare type CreatePolarisViewPayload = Payload & {
    __typename?: 'CreatePolarisViewPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisView>;
};
export declare type CreatePolarisViewSetInput = {
    container: Scalars['ID'];
    name: Scalars['String'];
};
export declare type CreatePolarisViewSetPayload = Payload & {
    __typename?: 'CreatePolarisViewSetPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisViewSet>;
};
export declare type CreateRankingListInput = {
    listId: Scalars['ID'];
    items?: Maybe<Array<Scalars['String']>>;
};
export declare type CreateSprintInput = {
    boardId: Scalars['ID'];
};
export declare type CreateSprintResponse = MutationResponse & {
    __typename?: 'CreateSprintResponse';
    sprint?: Maybe<CreatedSprint>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type CreateWebTriggerUrlResponse = MutationResponse & {
    __typename?: 'CreateWebTriggerUrlResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    url?: Maybe<Scalars['URL']>;
    id?: Maybe<Scalars['ID']>;
};
export declare type CreatedSprint = {
    __typename?: 'CreatedSprint';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
    daysRemaining?: Maybe<Scalars['Int']>;
    sprintState?: Maybe<SprintState>;
    canUpdateSprint?: Maybe<Scalars['Boolean']>;
};
export declare type CumulativeFlowDiagram = {
    __typename?: 'CumulativeFlowDiagram';
    chart: CfdChartConnection;
    filters: CfdFilters;
};
export declare type CumulativeFlowDiagramChartArgs = {
    first?: Maybe<Scalars['Int']>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type CurrentEstimation = {
    __typename?: 'CurrentEstimation';
    customFieldId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    estimationType?: Maybe<EstimationType>;
};
export declare type CurrentUser = {
    __typename?: 'CurrentUser';
    permissions: Array<Maybe<Scalars['SoftwareBoardPermission']>>;
};
export declare type CustomEntity = {
    name: Scalars['String'];
    attributes: Array<CustomEntityAttribute>;
    indexes?: Maybe<Array<CustomEntityIndex>>;
};
export declare type CustomEntityAttribute = {
    name: Scalars['String'];
    type: CustomEntityAttributeType;
    required?: Maybe<Scalars['Boolean']>;
};
export declare enum CustomEntityAttributeType {
    String = "string",
    Boolean = "boolean",
    Float = "float",
    Integer = "integer",
    Any = "any"
}
export declare type CustomEntityDefinition = {
    __typename?: 'CustomEntityDefinition';
    name: Scalars['String'];
    version: Scalars['Int'];
    attributes: Scalars['JSON'];
    indexes?: Maybe<Array<Maybe<CustomEntityIndexDefinition>>>;
    status: CustomEntityStatus;
};
export declare type CustomEntityIndex = {
    name: Scalars['String'];
    range: Array<Scalars['String']>;
    partition?: Maybe<Array<Scalars['String']>>;
};
export declare type CustomEntityIndexDefinition = {
    __typename?: 'CustomEntityIndexDefinition';
    name: Scalars['String'];
    range: Array<Scalars['String']>;
    partition?: Maybe<Array<Scalars['String']>>;
    status: CustomEntityIndexStatus;
};
export declare enum CustomEntityIndexStatus {
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    Creating = "CREATING",
    Pending = "PENDING"
}
export declare type CustomEntityMutation = {
    __typename?: 'CustomEntityMutation';
    createCustomEntities?: Maybe<CustomEntityPayload>;
    validateCustomEntities?: Maybe<CustomEntityPayload>;
};
export declare type CustomEntityMutationCreateCustomEntitiesArgs = {
    input: CustomEntityMutationInput;
};
export declare type CustomEntityMutationValidateCustomEntitiesArgs = {
    input: CustomEntityMutationInput;
};
export declare type CustomEntityMutationInput = {
    oauthClientId: Scalars['String'];
    entities: Array<CustomEntity>;
};
export declare type CustomEntityPayload = Payload & {
    __typename?: 'CustomEntityPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare enum CustomEntityStatus {
    Active = "ACTIVE",
    Inactive = "INACTIVE"
}
export declare type CustomFilter = {
    __typename?: 'CustomFilter';
    id: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    filterQuery?: Maybe<FilterQuery>;
};
export declare type CustomFilterCreateOutput = MutationResponse & {
    __typename?: 'CustomFilterCreateOutput';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    customFilter?: Maybe<CustomFilter>;
    validationErrors: Array<CustomFiltersValidationError>;
};
export declare type CustomFiltersValidationError = {
    __typename?: 'CustomFiltersValidationError';
    fieldName: Scalars['String'];
    errorMessage: Scalars['String'];
    errorKey: Scalars['String'];
};
export declare type CustomUiTunnelDefinition = {
    __typename?: 'CustomUITunnelDefinition';
    resourceKey?: Maybe<Scalars['String']>;
    tunnelUrl?: Maybe<Scalars['URL']>;
};
export declare type CustomUiTunnelDefinitionInput = {
    resourceKey?: Maybe<Scalars['String']>;
    tunnelUrl?: Maybe<Scalars['URL']>;
};
export declare type CustomerServiceAttribute = {
    __typename?: 'CustomerServiceAttribute';
    id: Scalars['ID'];
    name: Scalars['String'];
    config?: Maybe<CustomerServiceAttributeConfigMetadata>;
};
export declare type CustomerServiceAttributeConfigMetadata = {
    __typename?: 'CustomerServiceAttributeConfigMetadata';
    position?: Maybe<Scalars['Int']>;
};
export declare type CustomerServiceAttributeConfigMetadataUpdateInput = {
    id: Scalars['ID'];
    position?: Maybe<Scalars['Int']>;
};
export declare type CustomerServiceAttributeConfigMetadataUpdatePayload = Payload & {
    __typename?: 'CustomerServiceAttributeConfigMetadataUpdatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CustomerServiceAttributeCreateInput = {
    name: Scalars['String'];
};
export declare type CustomerServiceAttributeCreatePayload = Payload & {
    __typename?: 'CustomerServiceAttributeCreatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    successfullyCreatedAttribute?: Maybe<CustomerServiceAttribute>;
};
export declare type CustomerServiceAttributeDeleteInput = {
    id: Scalars['ID'];
};
export declare type CustomerServiceAttributeDeletePayload = Payload & {
    __typename?: 'CustomerServiceAttributeDeletePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CustomerServiceAttributeUpdateInput = {
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type CustomerServiceAttributeUpdatePayload = Payload & {
    __typename?: 'CustomerServiceAttributeUpdatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    successfullyUpdatedAttribute?: Maybe<CustomerServiceAttribute>;
};
export declare type CustomerServiceAttributeValue = {
    __typename?: 'CustomerServiceAttributeValue';
    id: Scalars['ID'];
    name: Scalars['String'];
    value?: Maybe<Scalars['String']>;
    config?: Maybe<CustomerServiceAttributeConfigMetadata>;
};
export declare type CustomerServiceAttributes = {
    __typename?: 'CustomerServiceAttributes';
    attributes?: Maybe<Array<CustomerServiceAttribute>>;
};
export declare type CustomerServiceAttributesQueryResult = CustomerServiceAttributes | QueryError;
export declare type CustomerServiceIndividual = Node & {
    __typename?: 'CustomerServiceIndividual';
    id: Scalars['ID'];
    name: Scalars['String'];
    attributes?: Maybe<Array<Maybe<CustomerServiceAttributeValue>>>;
};
export declare type CustomerServiceIndividualDeletePayload = Payload & {
    __typename?: 'CustomerServiceIndividualDeletePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CustomerServiceIndividualQueryResult = CustomerServiceIndividual | QueryError;
export declare type CustomerServiceIndividualUpdateAttributeByNameInput = {
    accountId: Scalars['String'];
    attributeName: Scalars['String'];
    attributeValue: Scalars['String'];
};
export declare type CustomerServiceIndividualUpdateAttributeInput = {
    accountId: Scalars['String'];
    attributeId: Scalars['String'];
    attributeValue: Scalars['String'];
};
export declare type CustomerServiceIndividualUpdateAttributeValuePayload = Payload & {
    __typename?: 'CustomerServiceIndividualUpdateAttributeValuePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    attribute?: Maybe<CustomerServiceAttributeValue>;
};
export declare type CustomerServiceMutationApi = {
    __typename?: 'CustomerServiceMutationApi';
    createOrganization?: Maybe<CustomerServiceOrganizationCreatePayload>;
    updateOrganization?: Maybe<CustomerServiceOrganizationUpdatePayload>;
    deleteOrganization?: Maybe<CustomerServiceOrganizationDeletePayload>;
    createOrganizationAttribute?: Maybe<CustomerServiceAttributeCreatePayload>;
    updateOrganizationAttribute?: Maybe<CustomerServiceAttributeUpdatePayload>;
    deleteOrganizationAttribute?: Maybe<CustomerServiceAttributeDeletePayload>;
    updateOrganizationAttributeConfig?: Maybe<CustomerServiceAttributeConfigMetadataUpdatePayload>;
    updateOrganizationAttributeValue?: Maybe<CustomerServiceOrganizationUpdateAttributeValuePayload>;
    updateOrganizationAttributeValueByName?: Maybe<CustomerServiceOrganizationUpdateAttributeValuePayload>;
    createIndividualAttribute?: Maybe<CustomerServiceAttributeCreatePayload>;
    updateIndividualAttribute?: Maybe<CustomerServiceAttributeUpdatePayload>;
    deleteIndividualAttribute?: Maybe<CustomerServiceAttributeDeletePayload>;
    updateIndividualAttributeConfig?: Maybe<CustomerServiceAttributeConfigMetadataUpdatePayload>;
    updateIndividualAttributeValueByName?: Maybe<CustomerServiceIndividualUpdateAttributeValuePayload>;
};
export declare type CustomerServiceMutationApiCreateOrganizationArgs = {
    input: CustomerServiceOrganizationCreateInput;
};
export declare type CustomerServiceMutationApiUpdateOrganizationArgs = {
    input: CustomerServiceOrganizationUpdateInput;
};
export declare type CustomerServiceMutationApiDeleteOrganizationArgs = {
    input: CustomerServiceOrganizationDeleteInput;
};
export declare type CustomerServiceMutationApiCreateOrganizationAttributeArgs = {
    input: CustomerServiceAttributeCreateInput;
};
export declare type CustomerServiceMutationApiUpdateOrganizationAttributeArgs = {
    input: CustomerServiceAttributeUpdateInput;
};
export declare type CustomerServiceMutationApiDeleteOrganizationAttributeArgs = {
    input: CustomerServiceAttributeDeleteInput;
};
export declare type CustomerServiceMutationApiUpdateOrganizationAttributeConfigArgs = {
    input: CustomerServiceAttributeConfigMetadataUpdateInput;
};
export declare type CustomerServiceMutationApiUpdateOrganizationAttributeValueArgs = {
    input: CustomerServiceOrganizationUpdateAttributeInput;
};
export declare type CustomerServiceMutationApiUpdateOrganizationAttributeValueByNameArgs = {
    input: CustomerServiceOrganizationUpdateAttributeByNameInput;
};
export declare type CustomerServiceMutationApiCreateIndividualAttributeArgs = {
    input: CustomerServiceAttributeCreateInput;
};
export declare type CustomerServiceMutationApiUpdateIndividualAttributeArgs = {
    input: CustomerServiceAttributeUpdateInput;
};
export declare type CustomerServiceMutationApiDeleteIndividualAttributeArgs = {
    input: CustomerServiceAttributeDeleteInput;
};
export declare type CustomerServiceMutationApiUpdateIndividualAttributeConfigArgs = {
    input: CustomerServiceAttributeConfigMetadataUpdateInput;
};
export declare type CustomerServiceMutationApiUpdateIndividualAttributeValueByNameArgs = {
    input: CustomerServiceIndividualUpdateAttributeByNameInput;
};
export declare type CustomerServiceOrganization = Node & {
    __typename?: 'CustomerServiceOrganization';
    id: Scalars['ID'];
    name: Scalars['String'];
    attributes?: Maybe<Array<Maybe<CustomerServiceAttributeValue>>>;
};
export declare type CustomerServiceOrganizationCreateInput = {
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type CustomerServiceOrganizationCreatePayload = Payload & {
    __typename?: 'CustomerServiceOrganizationCreatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    successfullyCreatedOrganizationId?: Maybe<Scalars['ID']>;
};
export declare type CustomerServiceOrganizationDeleteInput = {
    id: Scalars['ID'];
};
export declare type CustomerServiceOrganizationDeletePayload = Payload & {
    __typename?: 'CustomerServiceOrganizationDeletePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CustomerServiceOrganizationQueryResult = CustomerServiceOrganization | QueryError;
export declare type CustomerServiceOrganizationUpdateAttributeByNameInput = {
    organizationId: Scalars['String'];
    attributeName: Scalars['String'];
    attributeValue: Scalars['String'];
};
export declare type CustomerServiceOrganizationUpdateAttributeInput = {
    organizationId: Scalars['String'];
    attributeId: Scalars['String'];
    attributeValue: Scalars['String'];
};
export declare type CustomerServiceOrganizationUpdateAttributeValuePayload = Payload & {
    __typename?: 'CustomerServiceOrganizationUpdateAttributeValuePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    attribute?: Maybe<CustomerServiceAttributeValue>;
};
export declare type CustomerServiceOrganizationUpdateInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type CustomerServiceOrganizationUpdatePayload = Payload & {
    __typename?: 'CustomerServiceOrganizationUpdatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    successfullyUpdatedOrganizationId?: Maybe<Scalars['ID']>;
};
export declare type CustomerServiceQueryApi = {
    __typename?: 'CustomerServiceQueryApi';
    organizationByOrganizationId?: Maybe<CustomerServiceOrganizationQueryResult>;
    organizationAttributes?: Maybe<CustomerServiceAttributesQueryResult>;
    individualByAccountId?: Maybe<CustomerServiceIndividualQueryResult>;
    individualAttributes?: Maybe<CustomerServiceAttributesQueryResult>;
};
export declare type CustomerServiceQueryApiOrganizationByOrganizationIdArgs = {
    organizationId: Scalars['ID'];
};
export declare type CustomerServiceQueryApiIndividualByAccountIdArgs = {
    accountId: Scalars['ID'];
};
export declare type CustomerServiceStatusPayload = Payload & {
    __typename?: 'CustomerServiceStatusPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type CustomerUser = User & LocalizationContext & {
    __typename?: 'CustomerUser';
    id: Scalars['ID'];
    accountId: Scalars['ID'];
    canonicalAccountId: Scalars['ID'];
    accountStatus: AccountStatus;
    name: Scalars['String'];
    picture: Scalars['URL'];
    email?: Maybe<Scalars['String']>;
    zoneinfo?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
};
export declare type DataAccessAndStorage = {
    __typename?: 'DataAccessAndStorage';
    typesOfDataAccessed?: Maybe<Array<Maybe<Scalars['String']>>>;
    typesOfDataStored?: Maybe<Array<Maybe<Scalars['String']>>>;
    isSameDataProcessedAndStored?: Maybe<Scalars['Boolean']>;
    appProcessEUDOutsideAtlassian?: Maybe<Scalars['Boolean']>;
    appStoresEUDOutsideAtlassian?: Maybe<Scalars['Boolean']>;
};
export declare type DataClassificationPolicyDecision = {
    __typename?: 'DataClassificationPolicyDecision';
    status: DataClassificationPolicyDecisionStatus;
};
export declare type DataClassificationPolicyDecisionInput = {
    dataClassificationTags: Array<Scalars['ID']>;
};
export declare enum DataClassificationPolicyDecisionStatus {
    Allowed = "ALLOWED",
    Blocked = "BLOCKED"
}
export declare type DataController = {
    __typename?: 'DataController';
    isAppDataController: AcceptableResponse;
    endUserDataTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type DataProcessingAgreement = {
    __typename?: 'DataProcessingAgreement';
    isDPASupported: AcceptableResponse;
    link: Scalars['String'];
};
export declare type DataProcessor = {
    __typename?: 'DataProcessor';
    isAppDataProcessor: AcceptableResponse;
    endUserDataTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type DataResidency = {
    __typename?: 'DataResidency';
    isDataResidencySupported: DataResidencyResponse;
    countriesWhereEndUserDataStored?: Maybe<Array<Maybe<Scalars['String']>>>;
    realmMigrationSupported?: Maybe<Scalars['Boolean']>;
    inScopeDataTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare enum DataResidencyResponse {
    StoredExternalToAtlassian = "STORED_EXTERNAL_TO_ATLASSIAN",
    StoredInAtlassianAndDrSupported = "STORED_IN_ATLASSIAN_AND_DR_SUPPORTED",
    AppDoesNotSupportDr = "APP_DOES_NOT_SUPPORT_DR",
    StoredInAtlassianAndDrNotSupported = "STORED_IN_ATLASSIAN_AND_DR_NOT_SUPPORTED"
}
export declare type DataRetention = {
    __typename?: 'DataRetention';
    isDataRetentionSupported: Scalars['Boolean'];
    retentionDurationInDays?: Maybe<RetentionDurationInDays>;
    isCustomRetentionPeriodAllowed?: Maybe<Scalars['Boolean']>;
};
export declare type DataTransfer = {
    __typename?: 'DataTransfer';
    isEndUserDataTransferredOutsideEEA: Scalars['Boolean'];
    isTransferComplianceMechanismsAdhered?: Maybe<Scalars['Boolean']>;
    transferComplianceMechanismsAdheredDetails?: Maybe<Scalars['String']>;
};
export declare type DateSearchInput = {
    earliestStart?: Maybe<Scalars['String']>;
    latestStart?: Maybe<Scalars['String']>;
};
export declare type DeleteAppEnvironmentInput = {
    appAri: Scalars['ID'];
    environmentKey: Scalars['String'];
};
export declare type DeleteAppEnvironmentResponse = Payload & {
    __typename?: 'DeleteAppEnvironmentResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteAppEnvironmentVariableInput = {
    environment: AppEnvironmentInput;
    key: Scalars['String'];
};
export declare type DeleteAppEnvironmentVariablePayload = Payload & {
    __typename?: 'DeleteAppEnvironmentVariablePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteAppInput = {
    appId: Scalars['ID'];
};
export declare type DeleteAppResponse = Payload & {
    __typename?: 'DeleteAppResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteAppStoredCustomEntityMutationInput = {
    key: Scalars['ID'];
    contextAri: Scalars['ID'];
    entityName: Scalars['String'];
};
export declare type DeleteAppStoredCustomEntityPayload = Payload & {
    __typename?: 'DeleteAppStoredCustomEntityPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteAppStoredEntityMutationInput = {
    key: Scalars['ID'];
    contextAri: Scalars['ID'];
    encrypted?: Maybe<Scalars['Boolean']>;
};
export declare type DeleteAppStoredEntityPayload = Payload & {
    __typename?: 'DeleteAppStoredEntityPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteAppTunnelInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
};
export declare type DeleteCardInput = {
    cardId: Scalars['ID'];
};
export declare type DeleteCardOutput = {
    __typename?: 'DeleteCardOutput';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type DeleteColumnInput = {
    boardId: Scalars['ID'];
    columnId: Scalars['ID'];
};
export declare type DeleteColumnOutput = MutationResponse & {
    __typename?: 'DeleteColumnOutput';
    columns?: Maybe<Array<Maybe<Column>>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type DeleteCompassComponentExternalAliasInput = {
    componentId: Scalars['ID'];
    externalAlias: CompassDeleteExternalAliasInput;
};
export declare type DeleteCompassComponentExternalAliasPayload = Payload & {
    __typename?: 'DeleteCompassComponentExternalAliasPayload';
    deletedCompassExternalAlias?: Maybe<CompassExternalAlias>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type DeleteCompassComponentInput = {
    id: Scalars['ID'];
};
export declare type DeleteCompassComponentLinkInput = {
    componentId: Scalars['ID'];
    link: Scalars['ID'];
};
export declare type DeleteCompassComponentLinkPayload = Payload & {
    __typename?: 'DeleteCompassComponentLinkPayload';
    deletedCompassLinkId?: Maybe<Scalars['ID']>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type DeleteCompassComponentPayload = Payload & {
    __typename?: 'DeleteCompassComponentPayload';
    deletedComponentId?: Maybe<Scalars['ID']>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteCompassRelationshipInput = {
    type: CompassRelationshipType;
    startNodeId: Scalars['ID'];
    endNodeId: Scalars['ID'];
};
export declare type DeleteCompassRelationshipPayload = Payload & {
    __typename?: 'DeleteCompassRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteCompassScorecardCriteriaInput = {
    id: Scalars['ID'];
};
export declare type DeleteCompassScorecardCriteriasInput = {
    criterias: Array<DeleteCompassScorecardCriteriaInput>;
};
export declare type DeleteCompassScorecardCriteriasPayload = Payload & {
    __typename?: 'DeleteCompassScorecardCriteriasPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    scorecard?: Maybe<CompassScorecard>;
};
export declare type DeleteCompassScorecardPayload = Payload & {
    __typename?: 'DeleteCompassScorecardPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    scorecardId: Scalars['ID'];
};
export declare type DeleteCompassStarredComponentInput = {
    componentId: Scalars['ID'];
};
export declare type DeleteCompassStarredComponentPayload = Payload & {
    __typename?: 'DeleteCompassStarredComponentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteCustomFilterInput = {
    boardId: Scalars['ID'];
    customFilterId: Scalars['String'];
};
export declare type DeleteDevOpsContainerRelationshipEntityPropertiesInput = {
    id: Scalars['ID'];
    keys: Array<Scalars['String']>;
};
export declare type DeleteDevOpsContainerRelationshipEntityPropertiesPayload = Payload & {
    __typename?: 'DeleteDevOpsContainerRelationshipEntityPropertiesPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteDevOpsServiceAndJiraProjectRelationshipInput = {
    id: Scalars['ID'];
};
export declare type DeleteDevOpsServiceAndJiraProjectRelationshipPayload = Payload & {
    __typename?: 'DeleteDevOpsServiceAndJiraProjectRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteDevOpsServiceAndOpsgenieTeamRelationshipInput = {
    id: Scalars['ID'];
};
export declare type DeleteDevOpsServiceAndOpsgenieTeamRelationshipPayload = Payload & {
    __typename?: 'DeleteDevOpsServiceAndOpsgenieTeamRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteDevOpsServiceAndRepositoryRelationshipInput = {
    id: Scalars['ID'];
};
export declare type DeleteDevOpsServiceAndRepositoryRelationshipPayload = Payload & {
    __typename?: 'DeleteDevOpsServiceAndRepositoryRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteDevOpsServiceEntityPropertiesInput = {
    id: Scalars['ID'];
    keys: Array<Scalars['String']>;
};
export declare type DeleteDevOpsServiceEntityPropertiesPayload = Payload & {
    __typename?: 'DeleteDevOpsServiceEntityPropertiesPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteDevOpsServiceInput = {
    id: Scalars['ID'];
};
export declare type DeleteDevOpsServicePayload = Payload & {
    __typename?: 'DeleteDevOpsServicePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteDevOpsServiceRelationshipInput = {
    id: Scalars['ID'];
};
export declare type DeleteDevOpsServiceRelationshipPayload = Payload & {
    __typename?: 'DeleteDevOpsServiceRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteEventSourceInput = {
    cloudId: Scalars['ID'];
    externalEventSourceId: Scalars['ID'];
    eventType: CompassEventType;
};
export declare type DeleteEventSourcePayload = Payload & {
    __typename?: 'DeleteEventSourcePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteJiraProjectAndOpsgenieTeamRelationshipInput = {
    id: Scalars['ID'];
};
export declare type DeleteJiraProjectAndOpsgenieTeamRelationshipPayload = Payload & {
    __typename?: 'DeleteJiraProjectAndOpsgenieTeamRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteJiraProjectAndRepositoryRelationshipInput = {
    id: Scalars['ID'];
};
export declare type DeleteJiraProjectAndRepositoryRelationshipPayload = Payload & {
    __typename?: 'DeleteJiraProjectAndRepositoryRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeletePolarisDecorationInput = {
    emoji?: Maybe<Scalars['Boolean']>;
    backgroundColor?: Maybe<Scalars['Boolean']>;
    highlightContainer?: Maybe<Scalars['Boolean']>;
};
export declare type DeletePolarisDecorationPayload = Payload & {
    __typename?: 'DeletePolarisDecorationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeletePolarisFieldOptionInput = {
    project: Scalars['ID'];
    field: Scalars['ID'];
    ideaType: Scalars['ID'];
    option: Scalars['ID'];
};
export declare type DeletePolarisFieldOptionPayload = Payload & {
    __typename?: 'DeletePolarisFieldOptionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeletePolarisFieldPayload = Payload & {
    __typename?: 'DeletePolarisFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeletePolarisIdeaTemplateInput = {
    id: Scalars['ID'];
    project: Scalars['ID'];
};
export declare type DeletePolarisIdeaTemplatePayload = Payload & {
    __typename?: 'DeletePolarisIdeaTemplatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeletePolarisInsightPayload = Payload & {
    __typename?: 'DeletePolarisInsightPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeletePolarisPlayContributionPayload = {
    __typename?: 'DeletePolarisPlayContributionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeletePolarisViewPayload = Payload & {
    __typename?: 'DeletePolarisViewPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeletePolarisViewSetPayload = Payload & {
    __typename?: 'DeletePolarisViewSetPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteSprintInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
};
export declare type DeleteUserGrantInput = {
    oauthClientId: Scalars['ID'];
};
export declare type DeleteUserGrantPayload = Payload & {
    __typename?: 'DeleteUserGrantPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DeleteWebTriggerUrlResponse = MutationResponse & {
    __typename?: 'DeleteWebTriggerUrlResponse';
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type DeploymentPipeline = {
    __typename?: 'DeploymentPipeline';
    url?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
};
export declare enum DeploymentState {
    Pending = "PENDING",
    InProgress = "IN_PROGRESS",
    Successful = "SUCCESSFUL",
    Cancelled = "CANCELLED",
    Failed = "FAILED",
    RolledBack = "ROLLED_BACK",
    Unknown = "UNKNOWN"
}
export declare type DeploymentSummary = Node & {
    __typename?: 'DeploymentSummary';
    id: Scalars['ID'];
    issueIds?: Maybe<Array<Scalars['ID']>>;
    provider?: Maybe<DevOpsProvider>;
    serviceAssociations?: Maybe<Array<Maybe<DevOpsService>>>;
    deploymentSequenceNumber?: Maybe<Scalars['Long']>;
    updateSequenceNumber?: Maybe<Scalars['Long']>;
    displayName?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    state?: Maybe<DeploymentState>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    pipeline?: Maybe<DeploymentPipeline>;
    environment?: Maybe<DevOpsEnvironment>;
};
export declare type DetachCompassComponentDataManagerInput = {
    componentId: Scalars['ID'];
};
export declare type DetachCompassComponentDataManagerPayload = Payload & {
    __typename?: 'DetachCompassComponentDataManagerPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type DetachEventSourceInput = {
    eventSourceId: Scalars['ID'];
    componentId: Scalars['ID'];
};
export declare type DetachEventSourcePayload = Payload & {
    __typename?: 'DetachEventSourcePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type DevOps = {
    __typename?: 'DevOps';
    entitiesByAssociations?: Maybe<DevOpsEntities>;
    summarisedDeployments?: Maybe<Array<Maybe<DevOpsSummarisedDeployments>>>;
    summarisedEntities?: Maybe<Array<Maybe<DevOpsSummarisedEntities>>>;
    providers?: Maybe<DevOpsProviders>;
    providersByIds?: Maybe<Array<Maybe<DevOpsDataProvider>>>;
    ariGraph?: Maybe<AriGraph>;
    graph?: Maybe<Graph>;
    toolchain?: Maybe<Toolchain>;
};
export declare type DevOpsEntitiesByAssociationsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type DevOpsSummarisedDeploymentsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type DevOpsSummarisedEntitiesArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type DevOpsProvidersArgs = {
    id: Scalars['ID'];
    providerTypes?: Maybe<Array<DevOpsProviderType>>;
};
export declare type DevOpsProvidersByIdsArgs = {
    id: Scalars['ID'];
    providerIds?: Maybe<Array<Scalars['String']>>;
    providerTypes?: Maybe<Array<DevOpsProviderType>>;
};
export declare type DevOpsAvatar = {
    __typename?: 'DevOpsAvatar';
    url?: Maybe<Scalars['URL']>;
    description?: Maybe<Scalars['String']>;
};
export declare type DevOpsBranchInfo = {
    __typename?: 'DevOpsBranchInfo';
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export declare type DevOpsBuildProvider = DevOpsDataProvider & {
    __typename?: 'DevOpsBuildProvider';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['URL']>;
    logoUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    appInstallationId?: Maybe<Scalars['ID']>;
};
export declare enum DevOpsBuildState {
    Pending = "PENDING",
    InProgress = "IN_PROGRESS",
    Successful = "SUCCESSFUL",
    Failed = "FAILED",
    Cancelled = "CANCELLED",
    Unknown = "UNKNOWN"
}
export declare type DevOpsContainerRelationshipEntityPropertyInput = {
    key: Scalars['String'];
    value: Scalars['JSON'];
};
export declare type DevOpsDataProvider = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['URL']>;
    logoUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    appInstallationId?: Maybe<Scalars['ID']>;
};
export declare type DevOpsDeploymentProvider = DevOpsDataProvider & {
    __typename?: 'DevOpsDeploymentProvider';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['URL']>;
    logoUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    appInstallationId?: Maybe<Scalars['ID']>;
};
export declare type DevOpsDevInfoProvider = DevOpsDataProvider & {
    __typename?: 'DevOpsDevInfoProvider';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['URL']>;
    logoUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    appInstallationId?: Maybe<Scalars['ID']>;
};
export declare type DevOpsDocument = {
    __typename?: 'DevOpsDocument';
    id: Scalars['ID'];
    parentId?: Maybe<Scalars['ID']>;
    providerId?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    type?: Maybe<DevOpsDocumentType>;
    url?: Maybe<Scalars['URL']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    createdBy?: Maybe<User>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    lastUpdatedBy?: Maybe<User>;
    collaborators?: Maybe<Array<Maybe<User>>>;
    byteSize?: Maybe<Scalars['Long']>;
    exportLinks?: Maybe<Array<Maybe<DevOpsDocumentExportLink>>>;
    hasChildren?: Maybe<Scalars['Boolean']>;
    externalId?: Maybe<Scalars['String']>;
};
export declare enum DevOpsDocumentCategory {
    Folder = "FOLDER",
    Document = "DOCUMENT",
    Presentation = "PRESENTATION",
    Spreadsheet = "SPREADSHEET",
    Image = "IMAGE",
    Audio = "AUDIO",
    Video = "VIDEO",
    Pdf = "PDF",
    Shortcut = "SHORTCUT",
    Code = "CODE",
    Archive = "ARCHIVE",
    Form = "FORM",
    Other = "OTHER"
}
export declare type DevOpsDocumentExportLink = {
    __typename?: 'DevOpsDocumentExportLink';
    mimeType?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
};
export declare type DevOpsDocumentType = {
    __typename?: 'DevOpsDocumentType';
    category?: Maybe<DevOpsDocumentCategory>;
    mimeType?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['URL']>;
    fileExtension?: Maybe<Scalars['String']>;
};
export declare type DevOpsDocumentationProvider = DevOpsDataProvider & {
    __typename?: 'DevOpsDocumentationProvider';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['URL']>;
    logoUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    appInstallationId?: Maybe<Scalars['ID']>;
    grant3LOUrl?: Maybe<Scalars['String']>;
    linkedContainers?: Maybe<AriGraphRelationshipConnection>;
};
export declare type DevOpsDocumentationProviderLinkedContainersArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    jiraProjectId: Scalars['ID'];
};
export declare type DevOpsEntities = {
    __typename?: 'DevOpsEntities';
    featureFlagEntities?: Maybe<DevOpsFeatureFlagConnection>;
};
export declare type DevOpsEntitiesFeatureFlagEntitiesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevOpsEnvironment = {
    __typename?: 'DevOpsEnvironment';
    category?: Maybe<DevOpsEnvironmentCategory>;
    displayName?: Maybe<Scalars['String']>;
};
export declare enum DevOpsEnvironmentCategory {
    Production = "PRODUCTION",
    Staging = "STAGING",
    Testing = "TESTING",
    Development = "DEVELOPMENT",
    Unmapped = "UNMAPPED"
}
export declare type DevOpsFeatureFlag = {
    __typename?: 'DevOpsFeatureFlag';
    id: Scalars['ID'];
    flagId?: Maybe<Scalars['String']>;
    key?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    providerId?: Maybe<Scalars['String']>;
    summary?: Maybe<DevOpsFeatureFlagSummary>;
    details?: Maybe<DevOpsFeatureFlagDetailsConnection>;
};
export declare type DevOpsFeatureFlagDetailsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevOpsFeatureFlagConnection = {
    __typename?: 'DevOpsFeatureFlagConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<DevOpsFeatureFlagEdge>>>;
};
export declare type DevOpsFeatureFlagDetailEdge = {
    __typename?: 'DevOpsFeatureFlagDetailEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<DevOpsFeatureFlagDetails>;
};
export declare type DevOpsFeatureFlagDetails = {
    __typename?: 'DevOpsFeatureFlagDetails';
    enabled?: Maybe<Scalars['Boolean']>;
    defaultValue?: Maybe<Scalars['String']>;
    environmentName?: Maybe<Scalars['String']>;
    environmentCategory?: Maybe<DevOpsEnvironmentCategory>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    rolloutPercentage?: Maybe<Scalars['Float']>;
    rolloutText?: Maybe<Scalars['String']>;
    rolloutRules?: Maybe<Scalars['Int']>;
    url?: Maybe<Scalars['URL']>;
};
export declare type DevOpsFeatureFlagDetailsConnection = {
    __typename?: 'DevOpsFeatureFlagDetailsConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<DevOpsFeatureFlagDetailEdge>>>;
};
export declare type DevOpsFeatureFlagEdge = {
    __typename?: 'DevOpsFeatureFlagEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<DevOpsFeatureFlag>;
};
export declare type DevOpsFeatureFlagProvider = DevOpsDataProvider & {
    __typename?: 'DevOpsFeatureFlagProvider';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['URL']>;
    logoUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    appInstallationId?: Maybe<Scalars['ID']>;
    createFeatureFlagTemplateUrl?: Maybe<Scalars['String']>;
    connectFeatureFlagTemplateUrl?: Maybe<Scalars['String']>;
};
export declare type DevOpsFeatureFlagSummary = {
    __typename?: 'DevOpsFeatureFlagSummary';
    enabled?: Maybe<Scalars['Boolean']>;
    defaultValue?: Maybe<Scalars['String']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    rolloutPercentage?: Maybe<Scalars['Float']>;
    rolloutText?: Maybe<Scalars['String']>;
    rolloutRules?: Maybe<Scalars['Int']>;
    url?: Maybe<Scalars['URL']>;
};
export declare enum DevOpsJiraProjectType {
    JiraSoftware = "JIRA_SOFTWARE",
    JiraServicedesk = "JIRA_SERVICEDESK",
    JiraCore = "JIRA_CORE"
}
export declare type DevOpsMetrics = {
    __typename?: 'DevOpsMetrics';
    deploymentFrequency?: Maybe<DevOpsMetricsDeploymentFrequency>;
    deploymentSize?: Maybe<DevOpsMetricsDeploymentSize>;
    cycleTime?: Maybe<DevOpsMetricsCycleTime>;
    perIssueMetrics?: Maybe<DevOpsMetricsPerIssueMetricsConnection>;
    perDeploymentMetrics?: Maybe<DevOpsMetricsPerDeploymentMetricsConnection>;
};
export declare type DevOpsMetricsDeploymentFrequencyArgs = {
    filter: DevOpsMetricsFilterInput;
    environmentCategory?: DevOpsEnvironmentCategory;
    rollupType?: DevOpsMetricsRollupType;
};
export declare type DevOpsMetricsDeploymentSizeArgs = {
    filter: DevOpsMetricsFilterInput;
    environmentCategory?: DevOpsEnvironmentCategory;
    rollupType?: DevOpsMetricsRollupType;
};
export declare type DevOpsMetricsCycleTimeArgs = {
    filter: DevOpsMetricsFilterInput;
    isIncludeCycleTimeMean?: Maybe<Scalars['Boolean']>;
    cycleTimePercentiles?: Maybe<Array<Scalars['Int']>>;
};
export declare type DevOpsMetricsPerIssueMetricsArgs = {
    first: Scalars['Int'];
    after?: Maybe<Scalars['String']>;
    filter: DevOpsMetricsPerIssueMetricsFilter;
};
export declare type DevOpsMetricsPerDeploymentMetricsArgs = {
    first: Scalars['Int'];
    after?: Maybe<Scalars['String']>;
    filter: DevOpsMetricsPerDeploymentMetricsFilter;
};
export declare type DevOpsMetricsCycleTime = {
    __typename?: 'DevOpsMetricsCycleTime';
    resolution?: Maybe<DevOpsMetricsResolution>;
    phase?: Maybe<DevOpsMetricsCycleTimePhase>;
    hasPermissionForAllContributingIssues?: Maybe<Scalars['Boolean']>;
    cycleTimeMetrics?: Maybe<Array<Maybe<DevOpsMetricsCycleTimeMetrics>>>;
};
export declare type DevOpsMetricsCycleTimeData = {
    __typename?: 'DevOpsMetricsCycleTimeData';
    dateTime?: Maybe<Scalars['DateTime']>;
    cycleTimeSeconds?: Maybe<Scalars['Long']>;
    issuesShippedCount?: Maybe<Scalars['Int']>;
};
export declare type DevOpsMetricsCycleTimeMean = DevOpsMetricsCycleTimeMetrics & {
    __typename?: 'DevOpsMetricsCycleTimeMean';
    aggregateData?: Maybe<Scalars['Long']>;
    data?: Maybe<Array<Maybe<DevOpsMetricsCycleTimeData>>>;
};
export declare type DevOpsMetricsCycleTimeMetrics = {
    aggregateData?: Maybe<Scalars['Long']>;
    data?: Maybe<Array<Maybe<DevOpsMetricsCycleTimeData>>>;
};
export declare type DevOpsMetricsCycleTimePercentile = DevOpsMetricsCycleTimeMetrics & {
    __typename?: 'DevOpsMetricsCycleTimePercentile';
    aggregateData?: Maybe<Scalars['Long']>;
    data?: Maybe<Array<Maybe<DevOpsMetricsCycleTimeData>>>;
    percentile?: Maybe<Scalars['Int']>;
};
export declare enum DevOpsMetricsCycleTimePhase {
    CommitToPr = "COMMIT_TO_PR",
    CommitToDeployment = "COMMIT_TO_DEPLOYMENT"
}
export declare type DevOpsMetricsDeploymentFrequency = {
    __typename?: 'DevOpsMetricsDeploymentFrequency';
    resolution?: Maybe<DevOpsMetricsResolution>;
    state?: Maybe<DeploymentState>;
    environmentType?: Maybe<DevOpsEnvironmentCategory>;
    aggregateData?: Maybe<Scalars['Float']>;
    data?: Maybe<Array<Maybe<DevOpsMetricsDeploymentFrequencyData>>>;
};
export declare type DevOpsMetricsDeploymentFrequencyData = {
    __typename?: 'DevOpsMetricsDeploymentFrequencyData';
    dateTime?: Maybe<Scalars['DateTime']>;
    count?: Maybe<Scalars['Int']>;
};
export declare type DevOpsMetricsDeploymentMetrics = {
    __typename?: 'DevOpsMetricsDeploymentMetrics';
    deploymentSize?: Maybe<Scalars['Long']>;
    deployment?: Maybe<DeploymentSummary>;
};
export declare type DevOpsMetricsDeploymentMetricsEdge = {
    __typename?: 'DevOpsMetricsDeploymentMetricsEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsMetricsDeploymentMetrics>;
};
export declare type DevOpsMetricsDeploymentSize = {
    __typename?: 'DevOpsMetricsDeploymentSize';
    aggregateData?: Maybe<Scalars['Float']>;
    data?: Maybe<Array<Maybe<DevOpsMetricsDeploymentSizeData>>>;
};
export declare type DevOpsMetricsDeploymentSizeData = {
    __typename?: 'DevOpsMetricsDeploymentSizeData';
    dateTime?: Maybe<Scalars['DateTime']>;
    deploymentSize?: Maybe<Scalars['Float']>;
};
export declare type DevOpsMetricsFilterInput = {
    cloudId: Scalars['ID'];
    startFromInclusive: Scalars['DateTime'];
    endAtExclusive: Scalars['DateTime'];
    timezoneId?: Maybe<Scalars['String']>;
    resolution?: Maybe<DevOpsMetricsResolutionInput>;
    jiraProjectIds?: Maybe<Array<Scalars['ID']>>;
    issueFilters?: Maybe<DevOpsMetricsIssueFilters>;
};
export declare type DevOpsMetricsIssueFilters = {
    issueTypeIds?: Maybe<Array<Scalars['ID']>>;
    epicIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type DevOpsMetricsIssueMetrics = {
    __typename?: 'DevOpsMetricsIssueMetrics';
    id: Scalars['ID'];
    totalCycleTimeSeconds?: Maybe<Scalars['Long']>;
    meanReviewTimeSeconds?: Maybe<Scalars['Long']>;
    commitsCount?: Maybe<Scalars['Int']>;
    pullRequestsCount?: Maybe<Scalars['Int']>;
    lastSuccessfulProductionDeployment?: Maybe<Scalars['DateTime']>;
};
export declare type DevOpsMetricsIssueMetricsEdge = {
    __typename?: 'DevOpsMetricsIssueMetricsEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsMetricsIssueMetrics>;
};
export declare type DevOpsMetricsPerDeploymentMetricsConnection = {
    __typename?: 'DevOpsMetricsPerDeploymentMetricsConnection';
    edges?: Maybe<Array<Maybe<DevOpsMetricsDeploymentMetricsEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsMetricsDeploymentMetrics>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsMetricsPerDeploymentMetricsFilter = {
    cloudId: Scalars['ID'];
    startFromInclusive: Scalars['DateTime'];
    endAtExclusive: Scalars['DateTime'];
    jiraProjectIds?: Maybe<Array<Scalars['ID']>>;
    environmentCategories?: Array<DevOpsEnvironmentCategory>;
};
export declare type DevOpsMetricsPerIssueMetricsConnection = {
    __typename?: 'DevOpsMetricsPerIssueMetricsConnection';
    edges?: Maybe<Array<Maybe<DevOpsMetricsIssueMetricsEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsMetricsIssueMetrics>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsMetricsPerIssueMetricsFilter = {
    cloudId: Scalars['ID'];
    startFromInclusive: Scalars['DateTime'];
    endAtExclusive: Scalars['DateTime'];
    jiraProjectIds?: Maybe<Array<Scalars['ID']>>;
    issueFilters?: Maybe<DevOpsMetricsIssueFilters>;
};
export declare type DevOpsMetricsResolution = {
    __typename?: 'DevOpsMetricsResolution';
    value?: Maybe<Scalars['Int']>;
    unit?: Maybe<DevOpsMetricsResolutionUnit>;
};
export declare type DevOpsMetricsResolutionInput = {
    value: Scalars['Int'];
    unit: DevOpsMetricsResolutionUnit;
};
export declare enum DevOpsMetricsResolutionUnit {
    Hour = "HOUR",
    Day = "DAY",
    Week = "WEEK"
}
export declare enum DevOpsMetricsRollupOption {
    Mean = "MEAN",
    Percentile = "PERCENTILE"
}
export declare type DevOpsMetricsRollupType = {
    type: DevOpsMetricsRollupOption;
    percentile?: Maybe<Scalars['Int']>;
};
export declare type DevOpsMutation = {
    __typename?: 'DevOpsMutation';
    _empty?: Maybe<Scalars['String']>;
    ariGraph?: Maybe<AriGraphMutation>;
    graph?: Maybe<GraphMutation>;
    toolchain?: Maybe<ToolchainMutation>;
};
export declare type DevOpsMutation_EmptyArgs = {
    cloudId?: Maybe<Scalars['ID']>;
};
export declare type DevOpsProvider = {
    __typename?: 'DevOpsProvider';
    name?: Maybe<Scalars['String']>;
    links?: Maybe<DevOpsProviderLinks>;
    logo?: Maybe<Scalars['URL']>;
};
export declare type DevOpsProviderLinks = {
    __typename?: 'DevOpsProviderLinks';
    documentation?: Maybe<Scalars['URL']>;
    home?: Maybe<Scalars['URL']>;
    listDeploymentsTemplate?: Maybe<Scalars['URL']>;
};
export declare enum DevOpsProviderType {
    DevInfo = "DEV_INFO",
    Build = "BUILD",
    Deployment = "DEPLOYMENT",
    FeatureFlag = "FEATURE_FLAG",
    RemoteLinks = "REMOTE_LINKS",
    Security = "SECURITY",
    Documentation = "DOCUMENTATION"
}
export declare type DevOpsProviders = {
    __typename?: 'DevOpsProviders';
    buildProviders?: Maybe<Array<Maybe<DevOpsBuildProvider>>>;
    deploymentProviders?: Maybe<Array<Maybe<DevOpsDeploymentProvider>>>;
    devInfoProviders?: Maybe<Array<Maybe<DevOpsDevInfoProvider>>>;
    featureFlagProviders?: Maybe<Array<Maybe<DevOpsFeatureFlagProvider>>>;
    remoteLinksProviders?: Maybe<Array<Maybe<DevOpsRemoteLinksProvider>>>;
    securityProviders?: Maybe<Array<Maybe<DevOpsSecurityProvider>>>;
    documentationProviders?: Maybe<Array<Maybe<DevOpsDocumentationProvider>>>;
};
export declare enum DevOpsPullRequestApprovalStatus {
    Approved = "APPROVED",
    Unapproved = "UNAPPROVED"
}
export declare type DevOpsPullRequestDetails = {
    __typename?: 'DevOpsPullRequestDetails';
    id: Scalars['ID'];
    repositoryId?: Maybe<Scalars['ID']>;
    repositoryInternalId?: Maybe<Scalars['String']>;
    repositoryName?: Maybe<Scalars['String']>;
    repositoryUrl?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    commentCount?: Maybe<Scalars['Int']>;
    sanitizedAuthorId?: Maybe<Scalars['String']>;
    authorId?: Maybe<Scalars['ID']>;
    author?: Maybe<User>;
    reviewers?: Maybe<Array<Maybe<DevOpsReviewer>>>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    status?: Maybe<DevOpsPullRequestStatus>;
    sourceBranch?: Maybe<DevOpsBranchInfo>;
    destinationBranch?: Maybe<DevOpsBranchInfo>;
    url?: Maybe<Scalars['String']>;
    pullRequestInternalId?: Maybe<Scalars['String']>;
};
export declare enum DevOpsPullRequestStatus {
    Open = "OPEN",
    Merged = "MERGED",
    Declined = "DECLINED",
    Unknown = "UNKNOWN"
}
export declare enum DevOpsRelationshipCertainty {
    Explicit = "EXPLICIT",
    Implicit = "IMPLICIT"
}
export declare enum DevOpsRelationshipCertaintyFilter {
    Explicit = "EXPLICIT",
    Implicit = "IMPLICIT",
    All = "ALL"
}
export declare type DevOpsRemoteLinksProvider = DevOpsDataProvider & {
    __typename?: 'DevOpsRemoteLinksProvider';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['URL']>;
    logoUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    appInstallationId?: Maybe<Scalars['ID']>;
};
export declare type DevOpsRepository = {
    __typename?: 'DevOpsRepository';
    id: Scalars['ID'];
    providerId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    avatarUrl?: Maybe<Scalars['URL']>;
};
export declare enum DevOpsRepositoryHostingProviderFilter {
    BitbucketCloud = "BITBUCKET_CLOUD",
    ThirdParty = "THIRD_PARTY",
    All = "ALL"
}
export declare type DevOpsReviewer = {
    __typename?: 'DevOpsReviewer';
    approvalStatus?: Maybe<DevOpsPullRequestApprovalStatus>;
    sanitizedUserId?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['ID']>;
    user?: Maybe<User>;
};
export declare type DevOpsSecurityProvider = DevOpsDataProvider & {
    __typename?: 'DevOpsSecurityProvider';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['URL']>;
    logoUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    appInstallationId?: Maybe<Scalars['ID']>;
    linkedWorkspaces?: Maybe<AriGraphRelationshipConnection>;
    linkedContainers?: Maybe<AriGraphRelationshipConnection>;
};
export declare type DevOpsSecurityProviderLinkedWorkspacesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
};
export declare type DevOpsSecurityProviderLinkedContainersArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    jiraProjectId: Scalars['ID'];
};
export declare type DevOpsSecurityVulnerabilityAdditionalInfo = {
    __typename?: 'DevOpsSecurityVulnerabilityAdditionalInfo';
    content?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export declare type DevOpsSecurityVulnerabilityDetails = {
    __typename?: 'DevOpsSecurityVulnerabilityDetails';
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    severity?: Maybe<DevOpsSecurityVulnerabilitySeverity>;
    status?: Maybe<DevOpsSecurityVulnerabilityStatus>;
    identifiers: Array<DevOpsSecurityVulnerabilityIdentifier>;
    introducedDate?: Maybe<Scalars['DateTime']>;
    securityContainer?: Maybe<ThirdPartySecurityContainer>;
    additionalInfo?: Maybe<DevOpsSecurityVulnerabilityAdditionalInfo>;
    linkedJiraIssues?: Maybe<AriGraphRelationshipConnection>;
};
export declare type DevOpsSecurityVulnerabilityDetailsLinkedJiraIssuesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
};
export declare type DevOpsSecurityVulnerabilityIdentifier = {
    __typename?: 'DevOpsSecurityVulnerabilityIdentifier';
    displayName: Scalars['String'];
    url?: Maybe<Scalars['String']>;
};
export declare enum DevOpsSecurityVulnerabilitySeverity {
    Critical = "CRITICAL",
    High = "HIGH",
    Medium = "MEDIUM",
    Low = "LOW",
    Unknown = "UNKNOWN"
}
export declare enum DevOpsSecurityVulnerabilityStatus {
    Open = "OPEN",
    Closed = "CLOSED",
    Ignored = "IGNORED",
    Unknown = "UNKNOWN"
}
export declare type DevOpsService = Node & {
    __typename?: 'DevOpsService';
    id: Scalars['ID'];
    revision: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    organizationId: Scalars['String'];
    cloudId: Scalars['String'];
    serviceTier?: Maybe<DevOpsServiceTier>;
    createdBy: Scalars['String'];
    createdAt: Scalars['DateTime'];
    lastUpdatedBy?: Maybe<Scalars['String']>;
    lastUpdatedAt?: Maybe<Scalars['DateTime']>;
    properties?: Maybe<Scalars['JSON']>;
    opsgenieTeamRelationship?: Maybe<DevOpsServiceAndOpsgenieTeamRelationship>;
    jiraProjects?: Maybe<DevOpsServiceAndJiraProjectRelationshipConnection>;
    repositoryRelationships?: Maybe<DevOpsServiceAndRepositoryRelationshipConnection>;
    containedByDevOpsServiceRelationship?: Maybe<DevOpsServiceRelationship>;
    containsDevOpsServiceRelationships?: Maybe<DevOpsServiceRelationshipConnection>;
    dependedOnByDevOpsServiceRelationships?: Maybe<DevOpsServiceRelationshipConnection>;
    dependsOnDevOpsServiceRelationships?: Maybe<DevOpsServiceRelationshipConnection>;
    servicesAvailableToLinkWith?: Maybe<DevOpsServiceConnection>;
    opsgenieTeamsAvailableToLinkWith?: Maybe<OpsgenieTeamConnection>;
    bitbucketRepositoriesAvailableToLinkWith?: Maybe<BitbucketRepositoryIdConnection>;
};
export declare type DevOpsServicePropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type DevOpsServiceJiraProjectsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServiceAndJiraProjectRelationshipFilter>;
};
export declare type DevOpsServiceRepositoryRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServiceAndRepositoryRelationshipFilter>;
    sort?: Maybe<DevOpsServiceAndRepositoryRelationshipSort>;
};
export declare type DevOpsServiceContainsDevOpsServiceRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevOpsServiceDependedOnByDevOpsServiceRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevOpsServiceDependsOnDevOpsServiceRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevOpsServiceServicesAvailableToLinkWithArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServicesFilterInput>;
};
export declare type DevOpsServiceOpsgenieTeamsAvailableToLinkWithArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevOpsServiceBitbucketRepositoriesAvailableToLinkWithArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    nameFilter?: Maybe<Scalars['String']>;
};
export declare type DevOpsServiceAndJiraProjectRelationship = Node & {
    __typename?: 'DevOpsServiceAndJiraProjectRelationship';
    id: Scalars['ID'];
    revision: Scalars['ID'];
    devOpsService?: Maybe<DevOpsService>;
    jiraProject?: Maybe<JiraProject>;
    relationshipType: DevOpsServiceAndJiraProjectRelationshipType;
    description?: Maybe<Scalars['String']>;
    createdBy: Scalars['String'];
    createdAt: Scalars['DateTime'];
    lastUpdatedBy?: Maybe<Scalars['String']>;
    lastUpdatedAt?: Maybe<Scalars['DateTime']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type DevOpsServiceAndJiraProjectRelationshipPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type DevOpsServiceAndJiraProjectRelationshipConnection = {
    __typename?: 'DevOpsServiceAndJiraProjectRelationshipConnection';
    edges?: Maybe<Array<Maybe<DevOpsServiceAndJiraProjectRelationshipEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsServiceAndJiraProjectRelationship>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsServiceAndJiraProjectRelationshipEdge = {
    __typename?: 'DevOpsServiceAndJiraProjectRelationshipEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsServiceAndJiraProjectRelationship>;
};
export declare type DevOpsServiceAndJiraProjectRelationshipFilter = {
    certainty?: Maybe<DevOpsRelationshipCertaintyFilter>;
    relationshipTypeIn?: Maybe<Array<DevOpsServiceAndJiraProjectRelationshipType>>;
};
export declare enum DevOpsServiceAndJiraProjectRelationshipType {
    Default = "DEFAULT",
    ChangeManagement = "CHANGE_MANAGEMENT"
}
export declare type DevOpsServiceAndOpsgenieTeamRelationship = Node & {
    __typename?: 'DevOpsServiceAndOpsgenieTeamRelationship';
    id: Scalars['ID'];
    revision: Scalars['ID'];
    devOpsService?: Maybe<DevOpsService>;
    opsgenieTeamId: Scalars['ID'];
    opsgenieTeam?: Maybe<OpsgenieTeam>;
    description?: Maybe<Scalars['String']>;
    createdBy: Scalars['String'];
    createdAt: Scalars['DateTime'];
    lastUpdatedBy?: Maybe<Scalars['String']>;
    lastUpdatedAt?: Maybe<Scalars['DateTime']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type DevOpsServiceAndOpsgenieTeamRelationshipPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type DevOpsServiceAndOpsgenieTeamRelationshipConnection = {
    __typename?: 'DevOpsServiceAndOpsgenieTeamRelationshipConnection';
    edges?: Maybe<Array<Maybe<DevOpsServiceAndOpsgenieTeamRelationshipEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsServiceAndOpsgenieTeamRelationship>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsServiceAndOpsgenieTeamRelationshipEdge = {
    __typename?: 'DevOpsServiceAndOpsgenieTeamRelationshipEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsServiceAndOpsgenieTeamRelationship>;
};
export declare type DevOpsServiceAndRepositoryRelationship = Node & {
    __typename?: 'DevOpsServiceAndRepositoryRelationship';
    id: Scalars['ID'];
    revision: Scalars['ID'];
    devOpsService?: Maybe<DevOpsService>;
    bitbucketRepository?: Maybe<BitbucketRepository>;
    thirdPartyRepository?: Maybe<DevOpsThirdPartyRepository>;
    description?: Maybe<Scalars['String']>;
    createdBy: Scalars['String'];
    createdAt: Scalars['DateTime'];
    lastUpdatedBy?: Maybe<Scalars['String']>;
    lastUpdatedAt?: Maybe<Scalars['DateTime']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type DevOpsServiceAndRepositoryRelationshipPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type DevOpsServiceAndRepositoryRelationshipConnection = {
    __typename?: 'DevOpsServiceAndRepositoryRelationshipConnection';
    edges?: Maybe<Array<Maybe<DevOpsServiceAndRepositoryRelationshipEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsServiceAndRepositoryRelationship>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsServiceAndRepositoryRelationshipEdge = {
    __typename?: 'DevOpsServiceAndRepositoryRelationshipEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsServiceAndRepositoryRelationship>;
};
export declare type DevOpsServiceAndRepositoryRelationshipFilter = {
    certainty?: Maybe<DevOpsRelationshipCertaintyFilter>;
    hostingProvider?: Maybe<DevOpsRepositoryHostingProviderFilter>;
    withAllPropertyKeys?: Maybe<Array<Scalars['String']>>;
};
export declare type DevOpsServiceAndRepositoryRelationshipSort = {
    by: DevOpsServiceAndRepositoryRelationshipSortBy;
    order?: SortDirection;
};
export declare enum DevOpsServiceAndRepositoryRelationshipSortBy {
    LastInferredAt = "LAST_INFERRED_AT"
}
export declare type DevOpsServiceConnection = {
    __typename?: 'DevOpsServiceConnection';
    edges?: Maybe<Array<Maybe<DevOpsServiceEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsService>>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type DevOpsServiceEdge = {
    __typename?: 'DevOpsServiceEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsService>;
};
export declare type DevOpsServiceEntityPropertyInput = {
    key: Scalars['String'];
    value: Scalars['JSON'];
};
export declare type DevOpsServiceRelationship = Node & {
    __typename?: 'DevOpsServiceRelationship';
    id: Scalars['ID'];
    revision: Scalars['ID'];
    organizationId: Scalars['String'];
    cloudId: Scalars['String'];
    type: DevOpsServiceRelationshipType;
    startService?: Maybe<DevOpsService>;
    endService?: Maybe<DevOpsService>;
    description?: Maybe<Scalars['String']>;
    createdBy: Scalars['String'];
    createdAt: Scalars['DateTime'];
    lastUpdatedBy?: Maybe<Scalars['String']>;
    lastUpdatedAt?: Maybe<Scalars['DateTime']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type DevOpsServiceRelationshipPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type DevOpsServiceRelationshipConnection = {
    __typename?: 'DevOpsServiceRelationshipConnection';
    edges?: Maybe<Array<Maybe<DevOpsServiceRelationshipEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsServiceRelationship>>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type DevOpsServiceRelationshipEdge = {
    __typename?: 'DevOpsServiceRelationshipEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsServiceRelationship>;
};
export declare enum DevOpsServiceRelationshipType {
    DependsOn = "DEPENDS_ON",
    Contains = "CONTAINS"
}
export declare type DevOpsServiceTier = {
    __typename?: 'DevOpsServiceTier';
    id: Scalars['ID'];
    level: Scalars['Int'];
    nameKey?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type DevOpsServiceTierInput = {
    level: Scalars['Int'];
};
export declare type DevOpsServicesFilterInput = {
    nameContains?: Maybe<Scalars['String']>;
    tierLevelIn?: Maybe<Array<Scalars['Int']>>;
};
export declare type DevOpsSummarisedBuildState = {
    __typename?: 'DevOpsSummarisedBuildState';
    count?: Maybe<Scalars['Int']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    state?: Maybe<DevOpsBuildState>;
    url?: Maybe<Scalars['URL']>;
};
export declare type DevOpsSummarisedBuilds = {
    __typename?: 'DevOpsSummarisedBuilds';
    state?: Maybe<DevOpsBuildState>;
    count?: Maybe<Scalars['Int']>;
    mostRelevantCount?: Maybe<Scalars['Int']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    singleClickUrl?: Maybe<Scalars['URL']>;
    buildStates?: Maybe<Array<Maybe<DevOpsSummarisedBuildState>>>;
};
export declare type DevOpsSummarisedDeployments = {
    __typename?: 'DevOpsSummarisedDeployments';
    entityId: Scalars['ID'];
    count?: Maybe<Scalars['Int']>;
    mostRelevantCount?: Maybe<Scalars['Int']>;
    deploymentState?: Maybe<DeploymentState>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    mostRelevantLastUpdated?: Maybe<Scalars['DateTime']>;
    deploymentEnvironment?: Maybe<DevOpsEnvironment>;
};
export declare type DevOpsSummarisedEntities = {
    __typename?: 'DevOpsSummarisedEntities';
    entityId: Scalars['ID'];
    providers?: Maybe<DevOpsProviders>;
    summarisedBuilds?: Maybe<DevOpsSummarisedBuilds>;
    summarisedDeployments?: Maybe<DevOpsSummarisedDeployments>;
    summarisedFeatureFlags?: Maybe<DevOpsSummarisedFeatureFlags>;
};
export declare type DevOpsSummarisedFeatureFlags = {
    __typename?: 'DevOpsSummarisedFeatureFlags';
    entityUrl?: Maybe<Scalars['URL']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    mostRelevantDisplayName?: Maybe<Scalars['String']>;
    mostRelevantEnabled?: Maybe<Scalars['Boolean']>;
    mostRelevantRolloutPercentage?: Maybe<Scalars['Float']>;
    totalCount?: Maybe<Scalars['Int']>;
    totalDisabledCount?: Maybe<Scalars['Int']>;
    totalEnabledCount?: Maybe<Scalars['Int']>;
    totalRolledOutCount?: Maybe<Scalars['Int']>;
};
export declare type DevOpsThirdPartyRepository = CodeRepository & {
    __typename?: 'DevOpsThirdPartyRepository';
    id: Scalars['ID'];
    webUrl?: Maybe<Scalars['URL']>;
    href?: Maybe<Scalars['URL']>;
    name: Scalars['String'];
    avatar?: Maybe<DevOpsAvatar>;
};
export declare type DevOpsTool = Node & {
    __typename?: 'DevOpsTool';
    id: Scalars['ID'];
    name: Scalars['String'];
    productKey: Scalars['String'];
    avatar?: Maybe<DevOpsToolAvatar>;
    group: DevOpsToolGroup;
    category: DevOpsToolCategory;
    supportsContainers: Scalars['Boolean'];
    containerRelationshipType?: Maybe<Scalars['ID']>;
    recommended: Scalars['Boolean'];
    integration?: Maybe<DevOpsToolIntegration>;
    installed?: Maybe<Scalars['Boolean']>;
    namespaces?: Maybe<DevOpsToolNamespaceConnection>;
    auth?: Maybe<DevOpsToolAuth>;
    containerRelationships?: Maybe<AriGraphRelationshipConnection>;
    provider?: Maybe<DevOpsDataProvider>;
    jiraProjectRelationships?: Maybe<JiraProjectAndDevOpsToolRelationshipConnection>;
};
export declare type DevOpsToolNamespacesArgs = {
    query?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevOpsToolContainerRelationshipsArgs = {
    jiraProjectId: Scalars['ID'];
    filter?: Maybe<AriGraphRelationshipsFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    sort?: Maybe<AriGraphRelationshipsSort>;
};
export declare type DevOpsToolProviderArgs = {
    id: Scalars['ID'];
    providerTypes?: Maybe<Array<DevOpsProviderType>>;
};
export declare type DevOpsToolJiraProjectRelationshipsArgs = {
    jiraProjectId?: Maybe<Scalars['ID']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectAndDevOpsToolRelationshipFilter>;
};
export declare type DevOpsToolAppLinks = {
    __typename?: 'DevOpsToolAppLinks';
    self?: Maybe<Scalars['String']>;
    manage?: Maybe<Scalars['String']>;
    configure?: Maybe<Scalars['String']>;
    getStarted?: Maybe<Scalars['String']>;
    support?: Maybe<Scalars['String']>;
};
export declare type DevOpsToolAuth = {
    authenticated: Scalars['Boolean'];
};
export declare type DevOpsToolAvatar = {
    __typename?: 'DevOpsToolAvatar';
    url: Scalars['URL'];
};
export declare type DevOpsToolBitbucketCreate = DevOpsToolContainerCreationSpecification & {
    __typename?: 'DevOpsToolBitbucketCreate';
    requestId: Scalars['String'];
    workspace: Scalars['String'];
    slug?: Maybe<Scalars['String']>;
    name: Scalars['String'];
};
export declare type DevOpsToolCanContainerBeCreated = DevOpsToolContainerCanBeCreated | DevOpsToolContainerNameConflict | DevOpsToolContainerKeyConflict | DevOpsToolContainerKeyCannotBeGenerated | DevOpsToolUnknownTool;
export declare type DevOpsToolCategory = {
    __typename?: 'DevOpsToolCategory';
    id: Scalars['String'];
    name: Scalars['String'];
    groupId: Scalars['String'];
};
export declare type DevOpsToolCategoryConnection = {
    __typename?: 'DevOpsToolCategoryConnection';
    edges?: Maybe<Array<Maybe<DevOpsToolCategoryEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsToolCategory>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsToolCategoryEdge = {
    __typename?: 'DevOpsToolCategoryEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsToolCategory>;
};
export declare type DevOpsToolConfluenceCreate = DevOpsToolContainerCreationSpecification & {
    __typename?: 'DevOpsToolConfluenceCreate';
    requestId: Scalars['String'];
    key: Scalars['String'];
    name: Scalars['String'];
};
export declare type DevOpsToolConnection = {
    __typename?: 'DevOpsToolConnection';
    edges?: Maybe<Array<Maybe<DevOpsToolEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsTool>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsToolContainer = Node & {
    __typename?: 'DevOpsToolContainer';
    id: Scalars['ID'];
    displayName: Scalars['String'];
    productKey: Scalars['String'];
    url: Scalars['String'];
    underlyingId: Scalars['String'];
};
export declare type DevOpsToolContainerCanBeCreated = {
    __typename?: 'DevOpsToolContainerCanBeCreated';
    containerCreationSpecification?: Maybe<DevOpsToolContainerCreationSpecification>;
};
export declare type DevOpsToolContainerConnection = {
    __typename?: 'DevOpsToolContainerConnection';
    edges?: Maybe<Array<Maybe<DevOpsToolContainerEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsToolContainer>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsToolContainerCreationSpecification = {
    requestId: Scalars['String'];
};
export declare type DevOpsToolContainerEdge = {
    __typename?: 'DevOpsToolContainerEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsToolContainer>;
};
export declare type DevOpsToolContainerKeyCannotBeGenerated = {
    __typename?: 'DevOpsToolContainerKeyCannotBeGenerated';
    name?: Maybe<Scalars['String']>;
};
export declare type DevOpsToolContainerKeyConflict = {
    __typename?: 'DevOpsToolContainerKeyConflict';
    name?: Maybe<Scalars['String']>;
    key?: Maybe<Scalars['String']>;
};
export declare type DevOpsToolContainerNameConflict = {
    __typename?: 'DevOpsToolContainerNameConflict';
    name?: Maybe<Scalars['String']>;
};
export declare type DevOpsToolDefaultAuth = DevOpsToolAuth & {
    __typename?: 'DevOpsToolDefaultAuth';
    authenticated: Scalars['Boolean'];
};
export declare type DevOpsToolEdge = {
    __typename?: 'DevOpsToolEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsTool>;
};
export declare type DevOpsToolGitHubCreate = DevOpsToolContainerCreationSpecification & {
    __typename?: 'DevOpsToolGitHubCreate';
    requestId: Scalars['String'];
    organizationName: Scalars['String'];
    repositoryName: Scalars['String'];
};
export declare type DevOpsToolGitLabCreate = DevOpsToolContainerCreationSpecification & {
    __typename?: 'DevOpsToolGitLabCreate';
    requestId: Scalars['String'];
    organizationName: Scalars['String'];
    repositoryName: Scalars['String'];
};
export declare type DevOpsToolGroup = {
    __typename?: 'DevOpsToolGroup';
    groupId: Scalars['String'];
    groupName: Scalars['String'];
    categories?: Maybe<DevOpsToolCategoryConnection>;
};
export declare type DevOpsToolGroupCategoriesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevOpsToolGroupConnection = {
    __typename?: 'DevOpsToolGroupConnection';
    edges?: Maybe<Array<Maybe<DevOpsToolGroupEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsToolGroup>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsToolGroupEdge = {
    __typename?: 'DevOpsToolGroupEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsToolGroup>;
};
export declare type DevOpsToolIntegration = {
    key: Scalars['String'];
    name: Scalars['String'];
    iconUrl?: Maybe<Scalars['String']>;
};
export declare type DevOpsToolIntegrationApp = DevOpsToolIntegration & {
    __typename?: 'DevOpsToolIntegrationApp';
    appKey: Scalars['String'];
    key: Scalars['String'];
    appName: Scalars['String'];
    name: Scalars['String'];
    marketplaceType: Scalars['String'];
    iconUrl?: Maybe<Scalars['String']>;
    links?: Maybe<DevOpsToolAppLinks>;
};
export declare type DevOpsToolIntegrationProduct = DevOpsToolIntegration & {
    __typename?: 'DevOpsToolIntegrationProduct';
    productKey: Scalars['String'];
    key: Scalars['String'];
    productName: Scalars['String'];
    name: Scalars['String'];
    iconUrl?: Maybe<Scalars['String']>;
};
export declare enum DevOpsToolIntegrationType {
    Any = "ANY",
    Exists = "EXISTS",
    App = "APP",
    Product = "PRODUCT",
    None = "NONE"
}
export declare type DevOpsToolNamespace = Node & {
    __typename?: 'DevOpsToolNamespace';
    id: Scalars['ID'];
    displayName: Scalars['String'];
    productKey: Scalars['String'];
    canCreateContainer: Scalars['Boolean'];
    underlyingId: Scalars['String'];
    containers?: Maybe<DevOpsToolContainerConnection>;
};
export declare type DevOpsToolNamespaceContainersArgs = {
    query?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    projectAri?: Maybe<Scalars['String']>;
};
export declare type DevOpsToolNamespaceConnection = {
    __typename?: 'DevOpsToolNamespaceConnection';
    edges?: Maybe<Array<Maybe<DevOpsToolNamespaceEdge>>>;
    nodes?: Maybe<Array<Maybe<DevOpsToolNamespace>>>;
    pageInfo: PageInfo;
};
export declare type DevOpsToolNamespaceEdge = {
    __typename?: 'DevOpsToolNamespaceEdge';
    cursor: Scalars['String'];
    node?: Maybe<DevOpsToolNamespace>;
};
export declare type DevOpsToolOAuth = DevOpsToolAuth & {
    __typename?: 'DevOpsToolOAuth';
    authenticated: Scalars['Boolean'];
    oauthUrl: Scalars['String'];
};
export declare type DevOpsToolOpsgenieCreate = DevOpsToolContainerCreationSpecification & {
    __typename?: 'DevOpsToolOpsgenieCreate';
    requestId: Scalars['String'];
    name: Scalars['String'];
};
export declare type DevOpsToolSort = {
    name?: Maybe<DevOpsToolSortOrder>;
    supportsContainers?: Maybe<DevOpsToolSortOrder>;
    integration?: Maybe<DevOpsToolSortOrder>;
    recommended?: Maybe<DevOpsToolSortOrder>;
};
export declare enum DevOpsToolSortOrder {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type DevOpsToolUnknownTool = {
    __typename?: 'DevOpsToolUnknownTool';
    toolId?: Maybe<Scalars['String']>;
};
export declare type DevOpsTools = {
    __typename?: 'DevOpsTools';
    tools?: Maybe<DevOpsToolConnection>;
    tool?: Maybe<DevOpsTool>;
    integration?: Maybe<DevOpsToolIntegration>;
    isInstalled?: Maybe<Scalars['Boolean']>;
    namespace?: Maybe<DevOpsToolNamespace>;
    container?: Maybe<DevOpsToolContainer>;
    canContainerBeCreated?: Maybe<DevOpsToolCanContainerBeCreated>;
    groups?: Maybe<DevOpsToolGroupConnection>;
};
export declare type DevOpsToolsToolsArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    recommended?: Maybe<Scalars['Boolean']>;
    search?: Maybe<Scalars['String']>;
    groupId?: Maybe<Scalars['String']>;
    categoryId?: Maybe<Scalars['String']>;
    supportsContainers?: Maybe<Scalars['Boolean']>;
    integrationType?: Maybe<DevOpsToolIntegrationType>;
    sort?: Maybe<Array<Maybe<DevOpsToolSort>>>;
};
export declare type DevOpsToolsToolArgs = {
    id: Scalars['ID'];
};
export declare type DevOpsToolsIntegrationArgs = {
    id: Scalars['ID'];
};
export declare type DevOpsToolsIsInstalledArgs = {
    id: Scalars['ID'];
};
export declare type DevOpsToolsNamespaceArgs = {
    id: Scalars['ID'];
};
export declare type DevOpsToolsContainerArgs = {
    id: Scalars['ID'];
};
export declare type DevOpsToolsCanContainerBeCreatedArgs = {
    cloudId: Scalars['ID'];
    toolId: Scalars['String'];
    namespaceId: Scalars['String'];
    containerName: Scalars['String'];
};
export declare type DevOpsToolsGroupsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type DevStatus = {
    __typename?: 'DevStatus';
    activity: DevStatusActivity;
    count?: Maybe<Scalars['Int']>;
};
export declare enum DevStatusActivity {
    PrOpen = "PR_OPEN",
    PrMerged = "PR_MERGED",
    PrDeclined = "PR_DECLINED",
    BranchOpen = "BRANCH_OPEN",
    Commit = "COMMIT",
    Deployment = "DEPLOYMENT"
}
export declare type DeveloperLogAccessResult = {
    __typename?: 'DeveloperLogAccessResult';
    developerHasAccess: Scalars['Boolean'];
    contextId: Scalars['ID'];
};
export declare type DvcsBitbucketWorkspaceConnection = {
    __typename?: 'DvcsBitbucketWorkspaceConnection';
    edges?: Maybe<Array<Maybe<DvcsBitbucketWorkspaceEdge>>>;
    nodes?: Maybe<Array<Maybe<BitbucketWorkspace>>>;
    pageInfo: PageInfo;
};
export declare type DvcsBitbucketWorkspaceEdge = {
    __typename?: 'DvcsBitbucketWorkspaceEdge';
    cursor: Scalars['String'];
    node?: Maybe<BitbucketWorkspace>;
};
export declare type DvcsQuery = {
    __typename?: 'DvcsQuery';
    bitbucketWorkspacesLinkedToSite?: Maybe<DvcsBitbucketWorkspaceConnection>;
};
export declare type DvcsQueryBitbucketWorkspacesLinkedToSiteArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type EarliestOnboardedProjectForCloudId = {
    __typename?: 'EarliestOnboardedProjectForCloudId';
    datetime?: Maybe<Scalars['String']>;
    template?: Maybe<Scalars['String']>;
};
export declare type EarliestViewViewedForUser = {
    __typename?: 'EarliestViewViewedForUser';
    datetime?: Maybe<Scalars['String']>;
};
export declare type EcosystemMutation = {
    __typename?: 'EcosystemMutation';
    updateAppHostServiceScopes?: Maybe<UpdateAppHostServiceScopesResponsePayload>;
    addAppContributor?: Maybe<AddAppContributorResponsePayload>;
    removeAppContributors?: Maybe<RemoveAppContributorsResponsePayload>;
    updateAppOwnership?: Maybe<UpdateAppOwnershipResponsePayload>;
    deleteUserGrant?: Maybe<DeleteUserGrantPayload>;
    updateUserInstallationRules?: Maybe<UserInstallationRulesPayload>;
    createAppEnvironment?: Maybe<CreateAppEnvironmentResponse>;
    deleteAppEnvironment?: Maybe<DeleteAppEnvironmentResponse>;
    forgeAlerts?: Maybe<ForgeAlertsMutation>;
};
export declare type EcosystemMutationUpdateAppHostServiceScopesArgs = {
    input: UpdateAppHostServiceScopesInput;
};
export declare type EcosystemMutationAddAppContributorArgs = {
    input: AddAppContributorInput;
};
export declare type EcosystemMutationRemoveAppContributorsArgs = {
    input: RemoveAppContributorsInput;
};
export declare type EcosystemMutationUpdateAppOwnershipArgs = {
    input: UpdateAppOwnershipInput;
};
export declare type EcosystemMutationDeleteUserGrantArgs = {
    input: DeleteUserGrantInput;
};
export declare type EcosystemMutationUpdateUserInstallationRulesArgs = {
    input: UpdateUserInstallationRulesInput;
};
export declare type EcosystemMutationCreateAppEnvironmentArgs = {
    input: CreateAppEnvironmentInput;
};
export declare type EcosystemMutationDeleteAppEnvironmentArgs = {
    input: DeleteAppEnvironmentInput;
};
export declare type EcosystemMutationForgeAlertsArgs = {
    appId: Scalars['ID'];
};
export declare type EcosystemQuery = {
    __typename?: 'EcosystemQuery';
    userGrants?: Maybe<UserGrantConnection>;
    checkConsentPermissionByOAuthClientId?: Maybe<PermissionToConsentByOauthId>;
    userInstallationRules?: Maybe<UserInstallationRules>;
    appInstallationsByContext?: Maybe<AppInstallationByIndexConnection>;
    appInstallationsByApp?: Maybe<AppInstallationByIndexConnection>;
    fortifiedMetrics?: Maybe<FortifiedMetricsQuery>;
    connectApps?: Maybe<Array<ConnectedAppsConnectApp>>;
    appEnvironmentsByOAuthClientIds?: Maybe<Array<AppEnvironment>>;
    forgeMetrics?: Maybe<ForgeMetricsQuery>;
    forgeAuditLogs?: Maybe<ForgeAuditLogsQuery>;
    forgeAlerts?: Maybe<ForgeAlertsQuery>;
};
export declare type EcosystemQueryUserGrantsArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
};
export declare type EcosystemQueryCheckConsentPermissionByOAuthClientIdArgs = {
    input: CheckConsentPermissionByOAuthClientIdInput;
};
export declare type EcosystemQueryUserInstallationRulesArgs = {
    cloudId: Scalars['ID'];
};
export declare type EcosystemQueryAppInstallationsByContextArgs = {
    filter: AppInstallationsByContextFilter;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
};
export declare type EcosystemQueryAppInstallationsByAppArgs = {
    filter: AppInstallationsByAppFilter;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
};
export declare type EcosystemQueryFortifiedMetricsArgs = {
    appKey: Scalars['ID'];
};
export declare type EcosystemQueryConnectAppsArgs = {
    appIds: Array<Scalars['String']>;
    contextIds: Array<Scalars['String']>;
};
export declare type EcosystemQueryAppEnvironmentsByOAuthClientIdsArgs = {
    oauthClientIds: Array<Scalars['ID']>;
};
export declare type EcosystemQueryForgeMetricsArgs = {
    appId: Scalars['ID'];
};
export declare type EcosystemQueryForgeAuditLogsArgs = {
    appId: Scalars['ID'];
};
export declare type EcosystemQueryForgeAlertsArgs = {
    appId: Scalars['ID'];
};
export declare type EditSprintInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    goal?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['String']>;
    endDate?: Maybe<Scalars['String']>;
};
export declare type ErrorDetails = {
    __typename?: 'ErrorDetails';
    code: Scalars['String'];
    fields?: Maybe<Scalars['JSON']>;
    message: Scalars['String'];
};
export declare type ErsLifecycleMutation = {
    __typename?: 'ErsLifecycleMutation';
    customEntities?: Maybe<CustomEntityMutation>;
};
export declare type ErsLifecycleQuery = {
    __typename?: 'ErsLifecycleQuery';
    customEntityDefinitions?: Maybe<Array<Maybe<CustomEntityDefinition>>>;
    doneEntitiesFromERS?: Maybe<Array<Maybe<CustomEntityDefinition>>>;
};
export declare type ErsLifecycleQueryCustomEntityDefinitionsArgs = {
    entities: Array<Scalars['String']>;
    oauthClientId: Scalars['String'];
};
export declare type ErsLifecycleQueryDoneEntitiesFromErsArgs = {
    oauthClientId: Scalars['String'];
};
export declare type Estimate = {
    __typename?: 'Estimate';
    storyPoints?: Maybe<Scalars['Float']>;
    originalEstimate?: Maybe<OriginalEstimate>;
};
export declare type EstimationBoardFeatureView = Node & {
    __typename?: 'EstimationBoardFeatureView';
    id: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    canEnable?: Maybe<Scalars['Boolean']>;
    learnMoreLink?: Maybe<Scalars['String']>;
    learnMoreArticleId?: Maybe<Scalars['String']>;
    imageUri?: Maybe<Scalars['String']>;
    permissibleEstimationTypes?: Maybe<Array<Maybe<PermissibleEstimationType>>>;
    selectedEstimationType?: Maybe<PermissibleEstimationType>;
};
export declare type EstimationConfig = {
    __typename?: 'EstimationConfig';
    current: CurrentEstimation;
    available: Array<AvailableEstimations>;
};
export declare enum EstimationType {
    StoryPoints = "STORY_POINTS",
    OriginalEstimate = "ORIGINAL_ESTIMATE",
    IssueCount = "ISSUE_COUNT",
    CustomNumberField = "CUSTOM_NUMBER_FIELD"
}
export declare enum EventKnownAvIs {
    AviJiraIssueCreated = "AVI_JIRA_ISSUE_CREATED",
    AviJiraIssueUpdated = "AVI_JIRA_ISSUE_UPDATED",
    AviBitbucketPrCreated = "AVI_BITBUCKET_PR_CREATED"
}
export declare enum EventMatchingStrategies {
    JiraByCloud = "JIRA_BY_CLOUD",
    JiraByProject = "JIRA_BY_PROJECT",
    JiraByIssue = "JIRA_BY_ISSUE",
    BitbucketByRepo = "BITBUCKET_BY_REPO",
    ByAccount = "BY_ACCOUNT",
    JiraByCloudByProjectTypeByAccount = "JIRA_BY_CLOUD_BY_PROJECT_TYPE_BY_ACCOUNT",
    PrByProjectByRelationshipType = "PR_BY_PROJECT_BY_RELATIONSHIP_TYPE"
}
export declare type EventSource = Node & {
    __typename?: 'EventSource';
    id: Scalars['ID'];
    externalEventSourceId: Scalars['ID'];
    eventType: CompassEventType;
    forgeAppId?: Maybe<Scalars['ID']>;
    events?: Maybe<CompassEventsQueryResult>;
};
export declare type EventSourceEventsArgs = {
    query?: Maybe<CompassEventsInEventSourceQuery>;
};
export declare type Extension = {
    __typename?: 'Extension';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    definitionId: Scalars['ID'];
    environmentId: Scalars['ID'];
    versionId: Scalars['ID'];
    environmentKey: Scalars['String'];
    environmentType: Scalars['String'];
    installationId: Scalars['String'];
    type: Scalars['String'];
    key: Scalars['String'];
    appOwner?: Maybe<User>;
    appVersion?: Maybe<Scalars['String']>;
    properties: Scalars['JSON'];
    oauthClientId: Scalars['ID'];
    scopes: Array<Scalars['String']>;
    principal?: Maybe<AppPrincipal>;
    migrationKey?: Maybe<Scalars['String']>;
    license?: Maybe<AppInstallationLicense>;
    egress?: Maybe<Array<AppNetworkEgressPermissionExtension>>;
    securityPolicies?: Maybe<Array<AppSecurityPoliciesPermissionExtension>>;
    consentUrl?: Maybe<Scalars['String']>;
    currentUserConsent?: Maybe<UserConsentExtension>;
    requiresUserConsent?: Maybe<Scalars['Boolean']>;
    requiresAutoConsent?: Maybe<Scalars['Boolean']>;
    dataClassificationPolicyDecision: DataClassificationPolicyDecision;
};
export declare type ExtensionDataClassificationPolicyDecisionArgs = {
    input: DataClassificationPolicyDecisionInput;
};
export declare type ExtensionContext = {
    __typename?: 'ExtensionContext';
    id: Scalars['ID'];
    extensions: Array<Extension>;
    extensionsByType: Array<Extension>;
    installationsSummary?: Maybe<Array<InstallationSummary>>;
    appAuditLogs: AppAuditConnection;
    userConsentByAaid?: Maybe<Array<UserConsent>>;
    installations?: Maybe<AppInstallationConnection>;
};
export declare type ExtensionContextExtensionsArgs = {
    filter?: Maybe<Array<ExtensionContextsFilter>>;
};
export declare type ExtensionContextExtensionsByTypeArgs = {
    type: Scalars['String'];
    principalType?: Maybe<PrincipalType>;
};
export declare type ExtensionContextAppAuditLogsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ExtensionContextUserConsentByAaidArgs = {
    userAaid: Scalars['ID'];
};
export declare type ExtensionContextInstallationsArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<AppInstallationsFilter>;
};
export declare type ExtensionContextsFilter = {
    type: ExtensionContextsFilterType;
    value: Array<Scalars['String']>;
};
export declare enum ExtensionContextsFilterType {
    DataClassificationTag = "DATA_CLASSIFICATION_TAG",
    ExtensionType = "EXTENSION_TYPE",
    PrincipalType = "PRINCIPAL_TYPE"
}
export declare type ExtensionDetailsInput = {
    definitionId: Scalars['ID'];
    extensionKey: Scalars['String'];
};
export declare type ExternalAuthCredentialsInput = {
    clientId?: Maybe<Scalars['ID']>;
    clientSecret?: Maybe<Scalars['String']>;
};
export declare type ExternalAuthProvider = {
    __typename?: 'ExternalAuthProvider';
    key: Scalars['String'];
    displayName: Scalars['String'];
    url: Scalars['URL'];
};
export declare type FilterQuery = {
    __typename?: 'FilterQuery';
    sanitisedJql: Scalars['String'];
    errors?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type ForgeAlertsActivitiesQueryInput = {
    after?: Maybe<Scalars['String']>;
    endTime: Scalars['String'];
    environment: Scalars['String'];
    first?: Maybe<Scalars['Int']>;
    startTime: Scalars['String'];
    onlyOpenResolvedActivityType?: Maybe<Scalars['Boolean']>;
};
export declare type ForgeAlertsActivitiesResult = ForgeAlertsActivityConnection | QueryError;
export declare type ForgeAlertsActivity = {
    __typename?: 'ForgeAlertsActivity';
    activityMessage: Scalars['String'];
    timestamp: Scalars['String'];
    type: ForgeAlertsActivityType;
    isMuted: Scalars['Boolean'];
    status: ForgeAlertsStatus;
};
export declare type ForgeAlertsActivityConnection = {
    __typename?: 'ForgeAlertsActivityConnection';
    edges: Array<Maybe<ForgeAlertsActivityEdge>>;
    nodes: Array<ForgeAlertsActivity>;
    pageInfo: PageInfo;
};
export declare type ForgeAlertsActivityEdge = {
    __typename?: 'ForgeAlertsActivityEdge';
    cursor: Scalars['String'];
    node?: Maybe<ForgeAlertsActivity>;
};
export declare enum ForgeAlertsActivityType {
    AlertCreated = "ALERT_CREATED",
    AlertMuted = "ALERT_MUTED",
    AlertOpened = "ALERT_OPENED",
    AlertResolved = "ALERT_RESOLVED",
    AlertSentFiring = "ALERT_SENT_FIRING",
    AlertSentResolved = "ALERT_SENT_RESOLVED",
    AlertUnmuted = "ALERT_UNMUTED",
    AlertUpdated = "ALERT_UPDATED"
}
export declare type ForgeAlertsConfigData = {
    __typename?: 'ForgeAlertsConfigData';
    alertName: Scalars['String'];
    alertId: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    environment: Scalars['String'];
    isMuted: Scalars['Boolean'];
    lastTriggeredAt?: Maybe<Scalars['Int']>;
    metricName: Scalars['String'];
    status: ForgeAlertsStatus;
    triggerValue: Scalars['Float'];
};
export declare type ForgeAlertsConfigQueryInput = {
    environment: Scalars['String'];
};
export declare type ForgeAlertsConfigResult = ForgeAlertsConfigData | QueryError;
export declare type ForgeAlertsCreateAlertPayload = Payload & {
    __typename?: 'ForgeAlertsCreateAlertPayload';
    alertConfig?: Maybe<ForgeAlertsConfigData>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ForgeAlertsCreateConfigInput = {
    alertId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    environment: Scalars['String'];
    isMuted?: Maybe<Scalars['Boolean']>;
    metricName?: Maybe<Scalars['String']>;
    triggerValue?: Maybe<Scalars['Float']>;
};
export declare type ForgeAlertsDeleteAlertConfigsInput = {
    appIds: Array<Scalars['ID']>;
};
export declare type ForgeAlertsFixAlertConfigsInput = {
    appIds: Array<Scalars['ID']>;
};
export declare type ForgeAlertsFixAlertPayload = Payload & {
    __typename?: 'ForgeAlertsFixAlertPayload';
    alertConfigs?: Maybe<Array<Maybe<ForgeAlertsConfigData>>>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ForgeAlertsMutation = {
    __typename?: 'ForgeAlertsMutation';
    appId: Scalars['ID'];
    createAlertConfig?: Maybe<ForgeAlertsCreateAlertPayload>;
    deleteAlertConfigs?: Maybe<Payload>;
    fixAlertConfigs?: Maybe<ForgeAlertsFixAlertPayload>;
    modifyAlertConfig?: Maybe<ForgeAlertsUpdateAlertPayload>;
};
export declare type ForgeAlertsMutationCreateAlertConfigArgs = {
    input: ForgeAlertsCreateConfigInput;
};
export declare type ForgeAlertsMutationDeleteAlertConfigsArgs = {
    input: ForgeAlertsDeleteAlertConfigsInput;
};
export declare type ForgeAlertsMutationFixAlertConfigsArgs = {
    input: ForgeAlertsFixAlertConfigsInput;
};
export declare type ForgeAlertsMutationModifyAlertConfigArgs = {
    input: ForgeAlertsUpdateConfigInput;
};
export declare type ForgeAlertsQuery = {
    __typename?: 'ForgeAlertsQuery';
    alertConfig?: Maybe<ForgeAlertsConfigResult>;
    alertActivities?: Maybe<ForgeAlertsActivitiesResult>;
    appId: Scalars['ID'];
};
export declare type ForgeAlertsQueryAlertConfigArgs = {
    input: ForgeAlertsConfigQueryInput;
};
export declare type ForgeAlertsQueryAlertActivitiesArgs = {
    input: ForgeAlertsActivitiesQueryInput;
};
export declare enum ForgeAlertsStatus {
    Firing = "FIRING",
    Resolved = "RESOLVED"
}
export declare type ForgeAlertsUpdateAlertPayload = Payload & {
    __typename?: 'ForgeAlertsUpdateAlertPayload';
    alertConfig?: Maybe<ForgeAlertsConfigData>;
    errors?: Maybe<Array<MutationError>>;
    success: Scalars['Boolean'];
};
export declare type ForgeAlertsUpdateConfigInput = {
    description?: Maybe<Scalars['String']>;
    environment: Scalars['String'];
    isMuted?: Maybe<Scalars['Boolean']>;
    alertName?: Maybe<Scalars['String']>;
    triggerValue?: Maybe<Scalars['Float']>;
};
export declare type ForgeAuditLog = {
    __typename?: 'ForgeAuditLog';
    action: ForgeAuditLogsActionType;
    actorId: Scalars['ID'];
    actorName: Scalars['String'];
    contributor?: Maybe<User>;
    timestamp: Scalars['String'];
};
export declare type ForgeAuditLogEdge = {
    __typename?: 'ForgeAuditLogEdge';
    cursor: Scalars['String'];
    node?: Maybe<ForgeAuditLog>;
};
export declare enum ForgeAuditLogsActionType {
    ContributorAdded = "CONTRIBUTOR_ADDED",
    ContributorRemoved = "CONTRIBUTOR_REMOVED",
    OwnershipTransferred = "OWNERSHIP_TRANSFERRED"
}
export declare type ForgeAuditLogsAppContributor = {
    __typename?: 'ForgeAuditLogsAppContributor';
    contributor?: Maybe<User>;
};
export declare type ForgeAuditLogsAppContributorResult = ForgeAuditLogsAppContributorsData | QueryError;
export declare type ForgeAuditLogsAppContributorsData = {
    __typename?: 'ForgeAuditLogsAppContributorsData';
    appContributors?: Maybe<Array<Maybe<ForgeAuditLogsAppContributor>>>;
};
export declare type ForgeAuditLogsConnection = {
    __typename?: 'ForgeAuditLogsConnection';
    edges: Array<ForgeAuditLogEdge>;
    nodes: Array<ForgeAuditLog>;
    pageInfo: PageInfo;
};
export declare type ForgeAuditLogsQuery = {
    __typename?: 'ForgeAuditLogsQuery';
    appId: Scalars['ID'];
    auditLogs?: Maybe<ForgeAuditLogsResult>;
    contributors?: Maybe<ForgeAuditLogsAppContributorResult>;
};
export declare type ForgeAuditLogsQueryAuditLogsArgs = {
    input: ForgeAuditLogsQueryInput;
};
export declare type ForgeAuditLogsQueryInput = {
    startTime?: Maybe<Scalars['String']>;
    endTime?: Maybe<Scalars['String']>;
    contributorIds?: Maybe<Array<Scalars['ID']>>;
    actions?: Maybe<Array<ForgeAuditLogsActionType>>;
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
};
export declare type ForgeAuditLogsResult = ForgeAuditLogsConnection | QueryError;
export declare type ForgeContextToken = {
    __typename?: 'ForgeContextToken';
    jwt: Scalars['String'];
    expiresAt: Scalars['String'];
};
export declare type ForgeMetricsData = {
    name: Scalars['String'];
    type: ForgeMetricsDataType;
    series?: Maybe<Array<ForgeMetricsSeries>>;
};
export declare enum ForgeMetricsDataType {
    DateTime = "DATE_TIME",
    Category = "CATEGORY",
    Numeric = "NUMERIC"
}
export declare type ForgeMetricsErrorsData = ForgeMetricsData & {
    __typename?: 'ForgeMetricsErrorsData';
    name: Scalars['String'];
    type: ForgeMetricsDataType;
    series: Array<ForgeMetricsErrorsSeries>;
    resolution: ForgeMetricsResolution;
    interval: ForgeMetricsIntervalRange;
};
export declare type ForgeMetricsErrorsDataPoint = {
    __typename?: 'ForgeMetricsErrorsDataPoint';
    timestamp: Scalars['DateTime'];
    count: Scalars['Int'];
};
export declare type ForgeMetricsErrorsResult = ForgeMetricsErrorsData | QueryError;
export declare type ForgeMetricsErrorsSeries = ForgeMetricsSeries & {
    __typename?: 'ForgeMetricsErrorsSeries';
    groups: Array<ForgeMetricsLabelGroup>;
    data: Array<ForgeMetricsErrorsDataPoint>;
};
export declare type ForgeMetricsErrorsValueData = ForgeMetricsData & {
    __typename?: 'ForgeMetricsErrorsValueData';
    name: Scalars['String'];
    type: ForgeMetricsDataType;
    series: Array<ForgeMetricsErrorsSeries>;
};
export declare type ForgeMetricsErrorsValueResult = ForgeMetricsErrorsValueData | QueryError;
export declare enum ForgeMetricsGroupByDimensions {
    UserTier = "USER_TIER",
    EnvironmentId = "ENVIRONMENT_ID",
    ErrorType = "ERROR_TYPE",
    Version = "VERSION",
    ContextAri = "CONTEXT_ARI",
    Function = "FUNCTION"
}
export declare type ForgeMetricsInstallationContext = {
    __typename?: 'ForgeMetricsInstallationContext';
    tenantContext?: Maybe<TenantContext>;
    contextAri: Scalars['ID'];
};
export declare type ForgeMetricsIntervalInput = {
    start: Scalars['DateTime'];
    end: Scalars['DateTime'];
};
export declare type ForgeMetricsIntervalRange = {
    __typename?: 'ForgeMetricsIntervalRange';
    start: Scalars['DateTime'];
    end: Scalars['DateTime'];
};
export declare type ForgeMetricsInvocationData = ForgeMetricsData & {
    __typename?: 'ForgeMetricsInvocationData';
    name: Scalars['String'];
    type: ForgeMetricsDataType;
    series: Array<ForgeMetricsInvocationSeries>;
    resolution: ForgeMetricsResolution;
    interval: ForgeMetricsIntervalRange;
};
export declare type ForgeMetricsInvocationDataPoint = {
    __typename?: 'ForgeMetricsInvocationDataPoint';
    timestamp: Scalars['DateTime'];
    count: Scalars['Int'];
};
export declare type ForgeMetricsInvocationSeries = ForgeMetricsSeries & {
    __typename?: 'ForgeMetricsInvocationSeries';
    groups: Array<ForgeMetricsLabelGroup>;
    data: Array<ForgeMetricsInvocationDataPoint>;
};
export declare type ForgeMetricsInvocationsResult = ForgeMetricsInvocationData | QueryError;
export declare type ForgeMetricsInvocationsValueData = ForgeMetricsData & {
    __typename?: 'ForgeMetricsInvocationsValueData';
    name: Scalars['String'];
    type: ForgeMetricsDataType;
    series: Array<ForgeMetricsInvocationSeries>;
};
export declare type ForgeMetricsInvocationsValueResult = ForgeMetricsInvocationsValueData | QueryError;
export declare type ForgeMetricsLabelGroup = {
    __typename?: 'ForgeMetricsLabelGroup';
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare enum ForgeMetricsLabels {
    ForgeBackendInvocationCount = "FORGE_BACKEND_INVOCATION_COUNT",
    ForgeBackendInvocationErrors = "FORGE_BACKEND_INVOCATION_ERRORS",
    ForgeBackendInvocationLatency = "FORGE_BACKEND_INVOCATION_LATENCY"
}
export declare type ForgeMetricsLatenciesData = ForgeMetricsData & {
    __typename?: 'ForgeMetricsLatenciesData';
    name: Scalars['String'];
    type: ForgeMetricsDataType;
    series: Array<ForgeMetricsLatenciesSeries>;
    interval: ForgeMetricsIntervalRange;
};
export declare type ForgeMetricsLatenciesDataPoint = {
    __typename?: 'ForgeMetricsLatenciesDataPoint';
    bucket: Scalars['String'];
    count: Scalars['Int'];
};
export declare type ForgeMetricsLatenciesPercentile = {
    __typename?: 'ForgeMetricsLatenciesPercentile';
    percentile: Scalars['String'];
    value: Scalars['String'];
};
export declare type ForgeMetricsLatenciesResult = ForgeMetricsLatenciesData | QueryError;
export declare type ForgeMetricsLatenciesSeries = ForgeMetricsSeries & {
    __typename?: 'ForgeMetricsLatenciesSeries';
    groups: Array<ForgeMetricsLabelGroup>;
    data: Array<ForgeMetricsLatenciesDataPoint>;
    percentiles?: Maybe<Array<ForgeMetricsLatenciesPercentile>>;
};
export declare type ForgeMetricsLatencyBucketsQueryFilters = {
    environment?: Maybe<Scalars['ID']>;
    contextAris?: Maybe<Array<Scalars['ID']>>;
    interval: ForgeMetricsIntervalInput;
    functionNames?: Maybe<Array<Scalars['String']>>;
};
export declare type ForgeMetricsLatencyBucketsQueryInput = {
    filters: ForgeMetricsLatencyBucketsQueryFilters;
    groupBy?: Maybe<Array<ForgeMetricsGroupByDimensions>>;
};
export declare type ForgeMetricsOtlpData = {
    __typename?: 'ForgeMetricsOtlpData';
    resourceMetrics: Scalars['JSON'];
};
export declare type ForgeMetricsOtlpQueryFilters = {
    environments: Array<Scalars['ID']>;
    interval: ForgeMetricsIntervalInput;
    metrics: Array<ForgeMetricsLabels>;
};
export declare type ForgeMetricsOtlpQueryInput = {
    filters: ForgeMetricsOtlpQueryFilters;
};
export declare type ForgeMetricsOtlpResult = ForgeMetricsOtlpData | QueryError;
export declare type ForgeMetricsQuery = {
    __typename?: 'ForgeMetricsQuery';
    appId: Scalars['ID'];
    successRate: ForgeMetricsSuccessRateResult;
    successRateValue: ForgeMetricsSuccessRateValueResult;
    invocations: ForgeMetricsInvocationsResult;
    invocationsValue: ForgeMetricsInvocationsValueResult;
    errors: ForgeMetricsErrorsResult;
    errorsValue: ForgeMetricsErrorsValueResult;
    sites: ForgeMetricsSitesResult;
    latencies: ForgeMetricsLatenciesResult;
    latencyBuckets: ForgeMetricsLatenciesResult;
    exportMetrics: ForgeMetricsOtlpResult;
};
export declare type ForgeMetricsQuerySuccessRateArgs = {
    query: ForgeMetricsQueryInput;
};
export declare type ForgeMetricsQuerySuccessRateValueArgs = {
    query: ForgeMetricsQueryInput;
};
export declare type ForgeMetricsQueryInvocationsArgs = {
    query: ForgeMetricsQueryInput;
};
export declare type ForgeMetricsQueryInvocationsValueArgs = {
    query: ForgeMetricsQueryInput;
};
export declare type ForgeMetricsQueryErrorsArgs = {
    query: ForgeMetricsQueryInput;
};
export declare type ForgeMetricsQueryErrorsValueArgs = {
    query: ForgeMetricsQueryInput;
};
export declare type ForgeMetricsQuerySitesArgs = {
    query: ForgeMetricsQueryInput;
};
export declare type ForgeMetricsQueryLatenciesArgs = {
    query: ForgeMetricsQueryInput;
    percentiles?: Maybe<Array<Scalars['Float']>>;
};
export declare type ForgeMetricsQueryLatencyBucketsArgs = {
    query: ForgeMetricsLatencyBucketsQueryInput;
    percentiles?: Maybe<Array<Scalars['Float']>>;
};
export declare type ForgeMetricsQueryExportMetricsArgs = {
    query: ForgeMetricsOtlpQueryInput;
};
export declare type ForgeMetricsQueryFilters = {
    environment?: Maybe<Scalars['ID']>;
    contextAris?: Maybe<Array<Scalars['ID']>>;
    interval: ForgeMetricsIntervalInput;
};
export declare type ForgeMetricsQueryInput = {
    filters: ForgeMetricsQueryFilters;
    groupBy?: Maybe<Array<ForgeMetricsGroupByDimensions>>;
};
export declare type ForgeMetricsResolution = {
    __typename?: 'ForgeMetricsResolution';
    size: Scalars['Int'];
    units: ForgeMetricsResolutionUnit;
};
export declare enum ForgeMetricsResolutionUnit {
    Hours = "HOURS",
    Minutes = "MINUTES"
}
export declare type ForgeMetricsSeries = {
    groups: Array<ForgeMetricsLabelGroup>;
};
export declare enum ForgeMetricsSiteFilterCategory {
    LowestSuccessRate = "LOWEST_SUCCESS_RATE",
    HighestInvocationCount = "HIGHEST_INVOCATION_COUNT",
    HighestNumberOfErrors = "HIGHEST_NUMBER_OF_ERRORS",
    HighestNumberOfUsers = "HIGHEST_NUMBER_OF_USERS",
    All = "ALL"
}
export declare type ForgeMetricsSitesByCategory = {
    __typename?: 'ForgeMetricsSitesByCategory';
    category: ForgeMetricsSiteFilterCategory;
    installationContexts: Array<ForgeMetricsInstallationContext>;
};
export declare type ForgeMetricsSitesData = {
    __typename?: 'ForgeMetricsSitesData';
    data: Array<ForgeMetricsSitesByCategory>;
};
export declare type ForgeMetricsSitesResult = ForgeMetricsSitesData | QueryError;
export declare type ForgeMetricsSuccessRateData = ForgeMetricsData & {
    __typename?: 'ForgeMetricsSuccessRateData';
    name: Scalars['String'];
    type: ForgeMetricsDataType;
    series: Array<ForgeMetricsSuccessRateSeries>;
    resolution: ForgeMetricsResolution;
    interval: ForgeMetricsIntervalRange;
};
export declare type ForgeMetricsSuccessRateDataPoint = {
    __typename?: 'ForgeMetricsSuccessRateDataPoint';
    timestamp: Scalars['DateTime'];
    value: Scalars['Float'];
};
export declare type ForgeMetricsSuccessRateResult = ForgeMetricsSuccessRateData | QueryError;
export declare type ForgeMetricsSuccessRateSeries = ForgeMetricsSeries & {
    __typename?: 'ForgeMetricsSuccessRateSeries';
    groups: Array<ForgeMetricsLabelGroup>;
    data: Array<ForgeMetricsSuccessRateDataPoint>;
};
export declare type ForgeMetricsSuccessRateValueData = ForgeMetricsData & {
    __typename?: 'ForgeMetricsSuccessRateValueData';
    name: Scalars['String'];
    type: ForgeMetricsDataType;
    series: Array<ForgeMetricsSuccessRateSeries>;
};
export declare type ForgeMetricsSuccessRateValueResult = ForgeMetricsSuccessRateValueData | QueryError;
export declare enum FormStatus {
    Submitted = "SUBMITTED",
    Rejected = "REJECTED",
    Approved = "APPROVED",
    Saved = "SAVED"
}
export declare type FortifiedMetricsIntervalInput = {
    start: Scalars['DateTime'];
    end: Scalars['DateTime'];
};
export declare type FortifiedMetricsIntervalRange = {
    __typename?: 'FortifiedMetricsIntervalRange';
    start: Scalars['DateTime'];
    end: Scalars['DateTime'];
};
export declare type FortifiedMetricsQuery = {
    __typename?: 'FortifiedMetricsQuery';
    appKey: Scalars['ID'];
    appAvailability?: Maybe<FortifiedSuccessRateMetricQuery>;
    installationCallbacks?: Maybe<FortifiedSuccessRateMetricQuery>;
    webhooks?: Maybe<FortifiedSuccessRateMetricQuery>;
};
export declare type FortifiedMetricsQueryFilters = {
    interval: FortifiedMetricsIntervalInput;
};
export declare type FortifiedMetricsQueryInput = {
    filters: FortifiedMetricsQueryFilters;
};
export declare type FortifiedMetricsResolution = {
    __typename?: 'FortifiedMetricsResolution';
    size: Scalars['Int'];
    units: FortifiedMetricsResolutionUnit;
};
export declare enum FortifiedMetricsResolutionUnit {
    Hours = "HOURS",
    Minutes = "MINUTES"
}
export declare type FortifiedMetricsSuccessRateData = {
    __typename?: 'FortifiedMetricsSuccessRateData';
    name: Scalars['String'];
    series: Array<FortifiedMetricsSuccessRateSeries>;
    resolution: FortifiedMetricsResolution;
    interval: FortifiedMetricsIntervalRange;
};
export declare type FortifiedMetricsSuccessRateDataPoint = {
    __typename?: 'FortifiedMetricsSuccessRateDataPoint';
    timestamp: Scalars['DateTime'];
    value: Scalars['Float'];
};
export declare type FortifiedMetricsSuccessRateResult = FortifiedMetricsSuccessRateData | QueryError;
export declare type FortifiedMetricsSuccessRateSeries = {
    __typename?: 'FortifiedMetricsSuccessRateSeries';
    data: Array<FortifiedMetricsSuccessRateDataPoint>;
};
export declare type FortifiedSuccessRateMetricQuery = {
    __typename?: 'FortifiedSuccessRateMetricQuery';
    successRate?: Maybe<FortifiedMetricsSuccessRateResult>;
    alertConditionSuccessRate?: Maybe<FortifiedMetricsSuccessRateResult>;
    serviceLevelObjectiveSuccessRate?: Maybe<FortifiedMetricsSuccessRateResult>;
};
export declare type FortifiedSuccessRateMetricQuerySuccessRateArgs = {
    query: FortifiedMetricsQueryInput;
};
export declare type FortifiedSuccessRateMetricQueryAlertConditionSuccessRateArgs = {
    query: FortifiedMetricsQueryInput;
};
export declare type FortifiedSuccessRateMetricQueryServiceLevelObjectiveSuccessRateArgs = {
    query: FortifiedMetricsQueryInput;
};
export declare type FunctionDescription = {
    __typename?: 'FunctionDescription';
    key: Scalars['String'];
};
export declare type FunctionInvocationMetadata = {
    id: Scalars['ID'];
    appVersion: Scalars['String'];
    installationContext?: Maybe<AppInstallationContext>;
    function?: Maybe<FunctionDescription>;
    trigger?: Maybe<FunctionTrigger>;
    moduleType?: Maybe<Scalars['String']>;
};
export declare type FunctionTrigger = {
    __typename?: 'FunctionTrigger';
    type?: Maybe<FunctionTriggerType>;
    key?: Maybe<Scalars['String']>;
};
export declare enum FunctionTriggerType {
    Frontend = "FRONTEND",
    Manual = "MANUAL",
    Product = "PRODUCT",
    Web = "WEB"
}
export declare type GdprDetails = {
    __typename?: 'GDPRDetails';
    dataController?: Maybe<DataController>;
    dataProcessor?: Maybe<DataProcessor>;
    dataTransfer?: Maybe<DataTransfer>;
};
export declare type GenericMutationErrorExtension = MutationErrorExtension & {
    __typename?: 'GenericMutationErrorExtension';
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type GenericMutationResponse = Payload & {
    __typename?: 'GenericMutationResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type GenericQueryErrorExtension = QueryErrorExtension & {
    __typename?: 'GenericQueryErrorExtension';
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type GlobalCardCreateAdditionalFields = {
    __typename?: 'GlobalCardCreateAdditionalFields';
    sprintCustomFieldId?: Maybe<Scalars['String']>;
    rankCustomFieldId?: Maybe<Scalars['String']>;
    boardIssueListKey?: Maybe<Scalars['String']>;
};
export declare enum GrantCheckProduct {
    Jira = "JIRA",
    JiraServicedesk = "JIRA_SERVICEDESK",
    Confluence = "CONFLUENCE",
    Compass = "COMPASS",
    NoGrantChecks = "NO_GRANT_CHECKS"
}
export declare type Graph = {
    __typename?: 'Graph';
    parentDocumentHasChildDocument?: Maybe<GraphJiraDocumentConnection>;
    parentDocumentHasChildDocumentInverse?: Maybe<GraphJiraDocumentConnection>;
    parentDocumentHasChildDocumentRelationship?: Maybe<GraphParentDocumentHasChildDocumentRelationshipConnection>;
    parentDocumentHasChildDocumentRelationshipInverse?: Maybe<GraphParentDocumentHasChildDocumentRelationshipConnection>;
    projectAssociatedPr?: Maybe<GraphJiraPullRequestConnection>;
    projectAssociatedDeployment?: Maybe<GraphJiraDeploymentConnection>;
    issueAssociatedPr?: Maybe<GraphJiraPullRequestConnection>;
    issueAssociatedPrInverse?: Maybe<GraphJiraIssueConnection>;
    issueAssociatedPrRelationship?: Maybe<GraphIssueAssociatedPrRelationshipConnection>;
    issueAssociatedPrRelationshipInverse?: Maybe<GraphIssueAssociatedPrRelationshipConnection>;
    sprintRetrospectivePage?: Maybe<GraphConfluencePageConnection>;
    sprintRetrospectivePageInverse?: Maybe<GraphJiraSprintConnection>;
    sprintRetrospectivePageRelationship?: Maybe<GraphSprintRetrospectivePageRelationshipConnection>;
    sprintRetrospectivePageRelationshipInverse?: Maybe<GraphSprintRetrospectivePageRelationshipConnection>;
};
export declare type GraphParentDocumentHasChildDocumentArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    from: Scalars['ID'];
};
export declare type GraphParentDocumentHasChildDocumentInverseArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    to: Scalars['ID'];
};
export declare type GraphParentDocumentHasChildDocumentRelationshipArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    from: Scalars['ID'];
};
export declare type GraphParentDocumentHasChildDocumentRelationshipInverseArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    to: Scalars['ID'];
};
export declare type GraphProjectAssociatedPrArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    from: Scalars['ID'];
};
export declare type GraphProjectAssociatedDeploymentArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    from: Scalars['ID'];
};
export declare type GraphIssueAssociatedPrArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    from: Scalars['ID'];
};
export declare type GraphIssueAssociatedPrInverseArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    to: Scalars['ID'];
};
export declare type GraphIssueAssociatedPrRelationshipArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    from: Scalars['ID'];
};
export declare type GraphIssueAssociatedPrRelationshipInverseArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    to: Scalars['ID'];
};
export declare type GraphSprintRetrospectivePageArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    from: Scalars['ID'];
};
export declare type GraphSprintRetrospectivePageInverseArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    to: Scalars['ID'];
};
export declare type GraphSprintRetrospectivePageRelationshipArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    from: Scalars['ID'];
};
export declare type GraphSprintRetrospectivePageRelationshipInverseArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    to: Scalars['ID'];
};
export declare type GraphConfluencePage = Node & {
    __typename?: 'GraphConfluencePage';
    id: Scalars['ID'];
    page?: Maybe<ConfluencePage>;
};
export declare type GraphConfluencePageConnection = {
    __typename?: 'GraphConfluencePageConnection';
    edges: Array<Maybe<GraphConfluencePageEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphConfluencePageEdge = {
    __typename?: 'GraphConfluencePageEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphConfluencePage;
};
export declare type GraphCreateIssueAssociatedPrInput = {
    from: Scalars['ID'];
    sequenceNumber?: Maybe<Scalars['Long']>;
    to: Scalars['ID'];
    updatedAt?: Maybe<Scalars['DateTime']>;
};
export declare type GraphCreateParentDocumentHasChildDocumentInput = {
    from: Scalars['ID'];
    sequenceNumber?: Maybe<Scalars['Long']>;
    to: Scalars['ID'];
    updatedAt?: Maybe<Scalars['DateTime']>;
};
export declare type GraphCreateSprintRetrospectivePageInput = {
    from: Scalars['ID'];
    sequenceNumber?: Maybe<Scalars['Long']>;
    to: Scalars['ID'];
    updatedAt?: Maybe<Scalars['DateTime']>;
};
export declare type GraphIssueAssociatedPrPayload = Payload & {
    __typename?: 'GraphIssueAssociatedPrPayload';
    errors?: Maybe<Array<MutationError>>;
    issueAssociatedPrRelationship: Array<Maybe<GraphIssueAssociatedPrRelationship>>;
    success: Scalars['Boolean'];
};
export declare type GraphIssueAssociatedPrRelationship = Node & {
    __typename?: 'GraphIssueAssociatedPrRelationship';
    from: GraphJiraIssue;
    id: Scalars['ID'];
    lastUpdated: Scalars['DateTime'];
    to: GraphJiraPullRequest;
};
export declare type GraphIssueAssociatedPrRelationshipConnection = {
    __typename?: 'GraphIssueAssociatedPrRelationshipConnection';
    edges: Array<Maybe<GraphIssueAssociatedPrRelationshipEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphIssueAssociatedPrRelationshipEdge = {
    __typename?: 'GraphIssueAssociatedPrRelationshipEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphIssueAssociatedPrRelationship;
};
export declare type GraphJiraDeployment = Node & {
    __typename?: 'GraphJiraDeployment';
    id: Scalars['ID'];
};
export declare type GraphJiraDeploymentConnection = {
    __typename?: 'GraphJiraDeploymentConnection';
    edges: Array<Maybe<GraphJiraDeploymentEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphJiraDeploymentEdge = {
    __typename?: 'GraphJiraDeploymentEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphJiraDeployment;
};
export declare type GraphJiraDocument = Node & {
    __typename?: 'GraphJiraDocument';
    id: Scalars['ID'];
    document?: Maybe<DevOpsDocument>;
};
export declare type GraphJiraDocumentConnection = {
    __typename?: 'GraphJiraDocumentConnection';
    edges: Array<Maybe<GraphJiraDocumentEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphJiraDocumentEdge = {
    __typename?: 'GraphJiraDocumentEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphJiraDocument;
};
export declare type GraphJiraIssue = Node & {
    __typename?: 'GraphJiraIssue';
    id: Scalars['ID'];
};
export declare type GraphJiraIssueConnection = {
    __typename?: 'GraphJiraIssueConnection';
    edges: Array<Maybe<GraphJiraIssueEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphJiraIssueEdge = {
    __typename?: 'GraphJiraIssueEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphJiraIssue;
};
export declare type GraphJiraPullRequest = Node & {
    __typename?: 'GraphJiraPullRequest';
    id: Scalars['ID'];
    pullRequest?: Maybe<DevOpsPullRequestDetails>;
};
export declare type GraphJiraPullRequestConnection = {
    __typename?: 'GraphJiraPullRequestConnection';
    edges: Array<Maybe<GraphJiraPullRequestEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphJiraPullRequestEdge = {
    __typename?: 'GraphJiraPullRequestEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphJiraPullRequest;
};
export declare type GraphJiraSprint = Node & {
    __typename?: 'GraphJiraSprint';
    id: Scalars['ID'];
};
export declare type GraphJiraSprintConnection = {
    __typename?: 'GraphJiraSprintConnection';
    edges: Array<Maybe<GraphJiraSprintEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphJiraSprintEdge = {
    __typename?: 'GraphJiraSprintEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphJiraSprint;
};
export declare type GraphMutation = {
    __typename?: 'GraphMutation';
    createIssueAssociatedPr?: Maybe<GraphIssueAssociatedPrPayload>;
    createSprintRetrospectivePage?: Maybe<GraphSprintRetrospectivePagePayload>;
};
export declare type GraphMutationCreateIssueAssociatedPrArgs = {
    input: GraphCreateIssueAssociatedPrInput;
};
export declare type GraphMutationCreateSprintRetrospectivePageArgs = {
    input: GraphCreateSprintRetrospectivePageInput;
};
export declare type GraphParentDocumentHasChildDocumentPayload = Payload & {
    __typename?: 'GraphParentDocumentHasChildDocumentPayload';
    errors?: Maybe<Array<MutationError>>;
    parentDocumentHasChildDocumentRelationship: Array<Maybe<GraphParentDocumentHasChildDocumentRelationship>>;
    success: Scalars['Boolean'];
};
export declare type GraphParentDocumentHasChildDocumentRelationship = Node & {
    __typename?: 'GraphParentDocumentHasChildDocumentRelationship';
    from: GraphJiraDocument;
    id: Scalars['ID'];
    lastUpdated: Scalars['DateTime'];
    to: GraphJiraDocument;
};
export declare type GraphParentDocumentHasChildDocumentRelationshipConnection = {
    __typename?: 'GraphParentDocumentHasChildDocumentRelationshipConnection';
    edges: Array<Maybe<GraphParentDocumentHasChildDocumentRelationshipEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphParentDocumentHasChildDocumentRelationshipEdge = {
    __typename?: 'GraphParentDocumentHasChildDocumentRelationshipEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphParentDocumentHasChildDocumentRelationship;
};
export declare type GraphSprintRetrospectivePagePayload = Payload & {
    __typename?: 'GraphSprintRetrospectivePagePayload';
    errors?: Maybe<Array<MutationError>>;
    sprintRetrospectivePageRelationship: Array<Maybe<GraphSprintRetrospectivePageRelationship>>;
    success: Scalars['Boolean'];
};
export declare type GraphSprintRetrospectivePageRelationship = Node & {
    __typename?: 'GraphSprintRetrospectivePageRelationship';
    from: GraphJiraSprint;
    id: Scalars['ID'];
    lastUpdated: Scalars['DateTime'];
    to: GraphConfluencePage;
};
export declare type GraphSprintRetrospectivePageRelationshipConnection = {
    __typename?: 'GraphSprintRetrospectivePageRelationshipConnection';
    edges: Array<Maybe<GraphSprintRetrospectivePageRelationshipEdge>>;
    pageInfo: PageInfo;
};
export declare type GraphSprintRetrospectivePageRelationshipEdge = {
    __typename?: 'GraphSprintRetrospectivePageRelationshipEdge';
    cursor?: Maybe<Scalars['String']>;
    node: GraphSprintRetrospectivePageRelationship;
};
export declare type HasPageInfo = {
    pageInfo: PageInfo;
};
export declare type HasTotal = {
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type HelpCenter = Node & {
    __typename?: 'HelpCenter';
    id: Scalars['ID'];
    type?: Maybe<HelpCenterType>;
    name?: Maybe<HelpCenterName>;
    slug?: Maybe<Scalars['String']>;
    topics?: Maybe<Array<HelpCenterTopic>>;
    homePageLayout?: Maybe<HelpCenterHomePageLayout>;
};
export declare type HelpCenterBulkCreateTopicsInput = {
    helpCenterCreateTopicInputItem: Array<HelpCenterCreateTopicInput>;
};
export declare type HelpCenterBulkDeleteTopicInput = {
    helpCenterTopicDeleteInput: Array<HelpCenterTopicDeleteInput>;
};
export declare type HelpCenterBulkUpdateTopicInput = {
    helpCenterUpdateTopicInputItem: Array<HelpCenterUpdateTopicInput>;
};
export declare type HelpCenterCreateTopicInput = {
    productName?: Maybe<Scalars['String']>;
    items: Array<HelpCenterTopicItemInput>;
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Scalars['JSON']>;
    helpCenterAri?: Maybe<Scalars['String']>;
};
export declare type HelpCenterCreateTopicPayload = Payload & {
    __typename?: 'HelpCenterCreateTopicPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    successfullyCreatedTopicIds: Array<Maybe<HelpCenterSuccessfullyCreatedTopicIds>>;
};
export declare type HelpCenterDeleteUpdateTopicPayload = Payload & {
    __typename?: 'HelpCenterDeleteUpdateTopicPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    topicIds: Array<Maybe<HelpCenterSuccessfullyDeletedUpdatedTopicIds>>;
};
export declare type HelpCenterHelpObject = HelpObjectStoreRequestForm | HelpObjectStoreArticle | HelpObjectStoreChannel | HelpObjectStoreQueryError;
export declare type HelpCenterHomePageLayout = {
    __typename?: 'HelpCenterHomePageLayout';
    layoutId: Scalars['ID'];
    data?: Maybe<HelpLayoutResult>;
};
export declare type HelpCenterMutationApi = {
    __typename?: 'HelpCenterMutationApi';
    createTopic?: Maybe<HelpCenterCreateTopicPayload>;
    updateTopic?: Maybe<HelpCenterDeleteUpdateTopicPayload>;
    updateTopicsOrder?: Maybe<HelpCenterUpdateTopicsOrderPayload>;
    deleteTopic?: Maybe<HelpCenterDeleteUpdateTopicPayload>;
    updateHelpCenter?: Maybe<HelpCenterUpdatePayload>;
};
export declare type HelpCenterMutationApiCreateTopicArgs = {
    input: HelpCenterBulkCreateTopicsInput;
};
export declare type HelpCenterMutationApiUpdateTopicArgs = {
    input: HelpCenterBulkUpdateTopicInput;
};
export declare type HelpCenterMutationApiUpdateTopicsOrderArgs = {
    input: HelpCenterUpdateTopicsOrderInput;
};
export declare type HelpCenterMutationApiDeleteTopicArgs = {
    input: HelpCenterBulkDeleteTopicInput;
};
export declare type HelpCenterMutationApiUpdateHelpCenterArgs = {
    input: HelpCenterUpdateInput;
};
export declare type HelpCenterName = {
    __typename?: 'HelpCenterName';
    default: Scalars['String'];
};
export declare type HelpCenterNameInput = {
    default: Scalars['String'];
};
export declare type HelpCenterQueryApi = {
    __typename?: 'HelpCenterQueryApi';
    helpCenterFromProductName?: Maybe<HelpCenterQueryResult>;
    helpCenterTopicFromProductName?: Maybe<HelpCenterTopicResult>;
    helpCenterById?: Maybe<HelpCenterQueryResult>;
    helpCenterTopicById?: Maybe<HelpCenterTopicResult>;
};
export declare type HelpCenterQueryApiHelpCenterFromProductNameArgs = {
    productName: Scalars['String'];
};
export declare type HelpCenterQueryApiHelpCenterTopicFromProductNameArgs = {
    productName: Scalars['String'];
    topicId: Scalars['ID'];
};
export declare type HelpCenterQueryApiHelpCenterByIdArgs = {
    helpCenterAri: Scalars['ID'];
};
export declare type HelpCenterQueryApiHelpCenterTopicByIdArgs = {
    helpCenterAri: Scalars['ID'];
    topicId: Scalars['ID'];
};
export declare type HelpCenterQueryResult = HelpCenter | QueryError;
export declare type HelpCenterSuccessfullyCreatedTopicIds = {
    __typename?: 'HelpCenterSuccessfullyCreatedTopicIds';
    helpCenterId: Scalars['ID'];
    topicIds: Scalars['ID'];
};
export declare type HelpCenterSuccessfullyDeletedUpdatedTopicIds = {
    __typename?: 'HelpCenterSuccessfullyDeletedUpdatedTopicIds';
    helpCenterId: Scalars['ID'];
    topicIds: Scalars['ID'];
};
export declare type HelpCenterTopic = {
    __typename?: 'HelpCenterTopic';
    topicId: Scalars['ID'];
    items?: Maybe<HelpCenterTopicItemConnection>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type HelpCenterTopicItemsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type HelpCenterTopicDeleteInput = {
    productName?: Maybe<Scalars['String']>;
    topicId: Scalars['ID'];
    helpCenterAri?: Maybe<Scalars['String']>;
};
export declare type HelpCenterTopicItem = {
    __typename?: 'HelpCenterTopicItem';
    ari: Scalars['ID'];
    data?: Maybe<HelpCenterHelpObject>;
};
export declare type HelpCenterTopicItemConnection = {
    __typename?: 'HelpCenterTopicItemConnection';
    edges?: Maybe<Array<Maybe<HelpCenterTopicItemEdge>>>;
    nodes?: Maybe<Array<Maybe<HelpCenterTopicItem>>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type HelpCenterTopicItemEdge = {
    __typename?: 'HelpCenterTopicItemEdge';
    cursor: Scalars['String'];
    node?: Maybe<HelpCenterTopicItem>;
};
export declare type HelpCenterTopicItemInput = {
    ari: Scalars['ID'];
};
export declare type HelpCenterTopicResult = HelpCenterTopic | QueryError;
export declare enum HelpCenterType {
    Advanced = "ADVANCED",
    Basic = "BASIC"
}
export declare type HelpCenterUpdateInput = {
    id: Scalars['ID'];
    name?: Maybe<HelpCenterNameInput>;
    slug?: Maybe<Scalars['String']>;
};
export declare type HelpCenterUpdatePayload = Payload & {
    __typename?: 'HelpCenterUpdatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type HelpCenterUpdateTopicInput = {
    productName?: Maybe<Scalars['String']>;
    topicId: Scalars['ID'];
    items: Array<HelpCenterTopicItemInput>;
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Scalars['JSON']>;
    helpCenterAri?: Maybe<Scalars['String']>;
};
export declare type HelpCenterUpdateTopicsOrderInput = {
    productName?: Maybe<Scalars['String']>;
    topicIds: Array<Scalars['ID']>;
    helpCenterAri?: Maybe<Scalars['String']>;
};
export declare type HelpCenterUpdateTopicsOrderPayload = Payload & {
    __typename?: 'HelpCenterUpdateTopicsOrderPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type HelpLayout = Node & {
    __typename?: 'HelpLayout';
    id: Scalars['ID'];
    sections?: Maybe<HelpLayoutSectionConnection>;
};
export declare type HelpLayoutSectionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type HelpLayoutAtomicElement = HelpLayoutImageAtomicElement | HelpLayoutHeadingAtomicElement | HelpLayoutParagraphAtomicElement | HelpLayoutSearchAtomicElement;
export declare type HelpLayoutAtomicElementInput = {
    elementTypeKey: HelpLayoutAtomicElementKey;
    imageConfigInput?: Maybe<HelpLayoutImageConfigInput>;
    headingConfigInput?: Maybe<HelpLayoutHeadingConfigInput>;
    searchConfigInput?: Maybe<HelpLayoutSearchConfigInput>;
    paragraphConfigInput?: Maybe<HelpLayoutParagraphConfigInput>;
};
export declare enum HelpLayoutAtomicElementKey {
    Image = "IMAGE",
    Heading = "HEADING",
    Paragraph = "PARAGRAPH",
    Search = "SEARCH"
}
export declare type HelpLayoutAtomicElementType = HelpLayoutElementType & {
    __typename?: 'HelpLayoutAtomicElementType';
    key?: Maybe<HelpLayoutAtomicElementKey>;
    displayName?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
    category?: Maybe<HelpLayoutElementCategory>;
    mediaConfig?: Maybe<HelpLayoutMediaConfig>;
};
export declare type HelpLayoutAtomicElementTypeMediaConfigArgs = {
    parentAri: Scalars['ID'];
};
export declare type HelpLayoutCompositeElement = {
    id: Scalars['ID'];
    visualConfig?: Maybe<Scalars['String']>;
    children?: Maybe<Array<Maybe<HelpLayoutAtomicElement>>>;
    type?: Maybe<HelpLayoutCompositeElementType>;
};
export declare enum HelpLayoutCompositeElementKey {
    LinkCard = "LINK_CARD"
}
export declare type HelpLayoutCompositeElementType = HelpLayoutElementType & {
    __typename?: 'HelpLayoutCompositeElementType';
    key?: Maybe<HelpLayoutCompositeElementKey>;
    displayName?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
    category?: Maybe<HelpLayoutElementCategory>;
    allowedElements?: Maybe<Array<Maybe<HelpLayoutAtomicElementKey>>>;
};
export declare type HelpLayoutCreatePayload = Payload & {
    __typename?: 'HelpLayoutCreatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    layoutId?: Maybe<Scalars['ID']>;
};
export declare type HelpLayoutCreationInput = {
    parentAri: Scalars['ID'];
    sections: Array<HelpLayoutSectionInput>;
};
export declare type HelpLayoutElement = HelpLayoutImageAtomicElement | HelpLayoutHeadingAtomicElement | HelpLayoutParagraphAtomicElement | HelpLayoutSearchAtomicElement | HelpLayoutLinkCardCompositeElement;
export declare enum HelpLayoutElementCategory {
    Basic = "BASIC",
    Navigation = "NAVIGATION"
}
export declare type HelpLayoutElementInput = {
    elementTypeKey: HelpLayoutElementKey;
    imageConfigInput?: Maybe<HelpLayoutImageConfigInput>;
    headingConfigInput?: Maybe<HelpLayoutHeadingConfigInput>;
    paragraphConfigInput?: Maybe<HelpLayoutParagraphConfigInput>;
    searchConfigInput?: Maybe<HelpLayoutSearchConfigInput>;
    linkCardInput?: Maybe<HelpLayoutLinkCardInput>;
};
export declare enum HelpLayoutElementKey {
    Image = "IMAGE",
    Heading = "HEADING",
    Paragraph = "PARAGRAPH",
    Search = "SEARCH",
    LinkCard = "LINK_CARD"
}
export declare type HelpLayoutElementType = {
    displayName?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
    category?: Maybe<HelpLayoutElementCategory>;
};
export declare type HelpLayoutHeadingAtomicElement = HelpLayoutVisualEntity & Node & {
    __typename?: 'HelpLayoutHeadingAtomicElement';
    id: Scalars['ID'];
    visualConfig?: Maybe<Scalars['String']>;
    config?: Maybe<HelpLayoutHeadingAtomicElementConfig>;
    elementType?: Maybe<HelpLayoutAtomicElementType>;
};
export declare type HelpLayoutHeadingAtomicElementConfig = {
    __typename?: 'HelpLayoutHeadingAtomicElementConfig';
    text?: Maybe<Scalars['String']>;
    headingType?: Maybe<HelpLayoutHeadingType>;
};
export declare type HelpLayoutHeadingConfigInput = {
    text: Scalars['String'];
    headingType: HelpLayoutHeadingType;
    visualConfig: Scalars['String'];
};
export declare enum HelpLayoutHeadingType {
    H1 = "h1",
    H2 = "h2",
    H3 = "h3",
    H4 = "h4",
    H5 = "h5",
    H6 = "h6"
}
export declare type HelpLayoutImageAtomicElement = HelpLayoutVisualEntity & Node & {
    __typename?: 'HelpLayoutImageAtomicElement';
    id: Scalars['ID'];
    visualConfig?: Maybe<Scalars['String']>;
    config?: Maybe<HelpLayoutImageAtomicElementConfig>;
    data?: Maybe<HelpLayoutImageAtomicElementData>;
    elementType?: Maybe<HelpLayoutAtomicElementType>;
};
export declare type HelpLayoutImageAtomicElementConfig = {
    __typename?: 'HelpLayoutImageAtomicElementConfig';
    altText?: Maybe<Scalars['String']>;
};
export declare type HelpLayoutImageAtomicElementData = {
    __typename?: 'HelpLayoutImageAtomicElementData';
    imageUrl?: Maybe<Scalars['String']>;
};
export declare type HelpLayoutImageConfigInput = {
    fileId: Scalars['String'];
    altText: Scalars['String'];
    visualConfig: Scalars['String'];
};
export declare type HelpLayoutLinkCardCompositeElement = HelpLayoutVisualEntity & HelpLayoutCompositeElement & Node & {
    __typename?: 'HelpLayoutLinkCardCompositeElement';
    id: Scalars['ID'];
    visualConfig?: Maybe<Scalars['String']>;
    config?: Maybe<Scalars['String']>;
    children?: Maybe<Array<Maybe<HelpLayoutAtomicElement>>>;
    type?: Maybe<HelpLayoutCompositeElementType>;
};
export declare type HelpLayoutLinkCardInput = {
    children: Array<HelpLayoutAtomicElementInput>;
    type: HelpLayoutCompositeElementKey;
    visualConfig: Scalars['String'];
    config: Scalars['String'];
};
export declare type HelpLayoutMediaConfig = {
    __typename?: 'HelpLayoutMediaConfig';
    mediaUrl?: Maybe<Scalars['String']>;
    mediaToken?: Maybe<Scalars['String']>;
    mediaCollectionName?: Maybe<Scalars['String']>;
    asapIssuer?: Maybe<Scalars['String']>;
};
export declare type HelpLayoutMutationApi = {
    __typename?: 'HelpLayoutMutationApi';
    createLayout: HelpLayoutCreatePayload;
    deleteLayout?: Maybe<Payload>;
    updateLayout?: Maybe<HelpLayoutUpdatePayload>;
};
export declare type HelpLayoutMutationApiCreateLayoutArgs = {
    input: HelpLayoutCreationInput;
};
export declare type HelpLayoutMutationApiDeleteLayoutArgs = {
    layoutId: Scalars['ID'];
};
export declare type HelpLayoutMutationApiUpdateLayoutArgs = {
    input: HelpLayoutUpdateInput;
};
export declare type HelpLayoutParagraphAtomicElement = HelpLayoutVisualEntity & Node & {
    __typename?: 'HelpLayoutParagraphAtomicElement';
    id: Scalars['ID'];
    visualConfig?: Maybe<Scalars['String']>;
    config?: Maybe<HelpLayoutParagraphAtomicElementConfig>;
    elementType?: Maybe<HelpLayoutAtomicElementType>;
};
export declare type HelpLayoutParagraphAtomicElementConfig = {
    __typename?: 'HelpLayoutParagraphAtomicElementConfig';
    adf?: Maybe<Scalars['String']>;
};
export declare type HelpLayoutParagraphConfigInput = {
    adf: Scalars['String'];
    visualConfig: Scalars['String'];
};
export declare type HelpLayoutQueryApi = {
    __typename?: 'HelpLayoutQueryApi';
    layout?: Maybe<HelpLayoutResult>;
    elementTypes?: Maybe<Array<HelpLayoutElementType>>;
};
export declare type HelpLayoutQueryApiLayoutArgs = {
    id: Scalars['ID'];
};
export declare type HelpLayoutResult = HelpLayout | QueryError;
export declare type HelpLayoutSearchAtomicElement = HelpLayoutVisualEntity & Node & {
    __typename?: 'HelpLayoutSearchAtomicElement';
    id: Scalars['ID'];
    visualConfig?: Maybe<Scalars['String']>;
    config?: Maybe<HelpLayoutSearchAtomicElementConfig>;
    elementType?: Maybe<HelpLayoutAtomicElementType>;
};
export declare type HelpLayoutSearchAtomicElementConfig = {
    __typename?: 'HelpLayoutSearchAtomicElementConfig';
    placeHolderText?: Maybe<Scalars['String']>;
};
export declare type HelpLayoutSearchConfigInput = {
    placeHolderText: Scalars['String'];
    visualConfig: Scalars['String'];
};
export declare type HelpLayoutSection = Node & {
    __typename?: 'HelpLayoutSection';
    id: Scalars['ID'];
    subsections?: Maybe<Array<Maybe<HelpLayoutSubsection>>>;
};
export declare type HelpLayoutSectionConnection = {
    __typename?: 'HelpLayoutSectionConnection';
    edges?: Maybe<Array<Maybe<HelpLayoutSectionEdge>>>;
    pageInfo: PageInfo;
};
export declare type HelpLayoutSectionEdge = {
    __typename?: 'HelpLayoutSectionEdge';
    cursor: Scalars['String'];
    node?: Maybe<HelpLayoutSection>;
};
export declare type HelpLayoutSectionInput = {
    subsections: Array<HelpLayoutSubsectionInput>;
};
export declare type HelpLayoutSubsection = Node & {
    __typename?: 'HelpLayoutSubsection';
    id: Scalars['ID'];
    config?: Maybe<HelpLayoutSubsectionConfig>;
    elements?: Maybe<Array<Maybe<HelpLayoutElement>>>;
};
export declare type HelpLayoutSubsectionConfig = {
    __typename?: 'HelpLayoutSubsectionConfig';
    span?: Maybe<Scalars['Int']>;
};
export declare type HelpLayoutSubsectionConfigInput = {
    span: Scalars['Int'];
};
export declare type HelpLayoutSubsectionInput = {
    config: HelpLayoutSubsectionConfigInput;
    elements: Array<HelpLayoutElementInput>;
};
export declare type HelpLayoutUpdateInput = {
    layoutId: Scalars['ID'];
    sections: Array<HelpLayoutSectionInput>;
};
export declare type HelpLayoutUpdatePayload = Payload & {
    __typename?: 'HelpLayoutUpdatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    layoutId?: Maybe<Scalars['ID']>;
};
export declare type HelpLayoutVisualEntity = {
    visualConfig?: Maybe<Scalars['String']>;
};
export declare type HelpObjectStoreArticle = HelpObjectStoreHelpObject & Node & {
    __typename?: 'HelpObjectStoreArticle';
    id: Scalars['ID'];
    ari: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    icon?: Maybe<HelpObjectStoreIcon>;
    displayLink?: Maybe<Scalars['String']>;
    entityId?: Maybe<Scalars['String']>;
    entityKey?: Maybe<Scalars['String']>;
    containerId?: Maybe<Scalars['String']>;
    containerKey?: Maybe<Scalars['String']>;
};
export declare type HelpObjectStoreArticleResult = HelpObjectStoreArticle | HelpObjectStoreQueryError;
export declare type HelpObjectStoreBulkCreateEntityMappingInput = {
    helpObjectStoreCreateEntityMappingInputItems: Array<HelpObjectStoreCreateEntityMappingInput>;
};
export declare type HelpObjectStoreChannel = HelpObjectStoreHelpObject & Node & {
    __typename?: 'HelpObjectStoreChannel';
    id: Scalars['ID'];
    ari: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    icon?: Maybe<HelpObjectStoreIcon>;
    displayLink?: Maybe<Scalars['String']>;
    entityId?: Maybe<Scalars['String']>;
    entityKey?: Maybe<Scalars['String']>;
    containerId?: Maybe<Scalars['String']>;
    containerKey?: Maybe<Scalars['String']>;
};
export declare type HelpObjectStoreChannelResult = HelpObjectStoreChannel | HelpObjectStoreQueryError;
export declare type HelpObjectStoreCreateEntityMappingInput = {
    entityId: Scalars['String'];
    entityKey?: Maybe<Scalars['String']>;
    containerId?: Maybe<Scalars['String']>;
    containerKey?: Maybe<Scalars['String']>;
    type: HelpObjectStoreJsmEntityType;
};
export declare type HelpObjectStoreCreateEntityMappingPayload = Payload & {
    __typename?: 'HelpObjectStoreCreateEntityMappingPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    entityMappingDetails?: Maybe<Array<HelpObjectStoreSuccessfullyCreatedEntityMappingDetail>>;
};
export declare type HelpObjectStoreHelpObject = {
    id: Scalars['ID'];
    ari: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    icon?: Maybe<HelpObjectStoreIcon>;
    displayLink?: Maybe<Scalars['String']>;
};
export declare enum HelpObjectStoreHelpObjectType {
    RequestForm = "REQUEST_FORM",
    Article = "ARTICLE",
    Channel = "CHANNEL"
}
export declare type HelpObjectStoreIcon = {
    __typename?: 'HelpObjectStoreIcon';
    iconUrl: Scalars['URL'];
};
export declare enum HelpObjectStoreJsmEntityType {
    RequestForm = "REQUEST_FORM",
    Article = "ARTICLE",
    Channel = "CHANNEL"
}
export declare type HelpObjectStoreMutationApi = {
    __typename?: 'HelpObjectStoreMutationApi';
    createEntityMapping?: Maybe<HelpObjectStoreCreateEntityMappingPayload>;
};
export declare type HelpObjectStoreMutationApiCreateEntityMappingArgs = {
    input: HelpObjectStoreBulkCreateEntityMappingInput;
};
export declare type HelpObjectStoreQueryApi = {
    __typename?: 'HelpObjectStoreQueryApi';
    requestForms?: Maybe<Array<Maybe<HelpObjectStoreRequestFormResult>>>;
    articles?: Maybe<Array<Maybe<HelpObjectStoreArticleResult>>>;
    channels?: Maybe<Array<Maybe<HelpObjectStoreChannelResult>>>;
};
export declare type HelpObjectStoreQueryApiRequestFormsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type HelpObjectStoreQueryApiArticlesArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type HelpObjectStoreQueryApiChannelsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type HelpObjectStoreQueryError = {
    __typename?: 'HelpObjectStoreQueryError';
    ari: Scalars['ID'];
    message?: Maybe<Scalars['String']>;
    extensions?: Maybe<Array<QueryErrorExtension>>;
};
export declare type HelpObjectStoreRequestForm = HelpObjectStoreHelpObject & Node & {
    __typename?: 'HelpObjectStoreRequestForm';
    id: Scalars['ID'];
    ari: Scalars['ID'];
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    icon?: Maybe<HelpObjectStoreIcon>;
    displayLink?: Maybe<Scalars['String']>;
    entityId?: Maybe<Scalars['String']>;
    entityKey?: Maybe<Scalars['String']>;
    containerId?: Maybe<Scalars['String']>;
    containerKey?: Maybe<Scalars['String']>;
};
export declare type HelpObjectStoreRequestFormResult = HelpObjectStoreRequestForm | HelpObjectStoreQueryError;
export declare type HelpObjectStoreSuccessfullyCreatedEntityMappingDetail = {
    __typename?: 'HelpObjectStoreSuccessfullyCreatedEntityMappingDetail';
    ari: Scalars['ID'];
    entityId: Scalars['String'];
    entityKey?: Maybe<Scalars['String']>;
    containerId?: Maybe<Scalars['String']>;
    containerKey?: Maybe<Scalars['String']>;
};
export declare type HostedResourcePreSignedUrl = {
    __typename?: 'HostedResourcePreSignedUrl';
    uploadUrl: Scalars['String'];
    uploadFormData: Scalars['JSON'];
};
export declare type HostedStorage = {
    __typename?: 'HostedStorage';
    classifications?: Maybe<Array<Classification>>;
    locations?: Maybe<Array<Scalars['String']>>;
};
export declare type Icon = {
    __typename?: 'Icon';
    url?: Maybe<Scalars['String']>;
};
export declare type InCompleteCardsDestination = {
    __typename?: 'InCompleteCardsDestination';
    sprintId?: Maybe<Scalars['ID']>;
    sprintName?: Maybe<Scalars['String']>;
    destination?: Maybe<SoftwareCardsDestinationEnum>;
};
export declare type InlineCardCreateConfig = {
    __typename?: 'InlineCardCreateConfig';
    enabled: Scalars['Boolean'];
    useGlobalCreate?: Maybe<Scalars['Boolean']>;
};
export declare type InlineColumnEditConfig = {
    __typename?: 'InlineColumnEditConfig';
    enabled: Scalars['Boolean'];
};
export declare type InstallationContextWithLogAccess = {
    __typename?: 'InstallationContextWithLogAccess';
    installationContext: Scalars['ID'];
    tenantContext?: Maybe<TenantContext>;
};
export declare type InstallationSummary = {
    __typename?: 'InstallationSummary';
    licenseId?: Maybe<Scalars['String']>;
    app: InstallationSummaryApp;
};
export declare type InstallationSummaryApp = {
    __typename?: 'InstallationSummaryApp';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    environment: InstallationSummaryAppEnvironment;
    definitionId?: Maybe<Scalars['ID']>;
    installationId?: Maybe<Scalars['ID']>;
    isSystemApp?: Maybe<Scalars['Boolean']>;
};
export declare type InstallationSummaryAppEnvironment = {
    __typename?: 'InstallationSummaryAppEnvironment';
    id?: Maybe<Scalars['ID']>;
    key?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    version: InstallationSummaryAppEnvironmentVersion;
};
export declare type InstallationSummaryAppEnvironmentVersion = {
    __typename?: 'InstallationSummaryAppEnvironmentVersion';
    id?: Maybe<Scalars['ID']>;
    version?: Maybe<Scalars['String']>;
};
export declare type InstallationsListFilterByAppEnvironments = {
    types: Array<AppEnvironmentType>;
};
export declare type InstallationsListFilterByAppInstallations = {
    ids?: Maybe<Array<Scalars['ID']>>;
    contexts?: Maybe<Array<Scalars['ID']>>;
};
export declare type InstallationsListFilterByAppInstallationsWithCompulsoryContexts = {
    contexts: Array<Scalars['ID']>;
    ids?: Maybe<Array<Scalars['ID']>>;
};
export declare type InstallationsListFilterByApps = {
    ids: Array<Scalars['ID']>;
};
export declare type IntervalFilter = {
    start: Scalars['String'];
    end: Scalars['String'];
};
export declare type InvocationMetrics = {
    __typename?: 'InvocationMetrics';
    appTimeMs?: Maybe<Scalars['Float']>;
};
export declare type InvocationResponsePayload = {
    __typename?: 'InvocationResponsePayload';
    body: Scalars['JSON'];
};
export declare type InvokeAuxEffectsInput = {
    contextIds: Array<Scalars['ID']>;
    extensionDetails?: Maybe<ExtensionDetailsInput>;
    extensionId?: Maybe<Scalars['ID']>;
    entryPoint?: Maybe<Scalars['String']>;
    payload: AuxEffectsInvocationPayload;
};
export declare type InvokeAuxEffectsResponse = Payload & {
    __typename?: 'InvokeAuxEffectsResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    result?: Maybe<AuxEffectsResult>;
};
export declare type InvokeExtensionInput = {
    contextIds: Array<Scalars['ID']>;
    extensionDetails?: Maybe<ExtensionDetailsInput>;
    extensionId?: Maybe<Scalars['ID']>;
    payload: Scalars['JSON'];
    entryPoint?: Maybe<Scalars['String']>;
    schema?: Maybe<Scalars['String']>;
};
export declare type InvokeExtensionPayloadErrorExtension = MutationErrorExtension & {
    __typename?: 'InvokeExtensionPayloadErrorExtension';
    errorType?: Maybe<Scalars['String']>;
    statusCode?: Maybe<Scalars['Int']>;
    fields?: Maybe<InvokeExtensionPayloadErrorExtensionFields>;
};
export declare type InvokeExtensionPayloadErrorExtensionFields = {
    __typename?: 'InvokeExtensionPayloadErrorExtensionFields';
    authInfoUrl?: Maybe<Scalars['String']>;
};
export declare type InvokeExtensionResponse = Payload & {
    __typename?: 'InvokeExtensionResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    response?: Maybe<InvocationResponsePayload>;
    externalAuth?: Maybe<Array<Maybe<ExternalAuthProvider>>>;
    contextToken?: Maybe<ForgeContextToken>;
    metrics?: Maybe<InvocationMetrics>;
};
export declare type InvokePolarisObjectInput = {
    project: Scalars['ID'];
    issue: Scalars['ID'];
    oauthClientId: Scalars['String'];
    data: Scalars['JSON'];
    action: Scalars['JSON'];
    resourceUrl: Scalars['String'];
    authToken?: Maybe<Scalars['String']>;
};
export declare type InvokePolarisObjectPayload = Payload & {
    __typename?: 'InvokePolarisObjectPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    response?: Maybe<ResolvedPolarisObject>;
};
export declare type IssueDevOpsBranchDetails = {
    __typename?: 'IssueDevOpsBranchDetails';
    name: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    createReviewUrl?: Maybe<Scalars['String']>;
    createPullRequestUrl?: Maybe<Scalars['String']>;
    lastCommit?: Maybe<IssueDevOpsHeadCommit>;
    pullRequests?: Maybe<Array<IssueDevOpsBranchPullRequestStatesSummary>>;
    reviews?: Maybe<Array<IssueDevOpsReview>>;
};
export declare type IssueDevOpsBranchPullRequestStatesSummary = {
    __typename?: 'IssueDevOpsBranchPullRequestStatesSummary';
    name: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    status?: Maybe<IssueDevOpsPullRequestStatus>;
    lastUpdate?: Maybe<Scalars['DateTime']>;
};
export declare type IssueDevOpsBuildDetail = {
    __typename?: 'IssueDevOpsBuildDetail';
    id: Scalars['String'];
    buildNumber?: Maybe<Scalars['Int']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    state?: Maybe<Scalars['String']>;
    testSummary?: Maybe<IssueDevOpsTestSummary>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    references?: Maybe<Array<IssueDevOpsBuildReference>>;
};
export declare type IssueDevOpsBuildProvider = {
    __typename?: 'IssueDevOpsBuildProvider';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    avatarUrl?: Maybe<Scalars['String']>;
    builds?: Maybe<Array<IssueDevOpsBuildDetail>>;
};
export declare type IssueDevOpsBuildReference = {
    __typename?: 'IssueDevOpsBuildReference';
    name: Scalars['String'];
    uri?: Maybe<Scalars['String']>;
};
export declare enum IssueDevOpsCommitChangeType {
    Added = "ADDED",
    Deleted = "DELETED",
    Copied = "COPIED",
    Moved = "MOVED",
    Modify = "MODIFY",
    Modified = "MODIFIED",
    Unknown = "UNKNOWN"
}
export declare type IssueDevOpsCommitDetails = {
    __typename?: 'IssueDevOpsCommitDetails';
    id: Scalars['String'];
    isMerge?: Maybe<Scalars['Boolean']>;
    timestamp?: Maybe<Scalars['DateTime']>;
    url?: Maybe<Scalars['String']>;
    createReviewUrl?: Maybe<Scalars['String']>;
    displayId?: Maybe<Scalars['String']>;
    message?: Maybe<Scalars['String']>;
    author?: Maybe<IssueDevOpsPullRequestAuthor>;
    files?: Maybe<Array<IssueDevOpsCommitFile>>;
    reviews?: Maybe<Array<IssueDevOpsReview>>;
};
export declare type IssueDevOpsCommitFile = {
    __typename?: 'IssueDevOpsCommitFile';
    linesAdded?: Maybe<Scalars['Int']>;
    linesRemoved?: Maybe<Scalars['Int']>;
    changeType?: Maybe<IssueDevOpsCommitChangeType>;
    url?: Maybe<Scalars['String']>;
    path: Scalars['String'];
};
export declare type IssueDevOpsDeploymentDetails = {
    __typename?: 'IssueDevOpsDeploymentDetails';
    displayName?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    state?: Maybe<IssueDevOpsDeploymentState>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    environment?: Maybe<IssueDevOpsDeploymentEnvironment>;
    pipelineId: Scalars['String'];
    pipelineDisplayName?: Maybe<Scalars['String']>;
    pipelineUrl?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsDeploymentEnvironment = {
    __typename?: 'IssueDevOpsDeploymentEnvironment';
    id: Scalars['String'];
    type?: Maybe<IssueDevOpsDeploymentEnvironmentType>;
    displayName?: Maybe<Scalars['String']>;
};
export declare enum IssueDevOpsDeploymentEnvironmentType {
    Production = "PRODUCTION",
    Staging = "STAGING",
    Testing = "TESTING",
    Development = "DEVELOPMENT",
    Unmapped = "UNMAPPED"
}
export declare type IssueDevOpsDeploymentProviderDetails = {
    __typename?: 'IssueDevOpsDeploymentProviderDetails';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['String']>;
    logoUrl?: Maybe<Scalars['String']>;
    deployments?: Maybe<Array<IssueDevOpsDeploymentDetails>>;
};
export declare enum IssueDevOpsDeploymentState {
    Pending = "PENDING",
    InProgress = "IN_PROGRESS",
    Successful = "SUCCESSFUL",
    Cancelled = "CANCELLED",
    Failed = "FAILED",
    RolledBack = "ROLLED_BACK",
    Unknown = "UNKNOWN"
}
export declare type IssueDevOpsDetails = {
    __typename?: 'IssueDevOpsDetails';
    instanceTypes: Array<IssueDevOpsProviderInstance>;
    featureFlagProviders?: Maybe<Array<IssueDevOpsFeatureFlagProvider>>;
    deploymentProviders?: Maybe<Array<IssueDevOpsDeploymentProviderDetails>>;
    remoteLinksByType?: Maybe<IssueDevOpsRemoteLinksByType>;
    embeddedMarketplace: IssueDevOpsEmbeddedMarketplace;
};
export declare type IssueDevOpsDevelopmentInformation = {
    __typename?: 'IssueDevOpsDevelopmentInformation';
    details?: Maybe<IssueDevOpsDetails>;
};
export declare type IssueDevOpsDevelopmentInformationDetailsArgs = {
    instanceTypes?: Array<Scalars['String']>;
};
export declare type IssueDevOpsEmbeddedMarketplace = {
    __typename?: 'IssueDevOpsEmbeddedMarketplace';
    shouldDisplayForFeatureFlags: Scalars['Boolean'];
    shouldDisplayForBuilds: Scalars['Boolean'];
    shouldDisplayForDeployments: Scalars['Boolean'];
};
export declare type IssueDevOpsFeatureFlag = {
    __typename?: 'IssueDevOpsFeatureFlag';
    providerId?: Maybe<Scalars['String']>;
    id: Scalars['String'];
    key?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    summary?: Maybe<IssueDevOpsFeatureFlagSummary>;
    details?: Maybe<Array<IssueDevOpsFeatureFlagDetails>>;
};
export declare type IssueDevOpsFeatureFlagDetails = {
    __typename?: 'IssueDevOpsFeatureFlagDetails';
    url: Scalars['String'];
    lastUpdated?: Maybe<Scalars['String']>;
    environment?: Maybe<IssueDevOpsFeatureFlagEnvironment>;
    status?: Maybe<IssueDevOpsFeatureFlagStatus>;
};
export declare type IssueDevOpsFeatureFlagEnvironment = {
    __typename?: 'IssueDevOpsFeatureFlagEnvironment';
    name: Scalars['String'];
    type?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsFeatureFlagProvider = {
    __typename?: 'IssueDevOpsFeatureFlagProvider';
    id: Scalars['String'];
    createFlagTemplateUrl?: Maybe<Scalars['String']>;
    linkFlagTemplateUrl?: Maybe<Scalars['String']>;
    featureFlags?: Maybe<Array<IssueDevOpsFeatureFlag>>;
};
export declare type IssueDevOpsFeatureFlagRollout = {
    __typename?: 'IssueDevOpsFeatureFlagRollout';
    percentage?: Maybe<Scalars['Float']>;
    text?: Maybe<Scalars['String']>;
    rules?: Maybe<Scalars['Int']>;
};
export declare type IssueDevOpsFeatureFlagStatus = {
    __typename?: 'IssueDevOpsFeatureFlagStatus';
    enabled: Scalars['Boolean'];
    defaultValue?: Maybe<Scalars['String']>;
    rollout?: Maybe<IssueDevOpsFeatureFlagRollout>;
};
export declare type IssueDevOpsFeatureFlagSummary = {
    __typename?: 'IssueDevOpsFeatureFlagSummary';
    url?: Maybe<Scalars['String']>;
    status: IssueDevOpsFeatureFlagStatus;
    lastUpdated?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsHeadCommit = {
    __typename?: 'IssueDevOpsHeadCommit';
    url?: Maybe<Scalars['String']>;
    displayId: Scalars['String'];
    timestamp?: Maybe<Scalars['DateTime']>;
};
export declare type IssueDevOpsProviderInstance = {
    __typename?: 'IssueDevOpsProviderInstance';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    repository?: Maybe<Array<IssueDevOpsRepositoryDetails>>;
    buildProviders?: Maybe<Array<IssueDevOpsBuildProvider>>;
    typeName?: Maybe<Scalars['String']>;
    isSingleInstance?: Maybe<Scalars['Boolean']>;
    baseUrl?: Maybe<Scalars['String']>;
    devStatusErrorMessage?: Maybe<Scalars['String']>;
    devStatusErrorMessages?: Maybe<Array<Scalars['String']>>;
    danglingPullRequests?: Maybe<Array<IssueDevOpsPullRequestDetails>>;
};
export declare type IssueDevOpsPullRequestAuthor = {
    __typename?: 'IssueDevOpsPullRequestAuthor';
    avatarUrl?: Maybe<Scalars['String']>;
    name: Scalars['String'];
};
export declare type IssueDevOpsPullRequestDetails = {
    __typename?: 'IssueDevOpsPullRequestDetails';
    id: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    branchName?: Maybe<Scalars['String']>;
    branchUrl?: Maybe<Scalars['String']>;
    lastUpdate?: Maybe<Scalars['DateTime']>;
    commentCount?: Maybe<Scalars['Int']>;
    status?: Maybe<IssueDevOpsPullRequestStatus>;
    author?: Maybe<IssueDevOpsPullRequestAuthor>;
    reviewers?: Maybe<Array<IssueDevOpsPullRequestReviewer>>;
};
export declare type IssueDevOpsPullRequestReviewer = {
    __typename?: 'IssueDevOpsPullRequestReviewer';
    avatarUrl?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    isApproved?: Maybe<Scalars['Boolean']>;
};
export declare enum IssueDevOpsPullRequestStatus {
    Open = "OPEN",
    Merged = "MERGED",
    Declined = "DECLINED",
    Unknown = "UNKNOWN"
}
export declare type IssueDevOpsRemoteLink = {
    __typename?: 'IssueDevOpsRemoteLink';
    id: Scalars['String'];
    providerId?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    status?: Maybe<IssueDevOpsRemoteLinkStatus>;
    actionIds?: Maybe<Array<Scalars['String']>>;
    attributeMap?: Maybe<Array<IssueDevOpsRemoteLinkAttributeTuple>>;
};
export declare type IssueDevOpsRemoteLinkAttributeTuple = {
    __typename?: 'IssueDevOpsRemoteLinkAttributeTuple';
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type IssueDevOpsRemoteLinkLabel = {
    __typename?: 'IssueDevOpsRemoteLinkLabel';
    value: Scalars['String'];
};
export declare type IssueDevOpsRemoteLinkProvider = {
    __typename?: 'IssueDevOpsRemoteLinkProvider';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    homeUrl?: Maybe<Scalars['String']>;
    logoUrl?: Maybe<Scalars['String']>;
    documentationUrl?: Maybe<Scalars['String']>;
    actions?: Maybe<Array<IssueDevOpsRemoteLinkProviderAction>>;
};
export declare type IssueDevOpsRemoteLinkProviderAction = {
    __typename?: 'IssueDevOpsRemoteLinkProviderAction';
    id: Scalars['String'];
    label?: Maybe<IssueDevOpsRemoteLinkLabel>;
    templateUrl?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsRemoteLinkStatus = {
    __typename?: 'IssueDevOpsRemoteLinkStatus';
    appearance?: Maybe<Scalars['String']>;
    label?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsRemoteLinkType = {
    __typename?: 'IssueDevOpsRemoteLinkType';
    type: Scalars['String'];
    remoteLinks?: Maybe<Array<IssueDevOpsRemoteLink>>;
};
export declare type IssueDevOpsRemoteLinksByType = {
    __typename?: 'IssueDevOpsRemoteLinksByType';
    providers: Array<IssueDevOpsRemoteLinkProvider>;
    types: Array<IssueDevOpsRemoteLinkType>;
};
export declare type IssueDevOpsRepositoryDetails = {
    __typename?: 'IssueDevOpsRepositoryDetails';
    avatarUrl?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    url?: Maybe<Scalars['String']>;
    parent?: Maybe<IssueDevOpsRepositoryParent>;
    pullRequests?: Maybe<Array<IssueDevOpsPullRequestDetails>>;
    branches?: Maybe<Array<IssueDevOpsBranchDetails>>;
    commits?: Maybe<Array<IssueDevOpsCommitDetails>>;
};
export declare type IssueDevOpsRepositoryParent = {
    __typename?: 'IssueDevOpsRepositoryParent';
    name: Scalars['String'];
    url?: Maybe<Scalars['String']>;
};
export declare type IssueDevOpsReview = {
    __typename?: 'IssueDevOpsReview';
    state?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    id: Scalars['String'];
};
export declare type IssueDevOpsTestSummary = {
    __typename?: 'IssueDevOpsTestSummary';
    totalNumber?: Maybe<Scalars['Int']>;
    numberPassed?: Maybe<Scalars['Int']>;
    numberFailed?: Maybe<Scalars['Int']>;
    numberSkipped?: Maybe<Scalars['Int']>;
};
export declare type JiraAdf = {
    __typename?: 'JiraADF';
    json?: Maybe<Scalars['JSON']>;
    convertedPlainText?: Maybe<JiraAdfToConvertedPlainText>;
};
export declare type JiraAdfConvertedPlainTextArgs = {
    firstNCharacters?: Maybe<Scalars['Int']>;
};
export declare enum JiraActionType {
    CreateProject = "CREATE_PROJECT",
    CreateCompanyManagedProject = "CREATE_COMPANY_MANAGED_PROJECT",
    CreateTeamManagedProject = "CREATE_TEAM_MANAGED_PROJECT"
}
export declare type JiraAddIssuesToFixVersionInput = {
    issueIds: Array<Scalars['ID']>;
    versionId: Scalars['ID'];
};
export declare type JiraAddIssuesToFixVersionPayload = Payload & {
    __typename?: 'JiraAddIssuesToFixVersionPayload';
    version?: Maybe<JiraVersion>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    issuesWithMissingResolvePermission?: Maybe<Array<Scalars['String']>>;
    issuesWithMissingEditPermission?: Maybe<Array<Scalars['String']>>;
};
export declare type JiraAddRelatedWorkToVersionInput = {
    versionId: Scalars['ID'];
    relatedWorkId: Scalars['ID'];
    url?: Maybe<Scalars['URL']>;
    title?: Maybe<Scalars['String']>;
    category: Scalars['String'];
};
export declare type JiraAddRelatedWorkToVersionPayload = Payload & {
    __typename?: 'JiraAddRelatedWorkToVersionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    relatedWorkEdge?: Maybe<JiraVersionRelatedWorkEdge>;
    relatedWorkV2Edge?: Maybe<JiraVersionRelatedWorkV2Edge>;
};
export declare type JiraAdfToConvertedPlainText = {
    __typename?: 'JiraAdfToConvertedPlainText';
    plainText?: Maybe<Scalars['String']>;
    isTruncated?: Maybe<Scalars['Boolean']>;
};
export declare type JiraAffectedService = {
    __typename?: 'JiraAffectedService';
    serviceId: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type JiraAffectedServiceConnection = {
    __typename?: 'JiraAffectedServiceConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraAffectedServiceEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraAffectedServiceEdge = {
    __typename?: 'JiraAffectedServiceEdge';
    node?: Maybe<JiraAffectedService>;
    cursor: Scalars['String'];
};
export declare type JiraAffectedServicesField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraAffectedServicesField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedAffectedServices?: Maybe<Array<Maybe<JiraAffectedService>>>;
    selectedAffectedServicesConnection?: Maybe<JiraAffectedServiceConnection>;
    affectedServices?: Maybe<JiraAffectedServiceConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraAffectedServicesFieldSelectedAffectedServicesConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraAffectedServicesFieldAffectedServicesArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraApplicationProperty = Node & {
    __typename?: 'JiraApplicationProperty';
    id: Scalars['ID'];
    key: Scalars['String'];
    type: Scalars['String'];
    value: Scalars['String'];
    defaultValue: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    example?: Maybe<Scalars['String']>;
    allowedValues?: Maybe<Array<Scalars['String']>>;
    isEditable: Scalars['Boolean'];
};
export declare type JiraAsset = {
    __typename?: 'JiraAsset';
    appKey?: Maybe<Scalars['String']>;
    originId?: Maybe<Scalars['String']>;
    serializedOrigin?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['String']>;
};
export declare type JiraAssetConnection = {
    __typename?: 'JiraAssetConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraAssetEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraAssetEdge = {
    __typename?: 'JiraAssetEdge';
    node?: Maybe<JiraAsset>;
    cursor: Scalars['String'];
};
export declare type JiraAssetField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraAssetField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedAssets?: Maybe<Array<Maybe<JiraAsset>>>;
    selectedAssetsConnection?: Maybe<JiraAssetConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    searchUrl?: Maybe<Scalars['String']>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraAssetFieldSelectedAssetsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraAssignRelatedWorkInput = {
    assigneeId?: Maybe<Scalars['ID']>;
    relatedWorkType: JiraVersionRelatedWorkType;
    relatedWorkId?: Maybe<Scalars['ID']>;
    versionId: Scalars['ID'];
};
export declare type JiraAssignRelatedWorkPayload = Payload & {
    __typename?: 'JiraAssignRelatedWorkPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    relatedWork?: Maybe<JiraVersionRelatedWorkV2>;
};
export declare type JiraAtlassianTeam = {
    __typename?: 'JiraAtlassianTeam';
    teamId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    avatar?: Maybe<JiraAvatar>;
};
export declare type JiraAtlassianTeamConnection = {
    __typename?: 'JiraAtlassianTeamConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraAtlassianTeamEdge>>>;
};
export declare type JiraAtlassianTeamEdge = {
    __typename?: 'JiraAtlassianTeamEdge';
    node?: Maybe<JiraAtlassianTeam>;
    cursor: Scalars['String'];
};
export declare type JiraAtlassianTeamField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraAtlassianTeamField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedTeam?: Maybe<JiraAtlassianTeam>;
    teams?: Maybe<JiraAtlassianTeamConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraAtlassianTeamFieldTeamsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraAttachment = {
    attachmentId: Scalars['String'];
    author?: Maybe<User>;
    created: Scalars['DateTime'];
    mediaApiFileId?: Maybe<Scalars['String']>;
    mimeType?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    fileSize?: Maybe<Scalars['Long']>;
    parentName?: Maybe<Scalars['String']>;
    parentId?: Maybe<Scalars['String']>;
    hasRestrictedParent?: Maybe<Scalars['Boolean']>;
};
export declare type JiraAttachmentConnection = {
    __typename?: 'JiraAttachmentConnection';
    indicativeCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraAttachmentEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraAttachmentEdge = {
    __typename?: 'JiraAttachmentEdge';
    node?: Maybe<JiraAttachment>;
    cursor: Scalars['String'];
};
export declare type JiraAttachmentsField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraAttachmentsField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    permissions?: Maybe<Array<Maybe<JiraAttachmentsPermissions>>>;
    attachments?: Maybe<JiraAttachmentConnection>;
    temporaryAttachments?: Maybe<JiraTemporaryAttachmentConnection>;
    maxAllowedTotalAttachmentsSize?: Maybe<Scalars['Long']>;
    mediaContext?: Maybe<JiraMediaContext>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraAttachmentsFieldAttachmentsArgs = {
    startAt?: Maybe<Scalars['Int']>;
    maxResults?: Maybe<Scalars['Int']>;
    orderField?: Maybe<JiraAttachmentsOrderField>;
    orderDirection?: Maybe<JiraOrderDirection>;
};
export declare type JiraAttachmentsFieldTemporaryAttachmentsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraAttachmentsOrderField = {
    id?: Maybe<Scalars['ID']>;
};
export declare enum JiraAttachmentsPermissions {
    CreateAttachments = "CREATE_ATTACHMENTS",
    DeleteOwnAttachments = "DELETE_OWN_ATTACHMENTS"
}
export declare type JiraAvatar = {
    __typename?: 'JiraAvatar';
    xsmall?: Maybe<Scalars['String']>;
    small?: Maybe<Scalars['String']>;
    medium?: Maybe<Scalars['String']>;
    large?: Maybe<Scalars['String']>;
};
export declare type JiraBitbucketDevOpsProvider = JiraDevOpsProvider & {
    __typename?: 'JiraBitbucketDevOpsProvider';
    displayName?: Maybe<Scalars['String']>;
    webUrl?: Maybe<Scalars['URL']>;
    capabilities?: Maybe<Array<Maybe<JiraDevOpsCapability>>>;
};
export declare type JiraBooleanField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraBooleanField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['Boolean']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraBulkEditField = {
    __typename?: 'JiraBulkEditField';
    field?: Maybe<JiraIssueField>;
    bulkEditMultiSelectFieldOptions?: Maybe<JiraBulkEditMultiSelectFieldOptions>;
    unavailableMessage?: Maybe<Scalars['String']>;
};
export declare type JiraBulkEditFieldsConnection = HasTotal & HasPageInfo & {
    __typename?: 'JiraBulkEditFieldsConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraBulkEditFieldsEdge>>>;
};
export declare type JiraBulkEditFieldsEdge = {
    __typename?: 'JiraBulkEditFieldsEdge';
    node?: Maybe<JiraBulkEditField>;
    cursor: Scalars['String'];
};
export declare enum JiraBulkEditMultiSelectFieldOptions {
    Add = "ADD",
    Remove = "REMOVE",
    Replace = "REPLACE",
    RemoveAll = "REMOVE_ALL"
}
export declare type JiraBulkEditResponse = {
    __typename?: 'JiraBulkEditResponse';
    totalIssues?: Maybe<Scalars['Int']>;
    bulkEditFields?: Maybe<JiraBulkEditFieldsConnection>;
    mayDisableNotifications?: Maybe<Scalars['Boolean']>;
};
export declare type JiraBulkEditResponseBulkEditFieldsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbField = Node & JiraIssueField & JiraIssueFieldConfiguration & {
    __typename?: 'JiraCMDBField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    isMulti?: Maybe<Scalars['Boolean']>;
    searchUrl?: Maybe<Scalars['String']>;
    selectedCmdbObjects?: Maybe<Array<Maybe<JiraCmdbObject>>>;
    selectedCmdbObjectsConnection?: Maybe<JiraCmdbObjectConnection>;
    wasInsightRequestSuccessful?: Maybe<Scalars['Boolean']>;
    isInsightAvailable?: Maybe<Scalars['Boolean']>;
    cmdbFieldConfig?: Maybe<JiraCmdbFieldConfig>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    attributesIncludedInAutoCompleteSearch?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type JiraCmdbFieldSelectedCmdbObjectsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCannedResponse = Node & {
    __typename?: 'JiraCannedResponse';
    id: Scalars['ID'];
    projectAri: Scalars['ID'];
    title: Scalars['String'];
    content: Scalars['String'];
    scope: JiraCannedResponseScope;
    lastUpdatedAt?: Maybe<Scalars['Long']>;
    createdBy?: Maybe<Scalars['ID']>;
};
export declare type JiraCannedResponseConnection = {
    __typename?: 'JiraCannedResponseConnection';
    edges?: Maybe<Array<JiraCannedResponseEdge>>;
    nodes?: Maybe<Array<Maybe<JiraCannedResponse>>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraCannedResponseCreateInput = {
    projectAri: Scalars['ID'];
    title: Scalars['String'];
    content: Scalars['String'];
    scope: JiraCannedResponseScope;
};
export declare type JiraCannedResponseCreatePayload = Payload & {
    __typename?: 'JiraCannedResponseCreatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jiraCannedResponse?: Maybe<JiraCannedResponse>;
};
export declare type JiraCannedResponseDeletePayload = Payload & {
    __typename?: 'JiraCannedResponseDeletePayload';
    id: Scalars['ID'];
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraCannedResponseEdge = {
    __typename?: 'JiraCannedResponseEdge';
    cursor: Scalars['String'];
    node?: Maybe<JiraCannedResponse>;
};
export declare type JiraCannedResponseFilter = {
    projectAri: Scalars['ID'];
    query?: Maybe<Scalars['String']>;
    scopes?: Maybe<Array<JiraCannedResponseScope>>;
};
export declare type JiraCannedResponseMutationApi = {
    __typename?: 'JiraCannedResponseMutationApi';
    createCannedResponse?: Maybe<JiraCannedResponseCreatePayload>;
    updateCannedResponse?: Maybe<JiraCannedResponseUpdatePayload>;
    deleteCannedResponse?: Maybe<JiraCannedResponseDeletePayload>;
};
export declare type JiraCannedResponseMutationApiCreateCannedResponseArgs = {
    input: JiraCannedResponseCreateInput;
};
export declare type JiraCannedResponseMutationApiUpdateCannedResponseArgs = {
    input: JiraCannedResponseUpdateInput;
};
export declare type JiraCannedResponseMutationApiDeleteCannedResponseArgs = {
    id: Scalars['ID'];
};
export declare type JiraCannedResponseQueryApi = {
    __typename?: 'JiraCannedResponseQueryApi';
    cannedResponseById?: Maybe<JiraCannedResponseQueryResult>;
    searchCannedResponses?: Maybe<JiraCannedResponseConnection>;
};
export declare type JiraCannedResponseQueryApiCannedResponseByIdArgs = {
    id: Scalars['ID'];
};
export declare type JiraCannedResponseQueryApiSearchCannedResponsesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraCannedResponseFilter>;
    sort?: Maybe<JiraCannedResponseSort>;
};
export declare type JiraCannedResponseQueryResult = JiraCannedResponse | QueryError;
export declare enum JiraCannedResponseScope {
    Project = "PROJECT",
    Personal = "PERSONAL"
}
export declare type JiraCannedResponseSort = {
    name?: Maybe<Scalars['String']>;
    order?: Maybe<JiraCannedResponseSortOrder>;
};
export declare enum JiraCannedResponseSortOrder {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type JiraCannedResponseUpdateInput = {
    id: Scalars['ID'];
    title: Scalars['String'];
    content: Scalars['String'];
    scope: JiraCannedResponseScope;
};
export declare type JiraCannedResponseUpdatePayload = Payload & {
    __typename?: 'JiraCannedResponseUpdatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jiraCannedResponse?: Maybe<JiraCannedResponse>;
};
export declare type JiraCascadingOption = {
    __typename?: 'JiraCascadingOption';
    parentOptionValue?: Maybe<JiraOption>;
    parentValue?: Maybe<JiraParentOption>;
    childOptionValue?: Maybe<JiraOption>;
};
export declare type JiraCascadingOptions = {
    __typename?: 'JiraCascadingOptions';
    parentOptionValue?: Maybe<JiraOption>;
    childOptionValues?: Maybe<Array<Maybe<JiraOption>>>;
};
export declare type JiraCascadingOptionsConnection = {
    __typename?: 'JiraCascadingOptionsConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraCascadingOptionsEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraCascadingOptionsEdge = {
    __typename?: 'JiraCascadingOptionsEdge';
    node?: Maybe<JiraCascadingOptions>;
    cursor: Scalars['String'];
};
export declare type JiraCascadingSelectField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraCascadingSelectField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    cascadingOption?: Maybe<JiraCascadingOption>;
    cascadingOptions?: Maybe<JiraCascadingOptionsConnection>;
    parentOptions?: Maybe<JiraParentOptionConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraCascadingSelectFieldCascadingOptionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCascadingSelectFieldParentOptionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    searchBy?: Maybe<Scalars['String']>;
};
export declare type JiraCascadingSelectFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    parentOption?: Maybe<Scalars['ID']>;
    childOption?: Maybe<Scalars['ID']>;
};
export declare type JiraCascadingSelectFieldPayload = Payload & {
    __typename?: 'JiraCascadingSelectFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraCascadingSelectField>;
};
export declare enum JiraCascadingSelectOptionType {
    Parent = "PARENT",
    Child = "CHILD",
    All = "ALL"
}
export declare type JiraCascadingSelectOptionsFilter = {
    optionType: JiraCascadingSelectOptionType;
    parentOptionName?: Maybe<Scalars['String']>;
};
export declare type JiraCheckboxesField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraCheckboxesField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedFieldOptions?: Maybe<Array<Maybe<JiraOption>>>;
    selectedOptions?: Maybe<JiraOptionConnection>;
    fieldOptions?: Maybe<JiraOptionConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraCheckboxesFieldSelectedOptionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCheckboxesFieldFieldOptionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraChildIssues = JiraChildIssuesWithinLimit | JiraChildIssuesExceedingLimit;
export declare type JiraChildIssuesExceedingLimit = {
    __typename?: 'JiraChildIssuesExceedingLimit';
    search?: Maybe<Scalars['String']>;
};
export declare type JiraChildIssuesWithinLimit = {
    __typename?: 'JiraChildIssuesWithinLimit';
    issues?: Maybe<JiraIssueConnection>;
};
export declare type JiraChildIssuesWithinLimitIssuesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    activeProjectsOnly?: Maybe<Scalars['Boolean']>;
};
export declare type JiraClassicConnectDevOpsProvider = JiraDevOpsProvider & {
    __typename?: 'JiraClassicConnectDevOpsProvider';
    displayName?: Maybe<Scalars['String']>;
    webUrl?: Maybe<Scalars['URL']>;
    capabilities?: Maybe<Array<Maybe<JiraDevOpsCapability>>>;
    iconUrl?: Maybe<Scalars['URL']>;
    connectAppId?: Maybe<Scalars['ID']>;
    marketplaceApp?: Maybe<MarketplaceApp>;
};
export declare type JiraCmdbAttribute = {
    __typename?: 'JiraCmdbAttribute';
    attributeId?: Maybe<Scalars['String']>;
    objectTypeAttributeId?: Maybe<Scalars['String']>;
    objectTypeAttribute?: Maybe<JiraCmdbObjectTypeAttribute>;
    objectAttributeValues?: Maybe<JiraCmdbObjectAttributeValueConnection>;
};
export declare type JiraCmdbAttributeObjectAttributeValuesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbAttributeConnection = {
    __typename?: 'JiraCmdbAttributeConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraCmdbAttributeEdge>>>;
};
export declare type JiraCmdbAttributeEdge = {
    __typename?: 'JiraCmdbAttributeEdge';
    node?: Maybe<JiraCmdbAttribute>;
    cursor: Scalars['String'];
};
export declare enum JiraCmdbAttributeType {
    Default = "DEFAULT",
    ReferencedObject = "REFERENCED_OBJECT",
    User = "USER",
    Confluence = "CONFLUENCE",
    Group = "GROUP",
    Version = "VERSION",
    Project = "PROJECT",
    Status = "STATUS",
    BitbucketRepo = "BITBUCKET_REPO",
    OpsgenieTeam = "OPSGENIE_TEAM"
}
export declare type JiraCmdbAvatar = {
    __typename?: 'JiraCmdbAvatar';
    id?: Maybe<Scalars['String']>;
    avatarUUID?: Maybe<Scalars['String']>;
    url16?: Maybe<Scalars['String']>;
    url48?: Maybe<Scalars['String']>;
    url72?: Maybe<Scalars['String']>;
    url144?: Maybe<Scalars['String']>;
    url288?: Maybe<Scalars['String']>;
    mediaClientConfig?: Maybe<JiraCmdbMediaClientConfig>;
};
export declare type JiraCmdbBitbucketRepository = {
    __typename?: 'JiraCmdbBitbucketRepository';
    uuid?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    avatarUrl?: Maybe<Scalars['URL']>;
    bitbucketWorkspaceId?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbConfigAttributeConnection = {
    __typename?: 'JiraCmdbConfigAttributeConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraCmdbConfigAttributeEdge>>>;
};
export declare type JiraCmdbConfigAttributeEdge = {
    __typename?: 'JiraCmdbConfigAttributeEdge';
    node?: Maybe<Scalars['String']>;
    cursor: Scalars['String'];
};
export declare type JiraCmdbDefaultType = {
    __typename?: 'JiraCmdbDefaultType';
    id?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbFieldConfig = {
    __typename?: 'JiraCmdbFieldConfig';
    objectSchemaId: Scalars['String'];
    objectFilterQuery?: Maybe<Scalars['String']>;
    issueScopeFilterQuery?: Maybe<Scalars['String']>;
    multiple?: Maybe<Scalars['Boolean']>;
    attributesDisplayedOnIssue?: Maybe<JiraCmdbConfigAttributeConnection>;
    attributesIncludedInAutoCompleteSearch?: Maybe<JiraCmdbConfigAttributeConnection>;
};
export declare type JiraCmdbFieldConfigAttributesDisplayedOnIssueArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbFieldConfigAttributesIncludedInAutoCompleteSearchArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbIcon = {
    __typename?: 'JiraCmdbIcon';
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    url16?: Maybe<Scalars['String']>;
    url48?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbMediaClientConfig = {
    __typename?: 'JiraCmdbMediaClientConfig';
    clientId?: Maybe<Scalars['String']>;
    issuer?: Maybe<Scalars['String']>;
    fileId?: Maybe<Scalars['String']>;
    mediaBaseUrl?: Maybe<Scalars['URL']>;
    mediaJwtToken?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbObject = {
    __typename?: 'JiraCmdbObject';
    id?: Maybe<Scalars['String']>;
    objectGlobalId?: Maybe<Scalars['String']>;
    objectId?: Maybe<Scalars['String']>;
    workspaceId?: Maybe<Scalars['String']>;
    label?: Maybe<Scalars['String']>;
    objectKey?: Maybe<Scalars['String']>;
    avatar?: Maybe<JiraCmdbAvatar>;
    objectType?: Maybe<JiraCmdbObjectType>;
    attributes?: Maybe<JiraCmdbAttributeConnection>;
    webUrl?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbObjectAttributesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbObjectAttributeValue = {
    __typename?: 'JiraCmdbObjectAttributeValue';
    referencedObject?: Maybe<JiraCmdbObject>;
    user?: Maybe<User>;
    group?: Maybe<JiraGroup>;
    status?: Maybe<JiraCmdbStatusType>;
    project?: Maybe<JiraProject>;
    bitbucketRepo?: Maybe<JiraCmdbBitbucketRepository>;
    opsgenieTeam?: Maybe<JiraOpsgenieTeam>;
    value?: Maybe<Scalars['String']>;
    displayValue?: Maybe<Scalars['String']>;
    searchValue?: Maybe<Scalars['String']>;
    additionalValue?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbObjectAttributeValueConnection = {
    __typename?: 'JiraCmdbObjectAttributeValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraCmdbObjectAttributeValueEdge>>>;
};
export declare type JiraCmdbObjectAttributeValueEdge = {
    __typename?: 'JiraCmdbObjectAttributeValueEdge';
    node?: Maybe<JiraCmdbObjectAttributeValue>;
    cursor: Scalars['String'];
};
export declare type JiraCmdbObjectConnection = {
    __typename?: 'JiraCmdbObjectConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraCmdbObjectEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraCmdbObjectEdge = {
    __typename?: 'JiraCmdbObjectEdge';
    node?: Maybe<JiraCmdbObject>;
    cursor: Scalars['String'];
};
export declare type JiraCmdbObjectType = {
    __typename?: 'JiraCmdbObjectType';
    objectTypeId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    icon?: Maybe<JiraCmdbIcon>;
    objectSchemaId?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbObjectTypeAttribute = {
    __typename?: 'JiraCmdbObjectTypeAttribute';
    name?: Maybe<Scalars['String']>;
    label?: Maybe<Scalars['Boolean']>;
    type?: Maybe<JiraCmdbAttributeType>;
    description?: Maybe<Scalars['String']>;
    objectType?: Maybe<JiraCmdbObjectType>;
    defaultType?: Maybe<JiraCmdbDefaultType>;
    referenceType?: Maybe<JiraCmdbReferenceType>;
    referenceObjectTypeId?: Maybe<Scalars['String']>;
    referenceObjectType?: Maybe<JiraCmdbObjectType>;
    additionalValue?: Maybe<Scalars['String']>;
    suffix?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbReferenceType = {
    __typename?: 'JiraCmdbReferenceType';
    id?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['String']>;
    webUrl?: Maybe<Scalars['String']>;
    objectSchemaId?: Maybe<Scalars['String']>;
};
export declare type JiraCmdbStatusType = {
    __typename?: 'JiraCmdbStatusType';
    id?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['Int']>;
    objectSchemaId?: Maybe<Scalars['String']>;
};
export declare type JiraColor = {
    __typename?: 'JiraColor';
    id?: Maybe<Scalars['ID']>;
    colorKey?: Maybe<Scalars['String']>;
};
export declare type JiraColorField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraColorField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    color?: Maybe<JiraColor>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraColorFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    color: Scalars['String'];
};
export declare type JiraColorFieldPayload = Payload & {
    __typename?: 'JiraColorFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraColorField>;
};
export declare type JiraComment = {
    commentId: Scalars['ID'];
    issue?: Maybe<JiraIssue>;
    webUrl?: Maybe<Scalars['URL']>;
    author?: Maybe<User>;
    updateAuthor?: Maybe<User>;
    richText?: Maybe<JiraRichText>;
    created: Scalars['DateTime'];
    updated?: Maybe<Scalars['DateTime']>;
    permissionLevel?: Maybe<JiraPermissionLevel>;
};
export declare type JiraCommentConnection = {
    __typename?: 'JiraCommentConnection';
    indicativeCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraCommentEdge>>>;
    pageItemCount?: Maybe<Scalars['Int']>;
};
export declare type JiraCommentEdge = {
    __typename?: 'JiraCommentEdge';
    node?: Maybe<JiraComment>;
    cursor: Scalars['String'];
};
export declare type JiraComponent = Node & {
    __typename?: 'JiraComponent';
    id: Scalars['ID'];
    componentId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type JiraComponentConnection = {
    __typename?: 'JiraComponentConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraComponentEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraComponentEdge = {
    __typename?: 'JiraComponentEdge';
    node?: Maybe<JiraComponent>;
    cursor: Scalars['String'];
};
export declare type JiraComponentFieldOperationInput = {
    operation: JiraMultiValueFieldOperations;
    ids: Array<Scalars['ID']>;
};
export declare type JiraComponentsField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraComponentsField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedComponents?: Maybe<Array<Maybe<JiraComponent>>>;
    selectedComponentsConnection?: Maybe<JiraComponentConnection>;
    components?: Maybe<JiraComponentConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraComponentsFieldSelectedComponentsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraComponentsFieldComponentsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraComponentsFieldPayload = Payload & {
    __typename?: 'JiraComponentsFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraComponentsField>;
};
export declare type JiraConnectDateTimeField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraConnectDateTimeField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    dateTime?: Maybe<Scalars['DateTime']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraConnectMultipleSelectField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraConnectMultipleSelectField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedFieldOptions?: Maybe<Array<Maybe<JiraOption>>>;
    selectedOptions?: Maybe<JiraOptionConnection>;
    fieldOptions?: Maybe<JiraOptionConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraConnectMultipleSelectFieldSelectedOptionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraConnectMultipleSelectFieldFieldOptionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraConnectNumberField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraConnectNumberField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    number?: Maybe<Scalars['Float']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraConnectReadOnlyField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraConnectReadOnlyField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    text?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraConnectRichTextField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraConnectRichTextField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    richText?: Maybe<JiraRichText>;
    renderer?: Maybe<Scalars['String']>;
    mediaContext?: Maybe<JiraMediaContext>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraConnectSingleSelectField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraConnectSingleSelectField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    fieldOption?: Maybe<JiraOption>;
    fieldOptions?: Maybe<JiraOptionConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraConnectSingleSelectFieldFieldOptionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraConnectTextField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraConnectTextField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    text?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraCreateApproverListFieldInput = {
    fieldName: Scalars['String'];
    projectId: Scalars['Int'];
};
export declare type JiraCreateApproverListFieldPayload = Payload & {
    __typename?: 'JiraCreateApproverListFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    fieldId?: Maybe<Scalars['String']>;
};
export declare type JiraCreateCustomFilterInput = {
    jql: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    isFavourite: Scalars['Boolean'];
    shareGrants: Array<Maybe<JiraShareableEntityShareGrantInput>>;
    editGrants: Array<Maybe<JiraShareableEntityEditGrantInput>>;
};
export declare type JiraCreateCustomFilterPayload = Payload & {
    __typename?: 'JiraCreateCustomFilterPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    filter?: Maybe<JiraCustomFilter>;
};
export declare type JiraCreateReleaseNoteConfluencePageInput = {
    versionId: Scalars['ID'];
    appLinkId?: Maybe<Scalars['ID']>;
    spaceId: Scalars['ID'];
    parentPageId?: Maybe<Scalars['ID']>;
    issueFieldIds: Array<Scalars['ID']>;
    issueTypeIds: Array<Scalars['ID']>;
    excludeIssueKey?: Maybe<Scalars['Boolean']>;
};
export declare type JiraCreateReleaseNoteConfluencePagePayload = Payload & {
    __typename?: 'JiraCreateReleaseNoteConfluencePagePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    releaseNotePageViewUrl?: Maybe<Scalars['URL']>;
    releaseNotePageEditUrl?: Maybe<Scalars['URL']>;
    addToRelatedWorkSuccess?: Maybe<Scalars['Boolean']>;
    version?: Maybe<JiraVersion>;
    relatedWorkV2Edge?: Maybe<JiraVersionRelatedWorkV2Edge>;
};
export declare type JiraCreateShortcutInput = {
    projectId: Scalars['ID'];
    type: JiraProjectShortcutType;
    shortcutData: JiraShortcutDataInput;
};
export declare type JiraCustomFilter = JiraFilter & Node & {
    __typename?: 'JiraCustomFilter';
    id: Scalars['ID'];
    filterId: Scalars['String'];
    jql: Scalars['String'];
    owner?: Maybe<User>;
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    isFavourite?: Maybe<Scalars['Boolean']>;
    isEditable?: Maybe<Scalars['Boolean']>;
    emailSubscriptions?: Maybe<JiraFilterEmailSubscriptionConnection>;
    shareGrants?: Maybe<JiraShareableEntityShareGrantConnection>;
    editGrants?: Maybe<JiraShareableEntityEditGrantConnection>;
};
export declare type JiraCustomFilterEmailSubscriptionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCustomFilterShareGrantsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraCustomFilterEditGrantsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraDateFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    date?: Maybe<Scalars['Date']>;
};
export declare type JiraDateFieldPayload = Payload & {
    __typename?: 'JiraDateFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraDatePickerField>;
};
export declare type JiraDatePickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraDatePickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['Date']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraDateTimeFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    datetime?: Maybe<Scalars['DateTime']>;
};
export declare type JiraDateTimeFieldPayload = Payload & {
    __typename?: 'JiraDateTimeFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraDateTimePickerField>;
};
export declare type JiraDateTimePickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraDateTimePickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    dateTime?: Maybe<Scalars['DateTime']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraDefaultGrantTypeValue = Node & {
    __typename?: 'JiraDefaultGrantTypeValue';
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type JiraDeleteShortcutInput = {
    projectId: Scalars['ID'];
    shortcutId: Scalars['ID'];
};
export declare type JiraDeploymentApp = {
    __typename?: 'JiraDeploymentApp';
    appKey: Scalars['String'];
};
export declare type JiraDeploymentAppInput = {
    appKey: Scalars['String'];
};
export declare enum JiraDeploymentsFeaturePrecondition {
    NotAvailable = "NOT_AVAILABLE",
    DeploymentsEmptyState = "DEPLOYMENTS_EMPTY_STATE",
    AllSatisfied = "ALL_SATISFIED"
}
export declare type JiraDevInfoConfigError = {
    __typename?: 'JiraDevInfoConfigError';
    errorType?: Maybe<JiraDevInfoConfigErrorType>;
    dataProviderId?: Maybe<Scalars['String']>;
};
export declare enum JiraDevInfoConfigErrorType {
    Unauthorized = "UNAUTHORIZED",
    NotConfigured = "NOT_CONFIGURED",
    Incapable = "INCAPABLE",
    UnknownConfigError = "UNKNOWN_CONFIG_ERROR"
}
export declare type JiraDevOpsBranchDetails = {
    __typename?: 'JiraDevOpsBranchDetails';
    providerBranchId?: Maybe<Scalars['String']>;
    entityUrl?: Maybe<Scalars['URL']>;
    name?: Maybe<Scalars['String']>;
    scmRepository?: Maybe<JiraScmRepository>;
};
export declare enum JiraDevOpsCapability {
    Commit = "COMMIT",
    Branch = "BRANCH",
    PullRequest = "PULL_REQUEST",
    Build = "BUILD",
    Deployment = "DEPLOYMENT",
    FeatureFlag = "FEATURE_FLAG",
    Review = "REVIEW"
}
export declare type JiraDevOpsCommitDetails = {
    __typename?: 'JiraDevOpsCommitDetails';
    providerCommitId?: Maybe<Scalars['String']>;
    displayCommitId?: Maybe<Scalars['String']>;
    entityUrl?: Maybe<Scalars['URL']>;
    name?: Maybe<Scalars['String']>;
    created?: Maybe<Scalars['DateTime']>;
    author?: Maybe<JiraDevOpsEntityAuthor>;
    isMergeCommit?: Maybe<Scalars['Boolean']>;
    scmRepository?: Maybe<JiraScmRepository>;
};
export declare type JiraDevOpsEntityAuthor = {
    __typename?: 'JiraDevOpsEntityAuthor';
    avatar?: Maybe<JiraAvatar>;
    name?: Maybe<Scalars['String']>;
};
export declare type JiraDevOpsIssuePanel = {
    __typename?: 'JiraDevOpsIssuePanel';
    panelState?: Maybe<JiraDevOpsIssuePanelState>;
    devOpsIssuePanelBanner?: Maybe<JiraDevOpsIssuePanelBannerType>;
    devSummaryResult?: Maybe<JiraIssueDevSummaryResult>;
    hasBranchCapabilities?: Maybe<Scalars['Boolean']>;
};
export declare enum JiraDevOpsIssuePanelBannerType {
    IssueKeyOnboarding = "ISSUE_KEY_ONBOARDING"
}
export declare enum JiraDevOpsIssuePanelState {
    Hidden = "HIDDEN",
    NotConnected = "NOT_CONNECTED",
    DevSummary = "DEV_SUMMARY"
}
export declare type JiraDevOpsMutation = {
    __typename?: 'JiraDevOpsMutation';
    optoutOfDevOpsIssuePanelNotConnectedState?: Maybe<JiraOptoutDevOpsIssuePanelNotConnectedPayload>;
    dismissDevOpsIssuePanelBanner?: Maybe<JiraDismissDevOpsIssuePanelBannerPayload>;
    setProjectSelectedDeploymentAppsProperty?: Maybe<JiraSetProjectSelectedDeploymentAppsPropertyPayload>;
};
export declare type JiraDevOpsMutationOptoutOfDevOpsIssuePanelNotConnectedStateArgs = {
    input: JiraOptoutDevOpsIssuePanelNotConnectedInput;
};
export declare type JiraDevOpsMutationDismissDevOpsIssuePanelBannerArgs = {
    input: JiraDismissDevOpsIssuePanelBannerInput;
};
export declare type JiraDevOpsMutationSetProjectSelectedDeploymentAppsPropertyArgs = {
    input: JiraSetProjectSelectedDeploymentAppsPropertyInput;
};
export declare type JiraDevOpsProvider = {
    displayName?: Maybe<Scalars['String']>;
    webUrl?: Maybe<Scalars['URL']>;
    capabilities?: Maybe<Array<Maybe<JiraDevOpsCapability>>>;
};
export declare type JiraDevOpsPullRequestDetails = {
    __typename?: 'JiraDevOpsPullRequestDetails';
    providerPullRequestId?: Maybe<Scalars['String']>;
    entityUrl?: Maybe<Scalars['URL']>;
    name?: Maybe<Scalars['String']>;
    branchName?: Maybe<Scalars['String']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    status?: Maybe<JiraPullRequestState>;
    author?: Maybe<JiraDevOpsEntityAuthor>;
    reviewers?: Maybe<Array<JiraPullRequestReviewer>>;
};
export declare type JiraDevOpsQuery = {
    __typename?: 'JiraDevOpsQuery';
    devOpsIssuePanel?: Maybe<JiraDevOpsIssuePanel>;
};
export declare type JiraDevOpsQueryDevOpsIssuePanelArgs = {
    issueId: Scalars['ID'];
};
export declare type JiraDevSummaryField = Node & JiraIssueField & {
    __typename?: 'JiraDevSummaryField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    devSummaryCache?: Maybe<JiraIssueDevSummaryResult>;
};
export declare type JiraDismissDevOpsIssuePanelBannerInput = {
    issueId: Scalars['ID'];
    bannerType: JiraDevOpsIssuePanelBannerType;
};
export declare type JiraDismissDevOpsIssuePanelBannerPayload = Payload & {
    __typename?: 'JiraDismissDevOpsIssuePanelBannerPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraEpic = {
    __typename?: 'JiraEpic';
    id: Scalars['ID'];
    issueId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    key?: Maybe<Scalars['String']>;
    summary?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['String']>;
    done?: Maybe<Scalars['Boolean']>;
};
export declare type JiraEpicConnection = {
    __typename?: 'JiraEpicConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraEpicEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraEpicEdge = {
    __typename?: 'JiraEpicEdge';
    node?: Maybe<JiraEpic>;
    cursor: Scalars['String'];
};
export declare type JiraEpicLinkField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraEpicLinkField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    epic?: Maybe<JiraEpic>;
    epics?: Maybe<JiraEpicConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraEpicLinkFieldEpicsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    done?: Maybe<Scalars['Boolean']>;
};
export declare type JiraEstimate = {
    __typename?: 'JiraEstimate';
    timeInSeconds?: Maybe<Scalars['Long']>;
};
export declare type JiraEstimateInput = {
    timeInSeconds: Scalars['Long'];
};
export declare type JiraFavourite = JiraProject;
export declare type JiraFavouriteConnection = {
    __typename?: 'JiraFavouriteConnection';
    edges?: Maybe<Array<Maybe<JiraFavouriteEdge>>>;
    pageInfo: PageInfo;
};
export declare type JiraFavouriteEdge = {
    __typename?: 'JiraFavouriteEdge';
    node?: Maybe<JiraFavourite>;
    cursor: Scalars['String'];
};
export declare type JiraFavouriteFilter = {
    type: JiraFavouriteType;
};
export declare enum JiraFavouriteType {
    Project = "PROJECT"
}
export declare type JiraFavouriteValue = Node & {
    __typename?: 'JiraFavouriteValue';
    id: Scalars['ID'];
    isFavourite?: Maybe<Scalars['Boolean']>;
};
export declare type JiraFieldConfig = {
    __typename?: 'JiraFieldConfig';
    isRequired?: Maybe<Scalars['Boolean']>;
    isEditable?: Maybe<Scalars['Boolean']>;
    nonEditableReason?: Maybe<JiraFieldNonEditableReason>;
};
export declare type JiraFieldNonEditableReason = {
    __typename?: 'JiraFieldNonEditableReason';
    message?: Maybe<Scalars['String']>;
};
export declare type JiraFilter = {
    id: Scalars['ID'];
    filterId: Scalars['String'];
    jql: Scalars['String'];
    name: Scalars['String'];
    isFavourite?: Maybe<Scalars['Boolean']>;
};
export declare type JiraFilterConnection = {
    __typename?: 'JiraFilterConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraFilterEdge>>>;
};
export declare type JiraFilterEdge = {
    __typename?: 'JiraFilterEdge';
    node?: Maybe<JiraFilter>;
    cursor: Scalars['String'];
};
export declare type JiraFilterEditGrantMutationErrorExtension = MutationErrorExtension & {
    __typename?: 'JiraFilterEditGrantMutationErrorExtension';
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type JiraFilterEmailSubscription = Node & {
    __typename?: 'JiraFilterEmailSubscription';
    id: Scalars['ID'];
    user?: Maybe<User>;
    group?: Maybe<JiraGroup>;
};
export declare type JiraFilterEmailSubscriptionConnection = {
    __typename?: 'JiraFilterEmailSubscriptionConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraFilterEmailSubscriptionEdge>>>;
};
export declare type JiraFilterEmailSubscriptionEdge = {
    __typename?: 'JiraFilterEmailSubscriptionEdge';
    node?: Maybe<JiraFilterEmailSubscription>;
    cursor: Scalars['String'];
};
export declare type JiraFilterMutation = {
    __typename?: 'JiraFilterMutation';
    createJiraCustomFilter?: Maybe<JiraCreateCustomFilterPayload>;
    updateJiraCustomFilterDetails?: Maybe<JiraUpdateCustomFilterPayload>;
    updateJiraCustomFilterJql?: Maybe<JiraUpdateCustomFilterJqlPayload>;
};
export declare type JiraFilterMutationCreateJiraCustomFilterArgs = {
    cloudId: Scalars['ID'];
    input: JiraCreateCustomFilterInput;
};
export declare type JiraFilterMutationUpdateJiraCustomFilterDetailsArgs = {
    input: JiraUpdateCustomFilterDetailsInput;
};
export declare type JiraFilterMutationUpdateJiraCustomFilterJqlArgs = {
    input: JiraUpdateCustomFilterJqlInput;
};
export declare type JiraFilterNameMutationErrorExtension = MutationErrorExtension & {
    __typename?: 'JiraFilterNameMutationErrorExtension';
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type JiraFilterResult = JiraCustomFilter | JiraSystemFilter | QueryError;
export declare type JiraFilterShareGrantMutationErrorExtension = MutationErrorExtension & {
    __typename?: 'JiraFilterShareGrantMutationErrorExtension';
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type JiraFlag = {
    __typename?: 'JiraFlag';
    isFlagged?: Maybe<Scalars['Boolean']>;
};
export declare type JiraFlagField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraFlagField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    flag?: Maybe<JiraFlag>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraForgeDatetimeField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeDatetimeField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    dateTime?: Maybe<Scalars['DateTime']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeGroupField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeGroupField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedGroup?: Maybe<JiraGroup>;
    groups?: Maybe<JiraGroupConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeGroupFieldGroupsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraForgeGroupsField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeGroupsField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedGroups?: Maybe<Array<Maybe<JiraGroup>>>;
    selectedGroupsConnection?: Maybe<JiraGroupConnection>;
    groups?: Maybe<JiraGroupConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeGroupsFieldSelectedGroupsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraForgeGroupsFieldGroupsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraForgeNumberField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeNumberField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    number?: Maybe<Scalars['Float']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeObjectField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeObjectField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    object?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeStringField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeStringField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    text?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeStringsField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeStringsField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedLabels?: Maybe<Array<Maybe<JiraLabel>>>;
    selectedLabelsConnection?: Maybe<JiraLabelConnection>;
    labels?: Maybe<JiraLabelConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeStringsFieldSelectedLabelsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraForgeStringsFieldLabelsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraForgeUserField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeUserField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    user?: Maybe<User>;
    users?: Maybe<JiraUserConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeUserFieldUsersArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraForgeUsersField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraForgeUsersField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedUsers?: Maybe<Array<Maybe<User>>>;
    selectedUsersConnection?: Maybe<JiraUserConnection>;
    users?: Maybe<JiraUserConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    renderer?: Maybe<Scalars['String']>;
};
export declare type JiraForgeUsersFieldSelectedUsersConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraForgeUsersFieldUsersArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraGlobalPermission = {
    __typename?: 'JiraGlobalPermission';
    key?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type JiraGlobalPermissionAddGroupGrantInput = {
    key: Scalars['String'];
    groupAri: Scalars['ID'];
};
export declare type JiraGlobalPermissionAddGroupGrantPayload = Payload & {
    __typename?: 'JiraGlobalPermissionAddGroupGrantPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraGlobalPermissionDeleteGroupGrantInput = {
    key: Scalars['String'];
    groupAri: Scalars['ID'];
};
export declare type JiraGlobalPermissionDeleteGroupGrantPayload = Payload & {
    __typename?: 'JiraGlobalPermissionDeleteGroupGrantPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraGlobalPermissionGrants = {
    __typename?: 'JiraGlobalPermissionGrants';
    permission?: Maybe<JiraGlobalPermission>;
    groups?: Maybe<Array<Maybe<JiraGroup>>>;
    isManagedByJira?: Maybe<Scalars['Boolean']>;
};
export declare type JiraGlobalPermissionGrantsList = {
    __typename?: 'JiraGlobalPermissionGrantsList';
    globalPermissionGrants?: Maybe<Array<Maybe<JiraGlobalPermissionGrants>>>;
};
export declare type JiraGlobalPermissionGrantsResult = JiraGlobalPermissionGrantsList | QueryError;
export declare type JiraGlobalTimeTrackingSettings = {
    __typename?: 'JiraGlobalTimeTrackingSettings';
    isTimeTrackingEnabled: Scalars['Boolean'];
    daysPerWeek: Scalars['Float'];
    hoursPerDay: Scalars['Float'];
    defaultUnit: JiraTimeUnit;
    format: JiraTimeFormat;
};
export declare type JiraGrantTypeKey = {
    __typename?: 'JiraGrantTypeKey';
    key: JiraGrantTypeKeyEnum;
    name: Scalars['String'];
};
export declare enum JiraGrantTypeKeyEnum {
    ProjectRole = "PROJECT_ROLE",
    ApplicationRole = "APPLICATION_ROLE",
    User = "USER",
    Group = "GROUP",
    MultiUserPicker = "MULTI_USER_PICKER",
    MultiGroupPicker = "MULTI_GROUP_PICKER",
    ServiceProjectCustomerPortalAccess = "SERVICE_PROJECT_CUSTOMER_PORTAL_ACCESS",
    Reporter = "REPORTER",
    ProjectLead = "PROJECT_LEAD",
    Assignee = "ASSIGNEE",
    AnonymousAccess = "ANONYMOUS_ACCESS",
    AnyLoggedinUserApplicationRole = "ANY_LOGGEDIN_USER_APPLICATION_ROLE"
}
export declare type JiraGrantTypeValue = JiraDefaultGrantTypeValue | JiraUserGrantTypeValue | JiraProjectRoleGrantTypeValue | JiraGroupGrantTypeValue | JiraIssueFieldGrantTypeValue;
export declare type JiraGrantTypeValueConnection = {
    __typename?: 'JiraGrantTypeValueConnection';
    edges?: Maybe<Array<Maybe<JiraGrantTypeValueEdge>>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraGrantTypeValueEdge = {
    __typename?: 'JiraGrantTypeValueEdge';
    node: JiraGrantTypeValue;
    cursor: Scalars['String'];
};
export declare type JiraGroup = Node & {
    __typename?: 'JiraGroup';
    id: Scalars['ID'];
    groupId: Scalars['String'];
    name: Scalars['String'];
};
export declare type JiraGroupConnection = {
    __typename?: 'JiraGroupConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraGroupEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraGroupEdge = {
    __typename?: 'JiraGroupEdge';
    node?: Maybe<JiraGroup>;
    cursor: Scalars['String'];
};
export declare type JiraGroupGrantTypeValue = Node & {
    __typename?: 'JiraGroupGrantTypeValue';
    id: Scalars['ID'];
    group: JiraGroup;
};
export declare type JiraHierarchyConfigError = {
    __typename?: 'JiraHierarchyConfigError';
    code?: Maybe<Scalars['String']>;
    message?: Maybe<Scalars['String']>;
};
export declare type JiraHierarchyConfigTask = {
    __typename?: 'JiraHierarchyConfigTask';
    taskProgress?: Maybe<JiraLongRunningTaskProgress>;
    issueHierarchyConfig?: Maybe<Array<JiraIssueHierarchyConfigData>>;
    errors?: Maybe<Array<JiraHierarchyConfigError>>;
};
export declare type JiraHomePage = {
    __typename?: 'JiraHomePage';
    type?: Maybe<JiraHomePageType>;
    link?: Maybe<Scalars['String']>;
};
export declare enum JiraHomePageType {
    YourWork = "YOUR_WORK",
    Dashboards = "DASHBOARDS",
    ProjectsDirectory = "PROJECTS_DIRECTORY",
    LoginRedirect = "LOGIN_REDIRECT"
}
export declare enum JiraInstallDeploymentsBannerPrecondition {
    NotAvailable = "NOT_AVAILABLE",
    FeatureNotEnabled = "FEATURE_NOT_ENABLED",
    DeploymentsEmptyState = "DEPLOYMENTS_EMPTY_STATE"
}
export declare type JiraInvalidJqlError = {
    __typename?: 'JiraInvalidJqlError';
    messages?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type JiraInvalidSyntaxError = {
    __typename?: 'JiraInvalidSyntaxError';
    message?: Maybe<Scalars['String']>;
    errorType?: Maybe<JiraJqlSyntaxError>;
    line?: Maybe<Scalars['Int']>;
    column?: Maybe<Scalars['Int']>;
};
export declare type JiraIssue = Node & {
    __typename?: 'JiraIssue';
    id: Scalars['ID'];
    issueId: Scalars['String'];
    key: Scalars['String'];
    webUrl?: Maybe<Scalars['URL']>;
    lifecycleState?: Maybe<JiraIssueLifecycleState>;
    isArchived?: Maybe<Scalars['Boolean']>;
    isResolved?: Maybe<Scalars['Boolean']>;
    fields?: Maybe<JiraIssueFieldConnection>;
    fieldsById?: Maybe<JiraIssueFieldConnection>;
    comments?: Maybe<JiraCommentConnection>;
    worklogs?: Maybe<JiraWorkLogConnection>;
    attachments?: Maybe<JiraAttachmentConnection>;
    fieldSets?: Maybe<JiraIssueFieldSetConnection>;
    fieldSetsForIssueSearchView?: Maybe<JiraIssueFieldSetConnection>;
    shadowFieldSetsForIssueSearchView?: Maybe<JiraIssueFieldSetConnection>;
    fieldSetsById?: Maybe<JiraIssueFieldSetConnection>;
    issueLinks?: Maybe<JiraIssueLinkConnection>;
    childIssues?: Maybe<JiraChildIssues>;
    devSummaryCache?: Maybe<JiraIssueDevSummaryResult>;
    deploymentsSummary?: Maybe<DevOpsSummarisedDeployments>;
    devInfoDetails?: Maybe<JiraIssueDevInfoDetails>;
    devOpsSummarisedEntities?: Maybe<DevOpsSummarisedEntities>;
    hierarchyLevelBelow?: Maybe<JiraIssueTypeHierarchyLevel>;
    hierarchyLevelAbove?: Maybe<JiraIssueTypeHierarchyLevel>;
    issueTypesForHierarchyBelow?: Maybe<JiraIssueTypeConnection>;
    issueTypesForHierarchyAbove?: Maybe<JiraIssueTypeConnection>;
    issueTypesForHierarchySame?: Maybe<JiraIssueTypeConnection>;
    errorRetrievingData?: Maybe<Scalars['Boolean']>;
    issueColorField?: Maybe<JiraColorField>;
    storyPointsField?: Maybe<JiraNumberField>;
    storyPointEstimateField?: Maybe<JiraNumberField>;
    screenId?: Maybe<Scalars['Long']>;
};
export declare type JiraIssueFieldsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueFieldsByIdArgs = {
    ids: Array<Scalars['ID']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueCommentsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueWorklogsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueAttachmentsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueFieldSetsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueFieldSetsForIssueSearchViewArgs = {
    namespace?: Maybe<Scalars['String']>;
    viewId?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueShadowFieldSetsForIssueSearchViewArgs = {
    namespace?: Maybe<Scalars['String']>;
    viewId?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueFieldSetsByIdArgs = {
    fieldSetIds: Array<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueIssueLinksArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueAndProject = {
    __typename?: 'JiraIssueAndProject';
    issueId: Scalars['ID'];
    projectId: Scalars['ID'];
};
export declare type JiraIssueBranchDevSummary = {
    __typename?: 'JiraIssueBranchDevSummary';
    count?: Maybe<Scalars['Int']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
};
export declare type JiraIssueBranchDevSummaryContainer = {
    __typename?: 'JiraIssueBranchDevSummaryContainer';
    overall?: Maybe<JiraIssueBranchDevSummary>;
    summaryByProvider?: Maybe<Array<JiraIssueDevSummaryByProvider>>;
};
export declare type JiraIssueBranches = {
    __typename?: 'JiraIssueBranches';
    details?: Maybe<Array<JiraDevOpsBranchDetails>>;
    configErrors?: Maybe<Array<JiraDevInfoConfigError>>;
};
export declare type JiraIssueBuildDevSummary = {
    __typename?: 'JiraIssueBuildDevSummary';
    count?: Maybe<Scalars['Int']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    failedBuildCount?: Maybe<Scalars['Int']>;
    successfulBuildCount?: Maybe<Scalars['Int']>;
    unknownBuildCount?: Maybe<Scalars['Int']>;
};
export declare type JiraIssueBuildDevSummaryContainer = {
    __typename?: 'JiraIssueBuildDevSummaryContainer';
    overall?: Maybe<JiraIssueBuildDevSummary>;
    summaryByProvider?: Maybe<Array<JiraIssueDevSummaryByProvider>>;
};
export declare type JiraIssueBulkOperationFailure = {
    __typename?: 'JiraIssueBulkOperationFailure';
    issue?: Maybe<JiraIssue>;
    failureReasons?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type JiraIssueBulkOperationFailureConnection = {
    __typename?: 'JiraIssueBulkOperationFailureConnection';
    edges?: Maybe<Array<Maybe<JiraIssueBulkOperationFailureEdge>>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraIssueBulkOperationFailureEdge = {
    __typename?: 'JiraIssueBulkOperationFailureEdge';
    node?: Maybe<JiraIssueBulkOperationFailure>;
    cursor: Scalars['String'];
};
export declare type JiraIssueBulkOperationProgress = {
    __typename?: 'JiraIssueBulkOperationProgress';
    taskId?: Maybe<Scalars['ID']>;
    status?: Maybe<JiraLongRunningTaskStatus>;
    progress?: Maybe<Scalars['Long']>;
    totalIssueCount?: Maybe<Scalars['Int']>;
    unauthorisedSuccessfulIssueCount?: Maybe<Scalars['Int']>;
    successfulIssues?: Maybe<JiraIssueConnection>;
    bulkOperationFailures?: Maybe<JiraIssueBulkOperationFailureConnection>;
    startTime?: Maybe<Scalars['DateTime']>;
};
export declare type JiraIssueBulkOperationProgressSuccessfulIssuesArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
};
export declare type JiraIssueBulkOperationProgressBulkOperationFailuresArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
};
export declare type JiraIssueBulkOperationsMetadata = {
    __typename?: 'JiraIssueBulkOperationsMetadata';
    maxNumberOfIssues?: Maybe<Scalars['Long']>;
};
export declare type JiraIssueCommitDevSummary = {
    __typename?: 'JiraIssueCommitDevSummary';
    count?: Maybe<Scalars['Int']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
};
export declare type JiraIssueCommitDevSummaryContainer = {
    __typename?: 'JiraIssueCommitDevSummaryContainer';
    overall?: Maybe<JiraIssueCommitDevSummary>;
    summaryByProvider?: Maybe<Array<JiraIssueDevSummaryByProvider>>;
};
export declare type JiraIssueCommits = {
    __typename?: 'JiraIssueCommits';
    details?: Maybe<Array<JiraDevOpsCommitDetails>>;
    configErrors?: Maybe<Array<JiraDevInfoConfigError>>;
};
export declare type JiraIssueConnection = {
    __typename?: 'JiraIssueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    jql?: Maybe<Scalars['String']>;
    edges?: Maybe<Array<Maybe<JiraIssueEdge>>>;
    issueSearchError?: Maybe<JiraIssueSearchError>;
    totalIssueSearchResultCount?: Maybe<Scalars['Int']>;
    isCappingIssueSearchResult?: Maybe<Scalars['Boolean']>;
    issueNavigatorPageInfo?: Maybe<JiraIssueNavigatorPageInfo>;
    pageCursors?: Maybe<JiraPageCursors>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraIssueConnectionPageCursorsArgs = {
    maxCursors: Scalars['Int'];
};
export declare type JiraIssueDeploymentEnvironment = {
    __typename?: 'JiraIssueDeploymentEnvironment';
    title?: Maybe<Scalars['String']>;
    status?: Maybe<JiraIssueDeploymentEnvironmentState>;
};
export declare type JiraIssueDeploymentEnvironmentDevSummary = {
    __typename?: 'JiraIssueDeploymentEnvironmentDevSummary';
    count?: Maybe<Scalars['Int']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    topEnvironments?: Maybe<Array<JiraIssueDeploymentEnvironment>>;
};
export declare type JiraIssueDeploymentEnvironmentDevSummaryContainer = {
    __typename?: 'JiraIssueDeploymentEnvironmentDevSummaryContainer';
    overall?: Maybe<JiraIssueDeploymentEnvironmentDevSummary>;
    summaryByProvider?: Maybe<Array<JiraIssueDevSummaryByProvider>>;
};
export declare enum JiraIssueDeploymentEnvironmentState {
    NotDeployed = "NOT_DEPLOYED",
    Deployed = "DEPLOYED"
}
export declare type JiraIssueDevInfoDetails = {
    __typename?: 'JiraIssueDevInfoDetails';
    pullRequests?: Maybe<JiraIssuePullRequests>;
    branches?: Maybe<JiraIssueBranches>;
    commits?: Maybe<JiraIssueCommits>;
};
export declare type JiraIssueDevSummary = {
    __typename?: 'JiraIssueDevSummary';
    branch?: Maybe<JiraIssueBranchDevSummaryContainer>;
    commit?: Maybe<JiraIssueCommitDevSummaryContainer>;
    pullrequest?: Maybe<JiraIssuePullRequestDevSummaryContainer>;
    build?: Maybe<JiraIssueBuildDevSummaryContainer>;
    review?: Maybe<JiraIssueReviewDevSummaryContainer>;
    deploymentEnvironments?: Maybe<JiraIssueDeploymentEnvironmentDevSummaryContainer>;
};
export declare type JiraIssueDevSummaryByProvider = {
    __typename?: 'JiraIssueDevSummaryByProvider';
    providerId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    count?: Maybe<Scalars['Int']>;
};
export declare type JiraIssueDevSummaryError = {
    __typename?: 'JiraIssueDevSummaryError';
    message?: Maybe<Scalars['String']>;
    instance?: Maybe<JiraIssueDevSummaryErrorProviderInstance>;
};
export declare type JiraIssueDevSummaryErrorProviderInstance = {
    __typename?: 'JiraIssueDevSummaryErrorProviderInstance';
    name?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    baseUrl?: Maybe<Scalars['String']>;
};
export declare type JiraIssueDevSummaryResult = {
    __typename?: 'JiraIssueDevSummaryResult';
    devSummary?: Maybe<JiraIssueDevSummary>;
    errors?: Maybe<Array<JiraIssueDevSummaryError>>;
    configErrors?: Maybe<Array<JiraIssueDevSummaryError>>;
};
export declare type JiraIssueEdge = {
    __typename?: 'JiraIssueEdge';
    node?: Maybe<JiraIssue>;
    cursor: Scalars['String'];
};
export declare type JiraIssueField = {
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
};
export declare type JiraIssueFieldConfiguration = {
    fieldConfig?: Maybe<JiraFieldConfig>;
};
export declare type JiraIssueFieldConnection = {
    __typename?: 'JiraIssueFieldConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraIssueFieldEdge>>>;
};
export declare type JiraIssueFieldConnectionResult = JiraIssueFieldConnection | QueryError;
export declare type JiraIssueFieldEdge = {
    __typename?: 'JiraIssueFieldEdge';
    node?: Maybe<JiraIssueField>;
    cursor: Scalars['String'];
};
export declare type JiraIssueFieldGrantTypeValue = Node & {
    __typename?: 'JiraIssueFieldGrantTypeValue';
    id: Scalars['ID'];
    field: JiraIssueField;
};
export declare type JiraIssueFieldSet = {
    __typename?: 'JiraIssueFieldSet';
    fieldSetId?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    fields?: Maybe<JiraIssueFieldConnection>;
};
export declare type JiraIssueFieldSetFieldsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueFieldSetConnection = {
    __typename?: 'JiraIssueFieldSetConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo?: Maybe<PageInfo>;
    edges?: Maybe<Array<Maybe<JiraIssueFieldSetEdge>>>;
};
export declare type JiraIssueFieldSetEdge = {
    __typename?: 'JiraIssueFieldSetEdge';
    node?: Maybe<JiraIssueFieldSet>;
    cursor: Scalars['String'];
};
export declare type JiraIssueHierarchyConfigData = {
    __typename?: 'JiraIssueHierarchyConfigData';
    hierarchyLevel?: Maybe<JiraIssueTypeHierarchyLevel>;
    cmpIssueTypes?: Maybe<JiraIssueTypeConnection>;
};
export declare type JiraIssueHierarchyConfigDataCmpIssueTypesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueHierarchyConfigInput = {
    level: Scalars['Int'];
    title: Scalars['String'];
    issueTypeIds: Array<Scalars['ID']>;
};
export declare type JiraIssueHierarchyConfigurationMutationInput = {
    dryRun: Scalars['Boolean'];
    issueHierarchyConfig: Array<JiraIssueHierarchyConfigInput>;
};
export declare type JiraIssueHierarchyConfigurationMutationResult = {
    __typename?: 'JiraIssueHierarchyConfigurationMutationResult';
    updateInitiated: Scalars['Boolean'];
    success: Scalars['Boolean'];
    updateIssuesCount?: Maybe<Scalars['Long']>;
    updateIssuesJQL?: Maybe<Scalars['String']>;
    errors?: Maybe<Array<JiraHierarchyConfigError>>;
};
export declare type JiraIssueHierarchyConfigurationQuery = {
    __typename?: 'JiraIssueHierarchyConfigurationQuery';
    data?: Maybe<Array<JiraIssueHierarchyConfigData>>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<JiraHierarchyConfigError>>;
};
export declare type JiraIssueHierarchyLimits = {
    __typename?: 'JiraIssueHierarchyLimits';
    maxLevels: Scalars['Int'];
    nameLength: Scalars['Int'];
};
export declare type JiraIssueItemContainer = {
    __typename?: 'JiraIssueItemContainer';
    containerType?: Maybe<JiraIssueItemSystemContainerType>;
    items?: Maybe<JiraIssueItemContainerItemConnection>;
};
export declare type JiraIssueItemContainerItem = JiraIssueItemFieldItem | JiraIssueItemPanelItem | JiraIssueItemGroupContainer | JiraIssueItemTabContainer;
export declare type JiraIssueItemContainerItemConnection = {
    __typename?: 'JiraIssueItemContainerItemConnection';
    pageInfo: PageInfo;
    nodes?: Maybe<Array<Maybe<JiraIssueItemContainerItem>>>;
    edges?: Maybe<Array<Maybe<JiraIssueItemContainerItemEdge>>>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraIssueItemContainerItemEdge = {
    __typename?: 'JiraIssueItemContainerItemEdge';
    node?: Maybe<JiraIssueItemContainerItem>;
    cursor: Scalars['String'];
};
export declare type JiraIssueItemContainers = {
    __typename?: 'JiraIssueItemContainers';
    containers?: Maybe<Array<Maybe<JiraIssueItemContainer>>>;
    defaultItemLocations?: Maybe<Array<Maybe<JiraIssueItemLayoutDefaultItemLocation>>>;
};
export declare type JiraIssueItemContainersResult = JiraIssueItemContainers | QueryError;
export declare type JiraIssueItemFieldItem = {
    __typename?: 'JiraIssueItemFieldItem';
    fieldItemId: Scalars['String'];
    containerPosition: Scalars['Int'];
};
export declare type JiraIssueItemGroupContainer = {
    __typename?: 'JiraIssueItemGroupContainer';
    groupContainerId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    minimised?: Maybe<Scalars['Boolean']>;
    items?: Maybe<JiraIssueItemGroupContainerItemConnection>;
};
export declare type JiraIssueItemGroupContainerItem = JiraIssueItemFieldItem | JiraIssueItemPanelItem;
export declare type JiraIssueItemGroupContainerItemConnection = {
    __typename?: 'JiraIssueItemGroupContainerItemConnection';
    pageInfo: PageInfo;
    nodes?: Maybe<Array<Maybe<JiraIssueItemGroupContainerItem>>>;
    edges?: Maybe<Array<Maybe<JiraIssueItemGroupContainerItemEdge>>>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraIssueItemGroupContainerItemEdge = {
    __typename?: 'JiraIssueItemGroupContainerItemEdge';
    node?: Maybe<JiraIssueItemGroupContainerItem>;
    cursor: Scalars['String'];
};
export declare type JiraIssueItemLayoutDefaultItemLocation = {
    __typename?: 'JiraIssueItemLayoutDefaultItemLocation';
    containerLocation?: Maybe<Scalars['String']>;
    itemLocationRuleType?: Maybe<JiraIssueItemLayoutItemLocationRuleType>;
};
export declare enum JiraIssueItemLayoutItemLocationRuleType {
    People = "PEOPLE",
    MultilineText = "MULTILINE_TEXT",
    Timetracking = "TIMETRACKING",
    Dates = "DATES",
    Other = "OTHER"
}
export declare type JiraIssueItemPanelItem = {
    __typename?: 'JiraIssueItemPanelItem';
    panelItemId: Scalars['String'];
};
export declare enum JiraIssueItemSystemContainerType {
    RequestPortal = "REQUEST_PORTAL",
    Content = "CONTENT",
    Primary = "PRIMARY",
    Secondary = "SECONDARY",
    Context = "CONTEXT",
    HiddenItems = "HIDDEN_ITEMS",
    Request = "REQUEST"
}
export declare type JiraIssueItemSystemContainerTypeWithIdInput = {
    issueId: Scalars['ID'];
    systemContainerTypes: Array<JiraIssueItemSystemContainerType>;
};
export declare type JiraIssueItemSystemContainerTypeWithKeyInput = {
    issueKey: Scalars['String'];
    cloudId: Scalars['ID'];
    systemContainerTypes: Array<JiraIssueItemSystemContainerType>;
};
export declare type JiraIssueItemTabContainer = {
    __typename?: 'JiraIssueItemTabContainer';
    tabContainerId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    items?: Maybe<JiraIssueItemTabContainerItemConnection>;
};
export declare type JiraIssueItemTabContainerItem = JiraIssueItemFieldItem;
export declare type JiraIssueItemTabContainerItemConnection = {
    __typename?: 'JiraIssueItemTabContainerItemConnection';
    pageInfo: PageInfo;
    nodes?: Maybe<Array<Maybe<JiraIssueItemTabContainerItem>>>;
    edges?: Maybe<Array<Maybe<JiraIssueItemTabContainerItemEdge>>>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraIssueItemTabContainerItemEdge = {
    __typename?: 'JiraIssueItemTabContainerItemEdge';
    node?: Maybe<JiraIssueItemTabContainerItem>;
    cursor: Scalars['String'];
};
export declare enum JiraIssueLifecycleState {
    Active = "ACTIVE",
    Archived = "ARCHIVED"
}
export declare type JiraIssueLink = {
    __typename?: 'JiraIssueLink';
    id?: Maybe<Scalars['ID']>;
    issueLinkId?: Maybe<Scalars['ID']>;
    relatedBy?: Maybe<JiraIssueLinkTypeRelation>;
    type?: Maybe<JiraIssueLinkType>;
    issue?: Maybe<JiraIssue>;
    direction?: Maybe<JiraIssueLinkDirection>;
    relationName?: Maybe<Scalars['String']>;
};
export declare type JiraIssueLinkConnection = {
    __typename?: 'JiraIssueLinkConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraIssueLinkEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare enum JiraIssueLinkDirection {
    Inward = "INWARD",
    Outward = "OUTWARD"
}
export declare type JiraIssueLinkEdge = {
    __typename?: 'JiraIssueLinkEdge';
    node?: Maybe<JiraIssueLink>;
    cursor: Scalars['String'];
};
export declare type JiraIssueLinkField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraIssueLinkField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    issueLinks?: Maybe<Array<Maybe<JiraIssueLink>>>;
    issueLinkConnection?: Maybe<JiraIssueLinkConnection>;
    issueLinkTypeRelations?: Maybe<JiraIssueLinkTypeRelationConnection>;
    issues?: Maybe<JiraIssueConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraIssueLinkFieldIssueLinkConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueLinkFieldIssueLinkTypeRelationsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueLinkFieldIssuesArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueLinkType = Node & {
    __typename?: 'JiraIssueLinkType';
    id: Scalars['ID'];
    linkTypeId?: Maybe<Scalars['ID']>;
    linkTypeName?: Maybe<Scalars['String']>;
    inwards?: Maybe<Scalars['String']>;
    outwards?: Maybe<Scalars['String']>;
};
export declare type JiraIssueLinkTypeConnection = {
    __typename?: 'JiraIssueLinkTypeConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraIssueLinkTypeEdge>>>;
};
export declare type JiraIssueLinkTypeEdge = {
    __typename?: 'JiraIssueLinkTypeEdge';
    node?: Maybe<JiraIssueLinkType>;
    cursor: Scalars['String'];
};
export declare type JiraIssueLinkTypeRelation = Node & {
    __typename?: 'JiraIssueLinkTypeRelation';
    id: Scalars['ID'];
    relationName?: Maybe<Scalars['String']>;
    linkTypeId: Scalars['String'];
    linkTypeName?: Maybe<Scalars['String']>;
    direction?: Maybe<JiraIssueLinkDirection>;
};
export declare type JiraIssueLinkTypeRelationConnection = {
    __typename?: 'JiraIssueLinkTypeRelationConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraIssueLinkTypeRelationEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraIssueLinkTypeRelationEdge = {
    __typename?: 'JiraIssueLinkTypeRelationEdge';
    node?: Maybe<JiraIssueLinkTypeRelation>;
    cursor: Scalars['String'];
};
export declare type JiraIssueNavigatorPageInfo = {
    __typename?: 'JiraIssueNavigatorPageInfo';
    firstIssuePosition?: Maybe<Scalars['Int']>;
    lastIssuePosition?: Maybe<Scalars['Int']>;
    firstIssueKeyFromNextPage?: Maybe<Scalars['String']>;
    lastIssueKeyFromPreviousPage?: Maybe<Scalars['String']>;
};
export declare enum JiraIssueNavigatorSearchLayout {
    List = "LIST",
    Detail = "DETAIL"
}
export declare type JiraIssueNavigatorSearchLayoutMutationPayload = Payload & {
    __typename?: 'JiraIssueNavigatorSearchLayoutMutationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    issueNavigatorSearchLayout?: Maybe<JiraIssueNavigatorSearchLayout>;
};
export declare type JiraIssuePullRequestDevSummary = {
    __typename?: 'JiraIssuePullRequestDevSummary';
    count?: Maybe<Scalars['Int']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    state?: Maybe<JiraPullRequestState>;
    stateCount?: Maybe<Scalars['Int']>;
    open?: Maybe<Scalars['Boolean']>;
};
export declare type JiraIssuePullRequestDevSummaryContainer = {
    __typename?: 'JiraIssuePullRequestDevSummaryContainer';
    overall?: Maybe<JiraIssuePullRequestDevSummary>;
    summaryByProvider?: Maybe<Array<JiraIssueDevSummaryByProvider>>;
};
export declare type JiraIssuePullRequests = {
    __typename?: 'JiraIssuePullRequests';
    details?: Maybe<Array<JiraDevOpsPullRequestDetails>>;
    configErrors?: Maybe<Array<JiraDevInfoConfigError>>;
};
export declare type JiraIssueRestrictionField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraIssueRestrictionField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedRoles?: Maybe<Array<Maybe<JiraRole>>>;
    selectedRolesConnection?: Maybe<JiraRoleConnection>;
    roles?: Maybe<JiraRoleConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraIssueRestrictionFieldSelectedRolesConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueRestrictionFieldRolesArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraIssueReviewDevSummary = {
    __typename?: 'JiraIssueReviewDevSummary';
    count?: Maybe<Scalars['Int']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    state?: Maybe<JiraReviewState>;
    stateCount?: Maybe<Scalars['Int']>;
};
export declare type JiraIssueReviewDevSummaryContainer = {
    __typename?: 'JiraIssueReviewDevSummaryContainer';
    overall?: Maybe<JiraIssueReviewDevSummary>;
    summaryByProvider?: Maybe<Array<JiraIssueDevSummaryByProvider>>;
};
export declare type JiraIssueSearchByFilter = JiraIssueSearchResult & {
    __typename?: 'JiraIssueSearchByFilter';
    content?: Maybe<JiraIssueSearchContextualContent>;
    contentByFieldSetIds?: Maybe<JiraIssueSearchContextlessContent>;
    filter?: Maybe<JiraFilter>;
};
export declare type JiraIssueSearchByFilterContentArgs = {
    namespace?: Maybe<Scalars['String']>;
    viewId?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchByFilterContentByFieldSetIdsArgs = {
    fieldSetIds: Array<Scalars['String']>;
};
export declare type JiraIssueSearchByFilterResult = JiraIssueSearchByFilter | QueryError;
export declare type JiraIssueSearchByHydration = JiraIssueSearchResult & {
    __typename?: 'JiraIssueSearchByHydration';
    content?: Maybe<JiraIssueSearchContextualContent>;
    contentByFieldSetIds?: Maybe<JiraIssueSearchContextlessContent>;
};
export declare type JiraIssueSearchByHydrationContentArgs = {
    namespace?: Maybe<Scalars['String']>;
    viewId?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchByHydrationContentByFieldSetIdsArgs = {
    fieldSetIds: Array<Scalars['String']>;
};
export declare type JiraIssueSearchByJql = JiraIssueSearchResult & {
    __typename?: 'JiraIssueSearchByJql';
    content?: Maybe<JiraIssueSearchContextualContent>;
    contentByFieldSetIds?: Maybe<JiraIssueSearchContextlessContent>;
    jql?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchByJqlContentArgs = {
    namespace?: Maybe<Scalars['String']>;
    viewId?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchByJqlContentByFieldSetIdsArgs = {
    fieldSetIds: Array<Scalars['String']>;
};
export declare type JiraIssueSearchByJqlResult = JiraIssueSearchByJql | QueryError;
export declare type JiraIssueSearchContextlessContent = JiraIssueSearchResultContent & {
    __typename?: 'JiraIssueSearchContextlessContent';
    issues?: Maybe<JiraIssueConnection>;
};
export declare type JiraIssueSearchContextlessContentIssuesArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchContextualContent = JiraIssueSearchResultContent & {
    __typename?: 'JiraIssueSearchContextualContent';
    view?: Maybe<JiraIssueSearchView>;
    issues?: Maybe<JiraIssueConnection>;
};
export declare type JiraIssueSearchContextualContentIssuesArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchError = JiraInvalidJqlError | JiraInvalidSyntaxError | JiraServerError;
export declare type JiraIssueSearchFieldSet = {
    __typename?: 'JiraIssueSearchFieldSet';
    fieldSetId?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    jqlTerm?: Maybe<Scalars['String']>;
    isSortable?: Maybe<Scalars['Boolean']>;
    isSelected?: Maybe<Scalars['Boolean']>;
};
export declare type JiraIssueSearchFieldSetConnection = {
    __typename?: 'JiraIssueSearchFieldSetConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraIssueSearchFieldSetEdge>>>;
    isWithholdingUnsupportedSelectedFields?: Maybe<Scalars['Boolean']>;
};
export declare type JiraIssueSearchFieldSetEdge = {
    __typename?: 'JiraIssueSearchFieldSetEdge';
    node?: Maybe<JiraIssueSearchFieldSet>;
    cursor: Scalars['String'];
};
export declare enum JiraIssueSearchFieldSetSelectedState {
    All = "ALL",
    Selected = "SELECTED",
    NonSelected = "NON_SELECTED"
}
export declare type JiraIssueSearchFieldSetsFilter = {
    searchString?: Maybe<Scalars['String']>;
    fieldSetSelectedState?: Maybe<JiraIssueSearchFieldSetSelectedState>;
};
export declare type JiraIssueSearchInput = {
    jql?: Maybe<Scalars['String']>;
    filterId?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchOptions = {
    issueKey?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchResult = {
    content?: Maybe<JiraIssueSearchContextualContent>;
    contentByFieldSetIds?: Maybe<JiraIssueSearchContextlessContent>;
};
export declare type JiraIssueSearchResultContentArgs = {
    namespace?: Maybe<Scalars['String']>;
    viewId?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchResultContentByFieldSetIdsArgs = {
    fieldSetIds: Array<Scalars['String']>;
};
export declare type JiraIssueSearchResultContent = {
    issues?: Maybe<JiraIssueConnection>;
};
export declare type JiraIssueSearchResultContentIssuesArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
};
export declare type JiraIssueSearchStatus = {
    __typename?: 'JiraIssueSearchStatus';
    functions?: Maybe<Array<Maybe<JiraJqlFunctionProcessingStatus>>>;
};
export declare type JiraIssueSearchView = Node & {
    __typename?: 'JiraIssueSearchView';
    id: Scalars['ID'];
    namespace?: Maybe<Scalars['String']>;
    viewId?: Maybe<Scalars['String']>;
    fieldSets?: Maybe<JiraIssueSearchFieldSetConnection>;
};
export declare type JiraIssueSearchViewFieldSetsArgs = {
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraIssueSearchFieldSetsFilter>;
};
export declare type JiraIssueSearchViewPayload = Payload & {
    __typename?: 'JiraIssueSearchViewPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    view?: Maybe<JiraIssueSearchView>;
};
export declare enum JiraIssueTransitionLayoutMessageType {
    Error = "ERROR",
    Warn = "WARN",
    Info = "INFO",
    Success = "SUCCESS"
}
export declare type JiraIssueTransitionMessage = {
    __typename?: 'JiraIssueTransitionMessage';
    type?: Maybe<JiraIssueTransitionLayoutMessageType>;
    title?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['URL']>;
    content?: Maybe<JiraRichText>;
};
export declare type JiraIssueTransitionModal = {
    __typename?: 'JiraIssueTransitionModal';
    contentSections?: Maybe<JiraScreenTabLayout>;
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    messages?: Maybe<Array<Maybe<JiraIssueTransitionMessage>>>;
};
export declare type JiraIssueType = Node & {
    __typename?: 'JiraIssueType';
    id: Scalars['ID'];
    issueTypeId?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    avatar?: Maybe<JiraAvatar>;
    hierarchy?: Maybe<JiraIssueTypeHierarchyLevel>;
};
export declare type JiraIssueTypeConnection = {
    __typename?: 'JiraIssueTypeConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraIssueTypeEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraIssueTypeEdge = {
    __typename?: 'JiraIssueTypeEdge';
    node?: Maybe<JiraIssueType>;
    cursor: Scalars['String'];
};
export declare type JiraIssueTypeField = Node & JiraIssueField & JiraIssueFieldConfiguration & {
    __typename?: 'JiraIssueTypeField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    issueType?: Maybe<JiraIssueType>;
    issueTypes?: Maybe<JiraIssueTypeConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
};
export declare type JiraIssueTypeFieldIssueTypesArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraIssueTypeHierarchyLevel = {
    __typename?: 'JiraIssueTypeHierarchyLevel';
    level?: Maybe<Scalars['Int']>;
    name?: Maybe<Scalars['String']>;
};
export declare enum JiraIssueViewActivityFeedSortOrder {
    NewestFirst = "NEWEST_FIRST",
    OldestFirst = "OLDEST_FIRST"
}
export declare enum JiraIssueViewAttachmentPanelViewMode {
    ListView = "LIST_VIEW",
    StripView = "STRIP_VIEW"
}
export declare enum JiraIssueViewTimestampDisplayMode {
    Absolute = "ABSOLUTE",
    Relative = "RELATIVE"
}
export declare enum JiraIteration {
    Iteration_1 = "ITERATION_1",
    Iteration_2 = "ITERATION_2"
}
export declare enum JiraJqlBuilderSearchMode {
    Basic = "BASIC",
    Advanced = "ADVANCED"
}
export declare type JiraJqlBuilderSearchModeMutationPayload = Payload & {
    __typename?: 'JiraJQLBuilderSearchModeMutationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    userSearchMode?: Maybe<JiraJqlBuilderSearchMode>;
};
export declare type JiraJqlFromNaturalLanguage = {
    __typename?: 'JiraJQLFromNaturalLanguage';
    generatedJQL?: Maybe<Scalars['String']>;
    generatedJQLError?: Maybe<JiraJqlGenerationError>;
};
export declare type JiraJqlGenerationError = JiraInvalidJqlError | JiraInvalidSyntaxError | JiraServerError | JiraUiExposedError;
export declare enum JiraJqlAutocompleteType {
    None = "NONE",
    Component = "COMPONENT",
    Group = "GROUP",
    Issue = "ISSUE",
    Issuetype = "ISSUETYPE",
    Priority = "PRIORITY",
    Project = "PROJECT",
    Sprint = "SPRINT",
    Statuscategory = "STATUSCATEGORY",
    Status = "STATUS",
    User = "USER",
    Version = "VERSION"
}
export declare type JiraJqlBuilder = {
    __typename?: 'JiraJqlBuilder';
    functions: Array<JiraJqlFunction>;
    hydrateJqlQuery?: Maybe<JiraJqlHydratedQueryResult>;
    hydrateJqlQueryForFilter?: Maybe<JiraJqlHydratedQueryResult>;
    fields?: Maybe<JiraJqlFieldConnectionResult>;
    recentFields?: Maybe<JiraJqlFieldConnectionResult>;
    fieldValues?: Maybe<JiraJqlFieldValueConnection>;
    recentlyUsedUsers?: Maybe<JiraJqlUserFieldValueConnection>;
    suggestedGroups?: Maybe<JiraJqlGroupFieldValueConnection>;
    recentlyUsedProjects?: Maybe<JiraJqlProjectFieldValueConnection>;
    recentlyUsedSprints?: Maybe<JiraJqlSprintFieldValueConnection>;
    issueTypes?: Maybe<JiraJqlIssueTypes>;
    cascadingSelectOptions?: Maybe<JiraJqlOptionFieldValueConnection>;
    versions?: Maybe<JiraJqlVersions>;
};
export declare type JiraJqlBuilderHydrateJqlQueryArgs = {
    query?: Maybe<Scalars['String']>;
    viewContext?: Maybe<JiraJqlViewContext>;
};
export declare type JiraJqlBuilderHydrateJqlQueryForFilterArgs = {
    id: Scalars['ID'];
    viewContext?: Maybe<JiraJqlViewContext>;
};
export declare type JiraJqlBuilderFieldsArgs = {
    jqlContext?: Maybe<Scalars['String']>;
    searchString?: Maybe<Scalars['String']>;
    excludeFields?: Maybe<Array<Scalars['String']>>;
    forClause?: Maybe<JiraJqlClauseType>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    viewContext?: Maybe<JiraJqlViewContext>;
};
export declare type JiraJqlBuilderRecentFieldsArgs = {
    jqlContext?: Maybe<Scalars['String']>;
    forClause?: Maybe<JiraJqlClauseType>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraJqlBuilderFieldValuesArgs = {
    jqlContext?: Maybe<Scalars['String']>;
    jqlTerm: Scalars['String'];
    viewContext?: Maybe<JiraJqlViewContext>;
    searchString?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    projectOptions?: Maybe<JiraProjectOptions>;
};
export declare type JiraJqlBuilderRecentlyUsedUsersArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraJqlBuilderSuggestedGroupsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraJqlBuilderRecentlyUsedProjectsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    projectOptions?: Maybe<JiraProjectOptions>;
};
export declare type JiraJqlBuilderRecentlyUsedSprintsArgs = {
    jqlContext?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraJqlBuilderIssueTypesArgs = {
    jqlContext?: Maybe<Scalars['String']>;
};
export declare type JiraJqlBuilderCascadingSelectOptionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    jqlContext?: Maybe<Scalars['String']>;
    jqlTerm: Scalars['String'];
    searchString?: Maybe<Scalars['String']>;
    filter: JiraCascadingSelectOptionsFilter;
};
export declare type JiraJqlBuilderVersionsArgs = {
    jqlContext?: Maybe<Scalars['String']>;
    jqlTerm: Scalars['String'];
};
export declare enum JiraJqlBuilderMode {
    Jql = "JQL",
    Basic = "BASIC"
}
export declare type JiraJqlCascadingOptionFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlCascadingOptionFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    parentOption?: Maybe<JiraJqlOptionFieldValue>;
};
export declare enum JiraJqlClauseType {
    Any = "ANY",
    Where = "WHERE",
    OrderBy = "ORDER_BY"
}
export declare type JiraJqlComponentFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlComponentFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
};
export declare type JiraJqlField = {
    __typename?: 'JiraJqlField';
    jqlTerm: Scalars['ID'];
    displayName?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    dataTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
    allowedClauseTypes: Array<JiraJqlClauseType>;
    operators: Array<JiraJqlOperator>;
    searchTemplate?: Maybe<JiraJqlSearchTemplate>;
    autoCompleteTemplate?: Maybe<JiraJqlAutocompleteType>;
    jqlFieldType?: Maybe<JiraJqlFieldType>;
    shouldShowInContext?: Maybe<Scalars['Boolean']>;
};
export declare type JiraJqlFieldConnection = {
    __typename?: 'JiraJqlFieldConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlFieldEdge>>>;
};
export declare type JiraJqlFieldConnectionResult = JiraJqlFieldConnection | QueryError;
export declare type JiraJqlFieldEdge = {
    __typename?: 'JiraJqlFieldEdge';
    node?: Maybe<JiraJqlField>;
    cursor: Scalars['String'];
};
export declare type JiraJqlFieldType = {
    __typename?: 'JiraJqlFieldType';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
};
export declare type JiraJqlFieldValue = {
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
};
export declare type JiraJqlFieldValueConnection = {
    __typename?: 'JiraJqlFieldValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlFieldValueEdge>>>;
};
export declare type JiraJqlFieldValueEdge = {
    __typename?: 'JiraJqlFieldValueEdge';
    node?: Maybe<JiraJqlFieldValue>;
    cursor: Scalars['String'];
};
export declare type JiraJqlFunction = {
    __typename?: 'JiraJqlFunction';
    displayName?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['String']>;
    isList?: Maybe<Scalars['Boolean']>;
    dataTypes: Array<Scalars['String']>;
};
export declare type JiraJqlFunctionProcessingStatus = {
    __typename?: 'JiraJqlFunctionProcessingStatus';
    status: JiraJqlFunctionStatus;
    function: Scalars['String'];
    app?: Maybe<Scalars['String']>;
};
export declare enum JiraJqlFunctionStatus {
    Processing = "PROCESSING",
    Finished = "FINISHED",
    Unknown = "UNKNOWN"
}
export declare type JiraJqlGroupFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlGroupFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    group: JiraGroup;
};
export declare type JiraJqlGroupFieldValueConnection = {
    __typename?: 'JiraJqlGroupFieldValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlGroupFieldValueEdge>>>;
};
export declare type JiraJqlGroupFieldValueEdge = {
    __typename?: 'JiraJqlGroupFieldValueEdge';
    node?: Maybe<JiraJqlGroupFieldValue>;
    cursor: Scalars['String'];
};
export declare type JiraJqlHydratedQuery = {
    __typename?: 'JiraJqlHydratedQuery';
    jql?: Maybe<Scalars['String']>;
    fields: Array<JiraJqlQueryHydratedFieldResult>;
};
export declare type JiraJqlHydratedQueryResult = JiraJqlHydratedQuery | QueryError;
export declare type JiraJqlIssueFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlIssueFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    issue: JiraIssue;
};
export declare type JiraJqlIssueTypeFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlIssueTypeFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    issueTypes: Array<JiraIssueType>;
};
export declare type JiraJqlIssueTypeFieldValueConnection = {
    __typename?: 'JiraJqlIssueTypeFieldValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlIssueTypeFieldValueEdge>>>;
};
export declare type JiraJqlIssueTypeFieldValueEdge = {
    __typename?: 'JiraJqlIssueTypeFieldValueEdge';
    node?: Maybe<JiraJqlIssueTypeFieldValue>;
    cursor: Scalars['String'];
};
export declare type JiraJqlIssueTypes = {
    __typename?: 'JiraJqlIssueTypes';
    aboveBaseLevel?: Maybe<JiraJqlIssueTypeFieldValueConnection>;
    baseLevel?: Maybe<JiraJqlIssueTypeFieldValueConnection>;
    belowBaseLevel?: Maybe<JiraJqlIssueTypeFieldValueConnection>;
};
export declare type JiraJqlIssueTypesAboveBaseLevelArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraJqlIssueTypesBaseLevelArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraJqlIssueTypesBelowBaseLevelArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraJqlLabelFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlLabelFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    label?: Maybe<JiraLabel>;
};
export declare enum JiraJqlOperator {
    Equals = "EQUALS",
    NotEquals = "NOT_EQUALS",
    In = "IN",
    NotIn = "NOT_IN",
    Is = "IS",
    IsNot = "IS_NOT",
    LessThan = "LESS_THAN",
    LessThanOrEqual = "LESS_THAN_OR_EQUAL",
    GreaterThan = "GREATER_THAN",
    GreaterThanOrEqual = "GREATER_THAN_OR_EQUAL",
    Contains = "CONTAINS",
    NotContains = "NOT_CONTAINS",
    WasNotIn = "WAS_NOT_IN",
    Changed = "CHANGED",
    WasIn = "WAS_IN",
    Was = "WAS",
    WasNot = "WAS_NOT"
}
export declare type JiraJqlOptionFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlOptionFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
};
export declare type JiraJqlOptionFieldValueConnection = {
    __typename?: 'JiraJqlOptionFieldValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlOptionFieldValueEdge>>>;
};
export declare type JiraJqlOptionFieldValueEdge = {
    __typename?: 'JiraJqlOptionFieldValueEdge';
    node?: Maybe<JiraJqlOptionFieldValue>;
    cursor: Scalars['String'];
};
export declare type JiraJqlPlainTextFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlPlainTextFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
};
export declare type JiraJqlPriorityFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlPriorityFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    priority: JiraPriority;
};
export declare type JiraJqlProjectFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlProjectFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    project: JiraProject;
};
export declare type JiraJqlProjectFieldValueConnection = {
    __typename?: 'JiraJqlProjectFieldValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlProjectFieldValueEdge>>>;
};
export declare type JiraJqlProjectFieldValueEdge = {
    __typename?: 'JiraJqlProjectFieldValueEdge';
    node?: Maybe<JiraJqlProjectFieldValue>;
    cursor: Scalars['String'];
};
export declare type JiraJqlQueryHydratedError = {
    __typename?: 'JiraJqlQueryHydratedError';
    jqlTerm: Scalars['String'];
    error?: Maybe<QueryError>;
};
export declare type JiraJqlQueryHydratedField = {
    __typename?: 'JiraJqlQueryHydratedField';
    jqlTerm: Scalars['String'];
    field: JiraJqlField;
    values: Array<Maybe<JiraJqlQueryHydratedValueResult>>;
};
export declare type JiraJqlQueryHydratedFieldResult = JiraJqlQueryHydratedField | JiraJqlQueryHydratedError;
export declare type JiraJqlQueryHydratedValue = {
    __typename?: 'JiraJqlQueryHydratedValue';
    jqlTerm: Scalars['String'];
    values: Array<Maybe<JiraJqlFieldValue>>;
};
export declare type JiraJqlQueryHydratedValueResult = JiraJqlQueryHydratedValue | JiraJqlQueryHydratedError;
export declare type JiraJqlResolutionFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlResolutionFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    resolution?: Maybe<JiraResolution>;
};
export declare type JiraJqlSearchTemplate = {
    __typename?: 'JiraJqlSearchTemplate';
    key?: Maybe<Scalars['String']>;
};
export declare type JiraJqlSprintFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlSprintFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    sprint: JiraSprint;
};
export declare type JiraJqlSprintFieldValueConnection = {
    __typename?: 'JiraJqlSprintFieldValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlSprintFieldValueEdge>>>;
};
export declare type JiraJqlSprintFieldValueEdge = {
    __typename?: 'JiraJqlSprintFieldValueEdge';
    node?: Maybe<JiraJqlSprintFieldValue>;
    cursor: Scalars['String'];
};
export declare type JiraJqlStatusCategoryFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlStatusCategoryFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    statusCategory: JiraStatusCategory;
};
export declare type JiraJqlStatusFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlStatusFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    statusCategory: JiraStatusCategory;
};
export declare enum JiraJqlSyntaxError {
    ReservedWord = "RESERVED_WORD",
    IllegalEscape = "ILLEGAL_ESCAPE",
    UnfinishedString = "UNFINISHED_STRING",
    IllegalCharacter = "ILLEGAL_CHARACTER",
    ReservedCharacter = "RESERVED_CHARACTER",
    Unknown = "UNKNOWN",
    IllegalNumber = "ILLEGAL_NUMBER",
    EmptyField = "EMPTY_FIELD",
    EmptyFunction = "EMPTY_FUNCTION",
    MissingFieldName = "MISSING_FIELD_NAME",
    NoOrder = "NO_ORDER",
    UnexpectedText = "UNEXPECTED_TEXT",
    NoOperator = "NO_OPERATOR",
    BadFieldId = "BAD_FIELD_ID",
    BadPropertyId = "BAD_PROPERTY_ID",
    BadFunctionArgument = "BAD_FUNCTION_ARGUMENT",
    EmptyFunctionArgument = "EMPTY_FUNCTION_ARGUMENT",
    MissingLogicalOperator = "MISSING_LOGICAL_OPERATOR",
    BadOperator = "BAD_OPERATOR",
    PredicateUnsupported = "PREDICATE_UNSUPPORTED",
    OperandUnsupported = "OPERAND_UNSUPPORTED"
}
export declare type JiraJqlUserFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlUserFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
    user?: Maybe<User>;
};
export declare type JiraJqlUserFieldValueConnection = {
    __typename?: 'JiraJqlUserFieldValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlUserFieldValueEdge>>>;
};
export declare type JiraJqlUserFieldValueEdge = {
    __typename?: 'JiraJqlUserFieldValueEdge';
    node?: Maybe<JiraJqlUserFieldValue>;
    cursor: Scalars['String'];
};
export declare type JiraJqlVersionFieldValue = JiraJqlFieldValue & {
    __typename?: 'JiraJqlVersionFieldValue';
    jqlTerm: Scalars['String'];
    displayName: Scalars['String'];
};
export declare type JiraJqlVersionFieldValueConnection = {
    __typename?: 'JiraJqlVersionFieldValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraJqlVersionFieldValueEdge>>>;
};
export declare type JiraJqlVersionFieldValueEdge = {
    __typename?: 'JiraJqlVersionFieldValueEdge';
    node?: Maybe<JiraJqlVersionFieldValue>;
    cursor: Scalars['String'];
};
export declare type JiraJqlVersions = {
    __typename?: 'JiraJqlVersions';
    released?: Maybe<JiraJqlVersionFieldValueConnection>;
    unreleased?: Maybe<JiraJqlVersionFieldValueConnection>;
    archived?: Maybe<JiraJqlVersionFieldValueConnection>;
};
export declare type JiraJqlVersionsReleasedArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    includeArchived?: Maybe<Scalars['Boolean']>;
};
export declare type JiraJqlVersionsUnreleasedArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    includeArchived?: Maybe<Scalars['Boolean']>;
};
export declare type JiraJqlVersionsArchivedArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare enum JiraJqlViewContext {
    Jwm = "JWM",
    ShadowRequest = "SHADOW_REQUEST"
}
export declare type JiraLabel = {
    __typename?: 'JiraLabel';
    labelId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
export declare type JiraLabelConnection = {
    __typename?: 'JiraLabelConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraLabelEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraLabelEdge = {
    __typename?: 'JiraLabelEdge';
    node?: Maybe<JiraLabel>;
    cursor: Scalars['String'];
};
export declare type JiraLabelsField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraLabelsField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedLabels?: Maybe<Array<Maybe<JiraLabel>>>;
    selectedLabelsConnection?: Maybe<JiraLabelConnection>;
    labels?: Maybe<JiraLabelConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraLabelsFieldSelectedLabelsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraLabelsFieldLabelsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
    sessionId?: Maybe<Scalars['ID']>;
};
export declare type JiraLabelsFieldOperationInput = {
    operation: JiraMultiValueFieldOperations;
    labels: Array<Scalars['String']>;
};
export declare type JiraLabelsFieldPayload = Payload & {
    __typename?: 'JiraLabelsFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraLabelsField>;
};
export declare type JiraLinkIssueToVersionRelatedWorkInput = {
    issueId?: Maybe<Scalars['ID']>;
    relatedWorkType: JiraVersionRelatedWorkType;
    relatedWorkId?: Maybe<Scalars['ID']>;
    versionId: Scalars['ID'];
};
export declare type JiraLinkIssueToVersionRelatedWorkPayload = Payload & {
    __typename?: 'JiraLinkIssueToVersionRelatedWorkPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    relatedWork?: Maybe<JiraVersionRelatedWorkV2>;
};
export declare type JiraLongRunningTaskProgress = {
    __typename?: 'JiraLongRunningTaskProgress';
    description?: Maybe<Scalars['String']>;
    message?: Maybe<Scalars['String']>;
    status: JiraLongRunningTaskStatus;
    progress: Scalars['Long'];
    startTime?: Maybe<Scalars['DateTime']>;
    result?: Maybe<Scalars['String']>;
};
export declare enum JiraLongRunningTaskStatus {
    Enqueued = "ENQUEUED",
    Running = "RUNNING",
    Complete = "COMPLETE",
    Failed = "FAILED",
    CancelRequested = "CANCEL_REQUESTED",
    Cancelled = "CANCELLED",
    Dead = "DEAD"
}
export declare type JiraMediaContext = {
    __typename?: 'JiraMediaContext';
    uploadToken?: Maybe<JiraMediaUploadTokenResult>;
};
export declare type JiraMediaUploadToken = {
    __typename?: 'JiraMediaUploadToken';
    endpointUrl?: Maybe<Scalars['URL']>;
    clientId?: Maybe<Scalars['String']>;
    targetCollection?: Maybe<Scalars['String']>;
    token?: Maybe<Scalars['String']>;
    tokenDurationInMin?: Maybe<Scalars['Int']>;
};
export declare type JiraMediaUploadTokenResult = JiraMediaUploadToken | QueryError;
export declare type JiraMoveIssuesToFixVersionInput = {
    issueIds: Array<Scalars['ID']>;
    originalVersionId: Scalars['ID'];
    targetVersionId: Scalars['ID'];
};
export declare type JiraMoveIssuesToFixVersionPayload = Payload & {
    __typename?: 'JiraMoveIssuesToFixVersionPayload';
    originalVersion?: Maybe<JiraVersion>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    issuesWithMissingResolvePermission?: Maybe<Array<Scalars['String']>>;
    issuesWithMissingEditPermission?: Maybe<Array<Scalars['String']>>;
};
export declare enum JiraMultiValueFieldOperations {
    Add = "ADD",
    Remove = "REMOVE",
    Set = "SET"
}
export declare type JiraMultipleGroupPickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraMultipleGroupPickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedGroups?: Maybe<Array<Maybe<JiraGroup>>>;
    selectedGroupsConnection?: Maybe<JiraGroupConnection>;
    groups?: Maybe<JiraGroupConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    searchUrl?: Maybe<Scalars['String']>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraMultipleGroupPickerFieldSelectedGroupsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraMultipleGroupPickerFieldGroupsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraMultipleSelectField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraMultipleSelectField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedFieldOptions?: Maybe<Array<Maybe<JiraOption>>>;
    selectedOptions?: Maybe<JiraOptionConnection>;
    fieldOptions?: Maybe<JiraOptionConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    searchUrl?: Maybe<Scalars['String']>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraMultipleSelectFieldSelectedOptionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraMultipleSelectFieldFieldOptionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraMultipleSelectFieldOperationInput = {
    operation: JiraMultiValueFieldOperations;
    ids: Array<Scalars['ID']>;
};
export declare type JiraMultipleSelectFieldPayload = Payload & {
    __typename?: 'JiraMultipleSelectFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraMultipleSelectField>;
};
export declare type JiraMultipleSelectUserPickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraMultipleSelectUserPickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedUsers?: Maybe<Array<Maybe<User>>>;
    selectedUsersConnection?: Maybe<JiraUserConnection>;
    users?: Maybe<JiraUserConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraMultipleSelectUserPickerFieldSelectedUsersConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraMultipleSelectUserPickerFieldUsersArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraMultipleVersionPickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraMultipleVersionPickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedVersions?: Maybe<Array<Maybe<JiraVersion>>>;
    selectedVersionsConnection?: Maybe<JiraVersionConnection>;
    versions?: Maybe<JiraVersionConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraMultipleVersionPickerFieldSelectedVersionsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraMultipleVersionPickerFieldVersionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraMutation = {
    __typename?: 'JiraMutation';
    createApproverListField?: Maybe<JiraCreateApproverListFieldPayload>;
    setApplicationProperties?: Maybe<JiraSetApplicationPropertiesPayload>;
    createAndAssociateWorkflowFromJsmTemplate?: Maybe<JiraServiceManagementCreateAndAssociateWorkflowFromTemplatePayload>;
    addIssuesToFixVersion?: Maybe<JiraAddIssuesToFixVersionPayload>;
    moveIssuesToFixVersion?: Maybe<JiraMoveIssuesToFixVersionPayload>;
    removeIssuesFromFixVersion?: Maybe<JiraRemoveIssuesFromFixVersionPayload>;
    updateVersionWarningConfig?: Maybe<JiraUpdateVersionWarningConfigPayload>;
    updateVersionName?: Maybe<JiraUpdateVersionPayload>;
    updateVersionDescription?: Maybe<JiraUpdateVersionPayload>;
    updateVersionStartDate?: Maybe<JiraUpdateVersionPayload>;
    updateVersionReleaseDate?: Maybe<JiraUpdateVersionPayload>;
    updateVersionReleasedStatus?: Maybe<JiraUpdateVersionPayload>;
    updateVersionArchivedStatus?: Maybe<JiraUpdateVersionPayload>;
    saveVersionIssueTableColumnHiddenState?: Maybe<JiraVersionIssueTableColumnHiddenStatePayload>;
    saveVersionDetailsCollapsedUis?: Maybe<JiraVersionDetailsCollapsedUisPayload>;
    createJiraVersion?: Maybe<JiraUpdateVersionPayload>;
    updateJiraVersion?: Maybe<JiraUpdateVersionPayload>;
    updateJiraVersionDriver?: Maybe<JiraUpdateVersionPayload>;
    replaceIssueSearchViewFieldSets?: Maybe<JiraIssueSearchViewPayload>;
    userPreferences?: Maybe<JiraUserPreferencesMutation>;
    updateReleaseNotesConfiguration?: Maybe<JiraUpdateReleaseNotesConfigurationPayload>;
    createReleaseNoteConfluencePage?: Maybe<JiraCreateReleaseNoteConfluencePagePayload>;
    addRelatedWorkToVersion?: Maybe<JiraAddRelatedWorkToVersionPayload>;
    removeRelatedWorkFromVersion?: Maybe<JiraRemoveRelatedWorkFromVersionPayload>;
    updateVersionRelatedWorkGenericLink?: Maybe<JiraUpdateVersionRelatedWorkGenericLinkPayload>;
    assignRelatedWorkToUser?: Maybe<JiraAssignRelatedWorkPayload>;
    linkIssueToVersionRelatedWork?: Maybe<JiraLinkIssueToVersionRelatedWorkPayload>;
    jiraFilterMutation?: Maybe<JiraFilterMutation>;
    setUserBroadcastMessageDismissed?: Maybe<JiraUserBroadcastMessageActionPayload>;
    setEntityIsFavourite?: Maybe<JiraSetIsFavouritePayload>;
    bulkCreateRequestTypeFromTemplate?: Maybe<JiraServiceManagementCreateRequestTypeFromTemplatePayload>;
    grantGlobalPermission?: Maybe<JiraGlobalPermissionAddGroupGrantPayload>;
    deleteGlobalPermissionGrant?: Maybe<JiraGlobalPermissionDeleteGroupGrantPayload>;
    updateLabelsField?: Maybe<JiraLabelsFieldPayload>;
    updateDateField?: Maybe<JiraDateFieldPayload>;
    updateDateTimeField?: Maybe<JiraDateTimeFieldPayload>;
    updateNumberField?: Maybe<JiraNumberFieldPayload>;
    updateStoryPointEstimateField?: Maybe<JiraStoryPointEstimateFieldPayload>;
    updateSingleSelectField?: Maybe<JiraSingleSelectFieldPayload>;
    updateSingleLineTextField?: Maybe<JiraSingleLineTextFieldPayload>;
    updateTimeTrackingField?: Maybe<JiraTimeTrackingFieldPayload>;
    updatePriorityField?: Maybe<JiraPriorityFieldPayload>;
    updateVotesField?: Maybe<JiraVotesFieldPayload>;
    updateColorField?: Maybe<JiraColorFieldPayload>;
    updateSingleSelectUserPickerField?: Maybe<JiraSingleSelectUserPickerFieldPayload>;
    updateWatchesField?: Maybe<JiraWatchesFieldPayload>;
    updateUrlField?: Maybe<JiraUrlFieldPayload>;
    updateSprintField?: Maybe<JiraSprintFieldPayload>;
    updateCascadingSelectField?: Maybe<JiraCascadingSelectFieldPayload>;
    updateRadioSelectField?: Maybe<JiraRadioSelectFieldPayload>;
    updateComponentsField?: Maybe<JiraComponentsFieldPayload>;
    updateStatusByQuickTransition?: Maybe<JiraStatusFieldPayload>;
    updateMultipleSelectField?: Maybe<JiraMultipleSelectFieldPayload>;
    updateProjectField?: Maybe<JiraProjectFieldPayload>;
    updateTeamField?: Maybe<JiraTeamFieldPayload>;
    addPermissionSchemeGrants?: Maybe<JiraPermissionSchemeAddGrantPayload>;
    removePermissionSchemeGrants?: Maybe<JiraPermissionSchemeRemoveGrantPayload>;
    updateIssueHierarchyConfig?: Maybe<JiraIssueHierarchyConfigurationMutationResult>;
    updateJiraVersionApproverDeclineReason?: Maybe<JiraVersionUpdateApproverDeclineReasonPayload>;
    addJiraVersionApprover?: Maybe<JiraVersionAddApproverPayload>;
    deleteJiraVersionApprover?: Maybe<JiraVersionDeleteApproverPayload>;
    updateJiraVersionApproverDescription?: Maybe<JiraVersionUpdateApproverDescriptionPayload>;
    devOps?: Maybe<JiraDevOpsMutation>;
    createProjectShortcut?: Maybe<JiraProjectShortcutPayload>;
    updateProjectShortcut?: Maybe<JiraProjectShortcutPayload>;
    deleteProjectShortcut?: Maybe<JiraProjectShortcutPayload>;
};
export declare type JiraMutationCreateApproverListFieldArgs = {
    cloudId: Scalars['ID'];
    input: JiraCreateApproverListFieldInput;
};
export declare type JiraMutationSetApplicationPropertiesArgs = {
    cloudId: Scalars['ID'];
    input: Array<JiraSetApplicationPropertyInput>;
};
export declare type JiraMutationCreateAndAssociateWorkflowFromJsmTemplateArgs = {
    input: JiraServiceManagementCreateAndAssociateWorkflowFromTemplateInput;
};
export declare type JiraMutationAddIssuesToFixVersionArgs = {
    input: JiraAddIssuesToFixVersionInput;
};
export declare type JiraMutationMoveIssuesToFixVersionArgs = {
    input: JiraMoveIssuesToFixVersionInput;
};
export declare type JiraMutationRemoveIssuesFromFixVersionArgs = {
    input: JiraRemoveIssuesFromFixVersionInput;
};
export declare type JiraMutationUpdateVersionWarningConfigArgs = {
    input: JiraUpdateVersionWarningConfigInput;
};
export declare type JiraMutationUpdateVersionNameArgs = {
    input: JiraUpdateVersionNameInput;
};
export declare type JiraMutationUpdateVersionDescriptionArgs = {
    input: JiraUpdateVersionDescriptionInput;
};
export declare type JiraMutationUpdateVersionStartDateArgs = {
    input: JiraUpdateVersionStartDateInput;
};
export declare type JiraMutationUpdateVersionReleaseDateArgs = {
    input: JiraUpdateVersionReleaseDateInput;
};
export declare type JiraMutationUpdateVersionReleasedStatusArgs = {
    input: JiraUpdateVersionReleasedStatusInput;
};
export declare type JiraMutationUpdateVersionArchivedStatusArgs = {
    input: JiraUpdateVersionArchivedStatusInput;
};
export declare type JiraMutationSaveVersionIssueTableColumnHiddenStateArgs = {
    input: JiraVersionIssueTableColumnHiddenStateInput;
};
export declare type JiraMutationSaveVersionDetailsCollapsedUisArgs = {
    input: JiraVersionDetailsCollapsedUisInput;
};
export declare type JiraMutationCreateJiraVersionArgs = {
    input: JiraVersionCreateMutationInput;
};
export declare type JiraMutationUpdateJiraVersionArgs = {
    input: JiraVersionUpdateMutationInput;
};
export declare type JiraMutationUpdateJiraVersionDriverArgs = {
    input: JiraUpdateVersionDriverInput;
};
export declare type JiraMutationReplaceIssueSearchViewFieldSetsArgs = {
    id: Scalars['ID'];
    input: JiraReplaceIssueSearchViewFieldSetsInput;
};
export declare type JiraMutationUserPreferencesArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraMutationUpdateReleaseNotesConfigurationArgs = {
    input: JiraUpdateReleaseNotesConfigurationInput;
};
export declare type JiraMutationCreateReleaseNoteConfluencePageArgs = {
    input: JiraCreateReleaseNoteConfluencePageInput;
};
export declare type JiraMutationAddRelatedWorkToVersionArgs = {
    input: JiraAddRelatedWorkToVersionInput;
};
export declare type JiraMutationRemoveRelatedWorkFromVersionArgs = {
    input: JiraRemoveRelatedWorkFromVersionInput;
};
export declare type JiraMutationUpdateVersionRelatedWorkGenericLinkArgs = {
    input: JiraUpdateVersionRelatedWorkGenericLinkInput;
};
export declare type JiraMutationAssignRelatedWorkToUserArgs = {
    input: JiraAssignRelatedWorkInput;
};
export declare type JiraMutationLinkIssueToVersionRelatedWorkArgs = {
    input: JiraLinkIssueToVersionRelatedWorkInput;
};
export declare type JiraMutationSetUserBroadcastMessageDismissedArgs = {
    cloudId: Scalars['ID'];
    id: Scalars['ID'];
};
export declare type JiraMutationSetEntityIsFavouriteArgs = {
    input: JiraSetIsFavouriteInput;
};
export declare type JiraMutationBulkCreateRequestTypeFromTemplateArgs = {
    input: JiraServiceManagementBulkCreateRequestTypeFromTemplateInput;
};
export declare type JiraMutationGrantGlobalPermissionArgs = {
    cloudId: Scalars['ID'];
    input: JiraGlobalPermissionAddGroupGrantInput;
};
export declare type JiraMutationDeleteGlobalPermissionGrantArgs = {
    cloudId: Scalars['ID'];
    input: JiraGlobalPermissionDeleteGroupGrantInput;
};
export declare type JiraMutationUpdateLabelsFieldArgs = {
    input: JiraUpdateLabelsFieldInput;
};
export declare type JiraMutationUpdateDateFieldArgs = {
    input: JiraUpdateDateFieldInput;
};
export declare type JiraMutationUpdateDateTimeFieldArgs = {
    input: JiraUpdateDateTimeFieldInput;
};
export declare type JiraMutationUpdateNumberFieldArgs = {
    input: JiraUpdateNumberFieldInput;
};
export declare type JiraMutationUpdateStoryPointEstimateFieldArgs = {
    input: JiraUpdateStoryPointEstimateFieldInput;
};
export declare type JiraMutationUpdateSingleSelectFieldArgs = {
    input: JiraUpdateSingleSelectFieldInput;
};
export declare type JiraMutationUpdateSingleLineTextFieldArgs = {
    input: JiraUpdateSingleLineTextFieldInput;
};
export declare type JiraMutationUpdateTimeTrackingFieldArgs = {
    input: JiraUpdateTimeTrackingFieldInput;
};
export declare type JiraMutationUpdatePriorityFieldArgs = {
    input: JiraUpdatePriorityFieldInput;
};
export declare type JiraMutationUpdateVotesFieldArgs = {
    input: JiraUpdateVotesFieldInput;
};
export declare type JiraMutationUpdateColorFieldArgs = {
    input: JiraUpdateColorFieldInput;
};
export declare type JiraMutationUpdateSingleSelectUserPickerFieldArgs = {
    input: JiraUpdateSingleSelectUserPickerFieldInput;
};
export declare type JiraMutationUpdateWatchesFieldArgs = {
    input: JiraUpdateWatchesFieldInput;
};
export declare type JiraMutationUpdateUrlFieldArgs = {
    input: JiraUpdateUrlFieldInput;
};
export declare type JiraMutationUpdateSprintFieldArgs = {
    input: JiraUpdateSprintFieldInput;
};
export declare type JiraMutationUpdateCascadingSelectFieldArgs = {
    input: JiraUpdateCascadingSelectFieldInput;
};
export declare type JiraMutationUpdateRadioSelectFieldArgs = {
    input: JiraUpdateRadioSelectFieldInput;
};
export declare type JiraMutationUpdateComponentsFieldArgs = {
    input: JiraUpdateComponentsFieldInput;
};
export declare type JiraMutationUpdateStatusByQuickTransitionArgs = {
    input: JiraUpdateStatusFieldInput;
};
export declare type JiraMutationUpdateMultipleSelectFieldArgs = {
    input: JiraUpdateMultipleSelectFieldInput;
};
export declare type JiraMutationUpdateProjectFieldArgs = {
    input: JiraUpdateProjectFieldInput;
};
export declare type JiraMutationUpdateTeamFieldArgs = {
    input: JiraUpdateTeamFieldInput;
};
export declare type JiraMutationAddPermissionSchemeGrantsArgs = {
    input: JiraPermissionSchemeAddGrantInput;
};
export declare type JiraMutationRemovePermissionSchemeGrantsArgs = {
    input: JiraPermissionSchemeRemoveGrantInput;
};
export declare type JiraMutationUpdateIssueHierarchyConfigArgs = {
    cloudId: Scalars['ID'];
    input: JiraIssueHierarchyConfigurationMutationInput;
};
export declare type JiraMutationUpdateJiraVersionApproverDeclineReasonArgs = {
    input: JiraVersionUpdateApproverDeclineReasonInput;
};
export declare type JiraMutationAddJiraVersionApproverArgs = {
    input: JiraVersionAddApproverInput;
};
export declare type JiraMutationDeleteJiraVersionApproverArgs = {
    id: Scalars['ID'];
};
export declare type JiraMutationUpdateJiraVersionApproverDescriptionArgs = {
    input: JiraVersionUpdateApproverDescriptionInput;
};
export declare type JiraMutationCreateProjectShortcutArgs = {
    input: JiraCreateShortcutInput;
};
export declare type JiraMutationUpdateProjectShortcutArgs = {
    input: JiraUpdateShortcutInput;
};
export declare type JiraMutationDeleteProjectShortcutArgs = {
    input: JiraDeleteShortcutInput;
};
export declare type JiraNaturalLanguageSearchSpotlightTourEnabledMutationPayload = Payload & {
    __typename?: 'JiraNaturalLanguageSearchSpotlightTourEnabledMutationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraNaturalLanguageToJqlInput = {
    naturalLanguageInput: Scalars['String'];
    iteration?: Maybe<JiraIteration>;
};
export declare type JiraNumberField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraNumberField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    number?: Maybe<Scalars['Float']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    isStoryPointField?: Maybe<Scalars['Boolean']>;
};
export declare type JiraNumberFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    number?: Maybe<Scalars['Float']>;
};
export declare type JiraNumberFieldPayload = Payload & {
    __typename?: 'JiraNumberFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraNumberField>;
};
export declare type JiraOAuthAppsApp = {
    __typename?: 'JiraOAuthAppsApp';
    id: Scalars['ID'];
    name: Scalars['String'];
    homeUrl: Scalars['String'];
    logoUrl: Scalars['String'];
    clientId: Scalars['String'];
    secret: Scalars['String'];
    buildsModule?: Maybe<JiraOAuthAppsBuildsModule>;
    featureFlagsModule?: Maybe<JiraOAuthAppsFeatureFlagsModule>;
    deploymentsModule?: Maybe<JiraOAuthAppsDeploymentsModule>;
    devInfoModule?: Maybe<JiraOAuthAppsDevInfoModule>;
    remoteLinksModule?: Maybe<JiraOAuthAppsRemoteLinksModule>;
};
export declare type JiraOAuthAppsAppInput = {
    name: Scalars['String'];
    homeUrl: Scalars['String'];
    logoUrl: Scalars['String'];
    buildsModule?: Maybe<JiraOAuthAppsBuildsModuleInput>;
    featureFlagsModule?: Maybe<JiraOAuthAppsFeatureFlagsModuleInput>;
    deploymentsModule?: Maybe<JiraOAuthAppsDeploymentsModuleInput>;
    devInfoModule?: Maybe<JiraOAuthAppsDevInfoModuleInput>;
    remoteLinksModule?: Maybe<JiraOAuthAppsRemoteLinksModuleInput>;
};
export declare type JiraOAuthAppsAppUpdateInput = {
    buildsModule?: Maybe<JiraOAuthAppsBuildsModuleInput>;
    featureFlagsModule?: Maybe<JiraOAuthAppsFeatureFlagsModuleInput>;
    deploymentsModule?: Maybe<JiraOAuthAppsDeploymentsModuleInput>;
    devInfoModule?: Maybe<JiraOAuthAppsDevInfoModuleInput>;
    remoteLinksModule?: Maybe<JiraOAuthAppsRemoteLinksModuleInput>;
};
export declare type JiraOAuthAppsApps = {
    __typename?: 'JiraOAuthAppsApps';
    apps?: Maybe<Array<Maybe<JiraOAuthAppsApp>>>;
};
export declare type JiraOAuthAppsAppsAppsArgs = {
    cloudId: Scalars['String'];
};
export declare type JiraOAuthAppsBuildsModule = {
    __typename?: 'JiraOAuthAppsBuildsModule';
    isEnabled: Scalars['Boolean'];
};
export declare type JiraOAuthAppsBuildsModuleInput = {
    isEnabled: Scalars['Boolean'];
};
export declare type JiraOAuthAppsCreateAppInput = {
    app: JiraOAuthAppsAppInput;
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type JiraOAuthAppsDeleteAppInput = {
    clientId: Scalars['ID'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type JiraOAuthAppsDeploymentsModule = {
    __typename?: 'JiraOAuthAppsDeploymentsModule';
    isEnabled: Scalars['Boolean'];
    actions?: Maybe<JiraOAuthAppsDeploymentsModuleActions>;
};
export declare type JiraOAuthAppsDeploymentsModuleActions = {
    __typename?: 'JiraOAuthAppsDeploymentsModuleActions';
    listDeployments?: Maybe<JiraOAuthAppsUrlTemplate>;
};
export declare type JiraOAuthAppsDeploymentsModuleActionsInput = {
    listDeployments?: Maybe<JiraOAuthAppsUrlTemplateInput>;
};
export declare type JiraOAuthAppsDeploymentsModuleInput = {
    isEnabled: Scalars['Boolean'];
    actions?: Maybe<JiraOAuthAppsDeploymentsModuleActionsInput>;
};
export declare type JiraOAuthAppsDevInfoModule = {
    __typename?: 'JiraOAuthAppsDevInfoModule';
    isEnabled: Scalars['Boolean'];
    actions?: Maybe<JiraOAuthAppsDevInfoModuleActions>;
};
export declare type JiraOAuthAppsDevInfoModuleActions = {
    __typename?: 'JiraOAuthAppsDevInfoModuleActions';
    createBranch?: Maybe<JiraOAuthAppsUrlTemplate>;
};
export declare type JiraOAuthAppsDevInfoModuleActionsInput = {
    createBranch?: Maybe<JiraOAuthAppsUrlTemplateInput>;
};
export declare type JiraOAuthAppsDevInfoModuleInput = {
    isEnabled: Scalars['Boolean'];
    actions?: Maybe<JiraOAuthAppsDevInfoModuleActionsInput>;
};
export declare type JiraOAuthAppsFeatureFlagsModule = {
    __typename?: 'JiraOAuthAppsFeatureFlagsModule';
    isEnabled: Scalars['Boolean'];
    actions?: Maybe<JiraOAuthAppsFeatureFlagsModuleActions>;
};
export declare type JiraOAuthAppsFeatureFlagsModuleActions = {
    __typename?: 'JiraOAuthAppsFeatureFlagsModuleActions';
    createFlag?: Maybe<JiraOAuthAppsUrlTemplate>;
    linkFlag?: Maybe<JiraOAuthAppsUrlTemplate>;
    listFlag?: Maybe<JiraOAuthAppsUrlTemplate>;
};
export declare type JiraOAuthAppsFeatureFlagsModuleActionsInput = {
    createFlag?: Maybe<JiraOAuthAppsUrlTemplateInput>;
    linkFlag?: Maybe<JiraOAuthAppsUrlTemplateInput>;
    listFlag?: Maybe<JiraOAuthAppsUrlTemplateInput>;
};
export declare type JiraOAuthAppsFeatureFlagsModuleInput = {
    isEnabled: Scalars['Boolean'];
    actions?: Maybe<JiraOAuthAppsFeatureFlagsModuleActionsInput>;
};
export declare type JiraOAuthAppsMutation = {
    __typename?: 'JiraOAuthAppsMutation';
    createJiraOAuthApp?: Maybe<JiraOAuthAppsPayload>;
    updateJiraOAuthApp?: Maybe<JiraOAuthAppsPayload>;
    deleteJiraOAuthApp?: Maybe<JiraOAuthAppsPayload>;
};
export declare type JiraOAuthAppsMutationCreateJiraOAuthAppArgs = {
    cloudId: Scalars['String'];
    input: JiraOAuthAppsCreateAppInput;
};
export declare type JiraOAuthAppsMutationUpdateJiraOAuthAppArgs = {
    cloudId: Scalars['String'];
    input: JiraOAuthAppsUpdateAppInput;
};
export declare type JiraOAuthAppsMutationDeleteJiraOAuthAppArgs = {
    cloudId: Scalars['String'];
    input: JiraOAuthAppsDeleteAppInput;
};
export declare type JiraOAuthAppsPayload = Payload & {
    __typename?: 'JiraOAuthAppsPayload';
    clientMutationId?: Maybe<Scalars['ID']>;
    app?: Maybe<JiraOAuthAppsApp>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraOAuthAppsRemoteLinksModule = {
    __typename?: 'JiraOAuthAppsRemoteLinksModule';
    isEnabled: Scalars['Boolean'];
    actions?: Maybe<Array<JiraOAuthAppsRemoteLinksModuleAction>>;
};
export declare type JiraOAuthAppsRemoteLinksModuleAction = {
    __typename?: 'JiraOAuthAppsRemoteLinksModuleAction';
    id: Scalars['String'];
    label: JiraOAuthAppsRemoteLinksModuleActionLabel;
    urlTemplate: Scalars['String'];
};
export declare type JiraOAuthAppsRemoteLinksModuleActionInput = {
    id: Scalars['String'];
    label: JiraOAuthAppsRemoteLinksModuleActionLabelInput;
    urlTemplate: Scalars['String'];
};
export declare type JiraOAuthAppsRemoteLinksModuleActionLabel = {
    __typename?: 'JiraOAuthAppsRemoteLinksModuleActionLabel';
    value: Scalars['String'];
};
export declare type JiraOAuthAppsRemoteLinksModuleActionLabelInput = {
    value: Scalars['String'];
};
export declare type JiraOAuthAppsRemoteLinksModuleInput = {
    isEnabled: Scalars['Boolean'];
    actions?: Maybe<Array<JiraOAuthAppsRemoteLinksModuleActionInput>>;
};
export declare type JiraOAuthAppsUpdateAppInput = {
    clientId: Scalars['ID'];
    app: JiraOAuthAppsAppUpdateInput;
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type JiraOAuthAppsUrlTemplate = {
    __typename?: 'JiraOAuthAppsUrlTemplate';
    urlTemplate: Scalars['String'];
};
export declare type JiraOAuthAppsUrlTemplateInput = {
    urlTemplate: Scalars['String'];
};
export declare type JiraOAuthDevOpsProvider = JiraDevOpsProvider & {
    __typename?: 'JiraOAuthDevOpsProvider';
    displayName?: Maybe<Scalars['String']>;
    webUrl?: Maybe<Scalars['URL']>;
    capabilities?: Maybe<Array<Maybe<JiraDevOpsCapability>>>;
    iconUrl?: Maybe<Scalars['URL']>;
    oauthAppId?: Maybe<Scalars['ID']>;
    marketplaceAppKey?: Maybe<Scalars['String']>;
    marketplaceApp?: Maybe<MarketplaceApp>;
};
export declare type JiraOnIssueCreatedForUserResponseType = JiraProjectConnection | JiraIssueAndProject;
export declare type JiraOpsgenieTeam = Node & {
    __typename?: 'JiraOpsgenieTeam';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export declare type JiraOption = Node & {
    __typename?: 'JiraOption';
    id: Scalars['ID'];
    optionId: Scalars['String'];
    value?: Maybe<Scalars['String']>;
    isDisabled?: Maybe<Scalars['Boolean']>;
};
export declare type JiraOptionConnection = {
    __typename?: 'JiraOptionConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraOptionEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraOptionEdge = {
    __typename?: 'JiraOptionEdge';
    node?: Maybe<JiraOption>;
    cursor: Scalars['String'];
};
export declare type JiraOptoutDevOpsIssuePanelNotConnectedInput = {
    cloudId: Scalars['ID'];
};
export declare type JiraOptoutDevOpsIssuePanelNotConnectedPayload = Payload & {
    __typename?: 'JiraOptoutDevOpsIssuePanelNotConnectedPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraOrderDirection = {
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraOriginalTimeEstimateField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraOriginalTimeEstimateField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    originalEstimate?: Maybe<JiraEstimate>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraPageCursor = {
    __typename?: 'JiraPageCursor';
    cursor?: Maybe<Scalars['String']>;
    pageNumber?: Maybe<Scalars['Int']>;
    isCurrent?: Maybe<Scalars['Boolean']>;
};
export declare type JiraPageCursors = {
    __typename?: 'JiraPageCursors';
    first?: Maybe<JiraPageCursor>;
    around?: Maybe<Array<Maybe<JiraPageCursor>>>;
    last?: Maybe<JiraPageCursor>;
    previous?: Maybe<JiraPageCursor>;
};
export declare type JiraParentIssueField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraParentIssueField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    parentIssue?: Maybe<JiraIssue>;
    parentVisibility?: Maybe<JiraParentVisibility>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraParentOption = Node & {
    __typename?: 'JiraParentOption';
    id: Scalars['ID'];
    value?: Maybe<Scalars['String']>;
    isDisabled?: Maybe<Scalars['Boolean']>;
    childOptions?: Maybe<JiraOptionConnection>;
};
export declare type JiraParentOptionChildOptionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    searchBy?: Maybe<Scalars['String']>;
};
export declare type JiraParentOptionConnection = {
    __typename?: 'JiraParentOptionConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraParentOptionEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraParentOptionEdge = {
    __typename?: 'JiraParentOptionEdge';
    node?: Maybe<JiraParentOption>;
    cursor: Scalars['String'];
};
export declare type JiraParentVisibility = {
    __typename?: 'JiraParentVisibility';
    hasEpicLinkFieldDependency?: Maybe<Scalars['Boolean']>;
    canUseParentLinkField?: Maybe<Scalars['Boolean']>;
};
export declare type JiraPeopleField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraPeopleField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedUsers?: Maybe<Array<Maybe<User>>>;
    selectedUsersConnection?: Maybe<JiraUserConnection>;
    isMulti?: Maybe<Scalars['Boolean']>;
    users?: Maybe<JiraUserConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraPeopleFieldSelectedUsersConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraPeopleFieldUsersArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraPermission = {
    __typename?: 'JiraPermission';
    hasPermission?: Maybe<Scalars['Boolean']>;
};
export declare type JiraPermissionConfiguration = {
    __typename?: 'JiraPermissionConfiguration';
    tag: JiraPermissionTagEnum;
    message?: Maybe<JiraPermissionMessageExtension>;
    documentation?: Maybe<JiraPermissionDocumentationExtension>;
};
export declare type JiraPermissionDocumentationExtension = {
    __typename?: 'JiraPermissionDocumentationExtension';
    text: Scalars['String'];
    url: Scalars['String'];
};
export declare type JiraPermissionGrant = {
    __typename?: 'JiraPermissionGrant';
    grantType: JiraGrantTypeKey;
    grantValue: JiraPermissionGrantValue;
};
export declare type JiraPermissionGrantConnection = {
    __typename?: 'JiraPermissionGrantConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraPermissionGrantEdge>>>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraPermissionGrantEdge = {
    __typename?: 'JiraPermissionGrantEdge';
    node: JiraPermissionGrant;
    cursor: Scalars['String'];
};
export declare type JiraPermissionGrantHolder = {
    __typename?: 'JiraPermissionGrantHolder';
    permission: JiraProjectPermission;
    configuration?: Maybe<JiraPermissionConfiguration>;
    grants?: Maybe<Array<JiraPermissionGrants>>;
};
export declare type JiraPermissionGrantValue = {
    __typename?: 'JiraPermissionGrantValue';
    id: Scalars['ID'];
    value?: Maybe<JiraGrantTypeValue>;
};
export declare type JiraPermissionGrantValueConnection = {
    __typename?: 'JiraPermissionGrantValueConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraPermissionGrantValueEdge>>>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraPermissionGrantValueEdge = {
    __typename?: 'JiraPermissionGrantValueEdge';
    node: JiraPermissionGrantValue;
    cursor: Scalars['String'];
};
export declare type JiraPermissionGrants = {
    __typename?: 'JiraPermissionGrants';
    grantType: JiraGrantTypeKey;
    grantValues?: Maybe<Array<JiraPermissionGrantValue>>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraPermissionLevel = {
    __typename?: 'JiraPermissionLevel';
    group?: Maybe<JiraGroup>;
    role?: Maybe<JiraRole>;
};
export declare type JiraPermissionMessageExtension = {
    __typename?: 'JiraPermissionMessageExtension';
    type: JiraPermissionMessageTypeEnum;
    text: Scalars['String'];
};
export declare enum JiraPermissionMessageTypeEnum {
    Information = "INFORMATION",
    Warning = "WARNING"
}
export declare type JiraPermissionScheme = Node & {
    __typename?: 'JiraPermissionScheme';
    id: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
};
export declare type JiraPermissionSchemeAddGrantInput = {
    schemeId: Scalars['ID'];
    grants: Array<JiraPermissionSchemeGrantInput>;
};
export declare type JiraPermissionSchemeAddGrantPayload = Payload & {
    __typename?: 'JiraPermissionSchemeAddGrantPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraPermissionSchemeConfiguration = {
    __typename?: 'JiraPermissionSchemeConfiguration';
    isEditable: Scalars['Boolean'];
};
export declare type JiraPermissionSchemeGrantGroup = {
    __typename?: 'JiraPermissionSchemeGrantGroup';
    category: JiraProjectPermissionCategory;
    grantHolders?: Maybe<Array<Maybe<JiraPermissionGrantHolder>>>;
};
export declare type JiraPermissionSchemeGrantInput = {
    permissionKey: Scalars['String'];
    grantType: JiraGrantTypeKeyEnum;
    grantValue?: Maybe<Scalars['ID']>;
};
export declare type JiraPermissionSchemeRemoveGrantInput = {
    schemeId: Scalars['ID'];
    grantIds: Array<Scalars['Long']>;
};
export declare type JiraPermissionSchemeRemoveGrantPayload = Payload & {
    __typename?: 'JiraPermissionSchemeRemoveGrantPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraPermissionSchemeView = {
    __typename?: 'JiraPermissionSchemeView';
    scheme: JiraPermissionScheme;
    configuration: JiraPermissionSchemeConfiguration;
    grantGroups?: Maybe<Array<JiraPermissionSchemeGrantGroup>>;
};
export declare type JiraPermissionSchemeViewResult = JiraPermissionSchemeView | QueryError;
export declare enum JiraPermissionTagEnum {
    Deprecated = "DEPRECATED",
    New = "NEW"
}
export declare enum JiraPermissionType {
    BrowseProjects = "BROWSE_PROJECTS",
    BulkChange = "BULK_CHANGE"
}
export declare type JiraPlatformAttachment = JiraAttachment & Node & {
    __typename?: 'JiraPlatformAttachment';
    id: Scalars['ID'];
    attachmentId: Scalars['String'];
    author?: Maybe<User>;
    created: Scalars['DateTime'];
    mediaApiFileId?: Maybe<Scalars['String']>;
    mimeType?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    fileSize?: Maybe<Scalars['Long']>;
    parentName?: Maybe<Scalars['String']>;
    parentId?: Maybe<Scalars['String']>;
    hasRestrictedParent?: Maybe<Scalars['Boolean']>;
};
export declare type JiraPlatformComment = JiraComment & Node & {
    __typename?: 'JiraPlatformComment';
    id: Scalars['ID'];
    commentId: Scalars['ID'];
    issue?: Maybe<JiraIssue>;
    webUrl?: Maybe<Scalars['URL']>;
    author?: Maybe<User>;
    updateAuthor?: Maybe<User>;
    richText?: Maybe<JiraRichText>;
    created: Scalars['DateTime'];
    updated?: Maybe<Scalars['DateTime']>;
    permissionLevel?: Maybe<JiraPermissionLevel>;
};
export declare type JiraPriority = Node & {
    __typename?: 'JiraPriority';
    id: Scalars['ID'];
    priorityId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['URL']>;
    color?: Maybe<Scalars['String']>;
};
export declare type JiraPriorityConnection = {
    __typename?: 'JiraPriorityConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraPriorityEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraPriorityEdge = {
    __typename?: 'JiraPriorityEdge';
    node?: Maybe<JiraPriority>;
    cursor: Scalars['String'];
};
export declare type JiraPriorityField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraPriorityField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    priority?: Maybe<JiraPriority>;
    priorities?: Maybe<JiraPriorityConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraPriorityFieldPrioritiesArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraPriorityFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraPriorityFieldPayload = Payload & {
    __typename?: 'JiraPriorityFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraPriorityField>;
};
export declare type JiraProformaForms = {
    __typename?: 'JiraProformaForms';
    hasProjectForms?: Maybe<Scalars['Boolean']>;
    hasIssueForms?: Maybe<Scalars['Boolean']>;
    isHarmonisationEnabled?: Maybe<Scalars['Boolean']>;
};
export declare type JiraProformaFormsField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraProformaFormsField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    proformaForms?: Maybe<JiraProformaForms>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraProject = Node & {
    __typename?: 'JiraProject';
    id: Scalars['ID'];
    key: Scalars['String'];
    projectId?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    cloudId: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
    leadId?: Maybe<Scalars['ID']>;
    category?: Maybe<JiraProjectCategory>;
    avatar?: Maybe<JiraAvatar>;
    projectUrl?: Maybe<Scalars['String']>;
    projectType?: Maybe<JiraProjectType>;
    projectStyle?: Maybe<JiraProjectStyle>;
    status?: Maybe<JiraProjectStatus>;
    similarIssues?: Maybe<JiraSimilarIssues>;
    canSetIssueRestriction?: Maybe<Scalars['Boolean']>;
    navigationMetadata?: Maybe<JiraProjectNavigationMetadata>;
    action?: Maybe<JiraProjectAction>;
    virtualAgentConfiguration?: Maybe<VirtualAgentConfigurationResult>;
    intentTemplates?: Maybe<VirtualAgentIntentTemplatesConnection>;
    isFavourite?: Maybe<Scalars['Boolean']>;
    favouriteValue?: Maybe<JiraFavouriteValue>;
    lead?: Maybe<User>;
    issueTypes?: Maybe<JiraIssueTypeConnection>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
    lastUpdatedFormatted?: Maybe<Scalars['String']>;
    devOpsToolRelationships?: Maybe<JiraProjectAndDevOpsToolRelationshipConnection>;
    devOpsEntityRelationships?: Maybe<AriGraphRelationshipConnection>;
    linkedSecurityContainers?: Maybe<AriGraphRelationshipConnection>;
    linkedSecurityVulnerabilities?: Maybe<AriGraphRelationshipConnection>;
    linkedDocumentationContainers?: Maybe<AriGraphRelationshipConnection>;
    repositoryRelationships?: Maybe<JiraProjectAndRepositoryRelationshipConnection>;
    devOpsServiceRelationships?: Maybe<DevOpsServiceAndJiraProjectRelationshipConnection>;
    opsgenieTeamRelationships?: Maybe<JiraProjectAndOpsgenieTeamRelationshipConnection>;
    servicesAvailableToLinkWith?: Maybe<DevOpsServiceConnection>;
    opsgenieTeamsAvailableToLinkWith?: Maybe<OpsgenieTeamConnection>;
    suggestedDriversForJiraVersion?: Maybe<JiraVersionDriverConnection>;
    suggestedApproversForJiraVersion?: Maybe<JiraVersionSuggestedApproverConnection>;
    selectedDeploymentAppsProperty?: Maybe<Array<JiraDeploymentApp>>;
    softwareBoards?: Maybe<BoardScopeConnection>;
    confluenceSpaceRelationships?: Maybe<JiraProjectAndConfluenceSpaceRelationshipConnection>;
};
export declare type JiraProjectActionArgs = {
    type: JiraProjectActionType;
};
export declare type JiraProjectIssueTypesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraProjectLastUpdatedFormattedArgs = {
    format?: Maybe<JiraProjectDateTimeFormat>;
};
export declare type JiraProjectDevOpsToolRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectAndDevOpsToolRelationshipFilter>;
};
export declare type JiraProjectDevOpsEntityRelationshipsArgs = {
    type?: Maybe<Scalars['String']>;
    filter?: Maybe<AriGraphRelationshipsFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    sort?: Maybe<AriGraphRelationshipsSort>;
};
export declare type JiraProjectLinkedSecurityContainersArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
};
export declare type JiraProjectLinkedSecurityVulnerabilitiesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
};
export declare type JiraProjectLinkedDocumentationContainersArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
};
export declare type JiraProjectRepositoryRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectAndRepositoryRelationshipFilter>;
    sort?: Maybe<JiraProjectAndRepositoryRelationshipSort>;
};
export declare type JiraProjectDevOpsServiceRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServiceAndJiraProjectRelationshipFilter>;
};
export declare type JiraProjectOpsgenieTeamRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type JiraProjectServicesAvailableToLinkWithArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServicesFilterInput>;
};
export declare type JiraProjectOpsgenieTeamsAvailableToLinkWithArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type JiraProjectSuggestedDriversForJiraVersionArgs = {
    searchText?: Maybe<Scalars['String']>;
};
export declare type JiraProjectSuggestedApproversForJiraVersionArgs = {
    searchText?: Maybe<Scalars['String']>;
    excludedAccountIds?: Maybe<Array<Scalars['String']>>;
};
export declare type JiraProjectConfluenceSpaceRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type JiraProjectAction = {
    __typename?: 'JiraProjectAction';
    canPerform: Scalars['Boolean'];
    type: JiraProjectActionType;
};
export declare enum JiraProjectActionType {
    EditProjectConfig = "EDIT_PROJECT_CONFIG",
    ViewIssues = "VIEW_ISSUES",
    CreateIssues = "CREATE_ISSUES",
    DeleteIssues = "DELETE_ISSUES",
    LinkIssues = "LINK_ISSUES",
    EditIssues = "EDIT_ISSUES",
    ScheduleIssues = "SCHEDULE_ISSUES"
}
export declare type JiraProjectAndConfluenceSpaceDeleteRelationshipForJiraProjectInput = {
    id: Scalars['ID'];
};
export declare type JiraProjectAndConfluenceSpaceDeleteRelationshipForJiraProjectPayload = {
    __typename?: 'JiraProjectAndConfluenceSpaceDeleteRelationshipForJiraProjectPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraProjectAndConfluenceSpaceRelationship = {
    __typename?: 'JiraProjectAndConfluenceSpaceRelationship';
    jiraProject?: Maybe<JiraProject>;
    confluenceSpace?: Maybe<ConfluenceSpace>;
};
export declare type JiraProjectAndConfluenceSpaceRelationshipConnection = {
    __typename?: 'JiraProjectAndConfluenceSpaceRelationshipConnection';
    edges?: Maybe<Array<Maybe<JiraProjectAndConfluenceSpaceRelationshipEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraProjectAndConfluenceSpaceRelationship>>>;
    pageInfo: PageInfo;
};
export declare type JiraProjectAndConfluenceSpaceRelationshipEdge = {
    __typename?: 'JiraProjectAndConfluenceSpaceRelationshipEdge';
    cursor: Scalars['String'];
    node?: Maybe<JiraProjectAndConfluenceSpaceRelationship>;
};
export declare type JiraProjectAndDevOpsToolRelationship = Node & {
    __typename?: 'JiraProjectAndDevOpsToolRelationship';
    id: Scalars['ID'];
    jiraProject?: Maybe<JiraProject>;
    devOpsTool?: Maybe<DevOpsTool>;
    description?: Maybe<Scalars['String']>;
    revision: Scalars['ID'];
    createdBy: Scalars['String'];
    createdAt: Scalars['DateTime'];
    lastUpdatedBy?: Maybe<Scalars['String']>;
    lastUpdatedAt?: Maybe<Scalars['DateTime']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type JiraProjectAndDevOpsToolRelationshipPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type JiraProjectAndDevOpsToolRelationshipConnection = {
    __typename?: 'JiraProjectAndDevOpsToolRelationshipConnection';
    edges?: Maybe<Array<Maybe<JiraProjectAndDevOpsToolRelationshipEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraProjectAndDevOpsToolRelationship>>>;
    pageInfo: PageInfo;
};
export declare type JiraProjectAndDevOpsToolRelationshipCreateInput = {
    jiraProjectId: Scalars['ID'];
    devOpsToolId: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsContainerRelationshipEntityPropertyInput>>;
};
export declare type JiraProjectAndDevOpsToolRelationshipCreatePayload = Payload & {
    __typename?: 'JiraProjectAndDevOpsToolRelationshipCreatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jiraProjectAndDevOpsToolRelationship?: Maybe<JiraProjectAndDevOpsToolRelationship>;
};
export declare type JiraProjectAndDevOpsToolRelationshipDeleteForJiraProjectInput = {
    id: Scalars['ID'];
};
export declare type JiraProjectAndDevOpsToolRelationshipDeleteForJiraProjectPayload = {
    __typename?: 'JiraProjectAndDevOpsToolRelationshipDeleteForJiraProjectPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    numberDeleted?: Maybe<Scalars['Int']>;
};
export declare type JiraProjectAndDevOpsToolRelationshipDeleteInput = {
    id: Scalars['ID'];
};
export declare type JiraProjectAndDevOpsToolRelationshipDeletePayload = {
    __typename?: 'JiraProjectAndDevOpsToolRelationshipDeletePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraProjectAndDevOpsToolRelationshipEdge = {
    __typename?: 'JiraProjectAndDevOpsToolRelationshipEdge';
    node?: Maybe<JiraProjectAndDevOpsToolRelationship>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type JiraProjectAndDevOpsToolRelationshipFilter = {
    hasPropertyEqualTo?: Maybe<DevOpsContainerRelationshipEntityPropertyInput>;
};
export declare type JiraProjectAndOpsgenieTeamRelationship = Node & {
    __typename?: 'JiraProjectAndOpsgenieTeamRelationship';
    id: Scalars['ID'];
    revision: Scalars['ID'];
    jiraProject?: Maybe<JiraProject>;
    jiraProjectType?: Maybe<DevOpsJiraProjectType>;
    opsgenieTeam?: Maybe<OpsgenieTeam>;
    description?: Maybe<Scalars['String']>;
    createdBy: Scalars['String'];
    createdAt: Scalars['DateTime'];
    lastUpdatedBy?: Maybe<Scalars['String']>;
    lastUpdatedAt?: Maybe<Scalars['DateTime']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type JiraProjectAndOpsgenieTeamRelationshipPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type JiraProjectAndOpsgenieTeamRelationshipConnection = {
    __typename?: 'JiraProjectAndOpsgenieTeamRelationshipConnection';
    edges?: Maybe<Array<Maybe<JiraProjectAndOpsgenieTeamRelationshipEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraProjectAndOpsgenieTeamRelationship>>>;
    pageInfo: PageInfo;
};
export declare type JiraProjectAndOpsgenieTeamRelationshipEdge = {
    __typename?: 'JiraProjectAndOpsgenieTeamRelationshipEdge';
    cursor: Scalars['String'];
    node?: Maybe<JiraProjectAndOpsgenieTeamRelationship>;
};
export declare type JiraProjectAndRepositoryRelationship = Node & {
    __typename?: 'JiraProjectAndRepositoryRelationship';
    id: Scalars['ID'];
    revision: Scalars['ID'];
    jiraProject?: Maybe<JiraProject>;
    bitbucketRepository?: Maybe<BitbucketRepository>;
    thirdPartyRepository?: Maybe<DevOpsThirdPartyRepository>;
    description?: Maybe<Scalars['String']>;
    certainty: DevOpsRelationshipCertainty;
    createdBy: Scalars['String'];
    createdAt: Scalars['DateTime'];
    lastUpdatedBy?: Maybe<Scalars['String']>;
    lastUpdatedAt?: Maybe<Scalars['DateTime']>;
    lastInferredBy?: Maybe<Scalars['String']>;
    lastInferredAt?: Maybe<Scalars['DateTime']>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type JiraProjectAndRepositoryRelationshipPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type JiraProjectAndRepositoryRelationshipConnection = {
    __typename?: 'JiraProjectAndRepositoryRelationshipConnection';
    edges?: Maybe<Array<Maybe<JiraProjectAndRepositoryRelationshipEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraProjectAndRepositoryRelationship>>>;
    pageInfo: PageInfo;
};
export declare type JiraProjectAndRepositoryRelationshipEdge = {
    __typename?: 'JiraProjectAndRepositoryRelationshipEdge';
    cursor: Scalars['String'];
    node?: Maybe<JiraProjectAndRepositoryRelationship>;
};
export declare type JiraProjectAndRepositoryRelationshipFilter = {
    certainty?: Maybe<DevOpsRelationshipCertaintyFilter>;
    hostingProvider?: Maybe<DevOpsRepositoryHostingProviderFilter>;
    withAllPropertyKeys?: Maybe<Array<Scalars['String']>>;
};
export declare type JiraProjectAndRepositoryRelationshipSort = {
    by: JiraProjectAndRepositoryRelationshipSortBy;
    order?: SortDirection;
};
export declare enum JiraProjectAndRepositoryRelationshipSortBy {
    LastInferredAt = "LAST_INFERRED_AT"
}
export declare type JiraProjectCategory = Node & {
    __typename?: 'JiraProjectCategory';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type JiraProjectCategoryConnection = {
    __typename?: 'JiraProjectCategoryConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraProjectCategoryEdge>>>;
};
export declare type JiraProjectCategoryEdge = {
    __typename?: 'JiraProjectCategoryEdge';
    node?: Maybe<JiraProjectCategory>;
    cursor: Scalars['String'];
};
export declare type JiraProjectCategoryFilterInput = {
    categoryIds?: Maybe<Array<Scalars['Int']>>;
};
export declare type JiraProjectConnection = HasTotal & HasPageInfo & {
    __typename?: 'JiraProjectConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraProjectEdge>>>;
};
export declare enum JiraProjectDateTimeFormat {
    Relative = "RELATIVE",
    TimeFormat = "TIME_FORMAT",
    DayFormat = "DAY_FORMAT",
    CompleteDatetimeFormat = "COMPLETE_DATETIME_FORMAT",
    DayMonthYearFormat = "DAY_MONTH_YEAR_FORMAT"
}
export declare type JiraProjectEdge = {
    __typename?: 'JiraProjectEdge';
    node?: Maybe<JiraProject>;
    cursor: Scalars['String'];
};
export declare type JiraProjectField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraProjectField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    project?: Maybe<JiraProject>;
    projects?: Maybe<JiraProjectConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraProjectFieldProjectsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    recent?: Maybe<Scalars['Boolean']>;
};
export declare type JiraProjectFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraProjectFieldPayload = Payload & {
    __typename?: 'JiraProjectFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraProjectField>;
};
export declare type JiraProjectFilterInput = {
    types?: Maybe<Array<JiraProjectType>>;
    projectCategoryId?: Maybe<Scalars['ID']>;
    keyword?: Maybe<Scalars['String']>;
    sortBy?: Maybe<JiraProjectSortInput>;
};
export declare type JiraProjectListViewTemplateConnection = {
    __typename?: 'JiraProjectListViewTemplateConnection';
    edges?: Maybe<Array<Maybe<JiraProjectListViewTemplateEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraProjectListViewTemplateItem>>>;
    pageInfo: PageInfo;
};
export declare type JiraProjectListViewTemplateEdge = {
    __typename?: 'JiraProjectListViewTemplateEdge';
    cursor: Scalars['String'];
    node?: Maybe<JiraProjectListViewTemplateItem>;
};
export declare type JiraProjectListViewTemplateItem = {
    __typename?: 'JiraProjectListViewTemplateItem';
    isLastUsed?: Maybe<Scalars['Boolean']>;
    iconUrl?: Maybe<Scalars['URL']>;
    title?: Maybe<Scalars['String']>;
    key?: Maybe<Scalars['String']>;
    isProductLicensed?: Maybe<Scalars['Boolean']>;
    productKey?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    canCreate?: Maybe<Scalars['Boolean']>;
};
export declare type JiraProjectNavigationMetadata = JiraSoftwareProjectNavigationMetadata | JiraServiceManagementProjectNavigationMetadata | JiraWorkManagementProjectNavigationMetadata;
export declare type JiraProjectOptions = {
    projectType?: Maybe<JiraProjectType>;
};
export declare type JiraProjectPermission = {
    __typename?: 'JiraProjectPermission';
    key: Scalars['String'];
    name: Scalars['String'];
    description: Scalars['String'];
    type: JiraProjectPermissionCategory;
};
export declare type JiraProjectPermissionCategory = {
    __typename?: 'JiraProjectPermissionCategory';
    key: JiraProjectPermissionCategoryEnum;
    name: Scalars['String'];
};
export declare enum JiraProjectPermissionCategoryEnum {
    Projects = "PROJECTS",
    Issues = "ISSUES",
    VotersAndWatchers = "VOTERS_AND_WATCHERS",
    Comments = "COMMENTS",
    Attachments = "ATTACHMENTS",
    TimeTracking = "TIME_TRACKING",
    Other = "OTHER"
}
export declare type JiraProjectRoleGrantTypeValue = Node & {
    __typename?: 'JiraProjectRoleGrantTypeValue';
    id: Scalars['ID'];
    role: JiraRole;
};
export declare type JiraProjectShortcut = Node & {
    __typename?: 'JiraProjectShortcut';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    type?: Maybe<JiraProjectShortcutType>;
};
export declare type JiraProjectShortcutPayload = Payload & {
    __typename?: 'JiraProjectShortcutPayload';
    shortcut?: Maybe<JiraProjectShortcut>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare enum JiraProjectShortcutType {
    ShortcutLink = "SHORTCUT_LINK",
    Repository = "REPOSITORY",
    Unknown = "UNKNOWN"
}
export declare enum JiraProjectSortField {
    Name = "NAME",
    Key = "KEY",
    Lead = "LEAD",
    Category = "CATEGORY",
    LastIssueUpdatedTime = "LAST_ISSUE_UPDATED_TIME"
}
export declare type JiraProjectSortInput = {
    sortBy?: Maybe<JiraProjectSortField>;
    order?: Maybe<SortDirection>;
};
export declare enum JiraProjectStatus {
    Active = "ACTIVE",
    Archived = "ARCHIVED",
    Deleted = "DELETED"
}
export declare enum JiraProjectStyle {
    TeamManagedProject = "TEAM_MANAGED_PROJECT",
    CompanyManagedProject = "COMPANY_MANAGED_PROJECT"
}
export declare enum JiraProjectType {
    ServiceDesk = "SERVICE_DESK",
    Business = "BUSINESS",
    Software = "SOFTWARE",
    ProductDiscovery = "PRODUCT_DISCOVERY"
}
export declare type JiraProjectTypeDetails = Node & {
    __typename?: 'JiraProjectTypeDetails';
    id: Scalars['ID'];
    type: JiraProjectType;
    key: Scalars['String'];
    formattedKey: Scalars['String'];
    description: Scalars['String'];
    icon: Scalars['String'];
    color: Scalars['String'];
    weight?: Maybe<Scalars['Int']>;
};
export declare type JiraProjectTypeDetailsConnection = {
    __typename?: 'JiraProjectTypeDetailsConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraProjectTypeDetailsEdge>>>;
};
export declare type JiraProjectTypeDetailsEdge = {
    __typename?: 'JiraProjectTypeDetailsEdge';
    node?: Maybe<JiraProjectTypeDetails>;
    cursor: Scalars['String'];
};
export declare type JiraPullRequestReviewer = {
    __typename?: 'JiraPullRequestReviewer';
    avatar?: Maybe<JiraAvatar>;
    name?: Maybe<Scalars['String']>;
    hasApproved?: Maybe<Scalars['Boolean']>;
};
export declare enum JiraPullRequestState {
    Open = "OPEN",
    Declined = "DECLINED",
    Merged = "MERGED"
}
export declare type JiraQuery = {
    __typename?: 'JiraQuery';
    globalTimeTrackingSettings?: Maybe<JiraTimeTrackingSettings>;
    projectListViewTemplates?: Maybe<JiraProjectListViewTemplateConnection>;
    applicationPropertiesByKey?: Maybe<Array<JiraApplicationProperty>>;
    userSegmentation?: Maybe<JiraUserSegmentation>;
    first100JsmWorkflowTemplates?: Maybe<Array<JiraServiceManagementWorkflowTemplateMetadata>>;
    bulkOperationsMetadata?: Maybe<JiraIssueBulkOperationsMetadata>;
    jiraBulkEditFields?: Maybe<JiraBulkEditResponse>;
    allJiraProjectTypes?: Maybe<JiraProjectTypeDetailsConnection>;
    jiraProject?: Maybe<JiraProject>;
    allJiraProjects?: Maybe<JiraProjectConnection>;
    allJiraProjectCategories?: Maybe<JiraProjectCategoryConnection>;
    jiraProjects?: Maybe<Array<Maybe<JiraProject>>>;
    jiraProjectByKey?: Maybe<JiraProject>;
    version?: Maybe<JiraVersionResult>;
    versionsByIds?: Maybe<Array<Maybe<JiraVersion>>>;
    versionsForProject?: Maybe<JiraVersionConnection>;
    versionsForProjects?: Maybe<JiraVersionConnection>;
    isSubtasksEnabled?: Maybe<Scalars['Boolean']>;
    issueSearchByJql?: Maybe<JiraIssueSearchByJqlResult>;
    issueSearchByFilterId?: Maybe<JiraIssueSearchByFilterResult>;
    issueHydrateByIssueIds?: Maybe<JiraIssueSearchByHydration>;
    issueSearchView?: Maybe<JiraIssueSearchView>;
    issueSearchViewByNamespaceAndViewId?: Maybe<JiraIssueSearchView>;
    issueSearchStable?: Maybe<JiraIssueConnection>;
    issueSearchTotalCount?: Maybe<Scalars['Int']>;
    issueSearchStatus?: Maybe<JiraIssueSearchStatus>;
    naturalLanguageToJql?: Maybe<JiraJqlFromNaturalLanguage>;
    isNaturalLanguageSearchEnabled?: Maybe<Scalars['Boolean']>;
    permission?: Maybe<JiraPermission>;
    requestTypeTemplateById?: Maybe<JiraServiceManagementRequestTypeTemplate>;
    requestTypeTemplates?: Maybe<Array<JiraServiceManagementRequestTypeTemplate>>;
    requestTypeTemplateDefaultConfigurationDependencies?: Maybe<JiraServiceManagementRequestTypeTemplateDefaultConfigurationDependencies>;
    resourceUsageMetricById?: Maybe<JiraResourceUsageMetric>;
    resourceUsageMetric?: Maybe<JiraResourceUsageMetric>;
    resourceUsageMetrics?: Maybe<JiraResourceUsageMetricConnection>;
    userPreferences?: Maybe<JiraUserPreferences>;
    jsmProjectTeamType?: Maybe<JiraServiceManagementProjectTeamType>;
    timeTrackingSettings?: Maybe<JiraGlobalTimeTrackingSettings>;
    filter?: Maybe<JiraFilter>;
    favouriteFilters?: Maybe<JiraFilterConnection>;
    systemFilters?: Maybe<JiraSystemFilterConnection>;
    allJiraUserBroadcastMessages?: Maybe<JiraUserBroadcastMessageConnection>;
    devOpsProviders?: Maybe<Array<Maybe<JiraDevOpsProvider>>>;
    getIssueTransitionByIssueId?: Maybe<JiraIssueTransitionModal>;
    issueContainersByType?: Maybe<JiraIssueItemContainersResult>;
    issueContainersByTypeByKey?: Maybe<JiraIssueItemContainersResult>;
    favourites?: Maybe<JiraFavouriteConnection>;
    jwmNavigation?: Maybe<JiraWorkManagementNavigation>;
    jwmNavigationByProjectId?: Maybe<JiraWorkManagementNavigation>;
    jwmNavigationByProjectKey?: Maybe<JiraWorkManagementNavigation>;
    issueByKey?: Maybe<JiraIssue>;
    issuesByKey?: Maybe<Array<Maybe<JiraIssue>>>;
    issueById?: Maybe<JiraIssue>;
    issue?: Maybe<JiraIssue>;
    screenIdByIssueId?: Maybe<Scalars['Long']>;
    screenIdByIssueKey?: Maybe<Scalars['Long']>;
    epicLinkFieldKey?: Maybe<Scalars['String']>;
    childIssuesLimit?: Maybe<Scalars['Long']>;
    getGlobalPermissionsAndGrants?: Maybe<JiraGlobalPermissionGrantsResult>;
    jwmViewItems?: Maybe<JiraWorkManagementViewItemConnectionResult>;
    allGrantTypeKeys?: Maybe<Array<JiraGrantTypeKey>>;
    grantTypeValues?: Maybe<JiraGrantTypeValueConnection>;
    viewPermissionScheme?: Maybe<JiraPermissionSchemeViewResult>;
    getProjectsByPermissionScheme?: Maybe<JiraProjectConnection>;
    permissionSchemeGrants?: Maybe<JiraPermissionGrantValueConnection>;
    getPermissionSchemeGrants?: Maybe<JiraPermissionGrantConnection>;
    getPermissionSchemeGrantsHierarchy?: Maybe<Array<JiraPermissionGrants>>;
    issueHierarchyConfig?: Maybe<JiraIssueHierarchyConfigurationQuery>;
    issueHierarchyLimits?: Maybe<JiraIssueHierarchyLimits>;
    lockedIssueTypeIds?: Maybe<Array<Scalars['ID']>>;
    issueHierarchyConfigUpdateTask?: Maybe<JiraHierarchyConfigTask>;
    issueLinkTypes?: Maybe<JiraIssueLinkTypeConnection>;
    canPerform?: Maybe<Scalars['Boolean']>;
    labelsFieldOptions?: Maybe<JiraLabelConnection>;
    jqlBuilder?: Maybe<JiraJqlBuilder>;
    fields?: Maybe<JiraJqlFieldConnectionResult>;
    devOps?: Maybe<JiraDevOpsQuery>;
    bulkOperationProgress?: Maybe<JiraIssueBulkOperationProgress>;
    deploymentsFeaturePrecondition?: Maybe<JiraDeploymentsFeaturePrecondition>;
    deploymentsFeaturePreconditionByProjectKey?: Maybe<JiraDeploymentsFeaturePrecondition>;
    installDeploymentsBannerPrecondition?: Maybe<JiraInstallDeploymentsBannerPrecondition>;
    userHomePage?: Maybe<JiraHomePage>;
};
export declare type JiraQueryGlobalTimeTrackingSettingsArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryProjectListViewTemplatesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    cloudId: Scalars['ID'];
    experimentKey?: Maybe<Scalars['String']>;
};
export declare type JiraQueryApplicationPropertiesByKeyArgs = {
    cloudId: Scalars['ID'];
    keys: Array<Scalars['String']>;
};
export declare type JiraQueryUserSegmentationArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryFirst100JsmWorkflowTemplatesArgs = {
    cloudId: Scalars['ID'];
    projectStyle?: Maybe<JiraProjectStyle>;
    keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
    tags?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type JiraQueryBulkOperationsMetadataArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryJiraBulkEditFieldsArgs = {
    issueIds: Array<Scalars['ID']>;
};
export declare type JiraQueryAllJiraProjectTypesArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryJiraProjectArgs = {
    id: Scalars['ID'];
};
export declare type JiraQueryAllJiraProjectsArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    filter: JiraProjectFilterInput;
};
export declare type JiraQueryAllJiraProjectCategoriesArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectCategoryFilterInput>;
};
export declare type JiraQueryJiraProjectsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type JiraQueryJiraProjectByKeyArgs = {
    key: Scalars['String'];
    cloudId: Scalars['ID'];
    ignoreDeleteStatus?: Maybe<Scalars['Boolean']>;
};
export declare type JiraQueryVersionArgs = {
    id: Scalars['ID'];
};
export declare type JiraQueryVersionsByIdsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type JiraQueryVersionsForProjectArgs = {
    jiraProjectId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    filter?: Maybe<Array<Maybe<JiraVersionStatus>>>;
    releaseDateAfter?: Maybe<Scalars['Date']>;
    releaseDateBefore?: Maybe<Scalars['Date']>;
    searchString?: Maybe<Scalars['String']>;
};
export declare type JiraQueryVersionsForProjectsArgs = {
    jiraProjectIds: Array<Scalars['ID']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    filter?: Maybe<Array<Maybe<JiraVersionStatus>>>;
    searchString?: Maybe<Scalars['String']>;
};
export declare type JiraQueryIsSubtasksEnabledArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryIssueSearchByJqlArgs = {
    cloudId: Scalars['ID'];
    jql: Scalars['String'];
};
export declare type JiraQueryIssueSearchByFilterIdArgs = {
    id: Scalars['ID'];
};
export declare type JiraQueryIssueHydrateByIssueIdsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type JiraQueryIssueSearchViewArgs = {
    id: Scalars['ID'];
};
export declare type JiraQueryIssueSearchViewByNamespaceAndViewIdArgs = {
    cloudId: Scalars['ID'];
    namespace?: Maybe<Scalars['String']>;
    viewId?: Maybe<Scalars['String']>;
};
export declare type JiraQueryIssueSearchStableArgs = {
    cloudId: Scalars['ID'];
    issueSearchInput: JiraIssueSearchInput;
    options?: Maybe<JiraIssueSearchOptions>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryIssueSearchTotalCountArgs = {
    cloudId: Scalars['ID'];
    issueSearchInput: JiraIssueSearchInput;
};
export declare type JiraQueryIssueSearchStatusArgs = {
    cloudId: Scalars['ID'];
    jql: Scalars['String'];
};
export declare type JiraQueryNaturalLanguageToJqlArgs = {
    cloudId: Scalars['ID'];
    input: JiraNaturalLanguageToJqlInput;
};
export declare type JiraQueryIsNaturalLanguageSearchEnabledArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryPermissionArgs = {
    cloudId: Scalars['ID'];
    type: JiraPermissionType;
};
export declare type JiraQueryRequestTypeTemplateByIdArgs = {
    cloudId: Scalars['ID'];
    templateId: Scalars['ID'];
};
export declare type JiraQueryRequestTypeTemplatesArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryRequestTypeTemplateDefaultConfigurationDependenciesArgs = {
    projectId: Scalars['ID'];
};
export declare type JiraQueryResourceUsageMetricByIdArgs = {
    id: Scalars['ID'];
};
export declare type JiraQueryResourceUsageMetricArgs = {
    cloudId: Scalars['ID'];
    metricKey: Scalars['String'];
};
export declare type JiraQueryResourceUsageMetricsArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryUserPreferencesArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryJsmProjectTeamTypeArgs = {
    projectId: Scalars['ID'];
};
export declare type JiraQueryTimeTrackingSettingsArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryFilterArgs = {
    id: Scalars['ID'];
};
export declare type JiraQueryFavouriteFiltersArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQuerySystemFiltersArgs = {
    cloudId: Scalars['ID'];
    isFavourite?: Maybe<Scalars['Boolean']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryAllJiraUserBroadcastMessagesArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryDevOpsProvidersArgs = {
    cloudId: Scalars['ID'];
    filter?: Maybe<Array<JiraDevOpsCapability>>;
};
export declare type JiraQueryGetIssueTransitionByIssueIdArgs = {
    transitionId: Scalars['String'];
    issueId: Scalars['ID'];
};
export declare type JiraQueryIssueContainersByTypeArgs = {
    input: JiraIssueItemSystemContainerTypeWithIdInput;
};
export declare type JiraQueryIssueContainersByTypeByKeyArgs = {
    input: JiraIssueItemSystemContainerTypeWithKeyInput;
};
export declare type JiraQueryFavouritesArgs = {
    cloudId: Scalars['ID'];
    filter: JiraFavouriteFilter;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryJwmNavigationArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryJwmNavigationByProjectIdArgs = {
    projectId: Scalars['ID'];
};
export declare type JiraQueryJwmNavigationByProjectKeyArgs = {
    cloudId: Scalars['ID'];
    projectKey: Scalars['String'];
};
export declare type JiraQueryIssueByKeyArgs = {
    key: Scalars['String'];
    cloudId: Scalars['ID'];
};
export declare type JiraQueryIssuesByKeyArgs = {
    keys: Array<Scalars['String']>;
    cloudId: Scalars['ID'];
};
export declare type JiraQueryIssueByIdArgs = {
    id: Scalars['ID'];
};
export declare type JiraQueryIssueArgs = {
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraQueryScreenIdByIssueIdArgs = {
    issueId: Scalars['ID'];
};
export declare type JiraQueryScreenIdByIssueKeyArgs = {
    issueKey: Scalars['String'];
    cloudId?: Maybe<Scalars['ID']>;
};
export declare type JiraQueryEpicLinkFieldKeyArgs = {
    cloudId?: Maybe<Scalars['ID']>;
};
export declare type JiraQueryChildIssuesLimitArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryGetGlobalPermissionsAndGrantsArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryJwmViewItemsArgs = {
    cloudId?: Maybe<Scalars['ID']>;
    jql: Scalars['String'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryAllGrantTypeKeysArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryGrantTypeValuesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    grantTypeKey: JiraGrantTypeKeyEnum;
    searchTerm?: Maybe<Scalars['String']>;
    cloudId: Scalars['ID'];
};
export declare type JiraQueryViewPermissionSchemeArgs = {
    schemeId: Scalars['ID'];
};
export declare type JiraQueryGetProjectsByPermissionSchemeArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    schemeId: Scalars['ID'];
};
export declare type JiraQueryPermissionSchemeGrantsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    schemeId: Scalars['ID'];
    permissionKey?: Maybe<Scalars['String']>;
};
export declare type JiraQueryGetPermissionSchemeGrantsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    schemeId: Scalars['ID'];
    permissionKey: Scalars['String'];
    grantTypeKey?: Maybe<JiraGrantTypeKeyEnum>;
};
export declare type JiraQueryGetPermissionSchemeGrantsHierarchyArgs = {
    schemeId: Scalars['ID'];
    permissionKey: Scalars['String'];
};
export declare type JiraQueryIssueHierarchyConfigArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryIssueHierarchyLimitsArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryLockedIssueTypeIdsArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryIssueHierarchyConfigUpdateTaskArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryIssueLinkTypesArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryCanPerformArgs = {
    type: JiraActionType;
    cloudId: Scalars['ID'];
};
export declare type JiraQueryLabelsFieldOptionsArgs = {
    id: Scalars['ID'];
    searchBy?: Maybe<Scalars['String']>;
    sessionId?: Maybe<Scalars['ID']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraQueryJqlBuilderArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraQueryFieldsArgs = {
    cloudId: Scalars['ID'];
    jqlContext?: Maybe<Scalars['String']>;
    searchString?: Maybe<Scalars['String']>;
    excludeFields?: Maybe<Array<Scalars['String']>>;
    forClause?: Maybe<JiraJqlClauseType>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    viewContext?: Maybe<JiraJqlViewContext>;
};
export declare type JiraQueryBulkOperationProgressArgs = {
    cloudId: Scalars['ID'];
    taskId: Scalars['ID'];
};
export declare type JiraQueryDeploymentsFeaturePreconditionArgs = {
    projectId: Scalars['ID'];
};
export declare type JiraQueryDeploymentsFeaturePreconditionByProjectKeyArgs = {
    cloudId: Scalars['ID'];
    projectKey: Scalars['String'];
};
export declare type JiraQueryInstallDeploymentsBannerPreconditionArgs = {
    projectId: Scalars['ID'];
};
export declare type JiraQueryUserHomePageArgs = {
    cloudId: Scalars['ID'];
};
export declare type JiraRadioSelectField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraRadioSelectField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedOption?: Maybe<JiraOption>;
    fieldOptions?: Maybe<JiraOptionConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraRadioSelectFieldFieldOptionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraRadioSelectFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraRadioSelectFieldPayload = Payload & {
    __typename?: 'JiraRadioSelectFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraRadioSelectField>;
};
export declare type JiraReleaseNotesConfiguration = {
    __typename?: 'JiraReleaseNotesConfiguration';
    issueFieldIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    issueTypeIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    issueKeyConfig?: Maybe<JiraReleaseNotesIssueKeyConfig>;
};
export declare type JiraReleaseNotesInConfluenceAvailableSite = {
    __typename?: 'JiraReleaseNotesInConfluenceAvailableSite';
    siteId: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    isSystem?: Maybe<Scalars['Boolean']>;
};
export declare type JiraReleaseNotesInConfluenceAvailableSitesConnection = {
    __typename?: 'JiraReleaseNotesInConfluenceAvailableSitesConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraReleaseNotesInConfluenceAvailableSitesEdge>>>;
};
export declare type JiraReleaseNotesInConfluenceAvailableSitesEdge = {
    __typename?: 'JiraReleaseNotesInConfluenceAvailableSitesEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<JiraReleaseNotesInConfluenceAvailableSite>;
};
export declare enum JiraReleaseNotesIssueKeyConfig {
    None = "NONE",
    Unlinked = "UNLINKED",
    Linked = "LINKED"
}
export declare type JiraReleases = {
    __typename?: 'JiraReleases';
    issues?: Maybe<JiraReleasesIssueConnection>;
    epics?: Maybe<JiraReleasesEpicConnection>;
    deployments?: Maybe<JiraReleasesDeploymentSummaryConnection>;
    deploymentsById?: Maybe<Array<Maybe<DeploymentSummary>>>;
};
export declare type JiraReleasesIssuesArgs = {
    first?: Scalars['Int'];
    after?: Maybe<Scalars['String']>;
    filter: JiraReleasesIssueFilter;
};
export declare type JiraReleasesEpicsArgs = {
    first?: Scalars['Int'];
    after?: Maybe<Scalars['String']>;
    filter: JiraReleasesEpicFilter;
};
export declare type JiraReleasesDeploymentsArgs = {
    first?: Scalars['Int'];
    after?: Maybe<Scalars['String']>;
    filter: JiraReleasesDeploymentFilter;
};
export declare type JiraReleasesDeploymentsByIdArgs = {
    deploymentIds: Array<Scalars['ID']>;
};
export declare type JiraReleasesDeploymentFilter = {
    issueIds?: Maybe<Array<Scalars['ID']>>;
    serviceIds?: Maybe<Array<Scalars['ID']>>;
    timeWindow: JiraReleasesTimeWindowInput;
    environmentDisplayNames?: Maybe<Array<Scalars['String']>>;
    environmentCategories?: Maybe<Array<DevOpsEnvironmentCategory>>;
};
export declare type JiraReleasesDeploymentSummaryConnection = {
    __typename?: 'JiraReleasesDeploymentSummaryConnection';
    edges?: Maybe<Array<Maybe<JiraReleasesDeploymentSummaryEdge>>>;
    nodes?: Maybe<Array<Maybe<DeploymentSummary>>>;
    pageInfo: PageInfo;
};
export declare type JiraReleasesDeploymentSummaryEdge = {
    __typename?: 'JiraReleasesDeploymentSummaryEdge';
    cursor: Scalars['String'];
    node?: Maybe<DeploymentSummary>;
};
export declare type JiraReleasesEpic = {
    __typename?: 'JiraReleasesEpic';
    id: Scalars['ID'];
    issueKey?: Maybe<Scalars['String']>;
    issueTypeId?: Maybe<Scalars['ID']>;
    assignee?: Maybe<User>;
    summary?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['String']>;
    lastDeployed?: Maybe<Scalars['DateTime']>;
};
export declare type JiraReleasesEpicConnection = {
    __typename?: 'JiraReleasesEpicConnection';
    edges?: Maybe<Array<Maybe<JiraReleasesEpicEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraReleasesEpic>>>;
    pageInfo: PageInfo;
};
export declare type JiraReleasesEpicEdge = {
    __typename?: 'JiraReleasesEpicEdge';
    cursor: Scalars['String'];
    node?: Maybe<JiraReleasesEpic>;
};
export declare type JiraReleasesEpicFilter = {
    projectId: Scalars['ID'];
    text?: Maybe<Scalars['String']>;
    releaseStatusFilter?: Maybe<JiraReleasesEpicReleaseStatusFilter>;
};
export declare enum JiraReleasesEpicReleaseStatusFilter {
    Released = "RELEASED",
    ReleasedAndUnreleased = "RELEASED_AND_UNRELEASED"
}
export declare type JiraReleasesIssue = {
    __typename?: 'JiraReleasesIssue';
    id: Scalars['ID'];
    issueKey?: Maybe<Scalars['String']>;
    issueTypeId?: Maybe<Scalars['ID']>;
    assignee?: Maybe<User>;
    summary?: Maybe<Scalars['String']>;
    lastDeployed?: Maybe<Scalars['DateTime']>;
    epic?: Maybe<JiraReleasesEpic>;
};
export declare type JiraReleasesIssueConnection = {
    __typename?: 'JiraReleasesIssueConnection';
    edges?: Maybe<Array<Maybe<JiraReleasesIssueEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraReleasesIssue>>>;
    pageInfo: PageInfo;
};
export declare type JiraReleasesIssueEdge = {
    __typename?: 'JiraReleasesIssueEdge';
    cursor: Scalars['String'];
    node?: Maybe<JiraReleasesIssue>;
};
export declare type JiraReleasesIssueFilter = {
    projectId: Scalars['ID'];
    text?: Maybe<Scalars['String']>;
    epicIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    issueTypes?: Maybe<Array<Scalars['ID']>>;
    assignees?: Maybe<Array<Scalars['ID']>>;
    fixVersions?: Maybe<Array<Scalars['String']>>;
    environmentDisplayNames?: Maybe<Array<Scalars['String']>>;
    environmentCategories?: Maybe<Array<Maybe<DevOpsEnvironmentCategory>>>;
    releaseStatusFilter?: JiraReleasesIssueReleaseStatusFilter;
    timeWindow: JiraReleasesTimeWindowInput;
};
export declare enum JiraReleasesIssueReleaseStatusFilter {
    Released = "RELEASED",
    Unreleased = "UNRELEASED",
    ReleasedAndUnreleased = "RELEASED_AND_UNRELEASED"
}
export declare type JiraReleasesTimeWindowInput = {
    after: Scalars['DateTime'];
    before: Scalars['DateTime'];
};
export declare type JiraRemoveIssuesFromFixVersionInput = {
    issueIds: Array<Scalars['ID']>;
    versionId: Scalars['ID'];
};
export declare type JiraRemoveIssuesFromFixVersionPayload = Payload & {
    __typename?: 'JiraRemoveIssuesFromFixVersionPayload';
    version?: Maybe<JiraVersion>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    issuesWithMissingResolvePermission?: Maybe<Array<Scalars['String']>>;
    issuesWithMissingEditPermission?: Maybe<Array<Scalars['String']>>;
};
export declare type JiraRemoveRelatedWorkFromVersionInput = {
    versionId: Scalars['ID'];
    relatedWorkId?: Maybe<Scalars['ID']>;
    removeNativeReleaseNotes?: Maybe<Scalars['Boolean']>;
};
export declare type JiraRemoveRelatedWorkFromVersionPayload = Payload & {
    __typename?: 'JiraRemoveRelatedWorkFromVersionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraReplaceIssueSearchViewFieldSetsInput = {
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
    nodes: Array<Scalars['String']>;
    inclusive?: Maybe<Scalars['Boolean']>;
};
export declare type JiraResolution = Node & {
    __typename?: 'JiraResolution';
    id: Scalars['ID'];
    resolutionId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type JiraResolutionConnection = {
    __typename?: 'JiraResolutionConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraResolutionEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraResolutionEdge = {
    __typename?: 'JiraResolutionEdge';
    node?: Maybe<JiraResolution>;
    cursor: Scalars['String'];
};
export declare type JiraResolutionField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraResolutionField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    resolution?: Maybe<JiraResolution>;
    resolutions?: Maybe<JiraResolutionConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraResolutionFieldResolutionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraResourceUsageMetric = Node & {
    __typename?: 'JiraResourceUsageMetric';
    id: Scalars['ID'];
    key: Scalars['String'];
    warningValue?: Maybe<Scalars['Long']>;
    thresholdValue?: Maybe<Scalars['Long']>;
    values?: Maybe<JiraResourceUsageMetricValueConnection>;
    currentValue?: Maybe<Scalars['Long']>;
};
export declare type JiraResourceUsageMetricValuesArgs = {
    fromDate?: Maybe<Scalars['Date']>;
    toDate?: Maybe<Scalars['Date']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraResourceUsageMetricConnection = {
    __typename?: 'JiraResourceUsageMetricConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraResourceUsageMetricEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraResourceUsageMetric>>>;
};
export declare type JiraResourceUsageMetricEdge = {
    __typename?: 'JiraResourceUsageMetricEdge';
    node?: Maybe<JiraResourceUsageMetric>;
    cursor: Scalars['String'];
};
export declare type JiraResourceUsageMetricValue = {
    __typename?: 'JiraResourceUsageMetricValue';
    date?: Maybe<Scalars['Date']>;
    value?: Maybe<Scalars['Long']>;
};
export declare type JiraResourceUsageMetricValueConnection = {
    __typename?: 'JiraResourceUsageMetricValueConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraResourceUsageMetricValueEdge>>>;
    nodes?: Maybe<Array<Maybe<JiraResourceUsageMetricValue>>>;
};
export declare type JiraResourceUsageMetricValueEdge = {
    __typename?: 'JiraResourceUsageMetricValueEdge';
    node?: Maybe<JiraResourceUsageMetricValue>;
    cursor: Scalars['String'];
};
export declare enum JiraReviewState {
    Review = "REVIEW",
    Approval = "APPROVAL",
    Summarize = "SUMMARIZE",
    Rejected = "REJECTED",
    Closed = "CLOSED",
    Draft = "DRAFT",
    Dead = "DEAD",
    Unknown = "UNKNOWN"
}
export declare type JiraRichText = {
    __typename?: 'JiraRichText';
    adfValue?: Maybe<JiraAdf>;
    plainText?: Maybe<Scalars['String']>;
    wikiValue?: Maybe<Scalars['String']>;
};
export declare type JiraRichTextField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraRichTextField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    richText?: Maybe<JiraRichText>;
    renderer?: Maybe<Scalars['String']>;
    mediaContext?: Maybe<JiraMediaContext>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraRole = Node & {
    __typename?: 'JiraRole';
    id: Scalars['ID'];
    roleId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type JiraRoleConnection = {
    __typename?: 'JiraRoleConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraRoleEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraRoleEdge = {
    __typename?: 'JiraRoleEdge';
    node?: Maybe<JiraRole>;
    cursor: Scalars['String'];
};
export declare type JiraScmRepository = {
    __typename?: 'JiraScmRepository';
    name?: Maybe<Scalars['String']>;
    entityUrl?: Maybe<Scalars['URL']>;
};
export declare type JiraScreenTabLayout = {
    __typename?: 'JiraScreenTabLayout';
    items?: Maybe<JiraScreenTabLayoutItemConnection>;
};
export declare type JiraScreenTabLayoutItemsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraScreenTabLayoutField = {
    __typename?: 'JiraScreenTabLayoutField';
    error?: Maybe<QueryError>;
    field?: Maybe<JiraIssueField>;
};
export declare type JiraScreenTabLayoutFieldsConnection = {
    __typename?: 'JiraScreenTabLayoutFieldsConnection';
    edges?: Maybe<Array<Maybe<JiraScreenTabLayoutFieldsEdge>>>;
    pageInfo: PageInfo;
};
export declare type JiraScreenTabLayoutFieldsEdge = {
    __typename?: 'JiraScreenTabLayoutFieldsEdge';
    node?: Maybe<JiraScreenTabLayoutField>;
    cursor: Scalars['String'];
};
export declare type JiraScreenTabLayoutItem = {
    __typename?: 'JiraScreenTabLayoutItem';
    title: Scalars['String'];
    fields?: Maybe<JiraScreenTabLayoutFieldsConnection>;
};
export declare type JiraScreenTabLayoutItemFieldsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraScreenTabLayoutItemConnection = {
    __typename?: 'JiraScreenTabLayoutItemConnection';
    edges?: Maybe<Array<Maybe<JiraScreenTabLayoutItemEdge>>>;
    pageInfo: PageInfo;
};
export declare type JiraScreenTabLayoutItemEdge = {
    __typename?: 'JiraScreenTabLayoutItemEdge';
    node?: Maybe<JiraScreenTabLayoutItem>;
    cursor: Scalars['String'];
};
export declare type JiraSecurityLevel = Node & {
    __typename?: 'JiraSecurityLevel';
    id: Scalars['ID'];
    securityId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type JiraSecurityLevelConnection = {
    __typename?: 'JiraSecurityLevelConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraSecurityLevelEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraSecurityLevelEdge = {
    __typename?: 'JiraSecurityLevelEdge';
    node?: Maybe<JiraSecurityLevel>;
    cursor: Scalars['String'];
};
export declare type JiraSecurityLevelField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraSecurityLevelField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    securityLevel?: Maybe<JiraSecurityLevel>;
    securityLevels?: Maybe<JiraSecurityLevelConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraSecurityLevelFieldSecurityLevelsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServerError = {
    __typename?: 'JiraServerError';
    message?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementActiveApproval = Node & {
    __typename?: 'JiraServiceManagementActiveApproval';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    finalDecision?: Maybe<JiraServiceManagementApprovalDecisionResponseType>;
    approvers?: Maybe<JiraServiceManagementApproverConnection>;
    excludedApprovers?: Maybe<JiraUserConnection>;
    canAnswerApproval?: Maybe<Scalars['Boolean']>;
    decisions?: Maybe<JiraServiceManagementDecisionConnection>;
    createdDate?: Maybe<Scalars['DateTime']>;
    configurations?: Maybe<Array<Maybe<JiraServiceManagementApprovalConfiguration>>>;
    status?: Maybe<JiraServiceManagementApprovalStatus>;
    approverPrincipals?: Maybe<JiraServiceManagementApproverPrincipalConnection>;
    pendingApprovalCount?: Maybe<Scalars['Int']>;
    approvalState?: Maybe<JiraServiceManagementApprovalState>;
};
export declare type JiraServiceManagementActiveApprovalApproversArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementActiveApprovalExcludedApproversArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementActiveApprovalDecisionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementActiveApprovalApproverPrincipalsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementApprovalCondition = {
    __typename?: 'JiraServiceManagementApprovalCondition';
    type?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementApprovalConfiguration = {
    __typename?: 'JiraServiceManagementApprovalConfiguration';
    approversConfigurations?: Maybe<Array<Maybe<JiraServiceManagementApproversConfiguration>>>;
    condition?: Maybe<JiraServiceManagementApprovalCondition>;
};
export declare enum JiraServiceManagementApprovalDecisionResponseType {
    Approved = "approved",
    Declined = "declined",
    Pending = "pending"
}
export declare type JiraServiceManagementApprovalField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementApprovalField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    activeApproval?: Maybe<JiraServiceManagementActiveApproval>;
    completedApprovals?: Maybe<Array<Maybe<JiraServiceManagementCompletedApproval>>>;
    completedApprovalsConnection?: Maybe<JiraServiceManagementCompletedApprovalConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraServiceManagementApprovalFieldCompletedApprovalsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare enum JiraServiceManagementApprovalState {
    InsufficientApprovers = "INSUFFICIENT_APPROVERS",
    Ok = "OK"
}
export declare type JiraServiceManagementApprovalStatus = {
    __typename?: 'JiraServiceManagementApprovalStatus';
    id?: Maybe<Scalars['String']>;
    statusId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    categoryId?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementApprover = {
    __typename?: 'JiraServiceManagementApprover';
    approver?: Maybe<User>;
    approverDecision?: Maybe<JiraServiceManagementApprovalDecisionResponseType>;
};
export declare type JiraServiceManagementApproverConnection = {
    __typename?: 'JiraServiceManagementApproverConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraServiceManagementApproverEdge>>>;
};
export declare type JiraServiceManagementApproverEdge = {
    __typename?: 'JiraServiceManagementApproverEdge';
    node?: Maybe<JiraServiceManagementApprover>;
    cursor: Scalars['String'];
};
export declare type JiraServiceManagementApproverPrincipal = JiraServiceManagementUserApproverPrincipal | JiraServiceManagementGroupApproverPrincipal;
export declare type JiraServiceManagementApproverPrincipalConnection = {
    __typename?: 'JiraServiceManagementApproverPrincipalConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraServiceManagementApproverPrincipalEdge>>>;
};
export declare type JiraServiceManagementApproverPrincipalEdge = {
    __typename?: 'JiraServiceManagementApproverPrincipalEdge';
    node?: Maybe<JiraServiceManagementApproverPrincipal>;
    cursor: Scalars['String'];
};
export declare type JiraServiceManagementApproversConfiguration = {
    __typename?: 'JiraServiceManagementApproversConfiguration';
    type?: Maybe<Scalars['String']>;
    fieldName?: Maybe<Scalars['String']>;
    fieldId?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementAttachment = JiraAttachment & Node & {
    __typename?: 'JiraServiceManagementAttachment';
    id: Scalars['ID'];
    attachmentId: Scalars['String'];
    author?: Maybe<User>;
    mediaApiFileId?: Maybe<Scalars['String']>;
    created: Scalars['DateTime'];
    mimeType?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    fileSize?: Maybe<Scalars['Long']>;
    parentName?: Maybe<Scalars['String']>;
    parentId?: Maybe<Scalars['String']>;
    parentCommentVisibility?: Maybe<JiraServiceManagementCommentVisibility>;
    hasRestrictedParent?: Maybe<Scalars['Boolean']>;
};
export declare type JiraServiceManagementBulkCreateRequestTypeFromTemplateInput = {
    createRequestTypeFromTemplateInputItems: Array<JiraServiceManagementCreateRequestTypeFromTemplateInput>;
    projectId: Scalars['ID'];
};
export declare type JiraServiceManagementComment = JiraComment & Node & {
    __typename?: 'JiraServiceManagementComment';
    id: Scalars['ID'];
    commentId: Scalars['ID'];
    issue?: Maybe<JiraIssue>;
    webUrl?: Maybe<Scalars['URL']>;
    author?: Maybe<User>;
    updateAuthor?: Maybe<User>;
    richText?: Maybe<JiraRichText>;
    created: Scalars['DateTime'];
    updated?: Maybe<Scalars['DateTime']>;
    permissionLevel?: Maybe<JiraPermissionLevel>;
    visibility?: Maybe<JiraServiceManagementCommentVisibility>;
    authorCanSeeRequest?: Maybe<Scalars['Boolean']>;
};
export declare enum JiraServiceManagementCommentVisibility {
    VisibleToHelpseeker = "VISIBLE_TO_HELPSEEKER",
    Internal = "INTERNAL"
}
export declare type JiraServiceManagementCompletedApproval = Node & {
    __typename?: 'JiraServiceManagementCompletedApproval';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    finalDecision?: Maybe<JiraServiceManagementApprovalDecisionResponseType>;
    approvers?: Maybe<JiraServiceManagementApproverConnection>;
    createdDate?: Maybe<Scalars['DateTime']>;
    completedDate?: Maybe<Scalars['DateTime']>;
    status?: Maybe<JiraServiceManagementApprovalStatus>;
};
export declare type JiraServiceManagementCompletedApprovalApproversArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementCompletedApprovalConnection = {
    __typename?: 'JiraServiceManagementCompletedApprovalConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraServiceManagementCompletedApprovalEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraServiceManagementCompletedApprovalEdge = {
    __typename?: 'JiraServiceManagementCompletedApprovalEdge';
    node?: Maybe<JiraServiceManagementCompletedApproval>;
    cursor: Scalars['String'];
};
export declare type JiraServiceManagementCreateAndAssociateWorkflowFromTemplateInput = {
    templateId: Scalars['String'];
    projectId: Scalars['ID'];
    workflowName?: Maybe<Scalars['String']>;
    issueTypeName?: Maybe<Scalars['String']>;
    avatarId?: Maybe<Scalars['ID']>;
};
export declare type JiraServiceManagementCreateAndAssociateWorkflowFromTemplatePayload = Payload & {
    __typename?: 'JiraServiceManagementCreateAndAssociateWorkflowFromTemplatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    workflowAndIssueSummary?: Maybe<JiraServiceManagementWorkflowAndIssueSummary>;
};
export declare type JiraServiceManagementCreateRequestTypeFromTemplateInput = {
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    requestTypeIconInternalId?: Maybe<Scalars['String']>;
    requestTypeGroup?: Maybe<JiraServiceManagementCreateRequestTypeFromTemplateRequestTypeGroupInput>;
    requestForm: JiraServiceManagementCreateRequestTypeFromTemplateRequestFormInput;
    workflow: JiraServiceManagementCreateRequestTypeFromTemplateWorkflowInput;
    practice?: Maybe<JiraServiceManagementPractice>;
    clientMutationId: Scalars['String'];
};
export declare type JiraServiceManagementCreateRequestTypeFromTemplatePayload = Payload & {
    __typename?: 'JiraServiceManagementCreateRequestTypeFromTemplatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    createRequestTypeResults: Array<JiraServiceManagementCreateRequestTypeFromTemplateResult>;
};
export declare type JiraServiceManagementCreateRequestTypeFromTemplateReferenceInput = {
    formTemplateInternalId: Scalars['String'];
};
export declare type JiraServiceManagementCreateRequestTypeFromTemplateRequestFormInput = {
    inputType: JiraServiceManagementCreateRequestTypeFromTemplateRequestFormInputType;
    templateFormReferenceInput: JiraServiceManagementCreateRequestTypeFromTemplateReferenceInput;
};
export declare enum JiraServiceManagementCreateRequestTypeFromTemplateRequestFormInputType {
    FormTemplateReference = "FORM_TEMPLATE_REFERENCE",
    RequestTypeTemplateReference = "REQUEST_TYPE_TEMPLATE_REFERENCE"
}
export declare type JiraServiceManagementCreateRequestTypeFromTemplateRequestTypeGroupInput = {
    requestTypeGroupInternalIds: Array<Scalars['String']>;
};
export declare type JiraServiceManagementCreateRequestTypeFromTemplateResult = Payload & {
    __typename?: 'JiraServiceManagementCreateRequestTypeFromTemplateResult';
    clientMutationId: Scalars['String'];
    result?: Maybe<JiraServiceManagementRequestType>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare enum JiraServiceManagementCreateRequestTypeFromTemplateWorkflowAction {
    Share = "SHARE"
}
export declare type JiraServiceManagementCreateRequestTypeFromTemplateWorkflowInput = {
    action: JiraServiceManagementCreateRequestTypeFromTemplateWorkflowAction;
    inputType: JiraServiceManagementCreateRequestTypeFromTemplateWorkflowInputType;
    workflowIssueTypeReferenceInput: JiraServiceManagementCreateRequestTypeFromTemplateWorkflowIssueTypeReferenceInput;
};
export declare enum JiraServiceManagementCreateRequestTypeFromTemplateWorkflowInputType {
    ReferenceThroughIssueType = "REFERENCE_THROUGH_ISSUE_TYPE"
}
export declare type JiraServiceManagementCreateRequestTypeFromTemplateWorkflowIssueTypeReferenceInput = {
    workflowIssueTypeId: Scalars['ID'];
};
export declare type JiraServiceManagementDateTimeField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementDateTimeField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    dateTime?: Maybe<Scalars['DateTime']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraServiceManagementDecision = {
    __typename?: 'JiraServiceManagementDecision';
    approver?: Maybe<User>;
    approverDecision?: Maybe<JiraServiceManagementApprovalDecisionResponseType>;
};
export declare type JiraServiceManagementDecisionConnection = {
    __typename?: 'JiraServiceManagementDecisionConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraServiceManagementDecisionEdge>>>;
};
export declare type JiraServiceManagementDecisionEdge = {
    __typename?: 'JiraServiceManagementDecisionEdge';
    node?: Maybe<JiraServiceManagementDecision>;
    cursor: Scalars['String'];
};
export declare type JiraServiceManagementFeedback = {
    __typename?: 'JiraServiceManagementFeedback';
    rating?: Maybe<Scalars['Int']>;
};
export declare type JiraServiceManagementGroupApproverPrincipal = {
    __typename?: 'JiraServiceManagementGroupApproverPrincipal';
    groupId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    memberCount?: Maybe<Scalars['Int']>;
    approvedCount?: Maybe<Scalars['Int']>;
};
export declare type JiraServiceManagementIncident = {
    __typename?: 'JiraServiceManagementIncident';
    hasLinkedIncidents?: Maybe<Scalars['Boolean']>;
};
export declare type JiraServiceManagementIncidentLinkingField = Node & JiraIssueField & JiraIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementIncidentLinkingField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    incident?: Maybe<JiraServiceManagementIncident>;
    fieldConfig?: Maybe<JiraFieldConfig>;
};
export declare type JiraServiceManagementLanguage = {
    __typename?: 'JiraServiceManagementLanguage';
    languageCode?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
};
export declare enum JiraServiceManagementMajorIncident {
    MajorIncident = "MAJOR_INCIDENT"
}
export declare type JiraServiceManagementMajorIncidentField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementMajorIncidentField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    majorIncident?: Maybe<JiraServiceManagementMajorIncident>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraServiceManagementMultipleSelectUserPickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementMultipleSelectUserPickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedUsers?: Maybe<Array<Maybe<User>>>;
    selectedUsersConnection?: Maybe<JiraUserConnection>;
    users?: Maybe<JiraUserConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraServiceManagementMultipleSelectUserPickerFieldSelectedUsersConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementMultipleSelectUserPickerFieldUsersArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraServiceManagementOrganization = {
    __typename?: 'JiraServiceManagementOrganization';
    organizationId?: Maybe<Scalars['ID']>;
    organizationName?: Maybe<Scalars['String']>;
    domain?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementOrganizationConnection = {
    __typename?: 'JiraServiceManagementOrganizationConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraServiceManagementOrganizationEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraServiceManagementOrganizationEdge = {
    __typename?: 'JiraServiceManagementOrganizationEdge';
    node?: Maybe<JiraServiceManagementOrganization>;
    cursor: Scalars['String'];
};
export declare type JiraServiceManagementOrganizationField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementOrganizationField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedOrganizations?: Maybe<Array<Maybe<JiraServiceManagementOrganization>>>;
    selectedOrganizationsConnection?: Maybe<JiraServiceManagementOrganizationConnection>;
    organizations?: Maybe<JiraServiceManagementOrganizationConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraServiceManagementOrganizationFieldSelectedOrganizationsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementOrganizationFieldOrganizationsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraServiceManagementPeopleField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementPeopleField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedUsers?: Maybe<Array<Maybe<User>>>;
    selectedUsersConnection?: Maybe<JiraUserConnection>;
    isMulti?: Maybe<Scalars['Boolean']>;
    users?: Maybe<JiraUserConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraServiceManagementPeopleFieldSelectedUsersConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementPeopleFieldUsersArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare enum JiraServiceManagementPractice {
    ServiceRequest = "SERVICE_REQUEST",
    IncidentManagement = "INCIDENT_MANAGEMENT",
    ProblemManagement = "PROBLEM_MANAGEMENT",
    ChangeManagement = "CHANGE_MANAGEMENT",
    PostIncidentReview = "POST_INCIDENT_REVIEW"
}
export declare type JiraServiceManagementProjectNavigationMetadata = {
    __typename?: 'JiraServiceManagementProjectNavigationMetadata';
    queueId: Scalars['ID'];
    queueName: Scalars['String'];
};
export declare type JiraServiceManagementProjectTeamType = {
    __typename?: 'JiraServiceManagementProjectTeamType';
    teamType?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementRequestFeedbackField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementRequestFeedbackField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    feedback?: Maybe<JiraServiceManagementFeedback>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraServiceManagementRequestLanguageField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementRequestLanguageField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    language?: Maybe<JiraServiceManagementLanguage>;
    languages?: Maybe<Array<Maybe<JiraServiceManagementLanguage>>>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraServiceManagementRequestType = Node & {
    __typename?: 'JiraServiceManagementRequestType';
    id: Scalars['ID'];
    requestTypeId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    key?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    helpText?: Maybe<Scalars['String']>;
    issueType?: Maybe<JiraIssueType>;
    portalId?: Maybe<Scalars['String']>;
    avatar?: Maybe<JiraAvatar>;
    practices?: Maybe<Array<Maybe<JiraServiceManagementRequestTypePractice>>>;
};
export declare type JiraServiceManagementRequestTypeConnection = {
    __typename?: 'JiraServiceManagementRequestTypeConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraServiceManagementRequestTypeEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraServiceManagementRequestTypeEdge = {
    __typename?: 'JiraServiceManagementRequestTypeEdge';
    node?: Maybe<JiraServiceManagementRequestType>;
    cursor: Scalars['String'];
};
export declare type JiraServiceManagementRequestTypeField = Node & JiraIssueField & JiraIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementRequestTypeField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    requestType?: Maybe<JiraServiceManagementRequestType>;
    requestTypes?: Maybe<JiraServiceManagementRequestTypeConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
};
export declare type JiraServiceManagementRequestTypeFieldRequestTypesArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraServiceManagementRequestTypePractice = {
    __typename?: 'JiraServiceManagementRequestTypePractice';
    key?: Maybe<JiraServiceManagementPractice>;
};
export declare type JiraServiceManagementRequestTypeTemplate = {
    __typename?: 'JiraServiceManagementRequestTypeTemplate';
    formTemplateInternalId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    groups?: Maybe<Array<JiraServiceManagementRequestTypeTemplateGroup>>;
    requestTypeIcon?: Maybe<JiraServiceManagementRequestTypeTemplateRequestTypeIcon>;
    requestTypePortalDescription?: Maybe<Scalars['String']>;
    previewImageUrl?: Maybe<Scalars['URL']>;
};
export declare type JiraServiceManagementRequestTypeTemplateDefaultConfigurationDependencies = {
    __typename?: 'JiraServiceManagementRequestTypeTemplateDefaultConfigurationDependencies';
    workflow?: Maybe<JiraServiceManagementRequestTypeTemplateWorkflow>;
    requestTypeGroup?: Maybe<JiraServiceManagementRequestTypeTemplateRequestTypeGroup>;
};
export declare type JiraServiceManagementRequestTypeTemplateGroup = {
    __typename?: 'JiraServiceManagementRequestTypeTemplateGroup';
    groupKey: Scalars['String'];
    name?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementRequestTypeTemplateRequestTypeGroup = {
    __typename?: 'JiraServiceManagementRequestTypeTemplateRequestTypeGroup';
    requestTypeGroupInternalId: Scalars['String'];
    requestTypeGroupName?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementRequestTypeTemplateRequestTypeIcon = {
    __typename?: 'JiraServiceManagementRequestTypeTemplateRequestTypeIcon';
    requestTypeIconInternalId: Scalars['String'];
};
export declare type JiraServiceManagementRequestTypeTemplateWorkflow = {
    __typename?: 'JiraServiceManagementRequestTypeTemplateWorkflow';
    workflowId: Scalars['ID'];
    workflowName?: Maybe<Scalars['String']>;
    workflowIssueTypeId?: Maybe<Scalars['ID']>;
    workflowIssueTypeName?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementResponder = JiraServiceManagementUserResponder | JiraServiceManagementTeamResponder;
export declare type JiraServiceManagementResponderConnection = {
    __typename?: 'JiraServiceManagementResponderConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraServiceManagementResponderEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraServiceManagementResponderEdge = {
    __typename?: 'JiraServiceManagementResponderEdge';
    node?: Maybe<JiraServiceManagementResponder>;
    cursor: Scalars['String'];
};
export declare type JiraServiceManagementRespondersField = Node & JiraIssueField & JiraIssueFieldConfiguration & {
    __typename?: 'JiraServiceManagementRespondersField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    responders?: Maybe<Array<Maybe<JiraServiceManagementResponder>>>;
    respondersConnection?: Maybe<JiraServiceManagementResponderConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
};
export declare type JiraServiceManagementRespondersFieldRespondersConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementTeamResponder = {
    __typename?: 'JiraServiceManagementTeamResponder';
    teamId?: Maybe<Scalars['String']>;
    teamName?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementUserApproverPrincipal = {
    __typename?: 'JiraServiceManagementUserApproverPrincipal';
    user?: Maybe<User>;
    jiraRest?: Maybe<Scalars['URL']>;
};
export declare type JiraServiceManagementUserResponder = {
    __typename?: 'JiraServiceManagementUserResponder';
    user?: Maybe<User>;
};
export declare type JiraServiceManagementWorkflowAndIssueSummary = {
    __typename?: 'JiraServiceManagementWorkflowAndIssueSummary';
    workflowId?: Maybe<Scalars['String']>;
    workflowName?: Maybe<Scalars['String']>;
    issueTypeId?: Maybe<Scalars['String']>;
    issueTypeName?: Maybe<Scalars['String']>;
};
export declare type JiraServiceManagementWorkflowTemplateMetadata = {
    __typename?: 'JiraServiceManagementWorkflowTemplateMetadata';
    templateId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    tags?: Maybe<Array<Scalars['String']>>;
    thumbnail?: Maybe<Scalars['String']>;
};
export declare type JiraSetApplicationPropertiesPayload = Payload & {
    __typename?: 'JiraSetApplicationPropertiesPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    applicationProperties: Array<JiraApplicationProperty>;
};
export declare type JiraSetApplicationPropertyInput = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type JiraSetIsFavouriteInput = {
    entityId: Scalars['ID'];
    beforeEntityId?: Maybe<Scalars['ID']>;
    isFavourite: Scalars['Boolean'];
};
export declare type JiraSetIsFavouritePayload = Payload & {
    __typename?: 'JiraSetIsFavouritePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    favouriteValue?: Maybe<JiraFavouriteValue>;
};
export declare type JiraSetProjectSelectedDeploymentAppsPropertyInput = {
    projectId: Scalars['ID'];
    deploymentApps?: Maybe<Array<JiraDeploymentAppInput>>;
};
export declare type JiraSetProjectSelectedDeploymentAppsPropertyPayload = Payload & {
    __typename?: 'JiraSetProjectSelectedDeploymentAppsPropertyPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    deploymentApps?: Maybe<Array<JiraDeploymentApp>>;
};
export declare type JiraShareableEntityAnonymousAccessGrant = {
    __typename?: 'JiraShareableEntityAnonymousAccessGrant';
    type?: Maybe<JiraShareableEntityGrant>;
};
export declare type JiraShareableEntityAnonymousAccessGrantInput = {
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraShareableEntityAnyLoggedInUserGrant = {
    __typename?: 'JiraShareableEntityAnyLoggedInUserGrant';
    type?: Maybe<JiraShareableEntityGrant>;
};
export declare type JiraShareableEntityAnyLoggedInUserGrantInput = {
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraShareableEntityEditGrant = JiraShareableEntityGroupGrant | JiraShareableEntityProjectRoleGrant | JiraShareableEntityUserGrant | JiraShareableEntityProjectGrant | JiraShareableEntityUnknownProjectGrant;
export declare type JiraShareableEntityEditGrantConnection = {
    __typename?: 'JiraShareableEntityEditGrantConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraShareableEntityEditGrantEdge>>>;
};
export declare type JiraShareableEntityEditGrantEdge = {
    __typename?: 'JiraShareableEntityEditGrantEdge';
    node?: Maybe<JiraShareableEntityEditGrant>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type JiraShareableEntityEditGrantInput = {
    group?: Maybe<JiraShareableEntityGroupGrantInput>;
    project?: Maybe<JiraShareableEntityProjectGrantInput>;
    projectRole?: Maybe<JiraShareableEntityProjectRoleGrantInput>;
    user?: Maybe<JiraShareableEntityUserGrantInput>;
};
export declare enum JiraShareableEntityGrant {
    AnonymousAccess = "ANONYMOUS_ACCESS",
    AnyLoggedinUserApplicationRole = "ANY_LOGGEDIN_USER_APPLICATION_ROLE",
    Group = "GROUP",
    Project = "PROJECT",
    ProjectRole = "PROJECT_ROLE",
    ProjectUnknown = "PROJECT_UNKNOWN",
    User = "USER"
}
export declare type JiraShareableEntityGroupGrant = {
    __typename?: 'JiraShareableEntityGroupGrant';
    type?: Maybe<JiraShareableEntityGrant>;
    group?: Maybe<JiraGroup>;
};
export declare type JiraShareableEntityGroupGrantInput = {
    id?: Maybe<Scalars['ID']>;
    groupId: Scalars['ID'];
};
export declare type JiraShareableEntityProjectGrant = {
    __typename?: 'JiraShareableEntityProjectGrant';
    type?: Maybe<JiraShareableEntityGrant>;
    project?: Maybe<JiraProject>;
};
export declare type JiraShareableEntityProjectGrantInput = {
    id?: Maybe<Scalars['ID']>;
    projectId: Scalars['ID'];
};
export declare type JiraShareableEntityProjectRoleGrant = {
    __typename?: 'JiraShareableEntityProjectRoleGrant';
    type?: Maybe<JiraShareableEntityGrant>;
    project?: Maybe<JiraProject>;
    role?: Maybe<JiraRole>;
};
export declare type JiraShareableEntityProjectRoleGrantInput = {
    id?: Maybe<Scalars['ID']>;
    projectId: Scalars['ID'];
    projectRoleId: Scalars['Int'];
};
export declare type JiraShareableEntityShareGrant = JiraShareableEntityGroupGrant | JiraShareableEntityProjectRoleGrant | JiraShareableEntityProjectGrant | JiraShareableEntityAnonymousAccessGrant | JiraShareableEntityAnyLoggedInUserGrant | JiraShareableEntityUnknownProjectGrant | JiraShareableEntityUserGrant;
export declare type JiraShareableEntityShareGrantConnection = {
    __typename?: 'JiraShareableEntityShareGrantConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraShareableEntityShareGrantEdge>>>;
};
export declare type JiraShareableEntityShareGrantEdge = {
    __typename?: 'JiraShareableEntityShareGrantEdge';
    node?: Maybe<JiraShareableEntityShareGrant>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type JiraShareableEntityShareGrantInput = {
    group?: Maybe<JiraShareableEntityGroupGrantInput>;
    project?: Maybe<JiraShareableEntityProjectGrantInput>;
    projectRole?: Maybe<JiraShareableEntityProjectRoleGrantInput>;
    anonymousAccess?: Maybe<JiraShareableEntityAnonymousAccessGrantInput>;
    anyLoggedInUser?: Maybe<JiraShareableEntityAnyLoggedInUserGrantInput>;
    user?: Maybe<JiraShareableEntityUserGrantInput>;
};
export declare type JiraShareableEntityUnknownProjectGrant = {
    __typename?: 'JiraShareableEntityUnknownProjectGrant';
    type?: Maybe<JiraShareableEntityGrant>;
};
export declare type JiraShareableEntityUserGrant = {
    __typename?: 'JiraShareableEntityUserGrant';
    type?: Maybe<JiraShareableEntityGrant>;
    user?: Maybe<User>;
};
export declare type JiraShareableEntityUserGrantInput = {
    id?: Maybe<Scalars['ID']>;
    userId: Scalars['ID'];
};
export declare type JiraShortcutDataInput = {
    name: Scalars['String'];
    url: Scalars['String'];
};
export declare type JiraSimilarIssues = {
    __typename?: 'JiraSimilarIssues';
    featureEnabled: Scalars['Boolean'];
};
export declare type JiraSingleGroupPickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraSingleGroupPickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedGroup?: Maybe<JiraGroup>;
    groups?: Maybe<JiraGroupConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    searchUrl?: Maybe<Scalars['String']>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraSingleGroupPickerFieldGroupsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraSingleLineTextField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraSingleLineTextField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    text?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraSingleLineTextFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    text?: Maybe<Scalars['String']>;
};
export declare type JiraSingleLineTextFieldPayload = Payload & {
    __typename?: 'JiraSingleLineTextFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraSingleLineTextField>;
};
export declare type JiraSingleSelectField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraSingleSelectField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    fieldOption?: Maybe<JiraOption>;
    fieldOptions?: Maybe<JiraOptionConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraSingleSelectFieldFieldOptionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraSingleSelectFieldPayload = Payload & {
    __typename?: 'JiraSingleSelectFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraSingleSelectField>;
};
export declare type JiraSingleSelectOperationInput = {
    operation: JiraSingleValueFieldOperations;
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraSingleSelectUserPickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraSingleSelectUserPickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    user?: Maybe<User>;
    users?: Maybe<JiraUserConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraSingleSelectUserPickerFieldUsersArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
    sessionId?: Maybe<Scalars['ID']>;
};
export declare type JiraSingleSelectUserPickerFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraSingleSelectUserPickerFieldPayload = Payload & {
    __typename?: 'JiraSingleSelectUserPickerFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraSingleSelectUserPickerField>;
};
export declare enum JiraSingleValueFieldOperations {
    Set = "SET"
}
export declare type JiraSingleVersionPickerField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraSingleVersionPickerField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    version?: Maybe<JiraVersion>;
    versions?: Maybe<JiraVersionConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraSingleVersionPickerFieldVersionsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    suggested?: Maybe<Scalars['Boolean']>;
};
export declare type JiraSoftwareProjectNavigationMetadata = {
    __typename?: 'JiraSoftwareProjectNavigationMetadata';
    id: Scalars['ID'];
    boardId: Scalars['ID'];
    boardName: Scalars['String'];
    isSimpleBoard: Scalars['Boolean'];
    totalBoardsInProject: Scalars['Long'];
};
export declare type JiraSprint = Node & {
    __typename?: 'JiraSprint';
    id: Scalars['ID'];
    sprintId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    state?: Maybe<JiraSprintState>;
    boardName?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
    completionDate?: Maybe<Scalars['DateTime']>;
    goal?: Maybe<Scalars['String']>;
};
export declare type JiraSprintConnection = {
    __typename?: 'JiraSprintConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraSprintEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraSprintEdge = {
    __typename?: 'JiraSprintEdge';
    node?: Maybe<JiraSprint>;
    cursor: Scalars['String'];
};
export declare type JiraSprintField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraSprintField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedSprints?: Maybe<Array<Maybe<JiraSprint>>>;
    selectedSprintsConnection?: Maybe<JiraSprintConnection>;
    sprints?: Maybe<JiraSprintConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraSprintFieldSelectedSprintsConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraSprintFieldSprintsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    currentProjectOnly?: Maybe<Scalars['Boolean']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    state?: Maybe<JiraSprintState>;
};
export declare type JiraSprintFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraSprintFieldPayload = Payload & {
    __typename?: 'JiraSprintFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraSprintField>;
};
export declare enum JiraSprintState {
    Active = "ACTIVE",
    Future = "FUTURE",
    Closed = "CLOSED"
}
export declare type JiraStatus = Node & {
    __typename?: 'JiraStatus';
    id: Scalars['ID'];
    statusId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    statusCategory?: Maybe<JiraStatusCategory>;
};
export declare type JiraStatusCategory = Node & {
    __typename?: 'JiraStatusCategory';
    id: Scalars['ID'];
    statusCategoryId: Scalars['String'];
    key?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    colorName?: Maybe<JiraStatusCategoryColor>;
};
export declare enum JiraStatusCategoryColor {
    MediumGray = "MEDIUM_GRAY",
    Green = "GREEN",
    Yellow = "YELLOW",
    Brown = "BROWN",
    WarmRed = "WARM_RED",
    BlueGray = "BLUE_GRAY"
}
export declare type JiraStatusCategoryField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraStatusCategoryField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    statusCategory: JiraStatusCategory;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraStatusField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraStatusField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    status: JiraStatus;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    transitions?: Maybe<JiraTransitionConnection>;
};
export declare type JiraStatusFieldTransitionsArgs = {
    transitionId?: Maybe<Scalars['Int']>;
    includeRemoteOnlyTransitions?: Maybe<Scalars['Boolean']>;
    includeUnavailableTransitions?: Maybe<Scalars['Boolean']>;
    sortingOption?: Maybe<JiraTransitionSortOption>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraStatusFieldPayload = Payload & {
    __typename?: 'JiraStatusFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraStatusField>;
};
export declare type JiraStoryPointEstimateFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    storyPoint?: Maybe<Scalars['Float']>;
};
export declare type JiraStoryPointEstimateFieldPayload = Payload & {
    __typename?: 'JiraStoryPointEstimateFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraNumberField>;
};
export declare type JiraSubtasksField = Node & JiraIssueField & JiraIssueFieldConfiguration & {
    __typename?: 'JiraSubtasksField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    subtasks?: Maybe<JiraIssueConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
};
export declare type JiraSubtasksFieldSubtasksArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraSystemFilter = JiraFilter & Node & {
    __typename?: 'JiraSystemFilter';
    id: Scalars['ID'];
    filterId: Scalars['String'];
    jql: Scalars['String'];
    name: Scalars['String'];
    isFavourite?: Maybe<Scalars['Boolean']>;
};
export declare type JiraSystemFilterConnection = {
    __typename?: 'JiraSystemFilterConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraSystemFilterEdge>>>;
};
export declare type JiraSystemFilterEdge = {
    __typename?: 'JiraSystemFilterEdge';
    node?: Maybe<JiraSystemFilter>;
    cursor: Scalars['String'];
};
export declare type JiraTeam = Node & {
    __typename?: 'JiraTeam';
    id: Scalars['ID'];
    teamId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    avatar?: Maybe<JiraAvatar>;
    members?: Maybe<JiraUserConnection>;
    isShared?: Maybe<Scalars['Boolean']>;
};
export declare type JiraTeamConnection = {
    __typename?: 'JiraTeamConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraTeamEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraTeamEdge = {
    __typename?: 'JiraTeamEdge';
    node?: Maybe<JiraTeam>;
    cursor: Scalars['String'];
};
export declare type JiraTeamField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraTeamField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedTeam?: Maybe<JiraTeam>;
    teams?: Maybe<JiraTeamConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraTeamFieldTeamsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraTeamFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraTeamFieldPayload = Payload & {
    __typename?: 'JiraTeamFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraTeamViewField>;
};
export declare type JiraTeamView = {
    __typename?: 'JiraTeamView';
    jiraSuppliedId: Scalars['ID'];
    jiraSuppliedTeamId: Scalars['String'];
    jiraSuppliedVisibility?: Maybe<Scalars['Boolean']>;
    jiraSuppliedName?: Maybe<Scalars['String']>;
    jiraSuppliedAvatar?: Maybe<JiraAvatar>;
    fullTeam?: Maybe<TeamV2>;
};
export declare type JiraTeamViewFullTeamArgs = {
    siteId?: Scalars['String'];
};
export declare type JiraTeamViewConnection = {
    __typename?: 'JiraTeamViewConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraTeamViewEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraTeamViewEdge = {
    __typename?: 'JiraTeamViewEdge';
    node?: Maybe<JiraTeamView>;
    cursor: Scalars['String'];
};
export declare type JiraTeamViewField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraTeamViewField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    selectedTeam?: Maybe<JiraTeamView>;
    teams?: Maybe<JiraTeamViewConnection>;
    searchUrl?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraTeamViewFieldTeamsArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    sessionId: Scalars['ID'];
    organisationId: Scalars['ID'];
};
export declare type JiraTemporaryAttachment = {
    __typename?: 'JiraTemporaryAttachment';
    mediaApiFileId?: Maybe<Scalars['String']>;
};
export declare type JiraTemporaryAttachmentConnection = {
    __typename?: 'JiraTemporaryAttachmentConnection';
    indicativeCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraTemporaryAttachmentEdge>>>;
};
export declare type JiraTemporaryAttachmentEdge = {
    __typename?: 'JiraTemporaryAttachmentEdge';
    node?: Maybe<JiraTemporaryAttachment>;
    cursor: Scalars['String'];
};
export declare enum JiraTimeFormat {
    Pretty = "PRETTY",
    Days = "DAYS",
    Hours = "HOURS"
}
export declare type JiraTimeTrackingField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraTimeTrackingField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    originalEstimate?: Maybe<JiraEstimate>;
    remainingEstimate?: Maybe<JiraEstimate>;
    timeSpent?: Maybe<JiraEstimate>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
    timeTrackingSettings?: Maybe<JiraTimeTrackingSettings>;
};
export declare type JiraTimeTrackingFieldPayload = Payload & {
    __typename?: 'JiraTimeTrackingFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraTimeTrackingField>;
};
export declare type JiraTimeTrackingSettings = {
    __typename?: 'JiraTimeTrackingSettings';
    isJiraConfiguredTimeTrackingEnabled?: Maybe<Scalars['Boolean']>;
    workingHoursPerDay?: Maybe<Scalars['Float']>;
    workingDaysPerWeek?: Maybe<Scalars['Float']>;
    defaultFormat?: Maybe<JiraTimeFormat>;
    defaultUnit?: Maybe<JiraTimeUnit>;
};
export declare enum JiraTimeUnit {
    Minute = "MINUTE",
    Hour = "HOUR",
    Day = "DAY",
    Week = "WEEK"
}
export declare type JiraTransition = {
    __typename?: 'JiraTransition';
    transitionId?: Maybe<Scalars['Int']>;
    name?: Maybe<Scalars['String']>;
    hasScreen?: Maybe<Scalars['Boolean']>;
    isGlobal?: Maybe<Scalars['Boolean']>;
    isInitial?: Maybe<Scalars['Boolean']>;
    hasPreConditions?: Maybe<Scalars['Boolean']>;
    isLooped?: Maybe<Scalars['Boolean']>;
    isAvailable?: Maybe<Scalars['Boolean']>;
    to?: Maybe<JiraStatus>;
};
export declare type JiraTransitionConnection = {
    __typename?: 'JiraTransitionConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraTransitionEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraTransitionEdge = {
    __typename?: 'JiraTransitionEdge';
    node?: Maybe<JiraTransition>;
    cursor: Scalars['String'];
};
export declare enum JiraTransitionSortOption {
    OpsBarThenStatusCategory = "OPS_BAR_THEN_STATUS_CATEGORY",
    OpsBar = "OPS_BAR"
}
export declare type JiraUiExposedError = {
    __typename?: 'JiraUIExposedError';
    message?: Maybe<Scalars['String']>;
};
export declare type JiraUpdateCascadingSelectFieldInput = {
    id: Scalars['ID'];
    operation: JiraCascadingSelectFieldOperationInput;
};
export declare type JiraUpdateColorFieldInput = {
    id: Scalars['ID'];
    operation: JiraColorFieldOperationInput;
};
export declare type JiraUpdateComponentsFieldInput = {
    id: Scalars['ID'];
    operations: Array<JiraComponentFieldOperationInput>;
};
export declare type JiraUpdateCustomFilterDetailsInput = {
    id: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    shareGrants: Array<Maybe<JiraShareableEntityShareGrantInput>>;
    editGrants: Array<Maybe<JiraShareableEntityEditGrantInput>>;
};
export declare type JiraUpdateCustomFilterJqlInput = {
    id: Scalars['ID'];
    jql: Scalars['String'];
};
export declare type JiraUpdateCustomFilterJqlPayload = Payload & {
    __typename?: 'JiraUpdateCustomFilterJqlPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    filter?: Maybe<JiraCustomFilter>;
};
export declare type JiraUpdateCustomFilterPayload = Payload & {
    __typename?: 'JiraUpdateCustomFilterPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    filter?: Maybe<JiraCustomFilter>;
};
export declare type JiraUpdateDateFieldInput = {
    id: Scalars['ID'];
    operation: JiraDateFieldOperationInput;
};
export declare type JiraUpdateDateTimeFieldInput = {
    id: Scalars['ID'];
    operation: JiraDateTimeFieldOperationInput;
};
export declare type JiraUpdateLabelsFieldInput = {
    id: Scalars['ID'];
    operations: Array<JiraLabelsFieldOperationInput>;
};
export declare type JiraUpdateMultipleSelectFieldInput = {
    id: Scalars['ID'];
    operations: Array<JiraMultipleSelectFieldOperationInput>;
};
export declare type JiraUpdateNumberFieldInput = {
    id: Scalars['ID'];
    operation: JiraNumberFieldOperationInput;
};
export declare type JiraUpdatePriorityFieldInput = {
    id: Scalars['ID'];
    operation: JiraPriorityFieldOperationInput;
};
export declare type JiraUpdateProjectFieldInput = {
    id: Scalars['ID'];
    operation: JiraProjectFieldOperationInput;
};
export declare type JiraUpdateRadioSelectFieldInput = {
    id: Scalars['ID'];
    operation: JiraRadioSelectFieldOperationInput;
};
export declare type JiraUpdateReleaseNotesConfigurationInput = {
    id: Scalars['ID'];
    issueFieldIds: Array<Scalars['ID']>;
    issueTypeIds: Array<Scalars['ID']>;
    issueKeyConfig: JiraReleaseNotesIssueKeyConfig;
};
export declare type JiraUpdateReleaseNotesConfigurationPayload = Payload & {
    __typename?: 'JiraUpdateReleaseNotesConfigurationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    releaseNotesConfiguration?: Maybe<JiraReleaseNotesConfiguration>;
    version?: Maybe<JiraVersion>;
};
export declare type JiraUpdateShortcutInput = {
    projectId: Scalars['ID'];
    shortcutId: Scalars['ID'];
    shortcutData: JiraShortcutDataInput;
};
export declare type JiraUpdateSingleLineTextFieldInput = {
    id: Scalars['ID'];
    operation: JiraSingleLineTextFieldOperationInput;
};
export declare type JiraUpdateSingleSelectFieldInput = {
    id: Scalars['ID'];
    operation: JiraSingleSelectOperationInput;
};
export declare type JiraUpdateSingleSelectUserPickerFieldInput = {
    id: Scalars['ID'];
    operation: JiraSingleSelectUserPickerFieldOperationInput;
};
export declare type JiraUpdateSprintFieldInput = {
    id: Scalars['ID'];
    operation: JiraSprintFieldOperationInput;
};
export declare type JiraUpdateStatusFieldInput = {
    id: Scalars['ID'];
    statusTransitionId: Scalars['Int'];
};
export declare type JiraUpdateStoryPointEstimateFieldInput = {
    id: Scalars['ID'];
    operation: JiraStoryPointEstimateFieldOperationInput;
};
export declare type JiraUpdateTeamFieldInput = {
    id: Scalars['ID'];
    operation: JiraTeamFieldOperationInput;
};
export declare type JiraUpdateTimeTrackingFieldInput = {
    id: Scalars['ID'];
    originalEstimate?: Maybe<JiraEstimateInput>;
};
export declare type JiraUpdateUrlFieldInput = {
    id: Scalars['ID'];
    operation: JiraUrlFieldOperationInput;
};
export declare type JiraUpdateVersionArchivedStatusInput = {
    id: Scalars['ID'];
    isArchived: Scalars['Boolean'];
};
export declare type JiraUpdateVersionDescriptionInput = {
    id: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
};
export declare type JiraUpdateVersionDriverInput = {
    id: Scalars['ID'];
    driver?: Maybe<Scalars['ID']>;
};
export declare type JiraUpdateVersionNameInput = {
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type JiraUpdateVersionPayload = Payload & {
    __typename?: 'JiraUpdateVersionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    version?: Maybe<JiraVersion>;
};
export declare type JiraUpdateVersionRelatedWorkGenericLinkInput = {
    versionId: Scalars['ID'];
    relatedWorkId: Scalars['ID'];
    url?: Maybe<Scalars['URL']>;
    title?: Maybe<Scalars['String']>;
    category: Scalars['String'];
};
export declare type JiraUpdateVersionRelatedWorkGenericLinkPayload = Payload & {
    __typename?: 'JiraUpdateVersionRelatedWorkGenericLinkPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    relatedWork?: Maybe<JiraVersionRelatedWorkV2>;
};
export declare type JiraUpdateVersionReleaseDateInput = {
    id: Scalars['ID'];
    releaseDate?: Maybe<Scalars['DateTime']>;
};
export declare type JiraUpdateVersionReleasedStatusInput = {
    id: Scalars['ID'];
    isReleased: Scalars['Boolean'];
};
export declare type JiraUpdateVersionStartDateInput = {
    id: Scalars['ID'];
    startDate?: Maybe<Scalars['DateTime']>;
};
export declare type JiraUpdateVersionWarningConfigInput = {
    jiraProjectId: Scalars['ID'];
    updatedVersionWarningConfig: JiraVersionUpdatedWarningConfigInput;
};
export declare type JiraUpdateVersionWarningConfigPayload = Payload & {
    __typename?: 'JiraUpdateVersionWarningConfigPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    version?: Maybe<JiraVersionResult>;
};
export declare type JiraUpdateVersionWarningConfigPayloadVersionArgs = {
    id: Scalars['ID'];
};
export declare type JiraUpdateVotesFieldInput = {
    id: Scalars['ID'];
    operation: JiraVotesFieldOperationInput;
};
export declare type JiraUpdateWatchesFieldInput = {
    id: Scalars['ID'];
    operation: JiraWatchesFieldOperationInput;
};
export declare type JiraUrlField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraUrlField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    uri?: Maybe<Scalars['String']>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraUrlFieldOperationInput = {
    operation: JiraSingleValueFieldOperations;
    uri?: Maybe<Scalars['String']>;
};
export declare type JiraUrlFieldPayload = Payload & {
    __typename?: 'JiraUrlFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraUrlField>;
};
export declare type JiraUser = {
    __typename?: 'JiraUser';
    accountId?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    avatarUrl?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
};
export declare type JiraUserBroadcastMessage = Node & {
    __typename?: 'JiraUserBroadcastMessage';
    id: Scalars['ID'];
    shouldDisplay?: Maybe<Scalars['Boolean']>;
    isDismissed?: Maybe<Scalars['Boolean']>;
    isUserTargeted?: Maybe<Scalars['Boolean']>;
};
export declare type JiraUserBroadcastMessageActionPayload = Payload & {
    __typename?: 'JiraUserBroadcastMessageActionPayload';
    userBroadcastMessage?: Maybe<JiraUserBroadcastMessage>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraUserBroadcastMessageConnection = HasTotal & HasPageInfo & {
    __typename?: 'JiraUserBroadcastMessageConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraUserBroadcastMessageEdge>>>;
};
export declare type JiraUserBroadcastMessageEdge = {
    __typename?: 'JiraUserBroadcastMessageEdge';
    node?: Maybe<JiraUserBroadcastMessage>;
    cursor: Scalars['String'];
};
export declare type JiraUserConnection = {
    __typename?: 'JiraUserConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraUserEdge>>>;
    totalCount?: Maybe<Scalars['Int']>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraUserEdge = {
    __typename?: 'JiraUserEdge';
    node?: Maybe<User>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type JiraUserFieldConfig = {
    __typename?: 'JiraUserFieldConfig';
    isPinned?: Maybe<Scalars['Boolean']>;
    isSelected?: Maybe<Scalars['Boolean']>;
};
export declare type JiraUserGrantTypeValue = Node & {
    __typename?: 'JiraUserGrantTypeValue';
    id: Scalars['ID'];
    user?: Maybe<User>;
};
export declare type JiraUserGroup = {
    __typename?: 'JiraUserGroup';
    accountId?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
};
export declare type JiraUserIssueFieldConfiguration = {
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraUserPreferences = {
    __typename?: 'JiraUserPreferences';
    isIssueViewAttachmentReferenceFlagDismissed?: Maybe<Scalars['Boolean']>;
    isIssueViewChildIssuesLimitBestPracticeFlagDismissed?: Maybe<Scalars['Boolean']>;
    isIssueViewHideDoneChildIssuesFilterEnabled?: Maybe<Scalars['Boolean']>;
    isIssueViewPinnedFieldsBannerDismissed?: Maybe<Scalars['Boolean']>;
    issueViewActivityFeedSortOrder?: Maybe<JiraIssueViewActivityFeedSortOrder>;
    issueViewAttachmentPanelViewMode?: Maybe<JiraIssueViewAttachmentPanelViewMode>;
    issueViewPinnedFields?: Maybe<Scalars['String']>;
    issueViewPinnedFieldsBannerLastInteracted?: Maybe<Scalars['DateTime']>;
    issueViewSidebarResizeRatio?: Maybe<Scalars['String']>;
    issueViewTimestampDisplayMode?: Maybe<JiraIssueViewTimestampDisplayMode>;
    jqlBuilderSearchMode?: Maybe<JiraJqlBuilderSearchMode>;
    issueNavigatorSearchLayout?: Maybe<JiraIssueNavigatorSearchLayout>;
    isNaturalLanguageSpotlightTourEnabled?: Maybe<Scalars['Boolean']>;
};
export declare type JiraUserPreferencesIssueViewPinnedFieldsArgs = {
    projectKey: Scalars['String'];
};
export declare type JiraUserPreferencesMutation = {
    __typename?: 'JiraUserPreferencesMutation';
    setJQLBuilderSearchMode?: Maybe<JiraJqlBuilderSearchModeMutationPayload>;
    setIssueNavigatorSearchLayout?: Maybe<JiraIssueNavigatorSearchLayoutMutationPayload>;
    setNaturalLanguageSpotlightTourEnabled?: Maybe<JiraNaturalLanguageSearchSpotlightTourEnabledMutationPayload>;
};
export declare type JiraUserPreferencesMutationSetJqlBuilderSearchModeArgs = {
    searchMode?: Maybe<JiraJqlBuilderSearchMode>;
};
export declare type JiraUserPreferencesMutationSetIssueNavigatorSearchLayoutArgs = {
    searchLayout?: Maybe<JiraIssueNavigatorSearchLayout>;
};
export declare type JiraUserPreferencesMutationSetNaturalLanguageSpotlightTourEnabledArgs = {
    isEnabled: Scalars['Boolean'];
};
export declare type JiraUserSegmentation = {
    __typename?: 'JiraUserSegmentation';
    role?: Maybe<Scalars['String']>;
    teamType?: Maybe<Scalars['String']>;
};
export declare type JiraVersion = Node & {
    __typename?: 'JiraVersion';
    id: Scalars['ID'];
    versionId: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['URL']>;
    status?: Maybe<JiraVersionStatus>;
    description?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    releaseDate?: Maybe<Scalars['DateTime']>;
    warningConfig?: Maybe<JiraVersionWarningConfig>;
    connectAddonIframeData?: Maybe<Array<Maybe<JiraVersionConnectAddonIframeData>>>;
    issues?: Maybe<JiraIssueConnection>;
    project?: Maybe<JiraProject>;
    canEdit?: Maybe<Scalars['Boolean']>;
    canEditRelatedWork?: Maybe<Scalars['Boolean']>;
    canAddAndRemoveIssues?: Maybe<Scalars['Boolean']>;
    canViewDevTools?: Maybe<Scalars['Boolean']>;
    releaseNotesOptionsIssueTypes?: Maybe<JiraIssueTypeConnection>;
    releaseNotesOptionsIssueFields?: Maybe<JiraIssueFieldConnection>;
    nativeReleaseNotesOptionsIssueFields?: Maybe<JiraIssueFieldConnection>;
    releaseNotes?: Maybe<JiraAdf>;
    releasesNotesPreferenceType?: Maybe<JiraVersionReleaseNotesType>;
    devOpsSummarisedEntities?: Maybe<DevOpsSummarisedEntities>;
    versionIssueTableHiddenColumns?: Maybe<Array<Maybe<JiraVersionIssueTableColumn>>>;
    collapsedUis?: Maybe<Array<Maybe<JiraVersionDetailsCollapsedUi>>>;
    epicsForFilter?: Maybe<JiraIssueConnection>;
    canViewVersionDetailsPage?: Maybe<Scalars['Boolean']>;
    warningsCount?: Maybe<Scalars['Long']>;
    contributors?: Maybe<JiraVersionContributorConnection>;
    hasReleaseNote?: Maybe<Scalars['Boolean']>;
    driver?: Maybe<User>;
    statistics?: Maybe<JiraVersionStatistics>;
    releaseNotesConfiguration?: Maybe<JiraReleaseNotesConfiguration>;
    availableSites?: Maybe<JiraReleaseNotesInConfluenceAvailableSitesConnection>;
    relatedWork?: Maybe<JiraVersionRelatedWorkConnection>;
    relatedWorkV2?: Maybe<JiraVersionRelatedWorkV2Connection>;
    suggestedRelatedWorkCategories?: Maybe<Array<Maybe<Scalars['String']>>>;
    approvers?: Maybe<JiraVersionApproverConnection>;
};
export declare type JiraVersionIssuesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraVersionIssuesFilter>;
    filters?: Maybe<JiraVersionIssuesFiltersInput>;
    sortBy?: Maybe<JiraVersionIssuesSortInput>;
};
export declare type JiraVersionReleaseNotesOptionsIssueTypesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraVersionReleaseNotesOptionsIssueFieldsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    searchString?: Maybe<Scalars['String']>;
};
export declare type JiraVersionNativeReleaseNotesOptionsIssueFieldsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    searchString?: Maybe<Scalars['String']>;
};
export declare type JiraVersionReleaseNotesArgs = {
    releaseNoteConfiguration?: Maybe<JiraVersionReleaseNotesConfigurationInput>;
};
export declare type JiraVersionEpicsForFilterArgs = {
    searchStr?: Maybe<Scalars['String']>;
};
export declare type JiraVersionContributorsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraVersionStatisticsArgs = {
    boardId: Scalars['ID'];
};
export declare type JiraVersionAvailableSitesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    searchString?: Maybe<Scalars['String']>;
};
export declare type JiraVersionRelatedWorkArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraVersionRelatedWorkV2Args = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraVersionApproversArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraVersionAddApproverInput = {
    versionId: Scalars['ID'];
    approverAccountId: Scalars['ID'];
};
export declare type JiraVersionAddApproverPayload = Payload & {
    __typename?: 'JiraVersionAddApproverPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    approverEdge?: Maybe<JiraVersionApproverEdge>;
};
export declare type JiraVersionApprover = Node & {
    __typename?: 'JiraVersionApprover';
    id: Scalars['ID'];
    user?: Maybe<User>;
    description?: Maybe<Scalars['String']>;
    declineReason?: Maybe<Scalars['String']>;
    status?: Maybe<JiraVersionApproverStatus>;
};
export declare type JiraVersionApproverConnection = {
    __typename?: 'JiraVersionApproverConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraVersionApproverEdge>>>;
};
export declare type JiraVersionApproverEdge = {
    __typename?: 'JiraVersionApproverEdge';
    node?: Maybe<JiraVersionApprover>;
    cursor: Scalars['String'];
};
export declare enum JiraVersionApproverStatus {
    Pending = "PENDING",
    Approved = "APPROVED",
    Declined = "DECLINED"
}
export declare type JiraVersionConnectAddonIframeData = {
    __typename?: 'JiraVersionConnectAddonIframeData';
    appKey?: Maybe<Scalars['String']>;
    moduleKey?: Maybe<Scalars['String']>;
    appName?: Maybe<Scalars['String']>;
    location?: Maybe<Scalars['String']>;
    options?: Maybe<Scalars['JSON']>;
};
export declare type JiraVersionConnection = {
    __typename?: 'JiraVersionConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraVersionEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraVersionContributorConnection = {
    __typename?: 'JiraVersionContributorConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraVersionContributorEdge>>>;
};
export declare type JiraVersionContributorEdge = {
    __typename?: 'JiraVersionContributorEdge';
    node?: Maybe<User>;
    cursor: Scalars['String'];
};
export declare type JiraVersionCreateMutationInput = {
    projectId: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    releaseDate?: Maybe<Scalars['DateTime']>;
    driver?: Maybe<Scalars['ID']>;
};
export declare type JiraVersionDeleteApproverPayload = Payload & {
    __typename?: 'JiraVersionDeleteApproverPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    deletedApproverId?: Maybe<Scalars['ID']>;
};
export declare type JiraVersionDetailPage = {
    __typename?: 'JiraVersionDetailPage';
    warningConfig?: Maybe<JiraVersionWarningConfig>;
    failingBuildIssues?: Maybe<JiraVersionDetailPageIssues>;
    openPullRequestIssues?: Maybe<JiraVersionDetailPageIssues>;
    unreviewedCodeIssues?: Maybe<JiraVersionDetailPageIssues>;
    toDoIssues?: Maybe<JiraVersionDetailPageIssues>;
    inProgressIssues?: Maybe<JiraVersionDetailPageIssues>;
    doneIssues?: Maybe<JiraVersionDetailPageIssues>;
    allIssues?: Maybe<JiraVersionDetailPageIssues>;
};
export declare type JiraVersionDetailPageIssues = {
    __typename?: 'JiraVersionDetailPageIssues';
    jql?: Maybe<Scalars['String']>;
    issues?: Maybe<JiraIssueConnection>;
};
export declare type JiraVersionDetailPageIssuesIssuesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare enum JiraVersionDetailsCollapsedUi {
    Description = "DESCRIPTION",
    RelatedWork = "RELATED_WORK",
    Issues = "ISSUES",
    ProgressCard = "PROGRESS_CARD"
}
export declare type JiraVersionDetailsCollapsedUisInput = {
    collapsedUis: Array<JiraVersionDetailsCollapsedUi>;
    versionId: Scalars['ID'];
};
export declare type JiraVersionDetailsCollapsedUisPayload = Payload & {
    __typename?: 'JiraVersionDetailsCollapsedUisPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    version?: Maybe<JiraVersion>;
};
export declare type JiraVersionDriverConnection = {
    __typename?: 'JiraVersionDriverConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraVersionDriverEdge>>>;
};
export declare type JiraVersionDriverEdge = {
    __typename?: 'JiraVersionDriverEdge';
    node?: Maybe<User>;
    cursor: Scalars['String'];
};
export declare type JiraVersionEdge = {
    __typename?: 'JiraVersionEdge';
    node?: Maybe<JiraVersion>;
    cursor: Scalars['String'];
};
export declare enum JiraVersionIssueTableColumn {
    IssueAssignee = "ISSUE_ASSIGNEE",
    IssueStatus = "ISSUE_STATUS",
    DevelopmentStatus = "DEVELOPMENT_STATUS",
    BuildStatus = "BUILD_STATUS",
    DeploymentStatus = "DEPLOYMENT_STATUS",
    FeatureFlagStatus = "FEATURE_FLAG_STATUS",
    MoreAction = "MORE_ACTION",
    Warnings = "WARNINGS",
    IssuePriority = "ISSUE_PRIORITY"
}
export declare type JiraVersionIssueTableColumnHiddenStateInput = {
    hiddenColumns: Array<JiraVersionIssueTableColumn>;
    versionId: Scalars['ID'];
};
export declare type JiraVersionIssueTableColumnHiddenStatePayload = Payload & {
    __typename?: 'JiraVersionIssueTableColumnHiddenStatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    version?: Maybe<JiraVersion>;
};
export declare enum JiraVersionIssuesFilter {
    All = "ALL",
    Todo = "TODO",
    InProgress = "IN_PROGRESS",
    Done = "DONE",
    UnreviewedCode = "UNREVIEWED_CODE",
    OpenReview = "OPEN_REVIEW",
    OpenPullRequest = "OPEN_PULL_REQUEST",
    FailingBuild = "FAILING_BUILD"
}
export declare type JiraVersionIssuesFiltersInput = {
    searchStr?: Maybe<Scalars['String']>;
    epicIds?: Maybe<Array<Scalars['ID']>>;
    statusCategories?: Maybe<Array<JiraVersionIssuesStatusCategories>>;
    warningCategories?: Maybe<Array<JiraVersionWarningCategories>>;
    assigneeAccountIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare enum JiraVersionIssuesSortField {
    Assignee = "ASSIGNEE",
    Created = "CREATED",
    Key = "KEY",
    Priority = "PRIORITY",
    Status = "STATUS"
}
export declare type JiraVersionIssuesSortInput = {
    sortByField?: Maybe<JiraVersionIssuesSortField>;
    order?: Maybe<SortDirection>;
};
export declare enum JiraVersionIssuesStatusCategories {
    Done = "DONE",
    InProgress = "IN_PROGRESS",
    Todo = "TODO"
}
export declare type JiraVersionRelatedWork = {
    __typename?: 'JiraVersionRelatedWork';
    relatedWorkId?: Maybe<Scalars['ID']>;
    url?: Maybe<Scalars['URL']>;
    title?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
    addedOn?: Maybe<Scalars['DateTime']>;
    addedBy?: Maybe<User>;
};
export declare type JiraVersionRelatedWorkConfluenceReleaseNotes = JiraVersionRelatedWorkV2 & {
    __typename?: 'JiraVersionRelatedWorkConfluenceReleaseNotes';
    relatedWorkId?: Maybe<Scalars['ID']>;
    url?: Maybe<Scalars['URL']>;
    title?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
    addedOn?: Maybe<Scalars['DateTime']>;
    addedBy?: Maybe<User>;
    assignee?: Maybe<User>;
    issue?: Maybe<JiraIssue>;
};
export declare type JiraVersionRelatedWorkConnection = {
    __typename?: 'JiraVersionRelatedWorkConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraVersionRelatedWorkEdge>>>;
};
export declare type JiraVersionRelatedWorkEdge = {
    __typename?: 'JiraVersionRelatedWorkEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<JiraVersionRelatedWork>;
};
export declare type JiraVersionRelatedWorkGenericLink = JiraVersionRelatedWorkV2 & {
    __typename?: 'JiraVersionRelatedWorkGenericLink';
    relatedWorkId?: Maybe<Scalars['ID']>;
    url?: Maybe<Scalars['URL']>;
    title?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
    addedOn?: Maybe<Scalars['DateTime']>;
    addedBy?: Maybe<User>;
    assignee?: Maybe<User>;
    issue?: Maybe<JiraIssue>;
};
export declare type JiraVersionRelatedWorkNativeReleaseNotes = JiraVersionRelatedWorkV2 & {
    __typename?: 'JiraVersionRelatedWorkNativeReleaseNotes';
    addedOn?: Maybe<Scalars['DateTime']>;
    category?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    assignee?: Maybe<User>;
    issue?: Maybe<JiraIssue>;
};
export declare enum JiraVersionRelatedWorkType {
    GenericLink = "GENERIC_LINK",
    ConfluenceReleaseNotes = "CONFLUENCE_RELEASE_NOTES",
    NativeReleaseNotes = "NATIVE_RELEASE_NOTES"
}
export declare type JiraVersionRelatedWorkV2 = {
    category?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    assignee?: Maybe<User>;
    issue?: Maybe<JiraIssue>;
};
export declare type JiraVersionRelatedWorkV2Connection = {
    __typename?: 'JiraVersionRelatedWorkV2Connection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraVersionRelatedWorkV2Edge>>>;
};
export declare type JiraVersionRelatedWorkV2Edge = {
    __typename?: 'JiraVersionRelatedWorkV2Edge';
    cursor: Scalars['String'];
    node?: Maybe<JiraVersionRelatedWorkV2>;
};
export declare type JiraVersionReleaseNotesConfigurationInput = {
    issueFieldIds: Array<Scalars['ID']>;
    issueTypeIds: Array<Scalars['ID']>;
    issueKeyConfig: JiraReleaseNotesIssueKeyConfig;
};
export declare enum JiraVersionReleaseNotesType {
    NativeReleaseNote = "NATIVE_RELEASE_NOTE",
    ConfluenceReleaseNote = "CONFLUENCE_RELEASE_NOTE"
}
export declare type JiraVersionResult = JiraVersion | QueryError;
export declare type JiraVersionStatistics = {
    __typename?: 'JiraVersionStatistics';
    notDoneEstimate?: Maybe<Scalars['Float']>;
    doneEstimate?: Maybe<Scalars['Float']>;
    totalEstimate?: Maybe<Scalars['Float']>;
    percentageCompleted?: Maybe<Scalars['Float']>;
    estimated?: Maybe<Scalars['Int']>;
    percentageEstimated?: Maybe<Scalars['Float']>;
    notEstimated?: Maybe<Scalars['Int']>;
    percentageUnestimated?: Maybe<Scalars['Float']>;
    totalIssueCount?: Maybe<Scalars['Int']>;
    toDo?: Maybe<Scalars['Int']>;
    inProgress?: Maybe<Scalars['Int']>;
    done?: Maybe<Scalars['Int']>;
};
export declare enum JiraVersionStatus {
    Released = "RELEASED",
    Unreleased = "UNRELEASED",
    Archived = "ARCHIVED"
}
export declare type JiraVersionSuggestedApproverConnection = {
    __typename?: 'JiraVersionSuggestedApproverConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraVersionSuggestedApproverEdge>>>;
};
export declare type JiraVersionSuggestedApproverEdge = {
    __typename?: 'JiraVersionSuggestedApproverEdge';
    node?: Maybe<User>;
    cursor: Scalars['String'];
};
export declare type JiraVersionUpdateApproverDeclineReasonInput = {
    approverId: Scalars['ID'];
    reason?: Maybe<Scalars['String']>;
};
export declare type JiraVersionUpdateApproverDeclineReasonPayload = Payload & {
    __typename?: 'JiraVersionUpdateApproverDeclineReasonPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    approver?: Maybe<JiraVersionApprover>;
};
export declare type JiraVersionUpdateApproverDescriptionInput = {
    approverId: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
};
export declare type JiraVersionUpdateApproverDescriptionPayload = Payload & {
    __typename?: 'JiraVersionUpdateApproverDescriptionPayload';
    approver?: Maybe<JiraVersionApprover>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraVersionUpdateMutationInput = {
    id: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    releaseDate?: Maybe<Scalars['DateTime']>;
    driver?: Maybe<Scalars['ID']>;
};
export declare type JiraVersionUpdatedWarningConfigInput = {
    isOpenPullRequestEnabled?: Maybe<Scalars['Boolean']>;
    isOpenReviewEnabled?: Maybe<Scalars['Boolean']>;
    isUnreviewedCodeEnabled?: Maybe<Scalars['Boolean']>;
    isFailingBuildEnabled?: Maybe<Scalars['Boolean']>;
};
export declare enum JiraVersionWarningCategories {
    UnreviewedCode = "UNREVIEWED_CODE",
    OpenReview = "OPEN_REVIEW",
    OpenPullRequest = "OPEN_PULL_REQUEST",
    FailingBuild = "FAILING_BUILD"
}
export declare type JiraVersionWarningConfig = {
    __typename?: 'JiraVersionWarningConfig';
    openPullRequest?: Maybe<JiraVersionWarningConfigState>;
    openReview?: Maybe<JiraVersionWarningConfigState>;
    unreviewedCode?: Maybe<JiraVersionWarningConfigState>;
    failingBuild?: Maybe<JiraVersionWarningConfigState>;
    canEdit?: Maybe<Scalars['Boolean']>;
};
export declare enum JiraVersionWarningConfigState {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    NotApplicable = "NOT_APPLICABLE"
}
export declare type JiraVote = {
    __typename?: 'JiraVote';
    hasVoted?: Maybe<Scalars['Boolean']>;
    count?: Maybe<Scalars['Long']>;
};
export declare type JiraVotesField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraVotesField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    vote?: Maybe<JiraVote>;
    selectedUsersConnection?: Maybe<JiraUserConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraVotesFieldSelectedUsersConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraVotesFieldOperationInput = {
    operation: JiraVotesOperations;
};
export declare type JiraVotesFieldPayload = Payload & {
    __typename?: 'JiraVotesFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraVotesField>;
};
export declare enum JiraVotesOperations {
    Add = "ADD",
    Remove = "REMOVE"
}
export declare type JiraWatch = {
    __typename?: 'JiraWatch';
    isWatching?: Maybe<Scalars['Boolean']>;
    count?: Maybe<Scalars['Long']>;
};
export declare type JiraWatchesField = Node & JiraIssueField & JiraIssueFieldConfiguration & JiraUserIssueFieldConfiguration & {
    __typename?: 'JiraWatchesField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    watch?: Maybe<JiraWatch>;
    selectedUsersConnection?: Maybe<JiraUserConnection>;
    suggestedWatchers?: Maybe<JiraUserConnection>;
    fieldConfig?: Maybe<JiraFieldConfig>;
    userFieldConfig?: Maybe<JiraUserFieldConfig>;
};
export declare type JiraWatchesFieldSelectedUsersConnectionArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraWatchesFieldSuggestedWatchersArgs = {
    searchBy?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraWatchesFieldOperationInput = {
    operation: JiraWatchesOperations;
    id?: Maybe<Scalars['ID']>;
};
export declare type JiraWatchesFieldPayload = Payload & {
    __typename?: 'JiraWatchesFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    field?: Maybe<JiraWatchesField>;
};
export declare enum JiraWatchesOperations {
    Add = "ADD",
    Remove = "REMOVE"
}
export declare type JiraWorkCategory = {
    __typename?: 'JiraWorkCategory';
    value?: Maybe<Scalars['String']>;
};
export declare type JiraWorkCategoryField = Node & JiraIssueField & JiraIssueFieldConfiguration & {
    __typename?: 'JiraWorkCategoryField';
    id: Scalars['ID'];
    fieldId: Scalars['String'];
    aliasFieldId?: Maybe<Scalars['ID']>;
    type: Scalars['String'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    workCategory?: Maybe<JiraWorkCategory>;
    fieldConfig?: Maybe<JiraFieldConfig>;
};
export declare type JiraWorkLogConnection = {
    __typename?: 'JiraWorkLogConnection';
    indicativeCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraWorkLogEdge>>>;
    errors?: Maybe<Array<QueryError>>;
};
export declare type JiraWorkLogEdge = {
    __typename?: 'JiraWorkLogEdge';
    node?: Maybe<JiraWorklog>;
    cursor: Scalars['String'];
};
export declare type JiraWorkManagementCreateOverviewInput = {
    name: Scalars['String'];
    theme?: Maybe<Scalars['String']>;
    projectIds: Array<Scalars['ID']>;
};
export declare type JiraWorkManagementCreateOverviewPayload = Payload & {
    __typename?: 'JiraWorkManagementCreateOverviewPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jwmOverview?: Maybe<JiraWorkManagementOverview>;
};
export declare type JiraWorkManagementDeleteOverviewInput = {
    id: Scalars['ID'];
};
export declare type JiraWorkManagementDeleteOverviewPayload = Payload & {
    __typename?: 'JiraWorkManagementDeleteOverviewPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type JiraWorkManagementNavigation = {
    __typename?: 'JiraWorkManagementNavigation';
    recentProjects?: Maybe<JiraProjectConnection>;
    favoriteProjects?: Maybe<JiraProjectConnection>;
    overviews?: Maybe<JiraWorkManagementOverviewConnectionResult>;
};
export declare type JiraWorkManagementNavigationRecentProjectsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraWorkManagementNavigationFavoriteProjectsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraWorkManagementNavigationOverviewsArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraWorkManagementOverview = Node & {
    __typename?: 'JiraWorkManagementOverview';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    author?: Maybe<User>;
    theme?: Maybe<Scalars['String']>;
    projects?: Maybe<JiraWorkManagementProjectConnection>;
    fields?: Maybe<JiraJqlFieldConnectionResult>;
};
export declare type JiraWorkManagementOverviewProjectsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type JiraWorkManagementOverviewFieldsArgs = {
    cloudId: Scalars['ID'];
    searchString?: Maybe<Scalars['String']>;
    excludeFields?: Maybe<Array<Scalars['String']>>;
    forClause?: Maybe<JiraJqlClauseType>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    viewContext?: Maybe<JiraJqlViewContext>;
};
export declare type JiraWorkManagementOverviewConnection = {
    __typename?: 'JiraWorkManagementOverviewConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraWorkManagementOverviewEdge>>>;
};
export declare type JiraWorkManagementOverviewConnectionResult = JiraWorkManagementOverviewConnection | QueryError;
export declare type JiraWorkManagementOverviewEdge = {
    __typename?: 'JiraWorkManagementOverviewEdge';
    node?: Maybe<JiraWorkManagementOverview>;
    cursor: Scalars['String'];
};
export declare type JiraWorkManagementOverviewResult = JiraWorkManagementOverview | QueryError;
export declare type JiraWorkManagementProjectConnection = {
    __typename?: 'JiraWorkManagementProjectConnection';
    totalCount?: Maybe<Scalars['Int']>;
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<JiraWorkManagementProjectEdge>>>;
};
export declare type JiraWorkManagementProjectEdge = {
    __typename?: 'JiraWorkManagementProjectEdge';
    node?: Maybe<JiraProject>;
    cursor: Scalars['String'];
};
export declare type JiraWorkManagementProjectNavigationMetadata = {
    __typename?: 'JiraWorkManagementProjectNavigationMetadata';
    boardName: Scalars['String'];
};
export declare type JiraWorkManagementUpdateOverviewInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    theme?: Maybe<Scalars['String']>;
    projectIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type JiraWorkManagementUpdateOverviewPayload = Payload & {
    __typename?: 'JiraWorkManagementUpdateOverviewPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jwmOverview?: Maybe<JiraWorkManagementOverview>;
};
export declare type JiraWorkManagementViewItem = Node & {
    __typename?: 'JiraWorkManagementViewItem';
    id: Scalars['ID'];
    issueId?: Maybe<Scalars['Long']>;
    fields?: Maybe<Array<JiraIssueField>>;
};
export declare type JiraWorkManagementViewItemFieldsArgs = {
    fieldIds: Array<Maybe<Scalars['String']>>;
};
export declare type JiraWorkManagementViewItemConnection = {
    __typename?: 'JiraWorkManagementViewItemConnection';
    edges?: Maybe<Array<Maybe<JiraWorkManagementViewItemEdge>>>;
    pageInfo?: Maybe<PageInfo>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type JiraWorkManagementViewItemConnectionResult = JiraWorkManagementViewItemConnection | QueryError;
export declare type JiraWorkManagementViewItemEdge = {
    __typename?: 'JiraWorkManagementViewItemEdge';
    node?: Maybe<JiraWorkManagementViewItem>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type JiraWorklog = Node & {
    __typename?: 'JiraWorklog';
    id: Scalars['ID'];
    worklogId: Scalars['ID'];
    author?: Maybe<User>;
    updateAuthor?: Maybe<User>;
    timeSpent?: Maybe<JiraEstimate>;
    created: Scalars['DateTime'];
    updated?: Maybe<Scalars['DateTime']>;
    startDate?: Maybe<Scalars['DateTime']>;
    permissionLevel?: Maybe<JiraPermissionLevel>;
    workDescription?: Maybe<JiraRichText>;
};
export declare type JswMutation = {
    __typename?: 'JswMutation';
    deleteCard?: Maybe<DeleteCardOutput>;
};
export declare type JswMutationDeleteCardArgs = {
    input?: Maybe<DeleteCardInput>;
};
export declare type JswQuery = {
    __typename?: 'JswQuery';
    boardScope?: Maybe<BoardScope>;
};
export declare type JswQueryBoardScopeArgs = {
    boardId: Scalars['ID'];
};
export declare type LabelUsage = {
    __typename?: 'LabelUsage';
    label: Scalars['String'];
    count: Scalars['Int'];
};
export declare enum LicenseOverrideState {
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    Trial = "TRIAL"
}
export declare enum LifecycleStage {
    Staging = "STAGING",
    Experimental = "EXPERIMENTAL",
    Beta = "BETA",
    Production = "PRODUCTION"
}
export declare type ListStorageInput = {
    contextAri: Scalars['ID'];
    environmentId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type LocalizationContext = {
    zoneinfo?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
};
export declare type LogDetails = {
    __typename?: 'LogDetails';
    logEndUserData?: Maybe<Scalars['Boolean']>;
    logProcessAndOrStoreEUDOutsideAtlassian?: Maybe<Scalars['Boolean']>;
    logEUDShareWithThirdParty?: Maybe<Scalars['Boolean']>;
    logsIntegralForAppFunctionality?: Maybe<Scalars['Boolean']>;
};
export declare type LogQueryInput = {
    installationContexts?: Maybe<Array<Scalars['ID']>>;
    functionKey?: Maybe<Scalars['String']>;
    appVersion?: Maybe<Scalars['String']>;
    dates?: Maybe<DateSearchInput>;
};
export declare type MarketplaceApp = {
    __typename?: 'MarketplaceApp';
    appId: Scalars['ID'];
    appKey: Scalars['String'];
    name: Scalars['String'];
    partnerId: Scalars['ID'];
    partner?: Maybe<MarketplacePartner>;
    entityStatus: MarketplaceEntityStatus;
    createdAt: Scalars['DateTime'];
    listingStatus: MarketplaceListingStatus;
    productHostingOptions: Array<AtlassianProductHostingType>;
    versions: MarketplaceAppVersionConnection;
    tagline?: Maybe<Scalars['String']>;
    summary?: Maybe<Scalars['String']>;
    logo?: Maybe<MarketplaceListingImage>;
    privacyPolicyUrl?: Maybe<Scalars['URL']>;
    isAtlassianCommunityEnabled: Scalars['Boolean'];
    slug: Scalars['String'];
    reviewSummary?: Maybe<MarketplaceAppReviewSummary>;
    distribution?: Maybe<MarketplaceAppDistribution>;
    watchersInfo?: Maybe<MarketplaceAppWatchersInfo>;
    issueTrackerUrl?: Maybe<Scalars['URL']>;
    supportTicketSystemUrl?: Maybe<Scalars['URL']>;
    statusPageUrl?: Maybe<Scalars['URL']>;
    forumsUrl?: Maybe<Scalars['URL']>;
    wikiUrl?: Maybe<Scalars['URL']>;
    programs?: Maybe<MarketplaceAppPrograms>;
    marketingLabels: Array<Scalars['String']>;
    googleAnalyticsId?: Maybe<Scalars['String']>;
    googleAnalytics4Id?: Maybe<Scalars['String']>;
    segmentWriteKey?: Maybe<Scalars['String']>;
    categories: Array<MarketplaceAppCategory>;
    jsdWidgetKey?: Maybe<Scalars['String']>;
    marketplaceAppTrustInformation?: Maybe<MarketplaceAppTrustInformationResult>;
};
export declare type MarketplaceAppProductHostingOptionsArgs = {
    excludeHiddenIn?: Maybe<MarketplaceLocation>;
};
export declare type MarketplaceAppVersionsArgs = {
    filter?: Maybe<MarketplaceAppVersionFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MarketplaceAppMarketplaceAppTrustInformationArgs = {
    appKey: Scalars['String'];
    state: AppTrustInformationState;
};
export declare type MarketplaceAppCategory = {
    __typename?: 'MarketplaceAppCategory';
    name: Scalars['String'];
};
export declare type MarketplaceAppConnection = {
    __typename?: 'MarketplaceAppConnection';
    edges?: Maybe<Array<Maybe<MarketplaceAppConnectionEdge>>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type MarketplaceAppConnectionEdge = {
    __typename?: 'MarketplaceAppConnectionEdge';
    cursor: Scalars['String'];
    node?: Maybe<MarketplaceApp>;
};
export declare type MarketplaceAppDeployment = {
    compatibleProducts: Array<CompatibleAtlassianProduct>;
};
export declare type MarketplaceAppDeploymentStep = {
    __typename?: 'MarketplaceAppDeploymentStep';
    instruction: Scalars['String'];
    screenshot?: Maybe<MarketplaceListingImage>;
};
export declare type MarketplaceAppDistribution = {
    __typename?: 'MarketplaceAppDistribution';
    downloadCount?: Maybe<Scalars['Int']>;
    installationCount?: Maybe<Scalars['Int']>;
    isPreinstalledInServerDC: Scalars['Boolean'];
    isPreinstalledInCloud: Scalars['Boolean'];
};
export declare enum MarketplaceAppPaymentModel {
    Free = "FREE",
    PaidViaPartner = "PAID_VIA_PARTNER",
    PaidViaAtlassian = "PAID_VIA_ATLASSIAN"
}
export declare enum MarketplaceAppPermission {
    ManageAppDetails = "MANAGE_APP_DETAILS"
}
export declare type MarketplaceAppPrograms = {
    __typename?: 'MarketplaceAppPrograms';
    cloudFortified?: Maybe<MarketplaceCloudFortified>;
    bugBountyParticipant?: Maybe<MarketplaceBugBountyParticipant>;
};
export declare type MarketplaceAppReviewSummary = {
    __typename?: 'MarketplaceAppReviewSummary';
    score?: Maybe<Scalars['Float']>;
    rating?: Maybe<Scalars['Float']>;
    count?: Maybe<Scalars['Int']>;
};
export declare type MarketplaceAppTrustInformation = {
    __typename?: 'MarketplaceAppTrustInformation';
    dataAccessAndStorage?: Maybe<DataAccessAndStorage>;
    thirdPartyInformation?: Maybe<ThirdPartyInformation>;
    logDetails?: Maybe<LogDetails>;
    dataResidency?: Maybe<DataResidency>;
    dataRetention?: Maybe<DataRetention>;
    privacy?: Maybe<Privacy>;
    security?: Maybe<Security>;
    properties?: Maybe<Properties>;
};
export declare type MarketplaceAppTrustInformationResult = MarketplaceAppTrustInformation | QueryError;
export declare type MarketplaceAppVersion = {
    __typename?: 'MarketplaceAppVersion';
    buildNumber: Scalars['ID'];
    version: Scalars['String'];
    isSupported: Scalars['Boolean'];
    moreDetails?: Maybe<Scalars['String']>;
    youtubeId?: Maybe<Scalars['String']>;
    highlights?: Maybe<Array<MarketplaceListingHighlight>>;
    screenshots?: Maybe<Array<MarketplaceListingScreenshot>>;
    heroImage?: Maybe<MarketplaceListingImage>;
    paymentModel: MarketplaceAppPaymentModel;
    productHostingOptions: Array<AtlassianProductHostingType>;
    visibility: MarketplaceAppVersionVisibility;
    deployment: MarketplaceAppDeployment;
    licenseType?: Maybe<MarketplaceAppVersionLicenseType>;
    sourceCodeLicenseUrl?: Maybe<Scalars['URL']>;
    documentationUrl?: Maybe<Scalars['URL']>;
    endUserLicenseAgreementUrl?: Maybe<Scalars['URL']>;
    purchaseUrl?: Maybe<Scalars['URL']>;
    learnMoreUrl?: Maybe<Scalars['URL']>;
    releaseDate: Scalars['DateTime'];
    releaseSummary?: Maybe<Scalars['String']>;
    releaseNotes?: Maybe<Scalars['String']>;
    releaseNotesUrl?: Maybe<Scalars['URL']>;
};
export declare type MarketplaceAppVersionConnection = {
    __typename?: 'MarketplaceAppVersionConnection';
    edges?: Maybe<Array<Maybe<MarketplaceAppVersionEdge>>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type MarketplaceAppVersionEdge = {
    __typename?: 'MarketplaceAppVersionEdge';
    cursor: Scalars['String'];
    node?: Maybe<MarketplaceAppVersion>;
};
export declare type MarketplaceAppVersionFilter = {
    productHostingOptions?: Maybe<Array<AtlassianProductHostingType>>;
    visibility?: Maybe<MarketplaceAppVersionVisibility>;
    excludeHiddenIn?: Maybe<MarketplaceLocation>;
    cloudAppVersionId?: Maybe<Scalars['ID']>;
};
export declare type MarketplaceAppVersionLicenseType = {
    __typename?: 'MarketplaceAppVersionLicenseType';
    id: Scalars['ID'];
    name: Scalars['String'];
    link?: Maybe<Scalars['URL']>;
};
export declare enum MarketplaceAppVersionVisibility {
    Private = "PRIVATE",
    Public = "PUBLIC"
}
export declare type MarketplaceAppWatchersInfo = {
    __typename?: 'MarketplaceAppWatchersInfo';
    isUserWatchingApp: Scalars['Boolean'];
    watchersCount: Scalars['Int'];
};
export declare type MarketplaceAppsFilter = {
    includePrivate?: Maybe<Scalars['Boolean']>;
    productHostingOptions?: Maybe<Array<AtlassianProductHostingType>>;
    cloudFortifiedStatus?: Maybe<Array<MarketplaceProgramStatus>>;
};
export declare enum MarketplaceBillingCycle {
    Annual = "ANNUAL",
    Monthly = "MONTHLY"
}
export declare type MarketplaceBugBountyParticipant = {
    __typename?: 'MarketplaceBugBountyParticipant';
    cloud?: Maybe<MarketplaceBugBountyProgramHostingStatus>;
    server?: Maybe<MarketplaceBugBountyProgramHostingStatus>;
    dataCenter?: Maybe<MarketplaceBugBountyProgramHostingStatus>;
};
export declare type MarketplaceBugBountyProgramHostingStatus = {
    __typename?: 'MarketplaceBugBountyProgramHostingStatus';
    status?: Maybe<MarketplaceProgramStatus>;
};
export declare type MarketplaceCloudAppDeployment = MarketplaceAppDeployment & {
    __typename?: 'MarketplaceCloudAppDeployment';
    compatibleProducts: Array<CompatibleAtlassianProduct>;
    cloudAppId: Scalars['ID'];
    cloudAppEnvironmentId: Scalars['ID'];
    cloudAppVersionId: Scalars['ID'];
    scopes: Array<CloudAppScope>;
};
export declare type MarketplaceCloudFortified = {
    __typename?: 'MarketplaceCloudFortified';
    status?: Maybe<MarketplaceCloudFortifiedStatus>;
    programStatus?: Maybe<MarketplaceProgramStatus>;
};
export declare enum MarketplaceCloudFortifiedStatus {
    Applied = "APPLIED",
    Approved = "APPROVED",
    Rejected = "REJECTED",
    NotAParticipant = "NOT_A_PARTICIPANT"
}
export declare type MarketplaceConnectAppDeployment = MarketplaceAppDeployment & {
    __typename?: 'MarketplaceConnectAppDeployment';
    compatibleProducts: Array<CompatibleAtlassianProduct>;
    isDescriptorFileAvailable: Scalars['Boolean'];
    scopes: Array<ConnectAppScope>;
};
export declare enum MarketplaceEntityStatus {
    Active = "ACTIVE",
    Archived = "ARCHIVED"
}
export declare type MarketplaceImageFile = {
    __typename?: 'MarketplaceImageFile';
    id: Scalars['String'];
    width: Scalars['Int'];
    height: Scalars['Int'];
};
export declare type MarketplaceInstructionalAppDeployment = MarketplaceAppDeployment & {
    __typename?: 'MarketplaceInstructionalAppDeployment';
    compatibleProducts: Array<CompatibleAtlassianProduct>;
    isBinaryUrlAvailable: Scalars['Boolean'];
    instructions?: Maybe<Array<MarketplaceAppDeploymentStep>>;
};
export declare type MarketplaceListingHighlight = {
    __typename?: 'MarketplaceListingHighlight';
    title?: Maybe<Scalars['String']>;
    summary?: Maybe<Scalars['String']>;
    screenshot: MarketplaceListingScreenshot;
    croppedScreenshot: MarketplaceListingImage;
    caption?: Maybe<Scalars['String']>;
};
export declare type MarketplaceListingImage = {
    __typename?: 'MarketplaceListingImage';
    original: MarketplaceImageFile;
    scaled: MarketplaceImageFile;
    highResolution?: Maybe<MarketplaceImageFile>;
};
export declare type MarketplaceListingScreenshot = {
    __typename?: 'MarketplaceListingScreenshot';
    caption?: Maybe<Scalars['String']>;
    image: MarketplaceListingImage;
};
export declare enum MarketplaceListingStatus {
    Private = "PRIVATE",
    Public = "PUBLIC",
    Submitted = "SUBMITTED",
    ReadyToLaunch = "READY_TO_LAUNCH",
    Rejected = "REJECTED"
}
export declare enum MarketplaceLocation {
    Website = "WEBSITE",
    InProduct = "IN_PRODUCT"
}
export declare type MarketplacePartner = {
    __typename?: 'MarketplacePartner';
    id: Scalars['ID'];
    name: Scalars['String'];
    slug: Scalars['String'];
    contactDetails?: Maybe<MarketplacePartnerContactDetails>;
    address?: Maybe<MarketplacePartnerAddress>;
    support?: Maybe<MarketplacePartnerSupport>;
    programs?: Maybe<MarketplacePartnerPrograms>;
    partnerType?: Maybe<MarketplacePartnerType>;
    partnerTier?: Maybe<MarketplacePartnerTier>;
    logo?: Maybe<MarketplaceListingImage>;
    isUserContact?: Maybe<Scalars['Boolean']>;
};
export declare type MarketplacePartnerAddress = {
    __typename?: 'MarketplacePartnerAddress';
    line1?: Maybe<Scalars['String']>;
    line2?: Maybe<Scalars['String']>;
    city?: Maybe<Scalars['String']>;
    state?: Maybe<Scalars['String']>;
    country?: Maybe<Scalars['String']>;
    postalCode?: Maybe<Scalars['String']>;
};
export declare type MarketplacePartnerContactDetails = {
    __typename?: 'MarketplacePartnerContactDetails';
    emailId?: Maybe<Scalars['String']>;
    phoneNumber?: Maybe<Scalars['String']>;
    homepageUrl?: Maybe<Scalars['String']>;
    otherContactDetails?: Maybe<Scalars['String']>;
};
export declare type MarketplacePartnerPrograms = {
    __typename?: 'MarketplacePartnerPrograms';
    isCloudAppSecuritySelfAssessmentDone?: Maybe<Scalars['Boolean']>;
};
export declare type MarketplacePartnerSupport = {
    __typename?: 'MarketplacePartnerSupport';
    contactDetails?: Maybe<MarketplacePartnerSupportContact>;
    availability?: Maybe<MarketplacePartnerSupportAvailability>;
};
export declare type MarketplacePartnerSupportAvailability = {
    __typename?: 'MarketplacePartnerSupportAvailability';
    daysOfWeek: Array<Scalars['Int']>;
    isAvailable24Hours: Scalars['Boolean'];
    startTime?: Maybe<Scalars['String']>;
    endTime?: Maybe<Scalars['String']>;
    timezone: Scalars['String'];
    timezoneOffset: Scalars['String'];
    holidays: Array<MarketplacePartnerSupportHoliday>;
};
export declare type MarketplacePartnerSupportContact = {
    __typename?: 'MarketplacePartnerSupportContact';
    emailId?: Maybe<Scalars['String']>;
    phoneNumber?: Maybe<Scalars['String']>;
    websiteUrl?: Maybe<Scalars['URL']>;
};
export declare type MarketplacePartnerSupportHoliday = {
    __typename?: 'MarketplacePartnerSupportHoliday';
    title: Scalars['String'];
    holidayFrequency: MarketplacePartnerSupportHolidayFrequency;
    date: Scalars['String'];
};
export declare enum MarketplacePartnerSupportHolidayFrequency {
    OneTime = "ONE_TIME",
    Annual = "ANNUAL"
}
export declare type MarketplacePartnerTier = {
    __typename?: 'MarketplacePartnerTier';
    type: MarketplacePartnerTierType;
    updatedDate: Scalars['String'];
};
export declare enum MarketplacePartnerTierType {
    Silver = "SILVER",
    Gold = "GOLD",
    Platinum = "PLATINUM"
}
export declare enum MarketplacePartnerType {
    AtlassianInternal = "ATLASSIAN_INTERNAL"
}
export declare type MarketplacePlugins1AppDeployment = MarketplaceAppDeployment & {
    __typename?: 'MarketplacePlugins1AppDeployment';
    compatibleProducts: Array<CompatibleAtlassianProduct>;
    isDeploymentArtifactAvailable: Scalars['Boolean'];
};
export declare type MarketplacePlugins2AppDeployment = MarketplaceAppDeployment & {
    __typename?: 'MarketplacePlugins2AppDeployment';
    compatibleProducts: Array<CompatibleAtlassianProduct>;
    isDeploymentArtifactAvailable: Scalars['Boolean'];
};
export declare type MarketplacePricingItem = {
    __typename?: 'MarketplacePricingItem';
    floor: Scalars['Int'];
    ceiling?: Maybe<Scalars['Int']>;
    amount: Scalars['Float'];
    policy: MarketplacePricingTierPolicy;
};
export declare type MarketplacePricingPlan = {
    __typename?: 'MarketplacePricingPlan';
    billingCycle: MarketplaceBillingCycle;
    currency: Scalars['String'];
    status: MarketplacePricingPlanStatus;
    tieredPricing: MarketplaceTieredPricing;
};
export declare type MarketplacePricingPlanOptions = {
    billingCycle?: Maybe<MarketplaceBillingCycle>;
    planStatus?: Maybe<MarketplacePricingPlanStatus>;
    currencyCode?: Maybe<Scalars['String']>;
    countryCode?: Maybe<Scalars['String']>;
};
export declare enum MarketplacePricingPlanStatus {
    Live = "LIVE",
    Pending = "PENDING",
    Draft = "DRAFT"
}
export declare enum MarketplacePricingTierMode {
    Graduated = "GRADUATED",
    Volume = "VOLUME"
}
export declare enum MarketplacePricingTierPolicy {
    Block = "BLOCK",
    PerUnit = "PER_UNIT"
}
export declare enum MarketplacePricingTierType {
    UserTiered = "USER_TIERED",
    RemoteAgentTiered = "REMOTE_AGENT_TIERED"
}
export declare enum MarketplaceProgramStatus {
    Applied = "APPLIED",
    Approved = "APPROVED",
    Rejected = "REJECTED",
    NotAParticipant = "NOT_A_PARTICIPANT"
}
export declare type MarketplaceSupportedAtlassianProduct = {
    __typename?: 'MarketplaceSupportedAtlassianProduct';
    id: Scalars['ID'];
    name: Scalars['String'];
    hostingOptions: Array<AtlassianProductHostingType>;
};
export declare type MarketplaceTieredPricing = {
    __typename?: 'MarketplaceTieredPricing';
    tierType: MarketplacePricingTierType;
    tiersMode: MarketplacePricingTierMode;
    items: Array<MarketplacePricingItem>;
};
export declare type MarketplaceUser = {
    __typename?: 'MarketplaceUser';
    id: Scalars['ID'];
    appPermissions: Array<MarketplaceAppPermission>;
};
export declare type MarketplaceUserAppPermissionsArgs = {
    appId: Scalars['ID'];
};
export declare type MarketplaceWorkflowAppDeployment = MarketplaceAppDeployment & {
    __typename?: 'MarketplaceWorkflowAppDeployment';
    compatibleProducts: Array<CompatibleAtlassianProduct>;
    isWorkflowDataFileAvailable: Scalars['Boolean'];
};
export declare enum MembershipRole {
    Regular = "REGULAR",
    Admin = "ADMIN"
}
export declare enum MembershipSetting {
    Open = "OPEN",
    MemberInvite = "MEMBER_INVITE",
    AdminInvite = "ADMIN_INVITE"
}
export declare enum MembershipState {
    FullMember = "FULL_MEMBER",
    Invited = "INVITED",
    Alumni = "ALUMNI",
    RequestingToJoin = "REQUESTING_TO_JOIN"
}
export declare type MigrationKeys = {
    __typename?: 'MigrationKeys';
    jira: Scalars['String'];
    confluence: Scalars['String'];
};
export declare type MoveCardOutput = {
    __typename?: 'MoveCardOutput';
    issuesWereTransitioned?: Maybe<Scalars['Boolean']>;
    statusCode?: Maybe<Scalars['Int']>;
    success?: Maybe<Scalars['Boolean']>;
    message?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type MoveSprintDownInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
};
export declare type MoveSprintDownResponse = MutationResponse & {
    __typename?: 'MoveSprintDownResponse';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type MoveSprintUpInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
};
export declare type MoveSprintUpResponse = MutationResponse & {
    __typename?: 'MoveSprintUpResponse';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type Mutation = {
    __typename?: 'Mutation';
    trello: TrelloMutationApi;
    customerSupport?: Maybe<SupportRequestCatalogMutationApi>;
    createJiraProjectAndDevOpsToolRelationship?: Maybe<JiraProjectAndDevOpsToolRelationshipCreatePayload>;
    deleteJiraProjectAndDevOpsToolRelationship?: Maybe<JiraProjectAndDevOpsToolRelationshipDeletePayload>;
    deleteDevOpsToolRelationshipsForJiraProject?: Maybe<JiraProjectAndDevOpsToolRelationshipDeleteForJiraProjectPayload>;
    createReleaseNote: ContentPlatformReleaseNote;
    publishReleaseNote: ContentPlatformReleaseNote;
    updateReleaseNote: ContentPlatformReleaseNote;
    jiraCannedResponse?: Maybe<JiraCannedResponseMutationApi>;
    appRecommendations?: Maybe<AppRecMutation>;
    devOps?: Maybe<DevOpsMutation>;
    createDevOpsServiceAndOpsgenieTeamRelationship?: Maybe<CreateDevOpsServiceAndOpsgenieTeamRelationshipPayload>;
    updateDevOpsServiceAndOpsgenieTeamRelationship?: Maybe<UpdateDevOpsServiceAndOpsgenieTeamRelationshipPayload>;
    deleteDevOpsServiceAndOpsgenieTeamRelationship?: Maybe<DeleteDevOpsServiceAndOpsgenieTeamRelationshipPayload>;
    updateDevOpsContainerRelationshipEntityProperties?: Maybe<UpdateDevOpsContainerRelationshipEntityPropertiesPayload>;
    deleteDevOpsContainerRelationshipEntityProperties?: Maybe<DeleteDevOpsContainerRelationshipEntityPropertiesPayload>;
    createDevOpsServiceAndJiraProjectRelationship?: Maybe<CreateDevOpsServiceAndJiraProjectRelationshipPayload>;
    updateDevOpsServiceAndJiraProjectRelationship?: Maybe<UpdateDevOpsServiceAndJiraProjectRelationshipPayload>;
    deleteDevOpsServiceAndJiraProjectRelationship?: Maybe<DeleteDevOpsServiceAndJiraProjectRelationshipPayload>;
    createDevOpsServiceAndRepositoryRelationship?: Maybe<CreateDevOpsServiceAndRepositoryRelationshipPayload>;
    updateDevOpsServiceAndRepositoryRelationship?: Maybe<UpdateDevOpsServiceAndRepositoryRelationshipPayload>;
    deleteDevOpsServiceAndRepositoryRelationship?: Maybe<DeleteDevOpsServiceAndRepositoryRelationshipPayload>;
    createJiraProjectAndOpsgenieTeamRelationship?: Maybe<CreateJiraProjectAndOpsgenieTeamRelationshipPayload>;
    updateJiraProjectAndOpsgenieTeamRelationship?: Maybe<UpdateJiraProjectAndOpsgenieTeamRelationshipPayload>;
    deleteJiraProjectAndOpsgenieTeamRelationship?: Maybe<DeleteJiraProjectAndOpsgenieTeamRelationshipPayload>;
    createJiraProjectAndRepositoryRelationship?: Maybe<CreateJiraProjectAndRepositoryRelationshipPayload>;
    updateJiraProjectAndRepositoryRelationship?: Maybe<UpdateJiraProjectAndRepositoryRelationshipPayload>;
    deleteJiraProjectAndRepositoryRelationship?: Maybe<DeleteJiraProjectAndRepositoryRelationshipPayload>;
    jira?: Maybe<JiraMutation>;
    appStorage?: Maybe<AppStorageMutation>;
    appStorageCustomEntity?: Maybe<AppStorageCustomEntityMutation>;
    ersLifecycle?: Maybe<ErsLifecycleMutation>;
    confluence?: Maybe<ConfluenceMutationApi>;
    updatePolarisTermsConsent?: Maybe<UpdatePolarisTermsConsentPayload>;
    polaris?: Maybe<PolarisMutationNamespace>;
    resolvePolarisObject?: Maybe<ResolvePolarisObjectPayload>;
    invokePolarisObject?: Maybe<InvokePolarisObjectPayload>;
    createPolarisComment?: Maybe<CreatePolarisCommentPayload>;
    updatePolarisComment?: Maybe<UpdatePolarisCommentPayload>;
    addBetaUserAsSiteCreator?: Maybe<AddBetaUserAsSiteCreatorPayload>;
    createPolarisStandardField?: Maybe<CreatePolarisStandardFieldPayload>;
    createPolarisCalculatedField?: Maybe<CreatePolarisCalculatedFieldPayload>;
    updatePolarisCalculatedField?: Maybe<UpdatePolarisCalculatedFieldPayload>;
    updatePolarisFieldDescription?: Maybe<UpdatePolarisFieldDescriptionPayload>;
    updatePolarisFieldEmoji?: Maybe<UpdatePolarisFieldEmojiPayload>;
    deletePolarisField?: Maybe<DeletePolarisFieldPayload>;
    updatePolarisFieldOptionWeight?: Maybe<UpdatePolarisFieldOptionWeightPayload>;
    deletePolarisFieldOption?: Maybe<DeletePolarisFieldOptionPayload>;
    createPolarisDecoration?: Maybe<CreatePolarisDecorationPayload>;
    updatePolarisDecoration?: Maybe<UpdatePolarisDecorationPayload>;
    deletePolarisDecoration?: Maybe<DeletePolarisDecorationPayload>;
    createPolarisIdeaTemplate?: Maybe<CreatePolarisIdeaTemplatePayload>;
    updatePolarisIdeaTemplate?: Maybe<UpdatePolarisIdeaTemplatePayload>;
    deletePolarisIdeaTemplate?: Maybe<DeletePolarisIdeaTemplatePayload>;
    updatePolarisIdea?: Maybe<UpdatePolarisIdeaPayload>;
    createPolarisInsight?: Maybe<CreatePolarisInsightPayload>;
    updatePolarisInsight?: Maybe<UpdatePolarisInsightPayload>;
    deletePolarisInsight?: Maybe<DeletePolarisInsightPayload>;
    copyPolarisInsights?: Maybe<CopyPolarisInsightsPayload>;
    archivePolarisInsights?: Maybe<ArchivePolarisInsightsPayload>;
    unarchivePolarisInsights?: Maybe<UnarchivePolarisInsightsPayload>;
    createPolarisPlay?: Maybe<CreatePolarisPlayPayload>;
    updatePolarisPlay?: Maybe<UpdatePolarisPlayPayload>;
    createPolarisPlayContribution?: Maybe<CreatePolarisPlayContributionPayload>;
    updatePolarisPlayContribution?: Maybe<UpdatePolarisPlayContributionPayload>;
    deletePolarisPlayContribution?: Maybe<DeletePolarisPlayContributionPayload>;
    createPolarisInsightFromPlayContribution?: Maybe<CreatePolarisInsightPayload>;
    configurePolarisRefresh?: Maybe<ConfigurePolarisRefreshPayload>;
    applyPolarisProjectTemplate?: Maybe<ApplyPolarisProjectTemplatePayload>;
    setPolarisProjectOnboarded?: Maybe<SetPolarisProjectOnboardedPayload>;
    setPolarisSelectedDeliveryProject?: Maybe<SetPolarisSelectedDeliveryProjectPayload>;
    polarisAddReaction?: Maybe<PolarisAddReactionPayload>;
    polarisDeleteReaction?: Maybe<PolarisDeleteReactionPayload>;
    refreshPolarisSnippets?: Maybe<RefreshPolarisSnippetsPayload>;
    setPolarisSnippetPropertiesConfig?: Maybe<SetPolarisSnippetPropertiesConfigPayload>;
    createPolarisView?: Maybe<CreatePolarisViewPayload>;
    updatePolarisView?: Maybe<UpdatePolarisViewPayload>;
    updatePolarisViewRankV2?: Maybe<UpdatePolarisViewRankV2Payload>;
    updatePolarisViewArrangementInfo?: Maybe<UpdatePolarisViewArrangementInfoPayload>;
    deletePolarisView?: Maybe<DeletePolarisViewPayload>;
    updatePolarisViewLastViewedTimestamp?: Maybe<UpdatePolarisViewTimestampPayload>;
    createPolarisViewSet?: Maybe<CreatePolarisViewSetPayload>;
    updatePolarisViewSet?: Maybe<UpdatePolarisViewSetPayload>;
    deletePolarisViewSet?: Maybe<DeletePolarisViewSetPayload>;
    createAppTunnels?: Maybe<CreateAppTunnelResponse>;
    deleteAppTunnels?: Maybe<GenericMutationResponse>;
    invokeExtension?: Maybe<InvokeExtensionResponse>;
    rateLimitTest?: Maybe<GenericMutationResponse>;
    invokeAuxEffects?: Maybe<InvokeAuxEffectsResponse>;
    userAuthTokenForExtension?: Maybe<UserAuthTokenForExtensionResponse>;
    createWebTriggerUrl?: Maybe<CreateWebTriggerUrlResponse>;
    deleteWebTriggerUrl?: Maybe<DeleteWebTriggerUrlResponse>;
    watchMarketplaceApp?: Maybe<WatchMarketplaceAppPayload>;
    unwatchMarketplaceApp?: Maybe<UnwatchMarketplaceAppPayload>;
    compass?: Maybe<CompassCatalogMutationApi>;
    customerService?: Maybe<CustomerServiceMutationApi>;
    shepherd?: Maybe<ShepherdMutation>;
    helpObjectStore?: Maybe<HelpObjectStoreMutationApi>;
    jsw?: Maybe<JswMutation>;
    createColumn?: Maybe<CreateColumnOutput>;
    setColumnName?: Maybe<SetColumnNameOutput>;
    rankColumn?: Maybe<RankColumnOutput>;
    setColumnLimit?: Maybe<SetColumnLimitOutput>;
    deleteColumn?: Maybe<DeleteColumnOutput>;
    startSprint?: Maybe<SprintResponse>;
    createSprint?: Maybe<CreateSprintResponse>;
    completeSprint?: Maybe<CompleteSprintResponse>;
    deleteSprint?: Maybe<MutationResponse>;
    moveSprintUp?: Maybe<MoveSprintUpResponse>;
    moveSprintDown?: Maybe<MoveSprintDownResponse>;
    editSprint?: Maybe<SprintResponse>;
    setUserSwimlaneStrategy?: Maybe<SetSwimlaneStrategyResponse>;
    setSwimlaneStrategy?: Maybe<SetSwimlaneStrategyResponse>;
    setEstimationType?: Maybe<GenericMutationResponse>;
    createCustomFilter?: Maybe<CustomFilterCreateOutput>;
    updateCustomFilter?: Maybe<CustomFilterCreateOutput>;
    deleteCustomFilter?: Maybe<GenericMutationResponse>;
    boardCardMove?: Maybe<MoveCardOutput>;
    assignIssueParent?: Maybe<AssignIssueParentOutput>;
    unassignIssueParent?: Maybe<UnassignIssueParentOutput>;
    createCardParent?: Maybe<CardParentCreateOutput>;
    rankCardParent?: Maybe<GenericMutationResponse>;
    setIssueMediaVisibility?: Maybe<SetIssueMediaVisibilityOutput>;
    toggleBoardFeature?: Maybe<ToggleBoardFeatureOutput>;
    setBoardEstimationType?: Maybe<ToggleBoardFeatureOutput>;
    planModeCardMove?: Maybe<MoveCardOutput>;
    planModeCardCreate?: Maybe<CreateCardsOutput>;
    splitIssue?: Maybe<SplitIssueOutput>;
    createApp?: Maybe<CreateAppResponse>;
    updateAppDetails?: Maybe<UpdateAppDetailsResponse>;
    deleteApp?: Maybe<DeleteAppResponse>;
    updateAtlassianOAuthClient?: Maybe<UpdateAtlassianOAuthClientResponse>;
    ecosystem?: Maybe<EcosystemMutation>;
    installApp?: Maybe<AppInstallationResponse>;
    uninstallApp?: Maybe<AppUninstallationResponse>;
    upgradeApp?: Maybe<AppInstallationUpgradeResponse>;
    subscribeToApp?: Maybe<AppSubscribePayload>;
    unsubscribeFromApp?: Maybe<AppUnsubscribePayload>;
    createDevOpsService?: Maybe<CreateDevOpsServicePayload>;
    updateDevOpsService?: Maybe<UpdateDevOpsServicePayload>;
    deleteDevOpsService?: Maybe<DeleteDevOpsServicePayload>;
    createDevOpsServiceRelationship?: Maybe<CreateDevOpsServiceRelationshipPayload>;
    updateDevOpsServiceRelationship?: Maybe<UpdateDevOpsServiceRelationshipPayload>;
    deleteDevOpsServiceRelationship?: Maybe<DeleteDevOpsServiceRelationshipPayload>;
    updateDevOpsServiceEntityProperties?: Maybe<UpdateDevOpsServiceEntityPropertiesPayload>;
    deleteDevOpsServiceEntityProperties?: Maybe<DeleteDevOpsServiceEntityPropertiesPayload>;
    updateDeveloperLogAccess?: Maybe<UpdateDeveloperLogAccessPayload>;
    roadmaps?: Maybe<RoadmapsMutation>;
    createJwmOverview?: Maybe<JiraWorkManagementCreateOverviewPayload>;
    updateJwmOverview?: Maybe<JiraWorkManagementUpdateOverviewPayload>;
    deleteJwmOverview?: Maybe<JiraWorkManagementDeleteOverviewPayload>;
    helpLayout?: Maybe<HelpLayoutMutationApi>;
    virtualAgent?: Maybe<VirtualAgentMutationApi>;
    createAppDeploymentUrl?: Maybe<CreateAppDeploymentUrlResponse>;
    createHostedResourceUploadUrl?: Maybe<CreateHostedResourceUploadUrlPayload>;
    setExternalAuthCredentials?: Maybe<SetExternalAuthCredentialsPayload>;
    setAppEnvironmentVariable?: Maybe<SetAppEnvironmentVariablePayload>;
    deleteAppEnvironmentVariable?: Maybe<DeleteAppEnvironmentVariablePayload>;
    createAppDeployment?: Maybe<CreateAppDeploymentResponse>;
    jiraOAuthApps?: Maybe<JiraOAuthAppsMutation>;
    helpCenter?: Maybe<HelpCenterMutationApi>;
    deleteConfluenceSpaceRelationshipsForJiraProject?: Maybe<JiraProjectAndConfluenceSpaceDeleteRelationshipForJiraProjectPayload>;
};
export declare type MutationCreateJiraProjectAndDevOpsToolRelationshipArgs = {
    input: JiraProjectAndDevOpsToolRelationshipCreateInput;
};
export declare type MutationDeleteJiraProjectAndDevOpsToolRelationshipArgs = {
    input: JiraProjectAndDevOpsToolRelationshipDeleteInput;
};
export declare type MutationDeleteDevOpsToolRelationshipsForJiraProjectArgs = {
    input: JiraProjectAndDevOpsToolRelationshipDeleteForJiraProjectInput;
};
export declare type MutationCreateReleaseNoteArgs = {
    changeStatus?: Scalars['String'];
    title?: Scalars['String'];
    changeType?: Scalars['String'];
    fdIssueKey?: Maybe<Scalars['String']>;
    fdIssueLink?: Maybe<Scalars['String']>;
    featureRolloutDate?: Maybe<Scalars['DateTime']>;
    releaseNoteFlag?: Maybe<Scalars['String']>;
    releaseNoteFlagProject?: Maybe<Scalars['String']>;
    releaseNoteFlagEnvironment?: Maybe<Scalars['String']>;
    releaseNoteFlagOffValue?: Maybe<Scalars['String']>;
    announcementPlan?: Maybe<Scalars['String']>;
    productNames?: Maybe<Array<Scalars['String']>>;
    productIds?: Maybe<Array<Scalars['String']>>;
    description: Scalars['JSON'];
    changeCategory?: Maybe<Scalars['String']>;
    featureRolloutEndDate?: Maybe<Scalars['DateTime']>;
};
export declare type MutationPublishReleaseNoteArgs = {
    id: Scalars['String'];
};
export declare type MutationUpdateReleaseNoteArgs = {
    id: Scalars['String'];
    changeStatus?: Scalars['String'];
    title?: Scalars['String'];
    changeType?: Scalars['String'];
    fdIssueKey?: Maybe<Scalars['String']>;
    fdIssueLink?: Maybe<Scalars['String']>;
    featureRolloutDate?: Maybe<Scalars['DateTime']>;
    releaseNoteFlag?: Maybe<Scalars['String']>;
    releaseNoteFlagProject?: Maybe<Scalars['String']>;
    releaseNoteFlagEnvironment?: Maybe<Scalars['String']>;
    releaseNoteFlagOffValue?: Maybe<Scalars['String']>;
    announcementPlan?: Maybe<Scalars['String']>;
    changeCategory?: Maybe<Scalars['String']>;
    relatedContexts?: Maybe<Array<Scalars['String']>>;
    relatedContextIds?: Maybe<Array<Scalars['String']>>;
    featureRolloutEndDate?: Maybe<Scalars['DateTime']>;
    description?: Maybe<Scalars['JSON']>;
};
export declare type MutationCreateDevOpsServiceAndOpsgenieTeamRelationshipArgs = {
    input: CreateDevOpsServiceAndOpsgenieTeamRelationshipInput;
};
export declare type MutationUpdateDevOpsServiceAndOpsgenieTeamRelationshipArgs = {
    input: UpdateDevOpsServiceAndOpsgenieTeamRelationshipInput;
};
export declare type MutationDeleteDevOpsServiceAndOpsgenieTeamRelationshipArgs = {
    input: DeleteDevOpsServiceAndOpsgenieTeamRelationshipInput;
};
export declare type MutationUpdateDevOpsContainerRelationshipEntityPropertiesArgs = {
    input: UpdateDevOpsContainerRelationshipEntityPropertiesInput;
};
export declare type MutationDeleteDevOpsContainerRelationshipEntityPropertiesArgs = {
    input: DeleteDevOpsContainerRelationshipEntityPropertiesInput;
};
export declare type MutationCreateDevOpsServiceAndJiraProjectRelationshipArgs = {
    input: CreateDevOpsServiceAndJiraProjectRelationshipInput;
};
export declare type MutationUpdateDevOpsServiceAndJiraProjectRelationshipArgs = {
    input: UpdateDevOpsServiceAndJiraProjectRelationshipInput;
};
export declare type MutationDeleteDevOpsServiceAndJiraProjectRelationshipArgs = {
    input: DeleteDevOpsServiceAndJiraProjectRelationshipInput;
};
export declare type MutationCreateDevOpsServiceAndRepositoryRelationshipArgs = {
    input: CreateDevOpsServiceAndRepositoryRelationshipInput;
};
export declare type MutationUpdateDevOpsServiceAndRepositoryRelationshipArgs = {
    input: UpdateDevOpsServiceAndRepositoryRelationshipInput;
};
export declare type MutationDeleteDevOpsServiceAndRepositoryRelationshipArgs = {
    input: DeleteDevOpsServiceAndRepositoryRelationshipInput;
};
export declare type MutationCreateJiraProjectAndOpsgenieTeamRelationshipArgs = {
    input: CreateJiraProjectAndOpsgenieTeamRelationshipInput;
};
export declare type MutationUpdateJiraProjectAndOpsgenieTeamRelationshipArgs = {
    input: UpdateJiraProjectAndOpsgenieTeamRelationshipInput;
};
export declare type MutationDeleteJiraProjectAndOpsgenieTeamRelationshipArgs = {
    input: DeleteJiraProjectAndOpsgenieTeamRelationshipInput;
};
export declare type MutationCreateJiraProjectAndRepositoryRelationshipArgs = {
    input: CreateJiraProjectAndRepositoryRelationshipInput;
};
export declare type MutationUpdateJiraProjectAndRepositoryRelationshipArgs = {
    input: UpdateJiraProjectAndRepositoryRelationshipInput;
};
export declare type MutationDeleteJiraProjectAndRepositoryRelationshipArgs = {
    input: DeleteJiraProjectAndRepositoryRelationshipInput;
};
export declare type MutationUpdatePolarisTermsConsentArgs = {
    input: UpdatePolarisTermsConsentInput;
};
export declare type MutationResolvePolarisObjectArgs = {
    input: ResolvePolarisObjectInput;
};
export declare type MutationInvokePolarisObjectArgs = {
    input: InvokePolarisObjectInput;
};
export declare type MutationCreatePolarisCommentArgs = {
    input: CreatePolarisCommentInput;
};
export declare type MutationUpdatePolarisCommentArgs = {
    input: UpdatePolarisCommentInput;
};
export declare type MutationAddBetaUserAsSiteCreatorArgs = {
    input: AddBetaUserAsSiteCreatorInput;
};
export declare type MutationCreatePolarisStandardFieldArgs = {
    input: CreatePolarisStandardFieldInput;
};
export declare type MutationCreatePolarisCalculatedFieldArgs = {
    input: CreatePolarisCalculatedField;
};
export declare type MutationUpdatePolarisCalculatedFieldArgs = {
    input: UpdatePolarisCalculatedFieldInput;
};
export declare type MutationUpdatePolarisFieldDescriptionArgs = {
    input: UpdatePolarisFieldDescriptionInput;
};
export declare type MutationUpdatePolarisFieldEmojiArgs = {
    input: UpdatePolarisFieldEmojiInput;
};
export declare type MutationDeletePolarisFieldArgs = {
    id: Scalars['ID'];
};
export declare type MutationUpdatePolarisFieldOptionWeightArgs = {
    input: UpdatePolarisFieldOptionWeightInput;
};
export declare type MutationDeletePolarisFieldOptionArgs = {
    input: DeletePolarisFieldOptionInput;
};
export declare type MutationCreatePolarisDecorationArgs = {
    input: CreatePolarisDecorationInput;
};
export declare type MutationUpdatePolarisDecorationArgs = {
    id: Scalars['ID'];
    update?: Maybe<UpdatePolarisDecorationInput>;
    delete?: Maybe<DeletePolarisDecorationInput>;
};
export declare type MutationDeletePolarisDecorationArgs = {
    id: Scalars['ID'];
};
export declare type MutationCreatePolarisIdeaTemplateArgs = {
    input: CreatePolarisIdeaTemplateInput;
};
export declare type MutationUpdatePolarisIdeaTemplateArgs = {
    input: UpdatePolarisIdeaTemplateInput;
};
export declare type MutationDeletePolarisIdeaTemplateArgs = {
    input: DeletePolarisIdeaTemplateInput;
};
export declare type MutationUpdatePolarisIdeaArgs = {
    project: Scalars['ID'];
    idea: Scalars['ID'];
    update: UpdatePolarisIdeaInput;
};
export declare type MutationCreatePolarisInsightArgs = {
    input: CreatePolarisInsightInput;
};
export declare type MutationUpdatePolarisInsightArgs = {
    id: Scalars['ID'];
    update: UpdatePolarisInsightInput;
};
export declare type MutationDeletePolarisInsightArgs = {
    id: Scalars['ID'];
};
export declare type MutationCopyPolarisInsightsArgs = {
    input: CopyPolarisInsightsInput;
};
export declare type MutationArchivePolarisInsightsArgs = {
    project: Scalars['ID'];
    containers?: Maybe<Array<Scalars['ID']>>;
};
export declare type MutationUnarchivePolarisInsightsArgs = {
    project: Scalars['ID'];
    containers?: Maybe<Array<Scalars['ID']>>;
};
export declare type MutationCreatePolarisPlayArgs = {
    input: CreatePolarisPlayInput;
};
export declare type MutationUpdatePolarisPlayArgs = {
    input: UpdatePolarisPlayInput;
};
export declare type MutationCreatePolarisPlayContributionArgs = {
    input: CreatePolarisPlayContribution;
};
export declare type MutationUpdatePolarisPlayContributionArgs = {
    id: Scalars['ID'];
    input: UpdatePolarisPlayContribution;
};
export declare type MutationDeletePolarisPlayContributionArgs = {
    id: Scalars['ID'];
};
export declare type MutationCreatePolarisInsightFromPlayContributionArgs = {
    input?: Maybe<CreatePolarisInsightFromPlayContributionInput>;
};
export declare type MutationConfigurePolarisRefreshArgs = {
    input: ConfigurePolarisRefreshInput;
};
export declare type MutationApplyPolarisProjectTemplateArgs = {
    input: ApplyPolarisProjectTemplateInput;
};
export declare type MutationSetPolarisProjectOnboardedArgs = {
    input: SetPolarisProjectOnboardedInput;
};
export declare type MutationSetPolarisSelectedDeliveryProjectArgs = {
    input: SetPolarisSelectedDeliveryProjectInput;
};
export declare type MutationPolarisAddReactionArgs = {
    input: PolarisAddReactionInput;
};
export declare type MutationPolarisDeleteReactionArgs = {
    input: PolarisDeleteReactionInput;
};
export declare type MutationRefreshPolarisSnippetsArgs = {
    input: RefreshPolarisSnippetsInput;
};
export declare type MutationSetPolarisSnippetPropertiesConfigArgs = {
    input: SetPolarisSnippetPropertiesConfigInput;
};
export declare type MutationCreatePolarisViewArgs = {
    input: CreatePolarisViewInput;
};
export declare type MutationUpdatePolarisViewArgs = {
    id: Scalars['ID'];
    input: UpdatePolarisViewInput;
};
export declare type MutationUpdatePolarisViewRankV2Args = {
    id: Scalars['ID'];
    input: UpdatePolarisViewRankInput;
};
export declare type MutationUpdatePolarisViewArrangementInfoArgs = {
    id: Scalars['ID'];
    input?: Maybe<Scalars['JSON']>;
};
export declare type MutationDeletePolarisViewArgs = {
    id: Scalars['ID'];
};
export declare type MutationUpdatePolarisViewLastViewedTimestampArgs = {
    viewId: Scalars['ID'];
    timestampInput?: Maybe<Scalars['String']>;
};
export declare type MutationCreatePolarisViewSetArgs = {
    input: CreatePolarisViewSetInput;
};
export declare type MutationUpdatePolarisViewSetArgs = {
    input: UpdatePolarisViewSetInput;
};
export declare type MutationDeletePolarisViewSetArgs = {
    id: Scalars['ID'];
};
export declare type MutationCreateAppTunnelsArgs = {
    input: CreateAppTunnelsInput;
};
export declare type MutationDeleteAppTunnelsArgs = {
    input: DeleteAppTunnelInput;
};
export declare type MutationInvokeExtensionArgs = {
    input: InvokeExtensionInput;
};
export declare type MutationRateLimitTestArgs = {
    input: InvokeExtensionInput;
};
export declare type MutationInvokeAuxEffectsArgs = {
    input: InvokeAuxEffectsInput;
};
export declare type MutationUserAuthTokenForExtensionArgs = {
    input: UserAuthTokenForExtensionInput;
};
export declare type MutationCreateWebTriggerUrlArgs = {
    input: WebTriggerUrlInput;
    forceCreate?: Maybe<Scalars['Boolean']>;
};
export declare type MutationDeleteWebTriggerUrlArgs = {
    id: Scalars['ID'];
};
export declare type MutationWatchMarketplaceAppArgs = {
    id: Scalars['ID'];
};
export declare type MutationUnwatchMarketplaceAppArgs = {
    id: Scalars['ID'];
};
export declare type MutationCustomerServiceArgs = {
    cloudId: Scalars['ID'];
};
export declare type MutationHelpObjectStoreArgs = {
    cloudId: Scalars['ID'];
};
export declare type MutationCreateColumnArgs = {
    input?: Maybe<CreateColumnInput>;
};
export declare type MutationSetColumnNameArgs = {
    input?: Maybe<SetColumnNameInput>;
};
export declare type MutationRankColumnArgs = {
    input?: Maybe<RankColumnInput>;
};
export declare type MutationSetColumnLimitArgs = {
    input?: Maybe<SetColumnLimitInput>;
};
export declare type MutationDeleteColumnArgs = {
    input?: Maybe<DeleteColumnInput>;
};
export declare type MutationStartSprintArgs = {
    input?: Maybe<StartSprintInput>;
};
export declare type MutationCreateSprintArgs = {
    input?: Maybe<CreateSprintInput>;
};
export declare type MutationCompleteSprintArgs = {
    input?: Maybe<CompleteSprintInput>;
};
export declare type MutationDeleteSprintArgs = {
    input?: Maybe<DeleteSprintInput>;
};
export declare type MutationMoveSprintUpArgs = {
    input?: Maybe<MoveSprintUpInput>;
};
export declare type MutationMoveSprintDownArgs = {
    input?: Maybe<MoveSprintDownInput>;
};
export declare type MutationEditSprintArgs = {
    input?: Maybe<EditSprintInput>;
};
export declare type MutationSetUserSwimlaneStrategyArgs = {
    input?: Maybe<SetSwimlaneStrategyInput>;
};
export declare type MutationSetSwimlaneStrategyArgs = {
    input?: Maybe<SetSwimlaneStrategyInput>;
};
export declare type MutationSetEstimationTypeArgs = {
    input?: Maybe<SetEstimationTypeInput>;
};
export declare type MutationCreateCustomFilterArgs = {
    input?: Maybe<CreateCustomFilterInput>;
};
export declare type MutationUpdateCustomFilterArgs = {
    input?: Maybe<UpdateCustomFilterInput>;
};
export declare type MutationDeleteCustomFilterArgs = {
    input?: Maybe<DeleteCustomFilterInput>;
};
export declare type MutationBoardCardMoveArgs = {
    input?: Maybe<BoardCardMoveInput>;
};
export declare type MutationAssignIssueParentArgs = {
    input?: Maybe<AssignIssueParentInput>;
};
export declare type MutationUnassignIssueParentArgs = {
    input?: Maybe<UnassignIssueParentInput>;
};
export declare type MutationCreateCardParentArgs = {
    input: CardParentCreateInput;
};
export declare type MutationRankCardParentArgs = {
    input: CardParentRankInput;
};
export declare type MutationSetIssueMediaVisibilityArgs = {
    input?: Maybe<SetIssueMediaVisibilityInput>;
};
export declare type MutationToggleBoardFeatureArgs = {
    input?: Maybe<ToggleBoardFeatureInput>;
};
export declare type MutationSetBoardEstimationTypeArgs = {
    input?: Maybe<SetBoardEstimationTypeInput>;
};
export declare type MutationPlanModeCardMoveArgs = {
    input?: Maybe<PlanModeCardMoveInput>;
};
export declare type MutationPlanModeCardCreateArgs = {
    input?: Maybe<PlanModeCardCreateInput>;
};
export declare type MutationSplitIssueArgs = {
    input?: Maybe<SplitIssueInput>;
};
export declare type MutationCreateAppArgs = {
    input: CreateAppInput;
};
export declare type MutationUpdateAppDetailsArgs = {
    input: UpdateAppDetailsInput;
};
export declare type MutationDeleteAppArgs = {
    input: DeleteAppInput;
};
export declare type MutationUpdateAtlassianOAuthClientArgs = {
    input: UpdateAtlassianOAuthClientInput;
};
export declare type MutationInstallAppArgs = {
    input: AppInstallationInput;
};
export declare type MutationUninstallAppArgs = {
    input: AppUninstallationInput;
};
export declare type MutationUpgradeAppArgs = {
    input: AppInstallationUpgradeInput;
};
export declare type MutationSubscribeToAppArgs = {
    input: AppSubscribeInput;
};
export declare type MutationUnsubscribeFromAppArgs = {
    input: AppUnsubscribeInput;
};
export declare type MutationCreateDevOpsServiceArgs = {
    input: CreateDevOpsServiceInput;
};
export declare type MutationUpdateDevOpsServiceArgs = {
    input: UpdateDevOpsServiceInput;
};
export declare type MutationDeleteDevOpsServiceArgs = {
    input: DeleteDevOpsServiceInput;
};
export declare type MutationCreateDevOpsServiceRelationshipArgs = {
    input: CreateDevOpsServiceRelationshipInput;
};
export declare type MutationUpdateDevOpsServiceRelationshipArgs = {
    input: UpdateDevOpsServiceRelationshipInput;
};
export declare type MutationDeleteDevOpsServiceRelationshipArgs = {
    input: DeleteDevOpsServiceRelationshipInput;
};
export declare type MutationUpdateDevOpsServiceEntityPropertiesArgs = {
    input: UpdateDevOpsServiceEntityPropertiesInput;
};
export declare type MutationDeleteDevOpsServiceEntityPropertiesArgs = {
    input: DeleteDevOpsServiceEntityPropertiesInput;
};
export declare type MutationUpdateDeveloperLogAccessArgs = {
    input: UpdateDeveloperLogAccessInput;
};
export declare type MutationCreateJwmOverviewArgs = {
    cloudId: Scalars['ID'];
    input: JiraWorkManagementCreateOverviewInput;
};
export declare type MutationUpdateJwmOverviewArgs = {
    cloudId: Scalars['ID'];
    input: JiraWorkManagementUpdateOverviewInput;
};
export declare type MutationDeleteJwmOverviewArgs = {
    cloudId: Scalars['ID'];
    input: JiraWorkManagementDeleteOverviewInput;
};
export declare type MutationHelpLayoutArgs = {
    cloudId?: Maybe<Scalars['ID']>;
};
export declare type MutationCreateAppDeploymentUrlArgs = {
    input: CreateAppDeploymentUrlInput;
};
export declare type MutationCreateHostedResourceUploadUrlArgs = {
    input: CreateHostedResourceUploadUrlInput;
};
export declare type MutationSetExternalAuthCredentialsArgs = {
    input: SetExternalAuthCredentialsInput;
};
export declare type MutationSetAppEnvironmentVariableArgs = {
    input: SetAppEnvironmentVariableInput;
};
export declare type MutationDeleteAppEnvironmentVariableArgs = {
    input: DeleteAppEnvironmentVariableInput;
};
export declare type MutationCreateAppDeploymentArgs = {
    input: CreateAppDeploymentInput;
};
export declare type MutationHelpCenterArgs = {
    cloudId: Scalars['ID'];
};
export declare type MutationDeleteConfluenceSpaceRelationshipsForJiraProjectArgs = {
    input: JiraProjectAndConfluenceSpaceDeleteRelationshipForJiraProjectInput;
};
export declare type MutationError = {
    __typename?: 'MutationError';
    message?: Maybe<Scalars['String']>;
    extensions?: Maybe<MutationErrorExtension>;
};
export declare type MutationErrorExtension = {
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type MutationResponse = {
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type MyActivities = {
    __typename?: 'MyActivities';
    all?: Maybe<ActivitiesConnection>;
    workedOn?: Maybe<ActivitiesConnection>;
    viewed?: Maybe<ActivitiesConnection>;
};
export declare type MyActivitiesAllArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivitiesWorkedOnArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivitiesViewedArgs = {
    filters?: Maybe<Array<ActivitiesFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivity = {
    __typename?: 'MyActivity';
    all: ActivityConnection;
    workedOn: ActivityConnection;
    viewed: ActivityConnection;
};
export declare type MyActivityAllArgs = {
    filter?: Maybe<MyActivityFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivityWorkedOnArgs = {
    filter?: Maybe<MyActivityFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivityViewedArgs = {
    filter?: Maybe<MyActivityFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type MyActivityFilter = {
    rootContainerIds?: Maybe<Array<Scalars['ID']>>;
    type?: Maybe<ActivitiesFilterType>;
    arguments?: Maybe<ActivityFilterArgs>;
};
export declare type NadelBatchObjectIdentifiedBy = {
    sourceId: Scalars['String'];
    resultId: Scalars['String'];
};
export declare type NadelHydrationArgument = {
    name: Scalars['String'];
    value: Scalars['String'];
};
export declare type NadelHydrationFromArgument = {
    name: Scalars['String'];
    valueFromField?: Maybe<Scalars['String']>;
    valueFromArg?: Maybe<Scalars['String']>;
};
export declare enum NadelHydrationTemplate {
    NadelPlaceholder = "NADEL_PLACEHOLDER"
}
export declare type NewCard = {
    summary: Scalars['String'];
    issueTypeId: Scalars['ID'];
    parentId?: Maybe<Scalars['ID']>;
    fixVersions?: Maybe<Array<Scalars['ID']>>;
    assigneeId?: Maybe<Scalars['ID']>;
    labels?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type NewCardParent = {
    summary: Scalars['String'];
    issueTypeId: Scalars['ID'];
};
export declare type NewSplitIssueRequest = {
    summary: Scalars['String'];
    estimate?: Maybe<Scalars['String']>;
    estimateFieldId?: Maybe<Scalars['String']>;
    destinationId?: Maybe<Scalars['ID']>;
};
export declare type NewSplitIssueResponse = {
    __typename?: 'NewSplitIssueResponse';
    id: Scalars['ID'];
    key: Scalars['String'];
};
export declare enum NlpDisclaimer {
    WhoQuestion = "WHO_QUESTION"
}
export declare enum NlpErrorState {
    NoAnswer = "NO_ANSWER",
    SubjectiveQuery = "SUBJECTIVE_QUERY",
    AcceptableUseViolations = "ACCEPTABLE_USE_VIOLATIONS"
}
export declare type NlpFollowUpResponse = {
    __typename?: 'NlpFollowUpResponse';
    followUps?: Maybe<Array<Scalars['String']>>;
};
export declare type NlpSearchResponse = {
    __typename?: 'NlpSearchResponse';
    nlpResults?: Maybe<Array<NlpSearchResult>>;
    uniqueSources?: Maybe<Array<NlpSource>>;
    errorState?: Maybe<NlpErrorState>;
    disclaimer?: Maybe<NlpDisclaimer>;
};
export declare type NlpSearchResult = {
    __typename?: 'NlpSearchResult';
    nlpResult?: Maybe<Scalars['String']>;
    sources?: Maybe<Array<NlpSource>>;
};
export declare enum NlpSearchResultType {
    Page = "page",
    Blogpost = "blogpost"
}
export declare type NlpSource = {
    __typename?: 'NlpSource';
    id: Scalars['ID'];
    title: Scalars['String'];
    url: Scalars['URL'];
    iconUrl?: Maybe<Scalars['URL']>;
    type: NlpSearchResultType;
};
export declare type Node = {
    id: Scalars['ID'];
};
export declare type OAuthClientsAccountGrant = {
    __typename?: 'OAuthClientsAccountGrant';
    clientId?: Maybe<Scalars['String']>;
    scopes?: Maybe<Array<Scalars['String']>>;
    accountId?: Maybe<Scalars['String']>;
    scopeDetails?: Maybe<Array<Maybe<OAuthClientsScopeDetails>>>;
    appEnvironment?: Maybe<AppEnvironment>;
};
export declare type OAuthClientsAccountGrantConnection = {
    __typename?: 'OAuthClientsAccountGrantConnection';
    edges?: Maybe<Array<Maybe<OAuthClientsAccountGrantEdge>>>;
    nodes?: Maybe<Array<Maybe<OAuthClientsAccountGrant>>>;
    pageInfo: OAuthClientsAccountGrantPageInfo;
};
export declare type OAuthClientsAccountGrantEdge = {
    __typename?: 'OAuthClientsAccountGrantEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<OAuthClientsAccountGrant>;
};
export declare type OAuthClientsAccountGrantPageInfo = {
    __typename?: 'OAuthClientsAccountGrantPageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
    startCursor?: Maybe<Scalars['String']>;
    endCursor?: Maybe<Scalars['String']>;
};
export declare type OAuthClientsQuery = {
    __typename?: 'OAuthClientsQuery';
    allAccountGrantsForUser?: Maybe<OAuthClientsAccountGrantConnection>;
};
export declare type OAuthClientsQueryAllAccountGrantsForUserArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type OAuthClientsScopeDetails = {
    __typename?: 'OAuthClientsScopeDetails';
    key: Scalars['String'];
    description?: Maybe<Scalars['String']>;
};
export declare type OpsgenieAlertCountByPriority = {
    __typename?: 'OpsgenieAlertCountByPriority';
    priority?: Maybe<Scalars['String']>;
    countPerDay?: Maybe<Array<Maybe<OpsgenieAlertCountPerDay>>>;
};
export declare type OpsgenieAlertCountPerDay = {
    __typename?: 'OpsgenieAlertCountPerDay';
    day?: Maybe<Scalars['String']>;
    count?: Maybe<Scalars['Int']>;
};
export declare type OpsgenieQuery = {
    __typename?: 'OpsgenieQuery';
    opsgenieTeam?: Maybe<OpsgenieTeam>;
    opsgenieTeams?: Maybe<Array<Maybe<OpsgenieTeam>>>;
    opsgenieSchedule?: Maybe<OpsgenieSchedule>;
    allOpsgenieTeams?: Maybe<OpsgenieTeamConnection>;
    myOpsgenieSchedules?: Maybe<Array<Maybe<OpsgenieSchedule>>>;
    opsgenieTeamsWithServiceModificationPermissions?: Maybe<OpsgenieTeamConnection>;
};
export declare type OpsgenieQueryOpsgenieTeamArgs = {
    id: Scalars['ID'];
};
export declare type OpsgenieQueryOpsgenieTeamsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type OpsgenieQueryOpsgenieScheduleArgs = {
    id: Scalars['ID'];
};
export declare type OpsgenieQueryAllOpsgenieTeamsArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type OpsgenieQueryMyOpsgenieSchedulesArgs = {
    cloudId: Scalars['ID'];
};
export declare type OpsgenieQueryOpsgenieTeamsWithServiceModificationPermissionsArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type OpsgenieSchedule = {
    __typename?: 'OpsgenieSchedule';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    enabled?: Maybe<Scalars['Boolean']>;
    timezone?: Maybe<Scalars['String']>;
    finalTimeline?: Maybe<OpsgenieScheduleTimeline>;
    onCallRecipients?: Maybe<Array<Maybe<OpsgenieScheduleOnCallRecipient>>>;
};
export declare type OpsgenieScheduleFinalTimelineArgs = {
    startTime: Scalars['DateTime'];
    endTime: Scalars['DateTime'];
};
export declare type OpsgenieScheduleOnCallRecipient = {
    __typename?: 'OpsgenieScheduleOnCallRecipient';
    id?: Maybe<Scalars['ID']>;
    type?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    accountId?: Maybe<Scalars['ID']>;
};
export declare type OpsgenieSchedulePeriod = {
    __typename?: 'OpsgenieSchedulePeriod';
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
    type?: Maybe<Scalars['String']>;
    recipient?: Maybe<OpsgenieSchedulePeriodRecipient>;
};
export declare type OpsgenieSchedulePeriodRecipient = {
    __typename?: 'OpsgenieSchedulePeriodRecipient';
    id?: Maybe<Scalars['ID']>;
    type?: Maybe<Scalars['String']>;
    user?: Maybe<User>;
};
export declare type OpsgenieScheduleRotation = {
    __typename?: 'OpsgenieScheduleRotation';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    order?: Maybe<Scalars['Int']>;
    periods?: Maybe<Array<Maybe<OpsgenieSchedulePeriod>>>;
};
export declare type OpsgenieScheduleTimeline = {
    __typename?: 'OpsgenieScheduleTimeline';
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
    rotations?: Maybe<Array<Maybe<OpsgenieScheduleRotation>>>;
};
export declare type OpsgenieTeam = Node & {
    __typename?: 'OpsgenieTeam';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    baseUrl?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    members?: Maybe<OpsgenieTeamMemberConnection>;
    schedules?: Maybe<Array<Maybe<OpsgenieSchedule>>>;
    alertCounts?: Maybe<Array<Maybe<OpsgenieAlertCountByPriority>>>;
    devOpsServiceRelationships?: Maybe<DevOpsServiceAndOpsgenieTeamRelationshipConnection>;
    jiraProjectRelationships?: Maybe<JiraProjectAndOpsgenieTeamRelationshipConnection>;
};
export declare type OpsgenieTeamMembersArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type OpsgenieTeamAlertCountsArgs = {
    startTime: Scalars['DateTime'];
    endTime: Scalars['DateTime'];
    timezone?: Maybe<Scalars['String']>;
    tags?: Maybe<Array<Scalars['String']>>;
};
export declare type OpsgenieTeamDevOpsServiceRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type OpsgenieTeamJiraProjectRelationshipsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type OpsgenieTeamConnection = {
    __typename?: 'OpsgenieTeamConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<OpsgenieTeamEdge>>>;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type OpsgenieTeamEdge = {
    __typename?: 'OpsgenieTeamEdge';
    node?: Maybe<OpsgenieTeam>;
    cursor: Scalars['String'];
};
export declare type OpsgenieTeamMember = {
    __typename?: 'OpsgenieTeamMember';
    user?: Maybe<User>;
};
export declare type OpsgenieTeamMemberConnection = {
    __typename?: 'OpsgenieTeamMemberConnection';
    pageInfo: PageInfo;
    edges?: Maybe<Array<Maybe<OpsgenieTeamMemberEdge>>>;
};
export declare type OpsgenieTeamMemberEdge = {
    __typename?: 'OpsgenieTeamMemberEdge';
    node?: Maybe<OpsgenieTeamMember>;
    cursor: Scalars['String'];
};
export declare type OriginalEstimate = {
    __typename?: 'OriginalEstimate';
    value?: Maybe<Scalars['Float']>;
    valueAsText?: Maybe<Scalars['String']>;
};
export declare type OriginalSplitIssue = {
    id: Scalars['ID'];
    summary: Scalars['String'];
    estimate?: Maybe<Scalars['String']>;
    estimateFieldId?: Maybe<Scalars['String']>;
    destinationId?: Maybe<Scalars['ID']>;
};
export declare type PageInfo = {
    __typename?: 'PageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
    startCursor?: Maybe<Scalars['String']>;
    endCursor?: Maybe<Scalars['String']>;
};
export declare type PartnerBillingCycle = {
    __typename?: 'PartnerBillingCycle';
    count?: Maybe<Scalars['Int']>;
    interval?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
export declare type PartnerBillingSpecificTier = {
    __typename?: 'PartnerBillingSpecificTier';
    currency?: Maybe<Scalars['String']>;
    editionType?: Maybe<Scalars['String']>;
    entitionTypeIsDepercated?: Maybe<Scalars['Boolean']>;
    price?: Maybe<Scalars['Float']>;
    unitBlockSize?: Maybe<Scalars['Int']>;
    unitLabel?: Maybe<Scalars['String']>;
    unitLimit?: Maybe<Scalars['Int']>;
    unitStart?: Maybe<Scalars['Int']>;
};
export declare enum PartnerBtfLicenseType {
    Academic = "ACADEMIC",
    Commercial = "COMMERCIAL",
    Evaluation = "EVALUATION",
    Starter = "STARTER"
}
export declare type PartnerBtfProduct = PartnerBtfProductNode & {
    __typename?: 'PartnerBtfProduct';
    annual?: Maybe<Array<Maybe<PartnerBillingSpecificTier>>>;
    billingType?: Maybe<Scalars['String']>;
    contactSalesForAdditionalPricing?: Maybe<Scalars['Boolean']>;
    dataCenter?: Maybe<Scalars['Boolean']>;
    discountOptOut?: Maybe<Scalars['Boolean']>;
    lastModified?: Maybe<Scalars['String']>;
    marketplaceAddon?: Maybe<Scalars['Boolean']>;
    monthly?: Maybe<Array<Maybe<PartnerBillingSpecificTier>>>;
    orderableItems?: Maybe<Array<Maybe<PartnerOrderableItem>>>;
    parentDescription?: Maybe<Scalars['String']>;
    parentKey?: Maybe<Scalars['String']>;
    productDescription?: Maybe<Scalars['String']>;
    productKey: Scalars['ID'];
    productType?: Maybe<Scalars['String']>;
    userCountEnforced?: Maybe<Scalars['Boolean']>;
};
export declare type PartnerBtfProductItem = PartnerBtfProductNode & {
    __typename?: 'PartnerBtfProductItem';
    productKey: Scalars['ID'];
    productDescription?: Maybe<Scalars['String']>;
};
export declare type PartnerBtfProductNode = {
    productDescription?: Maybe<Scalars['String']>;
    productKey: Scalars['ID'];
};
export declare type PartnerCatalogApi = {
    __typename?: 'PartnerCatalogApi';
    partnerOfferingCatalog?: Maybe<PartnerOfferingListResponse>;
    partnerOfferingDetails?: Maybe<PartnerOfferingDetailsResponse>;
};
export declare type PartnerCatalogApiPartnerOfferingDetailsArgs = {
    where?: Maybe<PartnerOfferingFilter>;
};
export declare type PartnerCloudApp = PartnerOfferingNode & {
    __typename?: 'PartnerCloudApp';
    key: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    sku?: Maybe<Scalars['String']>;
    level?: Maybe<Scalars['Int']>;
    supportedBillingSystems?: Maybe<Array<Maybe<Scalars['String']>>>;
    hostingType?: Maybe<Scalars['String']>;
    pricingType?: Maybe<Scalars['String']>;
    billingType?: Maybe<Scalars['String']>;
    parent?: Maybe<Scalars['String']>;
};
export declare enum PartnerCloudLicenseType {
    Academic = "ACADEMIC",
    Commercial = "COMMERCIAL",
    Community = "COMMUNITY",
    Demonstration = "DEMONSTRATION",
    Developer = "DEVELOPER",
    Evaluation = "EVALUATION",
    Free = "FREE",
    OpenSource = "OPEN_SOURCE",
    Starter = "STARTER"
}
export declare type PartnerCloudProduct = PartnerCloudProductNode & {
    __typename?: 'PartnerCloudProduct';
    chargeElements?: Maybe<Array<Maybe<Scalars['String']>>>;
    key: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    offerings?: Maybe<Array<Maybe<PartnerOfferingItem>>>;
    uncollectibleAction?: Maybe<PartnerUncollectibleAction>;
};
export declare type PartnerCloudProductItem = PartnerCloudProductNode & {
    __typename?: 'PartnerCloudProductItem';
    key: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type PartnerCloudProductNode = {
    key: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare enum PartnerCurrency {
    Jpy = "JPY",
    Usd = "USD"
}
export declare type PartnerOfferingBtfInput = {
    currency?: Maybe<Array<Maybe<PartnerCurrency>>>;
    licenseType?: Maybe<Array<Maybe<PartnerBtfLicenseType>>>;
    productKey: Scalars['ID'];
};
export declare type PartnerOfferingCloudInput = {
    currency?: Maybe<Array<Maybe<PartnerCurrency>>>;
    key: Scalars['ID'];
    pricingPlanType?: Maybe<Array<Maybe<PartnerCloudLicenseType>>>;
};
export declare type PartnerOfferingDetailsResponse = {
    __typename?: 'PartnerOfferingDetailsResponse';
    btfApps?: Maybe<Array<Maybe<PartnerBtfProduct>>>;
    btfProducts?: Maybe<Array<Maybe<PartnerBtfProduct>>>;
    cloudApps?: Maybe<Array<Maybe<PartnerCloudApp>>>;
    cloudProducts?: Maybe<Array<Maybe<PartnerCloudProduct>>>;
};
export declare type PartnerOfferingFilter = {
    btfProduct?: Maybe<PartnerOfferingBtfInput>;
    cloudProduct?: Maybe<PartnerOfferingCloudInput>;
};
export declare type PartnerOfferingItem = PartnerOfferingNode & {
    __typename?: 'PartnerOfferingItem';
    billingType?: Maybe<Scalars['String']>;
    hostingType?: Maybe<Scalars['String']>;
    key: Scalars['ID'];
    level?: Maybe<Scalars['Int']>;
    name?: Maybe<Scalars['String']>;
    parent?: Maybe<Scalars['String']>;
    pricingPlans?: Maybe<Array<Maybe<PartnerPricingPlan>>>;
    pricingType?: Maybe<Scalars['String']>;
    sku?: Maybe<Scalars['String']>;
    supportedBillingSystems?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type PartnerOfferingListResponse = {
    __typename?: 'PartnerOfferingListResponse';
    btfProducts?: Maybe<Array<Maybe<PartnerBtfProductItem>>>;
    cloudProducts?: Maybe<Array<Maybe<PartnerCloudProductItem>>>;
};
export declare type PartnerOfferingNode = {
    key: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type PartnerOrderableItem = PartnerOrderableItemNode & {
    __typename?: 'PartnerOrderableItem';
    amount?: Maybe<Scalars['Float']>;
    currency?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    edition?: Maybe<Scalars['String']>;
    editionDescription?: Maybe<Scalars['String']>;
    editionId?: Maybe<Scalars['String']>;
    editionType?: Maybe<Scalars['String']>;
    editionTypeIsDeprecated?: Maybe<Scalars['Boolean']>;
    enterprise?: Maybe<Scalars['Boolean']>;
    licenseType?: Maybe<Scalars['String']>;
    monthsValid?: Maybe<Scalars['Int']>;
    newPricingPlanItem?: Maybe<Scalars['String']>;
    orderableItemId: Scalars['ID'];
    publiclyAvailable?: Maybe<Scalars['Boolean']>;
    renewalAmount?: Maybe<Scalars['Float']>;
    renewalFrequency?: Maybe<Scalars['String']>;
    saleType?: Maybe<Scalars['String']>;
    sku?: Maybe<Scalars['String']>;
    starter?: Maybe<Scalars['Boolean']>;
    unitCount?: Maybe<Scalars['Int']>;
    unitLabel?: Maybe<Scalars['String']>;
};
export declare type PartnerOrderableItemNode = {
    currency?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    licenseType?: Maybe<Scalars['String']>;
    orderableItemId: Scalars['ID'];
};
export declare type PartnerPricingPlan = PartnerPricingPlanNode & {
    __typename?: 'PartnerPricingPlan';
    currency?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Maybe<PartnerPricingPlanItem>>>;
    key: Scalars['ID'];
    primaryCycle?: Maybe<PartnerBillingCycle>;
    sku?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
};
export declare type PartnerPricingPlanItem = {
    __typename?: 'PartnerPricingPlanItem';
    chargeElement?: Maybe<Scalars['String']>;
    chargeType?: Maybe<Scalars['String']>;
    cycle?: Maybe<PartnerBillingCycle>;
    tiers?: Maybe<Array<Maybe<PartnerPricingTier>>>;
    tiersMode?: Maybe<Scalars['String']>;
};
export declare type PartnerPricingPlanNode = {
    currency?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    key: Scalars['ID'];
    type?: Maybe<Scalars['String']>;
};
export declare type PartnerPricingTier = {
    __typename?: 'PartnerPricingTier';
    amount?: Maybe<Scalars['Float']>;
    ceiling?: Maybe<Scalars['Float']>;
    flatAmount?: Maybe<Scalars['Float']>;
    floor?: Maybe<Scalars['Float']>;
    policy?: Maybe<Scalars['String']>;
    unitAmount?: Maybe<Scalars['Float']>;
};
export declare type PartnerUncollectibleAction = {
    __typename?: 'PartnerUncollectibleAction';
    destination?: Maybe<PartnerUncollectibleDestination>;
    type?: Maybe<Scalars['String']>;
};
export declare type PartnerUncollectibleDestination = {
    __typename?: 'PartnerUncollectibleDestination';
    offeringKey: Scalars['ID'];
};
export declare type Payload = {
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type PermissibleEstimationType = {
    __typename?: 'PermissibleEstimationType';
    value?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type PermissionToConsentByOauthId = {
    __typename?: 'PermissionToConsentByOauthId';
    isAllowed: Scalars['Boolean'];
    isSiteAdmin: Scalars['Boolean'];
};
export declare type PlanModeCardCreateInput = {
    boardId: Scalars['ID'];
    destination: PlanModeDestination;
    newCards: Array<Maybe<NewCard>>;
    rankBeforeCardId?: Maybe<Scalars['Long']>;
    destinationId?: Maybe<Scalars['ID']>;
};
export declare type PlanModeCardMoveInput = {
    cardIds: Array<Scalars['ID']>;
    boardId: Scalars['ID'];
    destination: PlanModeDestination;
    rankBeforeCardId?: Maybe<Scalars['Long']>;
    rankAfterCardId?: Maybe<Scalars['Long']>;
    sprintId?: Maybe<Scalars['ID']>;
};
export declare enum PlanModeDestination {
    Board = "BOARD",
    Backlog = "BACKLOG",
    Sprint = "SPRINT"
}
export declare type PolarisAddReactionInput = {
    containerAri: Scalars['String'];
    ari: Scalars['String'];
    emojiId: Scalars['String'];
    metadata?: Maybe<Scalars['JSON']>;
};
export declare type PolarisAddReactionPayload = Payload & {
    __typename?: 'PolarisAddReactionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node: Array<PolarisReactionSummary>;
};
export declare type PolarisComment = {
    __typename?: 'PolarisComment';
    id: Scalars['ID'];
    kind: PolarisCommentKind;
    subject: Scalars['ID'];
    updated: Scalars['String'];
    created: Scalars['String'];
    aaid: Scalars['String'];
    content: Scalars['JSON'];
    account?: Maybe<User>;
};
export declare enum PolarisCommentKind {
    View = "VIEW",
    PlayContribution = "PLAY_CONTRIBUTION"
}
export declare type PolarisConnectApp = {
    __typename?: 'PolarisConnectApp';
    id: Scalars['ID'];
    name: Scalars['String'];
    avatarUrl: Scalars['String'];
    oauthClientId: Scalars['String'];
    appId?: Maybe<Scalars['String']>;
    play?: Maybe<PolarisPlay>;
};
export declare type PolarisDecoration = {
    __typename?: 'PolarisDecoration';
    id: Scalars['ID'];
    valueRules: Array<PolarisValueRule>;
    valueDecoration: PolarisValueDecoration;
};
export declare type PolarisDecorationScheme = {
    __typename?: 'PolarisDecorationScheme';
    id: Scalars['ID'];
    fields: Array<PolarisIdeaField>;
};
export declare type PolarisDelegationToken = {
    __typename?: 'PolarisDelegationToken';
    url: Scalars['String'];
    token: Scalars['String'];
    expires: Scalars['String'];
};
export declare type PolarisDeleteReactionInput = {
    containerAri: Scalars['String'];
    ari: Scalars['String'];
    emojiId: Scalars['String'];
    metadata?: Maybe<Scalars['JSON']>;
};
export declare type PolarisDeleteReactionPayload = Payload & {
    __typename?: 'PolarisDeleteReactionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node: Array<PolarisReactionSummary>;
};
export declare enum PolarisFieldType {
    PolarisIdeaStringField = "PolarisIdeaStringField",
    PolarisIdeaDateTimeField = "PolarisIdeaDateTimeField",
    PolarisIdeaDateField = "PolarisIdeaDateField",
    PolarisIdeaUserField = "PolarisIdeaUserField",
    PolarisIdeaUsersField = "PolarisIdeaUsersField",
    PolarisIdeaOptionField = "PolarisIdeaOptionField",
    PolarisIdeaOptionsField = "PolarisIdeaOptionsField",
    PolarisIdeaLabelsField = "PolarisIdeaLabelsField",
    PolarisIdeaNumberField = "PolarisIdeaNumberField",
    PolarisIdeaExternalReferenceField = "PolarisIdeaExternalReferenceField",
    PolarisIdeaExternalReferencePropertyField = "PolarisIdeaExternalReferencePropertyField",
    PolarisIdeaIntervalField = "PolarisIdeaIntervalField",
    PolarisIdeaReactionsField = "PolarisIdeaReactionsField",
    PolarisIdeaPlayField = "PolarisIdeaPlayField"
}
export declare type PolarisFilterInput = {
    jql?: Maybe<Scalars['String']>;
};
export declare type PolarisGetDetailedReactionInput = {
    containerAri: Scalars['String'];
    ari: Scalars['String'];
    emojiId: Scalars['String'];
};
export declare type PolarisGetReactionsInput = {
    containerAri: Scalars['String'];
    aris?: Maybe<Array<Scalars['String']>>;
};
export declare type PolarisGroupValue = {
    __typename?: 'PolarisGroupValue';
    label?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['String']>;
};
export declare type PolarisGroupValueInput = {
    label?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['String']>;
};
export declare type PolarisIdea = {
    __typename?: 'PolarisIdea';
    id: Scalars['ID'];
    archived?: Maybe<Scalars['Boolean']>;
    lastCommentsViewedTimestamp?: Maybe<Scalars['String']>;
    lastInsightsViewedTimestamp?: Maybe<Scalars['String']>;
};
export declare type PolarisIdeaArchivedByField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaArchivedByField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaArchivedField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaArchivedField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    archivedOption: PolarisIdeaFieldOption;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaArchivedOnField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaArchivedOnField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaDateField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaDateField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaDateTimeField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaDateTimeField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaDocumentField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaDocumentField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaExternalReferenceField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaExternalReferenceField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
    configuration?: Maybe<Scalars['JSON']>;
};
export declare type PolarisIdeaExternalReferencePropertyField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaExternalReferencePropertyField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaField = {
    id: Scalars['ID'];
    jiraFieldKey?: Maybe<Scalars['String']>;
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    presentation?: Maybe<PolarisPresentation>;
    formula?: Maybe<Scalars['JSON']>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaFieldOption = {
    __typename?: 'PolarisIdeaFieldOption';
    id: Scalars['ID'];
    label: Scalars['String'];
    weight: Scalars['Int'];
};
export declare type PolarisIdeaIntervalField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaIntervalField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
    configuration?: Maybe<Scalars['JSON']>;
};
export declare type PolarisIdeaIssueCommentsField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaIssueCommentsField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaIssueIdField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaIssueIdField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    linearizable: Scalars['Boolean'];
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaIssueTypeField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaIssueTypeField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    linearizable: Scalars['Boolean'];
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaKeyField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaKeyField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    linearizable: Scalars['Boolean'];
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaLabelsField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaLabelsField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaLinkedIssuesField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaLinkedIssuesField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaLinkedIssuesProgressField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaLinkedIssuesProgressField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaNumberField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaNumberField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaOptionField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaOptionField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    options?: Maybe<Array<PolarisIdeaFieldOption>>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaOptionsField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaOptionsField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    options?: Maybe<Array<PolarisIdeaFieldOption>>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaPlayField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaPlayField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    play?: Maybe<PolarisPlay>;
    aspect?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaReactionsField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaReactionsField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaSpecialField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaSpecialField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    linearizable: Scalars['Boolean'];
    specialType?: Maybe<Scalars['String']>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaStatusField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaStatusField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    linearizable: Scalars['Boolean'];
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaStringField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaStringField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaTemplate = {
    __typename?: 'PolarisIdeaTemplate';
    id: Scalars['ID'];
    title: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    template?: Maybe<Scalars['JSON']>;
    project?: Maybe<Scalars['ID']>;
    aaid?: Maybe<Scalars['String']>;
};
export declare type PolarisIdeaType = {
    __typename?: 'PolarisIdeaType';
    id: Scalars['ID'];
    name: Scalars['String'];
    iconUrl?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
};
export declare type PolarisIdeaUserField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaUserField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaUsersField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaUsersField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    linearizable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeaVotesField = PolarisIdeaField & {
    __typename?: 'PolarisIdeaVotesField';
    id: Scalars['ID'];
    fieldId?: Maybe<Scalars['Int']>;
    fieldName?: Maybe<Scalars['String']>;
    label: Scalars['String'];
    editable: Scalars['Boolean'];
    sortable: Scalars['Boolean'];
    groupable: Scalars['Boolean'];
    defaultSortOrder?: Maybe<PolarisSortOrder>;
    linearizable: Scalars['Boolean'];
    jiraFieldKey?: Maybe<Scalars['String']>;
    decorations?: Maybe<Array<PolarisDecoration>>;
    formula?: Maybe<Scalars['JSON']>;
    presentation?: Maybe<PolarisPresentation>;
    description?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    builtin?: Maybe<BuiltinPolarisIdeaField>;
};
export declare type PolarisIdeas = {
    __typename?: 'PolarisIdeas';
    total: Scalars['Int'];
    ideas?: Maybe<Array<PolarisRestIdea>>;
};
export declare type PolarisInsight = {
    __typename?: 'PolarisInsight';
    id: Scalars['ID'];
    container?: Maybe<Scalars['ID']>;
    aaid: Scalars['String'];
    description?: Maybe<Scalars['JSON']>;
    snippets: Array<PolarisSnippet>;
    created: Scalars['String'];
    updated: Scalars['String'];
    account?: Maybe<User>;
    play?: Maybe<PolarisPlay>;
    contribs?: Maybe<Array<PolarisPlayContribution>>;
};
export declare type PolarisIssueLinkType = {
    __typename?: 'PolarisIssueLinkType';
    delivery: Scalars['Int'];
    merge: Scalars['Int'];
    datapoint: Scalars['Int'];
};
export declare type PolarisMatrixAxis = {
    __typename?: 'PolarisMatrixAxis';
    dimension: Scalars['String'];
    field: PolarisIdeaField;
    fieldOptions?: Maybe<Array<PolarisGroupValue>>;
    reversed?: Maybe<Scalars['Boolean']>;
};
export declare type PolarisMatrixConfig = {
    __typename?: 'PolarisMatrixConfig';
    axes?: Maybe<Array<PolarisMatrixAxis>>;
};
export declare type PolarisMutationNamespace = {
    __typename?: 'PolarisMutationNamespace';
    ranking?: Maybe<PolarisRankingMutationNamespace>;
};
export declare type PolarisPlay = {
    __typename?: 'PolarisPlay';
    id: Scalars['ID'];
    label: Scalars['String'];
    kind: PolarisPlayKind;
    view?: Maybe<PolarisView>;
    fields?: Maybe<Array<PolarisIdeaPlayField>>;
    parameters?: Maybe<Scalars['JSON']>;
    contributions?: Maybe<Array<PolarisPlayContribution>>;
    contribution?: Maybe<PolarisPlayContribution>;
};
export declare type PolarisPlayContributionArgs = {
    id: Scalars['ID'];
};
export declare type PolarisPlayContribution = {
    __typename?: 'PolarisPlayContribution';
    id: Scalars['ID'];
    play: PolarisPlay;
    subject: Scalars['ID'];
    aaid: Scalars['String'];
    comment?: Maybe<PolarisComment>;
    amount?: Maybe<Scalars['Int']>;
    created: Scalars['String'];
    updated: Scalars['String'];
    appearsIn?: Maybe<PolarisInsight>;
};
export declare enum PolarisPlayKind {
    PolarisBudgetAllocationPlay = "PolarisBudgetAllocationPlay"
}
export declare type PolarisPresentation = {
    __typename?: 'PolarisPresentation';
    type: Scalars['String'];
    parameters?: Maybe<Scalars['JSON']>;
};
export declare type PolarisPresentationInput = {
    type: Scalars['String'];
    parameters?: Maybe<Scalars['JSON']>;
};
export declare type PolarisProject = {
    __typename?: 'PolarisProject';
    id: Scalars['ID'];
    activationId?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    key: Scalars['String'];
    avatarUrls: ProjectAvatars;
    viewsets?: Maybe<Array<PolarisViewSet>>;
    views: Array<PolarisView>;
    rankField?: Maybe<Scalars['ID']>;
    fields: Array<PolarisIdeaField>;
    ideaTypes: Array<PolarisIdeaType>;
    insights?: Maybe<Array<PolarisInsight>>;
    snippetProviders?: Maybe<Array<PolarisSnippetProvider>>;
    refreshing: PolarisRefreshStatus;
    onboarded: Scalars['Boolean'];
    onboardTemplate?: Maybe<Scalars['String']>;
    onboardedAt?: Maybe<Scalars['String']>;
    template?: Maybe<PolarisProjectTemplate>;
    selectedDeliveryProject?: Maybe<Scalars['ID']>;
    ideas: Array<PolarisIdea>;
    issueLinkType: PolarisIssueLinkType;
    statusCategories?: Maybe<Array<PolarisStatusCategory>>;
    arjConfiguration: ArjConfiguration;
    arjHierarchyConfiguration?: Maybe<Array<ArjHierarchyConfigurationLevel>>;
    plays?: Maybe<Array<PolarisPlay>>;
    play?: Maybe<PolarisPlay>;
};
export declare type PolarisProjectPlayArgs = {
    id: Scalars['ID'];
};
export declare type PolarisProjectTemplate = {
    __typename?: 'PolarisProjectTemplate';
    ideas?: Maybe<Scalars['JSON']>;
};
export declare type PolarisQueryNamespace = {
    __typename?: 'PolarisQueryNamespace';
    ranking?: Maybe<PolarisRankingQueryNamespace>;
};
export declare type PolarisRankingMutationNamespace = {
    __typename?: 'PolarisRankingMutationNamespace';
    createList?: Maybe<RankingDiffPayload>;
    deleteList?: Maybe<RankingDiffPayload>;
    makeFirst?: Maybe<RankingDiffPayload>;
    makeLast?: Maybe<RankingDiffPayload>;
    makeBefore?: Maybe<RankingDiffPayload>;
    makeAfter?: Maybe<RankingDiffPayload>;
    makeUnranked?: Maybe<RankingDiffPayload>;
};
export declare type PolarisRankingMutationNamespaceCreateListArgs = {
    input: CreateRankingListInput;
};
export declare type PolarisRankingMutationNamespaceDeleteListArgs = {
    listId: Scalars['ID'];
};
export declare type PolarisRankingMutationNamespaceMakeFirstArgs = {
    listId: Scalars['ID'];
    items?: Maybe<Array<Scalars['ID']>>;
};
export declare type PolarisRankingMutationNamespaceMakeLastArgs = {
    listId: Scalars['ID'];
    items?: Maybe<Array<Scalars['ID']>>;
};
export declare type PolarisRankingMutationNamespaceMakeBeforeArgs = {
    listId: Scalars['ID'];
    refId: Scalars['ID'];
    items?: Maybe<Array<Scalars['ID']>>;
};
export declare type PolarisRankingMutationNamespaceMakeAfterArgs = {
    listId: Scalars['ID'];
    refId: Scalars['ID'];
    items?: Maybe<Array<Scalars['ID']>>;
};
export declare type PolarisRankingMutationNamespaceMakeUnrankedArgs = {
    listId: Scalars['ID'];
    items?: Maybe<Array<Scalars['ID']>>;
};
export declare type PolarisRankingQueryNamespace = {
    __typename?: 'PolarisRankingQueryNamespace';
    list?: Maybe<Array<Maybe<RankItem>>>;
};
export declare type PolarisRankingQueryNamespaceListArgs = {
    listId: Scalars['ID'];
};
export declare type PolarisReaction = {
    __typename?: 'PolarisReaction';
    key: Scalars['String'];
    value: Array<PolarisReactionSummary>;
};
export declare type PolarisReactionSummary = {
    __typename?: 'PolarisReactionSummary';
    ari: Scalars['String'];
    containerAri: Scalars['String'];
    emojiId: Scalars['String'];
    count: Scalars['Int'];
    reacted: Scalars['Boolean'];
    users?: Maybe<Array<PolarisReactionUser>>;
};
export declare type PolarisReactionUser = {
    __typename?: 'PolarisReactionUser';
    id: Scalars['String'];
    displayName: Scalars['String'];
};
export declare enum PolarisRefreshError {
    NeedAuth = "NEED_AUTH",
    InvalidSnippet = "INVALID_SNIPPET",
    NotFound = "NOT_FOUND",
    InternalError = "INTERNAL_ERROR"
}
export declare type PolarisRefreshInfo = {
    __typename?: 'PolarisRefreshInfo';
    error?: Maybe<Scalars['String']>;
    errorCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<PolarisRefreshError>;
    queued?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['String']>;
    next?: Maybe<Scalars['String']>;
    autoSeconds?: Maybe<Scalars['Int']>;
    timeToLiveSeconds?: Maybe<Scalars['Int']>;
};
export declare type PolarisRefreshJob = {
    __typename?: 'PolarisRefreshJob';
    progress?: Maybe<PolarisRefreshJobProgress>;
    refreshedSnippets?: Maybe<Array<PolarisSnippet>>;
};
export declare type PolarisRefreshJobProgress = {
    __typename?: 'PolarisRefreshJobProgress';
    pendingCount: Scalars['Int'];
    errorCount: Scalars['Int'];
};
export declare type PolarisRefreshStatus = {
    __typename?: 'PolarisRefreshStatus';
    count: Scalars['Int'];
    pending: Scalars['Int'];
    errors: Scalars['Int'];
    last?: Maybe<Scalars['String']>;
};
export declare enum PolarisResolvedObjectAuthType {
    Oauth2 = "OAUTH2",
    ApiKey = "API_KEY"
}
export declare type PolarisRestIdea = {
    __typename?: 'PolarisRestIdea';
    id: Scalars['String'];
    key: Scalars['String'];
    fields: Scalars['JSON'];
};
export declare type PolarisSnippet = {
    __typename?: 'PolarisSnippet';
    id: Scalars['ID'];
    data?: Maybe<Scalars['JSON']>;
    url?: Maybe<Scalars['String']>;
    oauthClientId: Scalars['String'];
    appInfo?: Maybe<PolarisConnectApp>;
    properties?: Maybe<Scalars['JSON']>;
    updated: Scalars['String'];
    refresh?: Maybe<PolarisRefreshInfo>;
};
export declare type PolarisSnippetGroupDecl = {
    __typename?: 'PolarisSnippetGroupDecl';
    id: Scalars['ID'];
    key: Scalars['String'];
    label?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<PolarisSnippetPropertyDecl>>;
};
export declare type PolarisSnippetPropertiesConfig = {
    __typename?: 'PolarisSnippetPropertiesConfig';
    config: Scalars['JSON'];
};
export declare type PolarisSnippetPropertyDecl = {
    __typename?: 'PolarisSnippetPropertyDecl';
    id: Scalars['ID'];
    key: Scalars['String'];
    label?: Maybe<Scalars['String']>;
    kind?: Maybe<PolarisSnippetPropertyKind>;
};
export declare enum PolarisSnippetPropertyKind {
    Number = "NUMBER",
    Rating = "RATING",
    Labels = "LABELS"
}
export declare type PolarisSnippetProvider = {
    __typename?: 'PolarisSnippetProvider';
    id: Scalars['ID'];
    app?: Maybe<PolarisConnectApp>;
    properties?: Maybe<Array<PolarisSnippetPropertyDecl>>;
    groups?: Maybe<Array<PolarisSnippetGroupDecl>>;
};
export declare type PolarisSortField = {
    __typename?: 'PolarisSortField';
    field: PolarisIdeaField;
    order?: Maybe<PolarisSortOrder>;
};
export declare type PolarisSortFieldInput = {
    field: Scalars['ID'];
    order?: Maybe<PolarisSortOrder>;
};
export declare enum PolarisSortOrder {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type PolarisStatusCategory = {
    __typename?: 'PolarisStatusCategory';
    id: Scalars['Int'];
    name: Scalars['String'];
    key: Scalars['String'];
    colorName: Scalars['String'];
};
export declare type PolarisTermsConsent = {
    __typename?: 'PolarisTermsConsent';
    consented: Scalars['Boolean'];
    requiresMarketingConsent: Scalars['Boolean'];
    locale: Scalars['String'];
};
export declare type PolarisTimelineConfig = {
    __typename?: 'PolarisTimelineConfig';
    startDateField?: Maybe<PolarisIdeaField>;
    dueDateField?: Maybe<PolarisIdeaField>;
    mode: PolarisTimelineMode;
    startTimestamp?: Maybe<Scalars['String']>;
    endTimestamp?: Maybe<Scalars['String']>;
};
export declare enum PolarisTimelineMode {
    Months = "MONTHS",
    Quarters = "QUARTERS",
    Years = "YEARS"
}
export declare type PolarisValueDecoration = {
    __typename?: 'PolarisValueDecoration';
    emoji?: Maybe<Scalars['String']>;
    backgroundColor?: Maybe<Scalars['String']>;
    highlightContainer?: Maybe<Scalars['Boolean']>;
};
export declare type PolarisValueDecorationInput = {
    emoji?: Maybe<Scalars['String']>;
    backgroundColor?: Maybe<Scalars['String']>;
    highlightContainer?: Maybe<Scalars['Boolean']>;
};
export declare enum PolarisValueOperator {
    Gt = "GT",
    Lt = "LT",
    Gte = "GTE",
    Lte = "LTE",
    Eq = "EQ"
}
export declare type PolarisValueRule = {
    __typename?: 'PolarisValueRule';
    value: Scalars['String'];
    operator: PolarisValueOperator;
};
export declare type PolarisValueRuleInput = {
    value: Scalars['String'];
    operator: PolarisValueOperator;
};
export declare type PolarisView = {
    __typename?: 'PolarisView';
    id: Scalars['ID'];
    xid?: Maybe<Scalars['Int']>;
    uuid: Scalars['ID'];
    createdAt?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    emoji?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['JSON']>;
    projectId: Scalars['Int'];
    viewSetId: Scalars['ID'];
    tableColumnSizes?: Maybe<Array<PolarisViewTableColumnSize>>;
    fieldRollups?: Maybe<Array<PolarisViewFieldRollup>>;
    fields: Array<PolarisIdeaField>;
    jql?: Maybe<Scalars['String']>;
    immutable?: Maybe<Scalars['Boolean']>;
    visualizationType: PolarisVisualizationType;
    groupBy?: Maybe<PolarisIdeaField>;
    verticalGroupBy?: Maybe<PolarisIdeaField>;
    groupValues?: Maybe<Array<PolarisGroupValue>>;
    verticalGroupValues?: Maybe<Array<PolarisGroupValue>>;
    sort?: Maybe<Array<PolarisSortField>>;
    hidden?: Maybe<Array<PolarisIdeaField>>;
    timelineConfig?: Maybe<PolarisTimelineConfig>;
    matrixConfig?: Maybe<PolarisMatrixConfig>;
    userJql?: Maybe<Scalars['String']>;
    filter?: Maybe<Array<PolarisViewFilter>>;
    rank: Scalars['Int'];
    comments?: Maybe<Array<PolarisComment>>;
    containsArchived: Scalars['Boolean'];
    lastViewed?: Maybe<Array<Maybe<PolarisViewLastViewed>>>;
    lastCommentsViewedTimestamp?: Maybe<Scalars['String']>;
    collabServiceDelegation?: Maybe<PolarisDelegationToken>;
    sortMode: PolarisViewSortMode;
    hideEmptyGroups?: Maybe<Scalars['Boolean']>;
    enabledAutoSave?: Maybe<Scalars['Boolean']>;
    layoutType?: Maybe<PolarisViewLayoutType>;
    hideEmptyColumns?: Maybe<Scalars['Boolean']>;
};
export declare type PolarisViewJqlArgs = {
    filter?: Maybe<PolarisFilterInput>;
};
export declare type PolarisViewCommentsArgs = {
    limit?: Maybe<Scalars['Int']>;
};
export declare type PolarisViewFieldRollup = {
    __typename?: 'PolarisViewFieldRollup';
    field: PolarisIdeaField;
    rollup: PolarisViewFieldRollupType;
};
export declare type PolarisViewFieldRollupInput = {
    field: Scalars['ID'];
    rollup: PolarisViewFieldRollupType;
};
export declare enum PolarisViewFieldRollupType {
    Avg = "AVG",
    Count = "COUNT",
    Empty = "EMPTY",
    Filled = "FILLED",
    Max = "MAX",
    Median = "MEDIAN",
    Min = "MIN",
    Range = "RANGE",
    Sum = "SUM"
}
export declare type PolarisViewFilter = {
    __typename?: 'PolarisViewFilter';
    kind: PolarisViewFilterKind;
    field?: Maybe<PolarisIdeaField>;
    values: Array<PolarisViewFilterValue>;
};
export declare type PolarisViewFilterInput = {
    kind: PolarisViewFilterKind;
    field?: Maybe<Scalars['ID']>;
    values: Array<PolarisViewFilterValueInput>;
};
export declare enum PolarisViewFilterKind {
    FieldIdentity = "FIELD_IDENTITY",
    FieldNumeric = "FIELD_NUMERIC",
    Text = "TEXT",
    Interval = "INTERVAL"
}
export declare enum PolarisViewFilterOperator {
    Lt = "LT",
    Lte = "LTE",
    Gt = "GT",
    Gte = "GTE",
    Eq = "EQ",
    Neq = "NEQ",
    StartBeforeNow = "START_BEFORE_NOW",
    StartAfterNow = "START_AFTER_NOW",
    EndBeforeNow = "END_BEFORE_NOW",
    EndAfterNow = "END_AFTER_NOW"
}
export declare type PolarisViewFilterValue = {
    __typename?: 'PolarisViewFilterValue';
    stringValue?: Maybe<Scalars['String']>;
    numericValue?: Maybe<Scalars['Float']>;
    operator?: Maybe<PolarisViewFilterOperator>;
};
export declare type PolarisViewFilterValueInput = {
    text?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['Float']>;
    operator?: Maybe<PolarisViewFilterOperator>;
};
export declare type PolarisViewLastViewed = {
    __typename?: 'PolarisViewLastViewed';
    timestamp: Scalars['String'];
    aaid: Scalars['String'];
    account?: Maybe<User>;
};
export declare enum PolarisViewLayoutType {
    Detailed = "DETAILED",
    Compact = "COMPACT"
}
export declare type PolarisViewSet = {
    __typename?: 'PolarisViewSet';
    id: Scalars['ID'];
    name: Scalars['String'];
    type?: Maybe<PolarisViewSetType>;
    views: Array<PolarisView>;
    viewsets: Array<PolarisViewSet>;
    rank: Scalars['Int'];
};
export declare enum PolarisViewSetType {
    Capture = "CAPTURE",
    Prioritize = "PRIORITIZE",
    Deliver = "DELIVER",
    System = "SYSTEM",
    Custom = "CUSTOM",
    Single = "SINGLE",
    Section = "SECTION"
}
export declare enum PolarisViewSortMode {
    ProjectRank = "PROJECT_RANK",
    ViewRank = "VIEW_RANK",
    FieldsSort = "FIELDS_SORT"
}
export declare type PolarisViewTableColumnSize = {
    __typename?: 'PolarisViewTableColumnSize';
    field: PolarisIdeaField;
    size: Scalars['Int'];
};
export declare type PolarisViewTableColumnSizeInput = {
    field: Scalars['ID'];
    size: Scalars['Int'];
};
export declare enum PolarisVisualizationType {
    Table = "TABLE",
    Board = "BOARD",
    Twoxtwo = "TWOXTWO",
    Matrix = "MATRIX",
    Timeline = "TIMELINE"
}
export declare enum PrincipalType {
    Unlicensed = "UNLICENSED",
    Anonymous = "ANONYMOUS",
    Customer = "CUSTOMER"
}
export declare type Privacy = {
    __typename?: 'Privacy';
    privacyEnhancingTechniques?: Maybe<PrivacyEnhancingTechniques>;
    gdpr?: Maybe<GdprDetails>;
    ccpa?: Maybe<CcpaDetails>;
    dataProcessingAgreement?: Maybe<DataProcessingAgreement>;
};
export declare type PrivacyEnhancingTechniques = {
    __typename?: 'PrivacyEnhancingTechniques';
    arePrivacyEnhancingTechniquesSupported: Scalars['Boolean'];
    privacyEnhancingTechniquesSupported?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type ProductListing = {
    __typename?: 'ProductListing';
    name: Scalars['String'];
    productId: Scalars['ID'];
    shortDescription: Scalars['String'];
    tagLine: Scalars['String'];
    logoUrl?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
    links: ProductListingLinks;
    additionalIds: ProductListingAdditionalIds;
};
export declare type ProductListingLogoUrlArgs = {
    theme?: Maybe<Scalars['String']>;
    strict?: Maybe<Scalars['Boolean']>;
};
export declare type ProductListingIconUrlArgs = {
    theme?: Maybe<Scalars['String']>;
    strict?: Maybe<Scalars['Boolean']>;
};
export declare type ProductListingAdditionalIds = {
    __typename?: 'ProductListingAdditionalIds';
    mpacAppKey?: Maybe<Scalars['String']>;
};
export declare type ProductListingLinks = {
    __typename?: 'ProductListingLinks';
    tryUrl?: Maybe<Scalars['String']>;
};
export declare type ProductListingResult = ProductListing | QueryError;
export declare type ProjectAvatars = {
    __typename?: 'ProjectAvatars';
    x16: Scalars['URL'];
    x24: Scalars['URL'];
    x32: Scalars['URL'];
    x48: Scalars['URL'];
};
export declare type Properties = {
    __typename?: 'Properties';
    updatedBy?: Maybe<Scalars['String']>;
    updatedAt?: Maybe<Scalars['Float']>;
    updatedValues?: Maybe<Scalars['String']>;
    formStatus: FormStatus;
    jiraIssueLinks?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type Query = {
    __typename?: 'Query';
    trello: TrelloQueryApi;
    customerSupport?: Maybe<SupportRequestCatalogQueryApi>;
    jiraProjectAndDevOpsToolRelationship?: Maybe<JiraProjectAndDevOpsToolRelationship>;
    devOpsToolRelationshipsForJiraProject?: Maybe<JiraProjectAndDevOpsToolRelationshipConnection>;
    jiraProjectRelationshipsForDevOpsTool?: Maybe<JiraProjectAndDevOpsToolRelationshipConnection>;
    bitbucket?: Maybe<BitbucketQuery>;
    opsgenie?: Maybe<OpsgenieQuery>;
    releaseNotes: ContentPlatformReleaseNotesConnection;
    releaseNote?: Maybe<ContentPlatformReleaseNote>;
    contentFacet: ContentPlatformContentFacetConnection;
    smarts?: Maybe<SmartsQueryApi>;
    jiraCannedResponse?: Maybe<JiraCannedResponseQueryApi>;
    appRecommendations?: Maybe<AppRecQuery>;
    ccp?: Maybe<CcpQueryApi>;
    townsquare?: Maybe<TownsquareQueryApi>;
    atlas?: Maybe<TownsquareQueryApi>;
    devOps?: Maybe<DevOps>;
    jiraProjectRelationshipsForRepository?: Maybe<JiraProjectAndRepositoryRelationshipConnection>;
    repositoryRelationshipsForJiraProject?: Maybe<JiraProjectAndRepositoryRelationshipConnection>;
    jiraProjectAndRepositoryRelationship?: Maybe<JiraProjectAndRepositoryRelationship>;
    opsgenieTeamRelationshipForDevOpsService?: Maybe<DevOpsServiceAndOpsgenieTeamRelationship>;
    devOpsServiceRelationshipsForOpsgenieTeam?: Maybe<DevOpsServiceAndOpsgenieTeamRelationshipConnection>;
    devOpsServiceAndOpsgenieTeamRelationship?: Maybe<DevOpsServiceAndOpsgenieTeamRelationship>;
    devOpsServiceRelationshipsForJiraProject?: Maybe<DevOpsServiceAndJiraProjectRelationshipConnection>;
    jiraProjectRelationshipsForService?: Maybe<DevOpsServiceAndJiraProjectRelationshipConnection>;
    devOpsServiceAndJiraProjectRelationship?: Maybe<DevOpsServiceAndJiraProjectRelationship>;
    devOpsServiceAndRepositoryRelationship?: Maybe<DevOpsServiceAndRepositoryRelationship>;
    devOpsServiceRelationshipsForRepository?: Maybe<DevOpsServiceAndRepositoryRelationshipConnection>;
    repositoryRelationshipsForDevOpsService?: Maybe<DevOpsServiceAndRepositoryRelationshipConnection>;
    jiraProjectRelationshipsForOpsgenieTeam?: Maybe<JiraProjectAndOpsgenieTeamRelationshipConnection>;
    opsgenieTeamRelationshipsForJiraProject?: Maybe<JiraProjectAndOpsgenieTeamRelationshipConnection>;
    jiraProjectAndOpsgenieTeamRelationship?: Maybe<JiraProjectAndOpsgenieTeamRelationship>;
    codeInJira?: Maybe<CodeInJira>;
    partnerCatalogApi?: Maybe<PartnerCatalogApi>;
    jira?: Maybe<JiraQuery>;
    testing?: Maybe<Testing>;
    appStoredEntity?: Maybe<AppStoredEntity>;
    appStoredEntities?: Maybe<AppStoredEntityConnection>;
    appStoredEntitiesForCleanup?: Maybe<AppStoredEntityConnection>;
    appStoredCustomEntity?: Maybe<AppStoredCustomEntity>;
    appStoredCustomEntities?: Maybe<AppStoredCustomEntityConnection>;
    ersLifecycle?: Maybe<ErsLifecycleQuery>;
    appAdmin?: Maybe<AppAdminQuery>;
    confluence?: Maybe<ConfluenceQueryApi>;
    polarisGetEarliestOnboardedProjectForCloudId?: Maybe<EarliestOnboardedProjectForCloudId>;
    polarisGetEarliestViewViewedForUser?: Maybe<EarliestViewViewedForUser>;
    polarisProject?: Maybe<PolarisProject>;
    polarisView?: Maybe<PolarisView>;
    polarisInsights?: Maybe<Array<PolarisInsight>>;
    polarisInsight?: Maybe<PolarisInsight>;
    polarisInsightsWithErrors?: Maybe<Array<PolarisInsight>>;
    polarisLabels?: Maybe<Array<LabelUsage>>;
    polarisTermsConsent?: Maybe<PolarisTermsConsent>;
    polarisSnippetPropertiesConfig?: Maybe<PolarisSnippetPropertiesConfig>;
    polarisCollabToken?: Maybe<PolarisDelegationToken>;
    polaris?: Maybe<PolarisQueryNamespace>;
    polarisIdeaTemplates?: Maybe<Array<PolarisIdeaTemplate>>;
    polarisViewArrangementInfo?: Maybe<Scalars['JSON']>;
    polarisGetReactions?: Maybe<Array<Maybe<PolarisReaction>>>;
    polarisGetDetailedReaction?: Maybe<PolarisReactionSummary>;
    appActiveTunnels?: Maybe<AppTunnelDefinitions>;
    dvcs?: Maybe<DvcsQuery>;
    webTriggerUrlsByAppContext?: Maybe<Array<WebTriggerUrl>>;
    marketplacePartner?: Maybe<MarketplacePartner>;
    marketplaceApp?: Maybe<MarketplaceApp>;
    marketplaceAppByKey?: Maybe<MarketplaceApp>;
    marketplaceAppByCloudAppId?: Maybe<MarketplaceApp>;
    myMarketplaceApps?: Maybe<MarketplaceAppConnection>;
    marketplacePricingPlan?: Maybe<MarketplacePricingPlan>;
    marketplaceUser?: Maybe<MarketplaceUser>;
    productListing?: Maybe<ProductListingResult>;
    productListings: Array<ProductListingResult>;
    marketplaceAppTrustInformation?: Maybe<MarketplaceAppTrustInformationResult>;
    compass?: Maybe<CompassCatalogQueryApi>;
    extensionsEcho?: Maybe<Scalars['String']>;
    extensionContexts?: Maybe<Array<ExtensionContext>>;
    extensionContext?: Maybe<ExtensionContext>;
    extensionByKey?: Maybe<Extension>;
    echo?: Maybe<Scalars['String']>;
    diagnostics?: Maybe<Scalars['JSON']>;
    node?: Maybe<Node>;
    customerService?: Maybe<CustomerServiceQueryApi>;
    activities?: Maybe<Activities>;
    activity?: Maybe<Activity>;
    devOpsMetrics?: Maybe<DevOpsMetrics>;
    aquaOutgoingEmailLogs?: Maybe<AquaOutgoingEmailLogsQueryApi>;
    shepherd?: Maybe<ShepherdQuery>;
    helpObjectStore?: Maybe<HelpObjectStoreQueryApi>;
    jsw?: Maybe<JswQuery>;
    boardScope?: Maybe<BoardScope>;
    developmentInformation?: Maybe<IssueDevOpsDevelopmentInformation>;
    softwareBoards?: Maybe<BoardScopeConnection>;
    canSplitIssue?: Maybe<Scalars['Boolean']>;
    apps?: Maybe<AppConnection>;
    app?: Maybe<App>;
    appHostServices?: Maybe<Array<AppHostService>>;
    appContributors: Array<AppContributor>;
    appInstallationTask?: Maybe<AppInstallationTask>;
    ecosystem?: Maybe<EcosystemQuery>;
    devOpsTools?: Maybe<DevOpsTools>;
    search?: Maybe<SearchQueryApi>;
    me: AuthenticationContext;
    user?: Maybe<User>;
    users?: Maybe<Array<User>>;
    devOpsService?: Maybe<DevOpsService>;
    devOpsServiceTiers?: Maybe<Array<DevOpsServiceTier>>;
    devOpsServices?: Maybe<DevOpsServiceConnection>;
    devOpsServicesById?: Maybe<Array<DevOpsService>>;
    devOpsServiceRelationship?: Maybe<DevOpsServiceRelationship>;
    bitbucketRepositoriesAvailableToLinkWithNewDevOpsService?: Maybe<BitbucketRepositoryIdConnection>;
    appLogs?: Maybe<AppLogConnection>;
    appLogLines?: Maybe<AppLogLineConnection>;
    developerLogAccess?: Maybe<Array<Maybe<DeveloperLogAccessResult>>>;
    installationContextsWithLogAccess?: Maybe<Array<InstallationContextWithLogAccess>>;
    team?: Maybe<TeamQuery>;
    roadmaps?: Maybe<RoadmapsQuery>;
    jwmOverview?: Maybe<JiraWorkManagementOverviewResult>;
    jwmOverviews?: Maybe<JiraWorkManagementOverviewConnectionResult>;
    tenantContexts?: Maybe<Array<Maybe<TenantContext>>>;
    surfacePlatform: SurfacePlatformQueryApi;
    helpLayout?: Maybe<HelpLayoutQueryApi>;
    xflow?: Maybe<Scalars['String']>;
    virtualAgent?: Maybe<VirtualAgentQueryApi>;
    jiraReleases?: Maybe<JiraReleases>;
    appDeployment?: Maybe<AppDeployment>;
    jiraOAuthApps?: Maybe<JiraOAuthAppsApps>;
    oauthClients?: Maybe<OAuthClientsQuery>;
    helpCenter?: Maybe<HelpCenterQueryApi>;
    isSainSearchEnabled?: Maybe<Scalars['Boolean']>;
    nlpSearch?: Maybe<NlpSearchResponse>;
    nlpFollowUp?: Maybe<NlpFollowUpResponse>;
};
export declare type QueryJiraProjectAndDevOpsToolRelationshipArgs = {
    id: Scalars['ID'];
};
export declare type QueryDevOpsToolRelationshipsForJiraProjectArgs = {
    id: Scalars['ID'];
    limit?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectAndDevOpsToolRelationshipFilter>;
};
export declare type QueryJiraProjectRelationshipsForDevOpsToolArgs = {
    id: Scalars['ID'];
    jiraProjectId?: Maybe<Scalars['ID']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectAndDevOpsToolRelationshipFilter>;
};
export declare type QueryReleaseNotesArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Scalars['Int'];
    search?: Maybe<ContentPlatformSearchOptions>;
    filter?: Maybe<ContentPlatformReleaseNoteFilterOptions>;
    filterByAnnouncementPlan?: Maybe<Scalars['Boolean']>;
    productFeatureFlags?: Maybe<Scalars['JSON']>;
    featureFlagEnvironment?: Maybe<Scalars['String']>;
    featureFlagProject?: Maybe<Scalars['String']>;
    publishedOnly?: Maybe<Scalars['Boolean']>;
    orderBy?: Maybe<Scalars['String']>;
};
export declare type QueryReleaseNoteArgs = {
    id: Scalars['String'];
    publishedOnly?: Maybe<Scalars['Boolean']>;
};
export declare type QueryContentFacetArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Scalars['Int'];
    forContentType: Scalars['String'];
    forFields: Array<Scalars['String']>;
    where?: Maybe<ContentPlatformContentFacetClause>;
};
export declare type QueryJiraProjectRelationshipsForRepositoryArgs = {
    id: Scalars['ID'];
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectAndRepositoryRelationshipFilter>;
    sort?: Maybe<JiraProjectAndRepositoryRelationshipSort>;
};
export declare type QueryRepositoryRelationshipsForJiraProjectArgs = {
    id: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<JiraProjectAndRepositoryRelationshipFilter>;
    sort?: Maybe<JiraProjectAndRepositoryRelationshipSort>;
};
export declare type QueryJiraProjectAndRepositoryRelationshipArgs = {
    id: Scalars['ID'];
};
export declare type QueryOpsgenieTeamRelationshipForDevOpsServiceArgs = {
    id: Scalars['ID'];
};
export declare type QueryDevOpsServiceRelationshipsForOpsgenieTeamArgs = {
    id: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type QueryDevOpsServiceAndOpsgenieTeamRelationshipArgs = {
    id: Scalars['ID'];
};
export declare type QueryDevOpsServiceRelationshipsForJiraProjectArgs = {
    id: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServiceAndJiraProjectRelationshipFilter>;
};
export declare type QueryJiraProjectRelationshipsForServiceArgs = {
    id: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServiceAndJiraProjectRelationshipFilter>;
};
export declare type QueryDevOpsServiceAndJiraProjectRelationshipArgs = {
    id: Scalars['ID'];
};
export declare type QueryDevOpsServiceAndRepositoryRelationshipArgs = {
    id: Scalars['ID'];
};
export declare type QueryDevOpsServiceRelationshipsForRepositoryArgs = {
    id: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServiceAndRepositoryRelationshipFilter>;
    sort?: Maybe<DevOpsServiceAndRepositoryRelationshipSort>;
};
export declare type QueryRepositoryRelationshipsForDevOpsServiceArgs = {
    id: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServiceAndRepositoryRelationshipFilter>;
    sort?: Maybe<DevOpsServiceAndRepositoryRelationshipSort>;
};
export declare type QueryJiraProjectRelationshipsForOpsgenieTeamArgs = {
    id: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type QueryOpsgenieTeamRelationshipsForJiraProjectArgs = {
    id: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type QueryJiraProjectAndOpsgenieTeamRelationshipArgs = {
    id: Scalars['ID'];
};
export declare type QueryCodeInJiraArgs = {
    cloudId: Scalars['ID'];
};
export declare type QueryAppStoredEntityArgs = {
    contextAri: Scalars['ID'];
    key: Scalars['ID'];
    encrypted?: Maybe<Scalars['Boolean']>;
};
export declare type QueryAppStoredEntitiesArgs = {
    contextAri: Scalars['ID'];
    where?: Maybe<Array<AppStoredEntityFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type QueryAppStoredEntitiesForCleanupArgs = {
    contextAri: Scalars['ID'];
    where?: Maybe<Array<AppStoredEntityFilter>>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type QueryAppStoredCustomEntityArgs = {
    contextAri: Scalars['ID'];
    entityName: Scalars['String'];
    key: Scalars['ID'];
};
export declare type QueryAppStoredCustomEntitiesArgs = {
    contextAri: Scalars['ID'];
    entityName: Scalars['String'];
    indexName: Scalars['String'];
    partition?: Maybe<Array<Scalars['AppStoredCustomEntityFieldValue']>>;
    range?: Maybe<AppStoredCustomEntityRange>;
    filters?: Maybe<AppStoredCustomEntityFilters>;
    sort?: Maybe<SortOrder>;
    limit?: Maybe<Scalars['Int']>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type QueryAppAdminArgs = {
    appId: Scalars['ID'];
};
export declare type QueryPolarisGetEarliestOnboardedProjectForCloudIdArgs = {
    id: Scalars['ID'];
};
export declare type QueryPolarisGetEarliestViewViewedForUserArgs = {
    id: Scalars['ID'];
};
export declare type QueryPolarisProjectArgs = {
    id: Scalars['ID'];
    skipRefresh?: Maybe<Scalars['Boolean']>;
};
export declare type QueryPolarisViewArgs = {
    id: Scalars['ID'];
};
export declare type QueryPolarisInsightsArgs = {
    project: Scalars['ID'];
    container?: Maybe<Scalars['ID']>;
};
export declare type QueryPolarisInsightArgs = {
    id: Scalars['ID'];
};
export declare type QueryPolarisInsightsWithErrorsArgs = {
    project: Scalars['ID'];
};
export declare type QueryPolarisLabelsArgs = {
    projectID: Scalars['ID'];
};
export declare type QueryPolarisTermsConsentArgs = {
    cloudID: Scalars['ID'];
};
export declare type QueryPolarisSnippetPropertiesConfigArgs = {
    project: Scalars['ID'];
    oauthClientId: Scalars['String'];
    groupId: Scalars['String'];
};
export declare type QueryPolarisCollabTokenArgs = {
    viewID: Scalars['ID'];
};
export declare type QueryPolarisIdeaTemplatesArgs = {
    project: Scalars['ID'];
};
export declare type QueryPolarisViewArrangementInfoArgs = {
    id: Scalars['ID'];
};
export declare type QueryPolarisGetReactionsArgs = {
    input: PolarisGetReactionsInput;
};
export declare type QueryPolarisGetDetailedReactionArgs = {
    input: PolarisGetDetailedReactionInput;
};
export declare type QueryAppActiveTunnelsArgs = {
    appId: Scalars['ID'];
    environmentId: Scalars['ID'];
};
export declare type QueryWebTriggerUrlsByAppContextArgs = {
    appId: Scalars['ID'];
    envId: Scalars['ID'];
    contextId: Scalars['ID'];
};
export declare type QueryMarketplacePartnerArgs = {
    id: Scalars['ID'];
};
export declare type QueryMarketplaceAppArgs = {
    appId: Scalars['ID'];
};
export declare type QueryMarketplaceAppByKeyArgs = {
    appKey: Scalars['String'];
};
export declare type QueryMarketplaceAppByCloudAppIdArgs = {
    cloudAppId: Scalars['ID'];
};
export declare type QueryMyMarketplaceAppsArgs = {
    filter?: Maybe<MarketplaceAppsFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type QueryMarketplacePricingPlanArgs = {
    appId: Scalars['ID'];
    hostingType: AtlassianProductHostingType;
    pricingPlanOptions?: Maybe<MarketplacePricingPlanOptions>;
};
export declare type QueryProductListingArgs = {
    id: Scalars['ID'];
};
export declare type QueryProductListingsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type QueryMarketplaceAppTrustInformationArgs = {
    appKey: Scalars['String'];
    state: AppTrustInformationState;
};
export declare type QueryExtensionsEchoArgs = {
    text: Scalars['String'];
};
export declare type QueryExtensionContextsArgs = {
    contextIds: Array<Scalars['ID']>;
};
export declare type QueryExtensionContextArgs = {
    contextId: Scalars['ID'];
};
export declare type QueryExtensionByKeyArgs = {
    contextId: Scalars['ID'];
    definitionId: Scalars['ID'];
    extensionKey: Scalars['String'];
};
export declare type QueryNodeArgs = {
    id: Scalars['ID'];
};
export declare type QueryCustomerServiceArgs = {
    cloudId: Scalars['ID'];
};
export declare type QueryAquaOutgoingEmailLogsArgs = {
    cloudId: Scalars['ID'];
};
export declare type QueryBoardScopeArgs = {
    boardId: Scalars['ID'];
};
export declare type QueryDevelopmentInformationArgs = {
    issueId: Scalars['ID'];
};
export declare type QuerySoftwareBoardsArgs = {
    projectAri: Scalars['ID'];
};
export declare type QueryCanSplitIssueArgs = {
    boardId: Scalars['ID'];
    cardId: Scalars['ID'];
};
export declare type QueryAppsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    filter?: Maybe<AppsFilter>;
};
export declare type QueryAppArgs = {
    id: Scalars['ID'];
};
export declare type QueryAppHostServicesArgs = {
    filter?: Maybe<AppServicesFilter>;
};
export declare type QueryAppContributorsArgs = {
    id: Scalars['ID'];
};
export declare type QueryAppInstallationTaskArgs = {
    id: Scalars['ID'];
};
export declare type QueryUserArgs = {
    accountId: Scalars['ID'];
};
export declare type QueryUsersArgs = {
    accountIds: Array<Scalars['ID']>;
};
export declare type QueryDevOpsServiceArgs = {
    id: Scalars['ID'];
};
export declare type QueryDevOpsServiceTiersArgs = {
    cloudId: Scalars['String'];
};
export declare type QueryDevOpsServicesArgs = {
    cloudId: Scalars['String'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<DevOpsServicesFilterInput>;
};
export declare type QueryDevOpsServicesByIdArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type QueryDevOpsServiceRelationshipArgs = {
    id: Scalars['ID'];
};
export declare type QueryBitbucketRepositoriesAvailableToLinkWithNewDevOpsServiceArgs = {
    cloudId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    nameFilter?: Maybe<Scalars['String']>;
};
export declare type QueryAppLogsArgs = {
    last?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    after?: Maybe<Scalars['String']>;
    appId: Scalars['ID'];
    environmentId: Array<Scalars['ID']>;
    query?: Maybe<LogQueryInput>;
};
export declare type QueryAppLogLinesArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    invocation: Scalars['ID'];
};
export declare type QueryDeveloperLogAccessArgs = {
    contextIds: Array<Scalars['ID']>;
    appId: Scalars['ID'];
    environmentType: AppEnvironmentType;
};
export declare type QueryInstallationContextsWithLogAccessArgs = {
    appId: Scalars['ID'];
};
export declare type QueryJwmOverviewArgs = {
    id: Scalars['ID'];
};
export declare type QueryJwmOverviewsArgs = {
    cloudId: Scalars['ID'];
    accountId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type QueryTenantContextsArgs = {
    cloudIds?: Maybe<Array<Scalars['ID']>>;
    hostNames?: Maybe<Array<Scalars['String']>>;
};
export declare type QueryHelpLayoutArgs = {
    cloudId?: Maybe<Scalars['ID']>;
};
export declare type QueryAppDeploymentArgs = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    id: Scalars['ID'];
};
export declare type QueryHelpCenterArgs = {
    cloudId: Scalars['ID'];
};
export declare type QueryIsSainSearchEnabledArgs = {
    cloudId: Scalars['String'];
};
export declare type QueryNlpSearchArgs = {
    query?: Maybe<Scalars['String']>;
    locations: Array<Scalars['String']>;
};
export declare type QueryNlpFollowUpArgs = {
    query?: Maybe<Scalars['String']>;
    locations: Array<Scalars['String']>;
};
export declare type QueryError = {
    __typename?: 'QueryError';
    identifier?: Maybe<Scalars['ID']>;
    message?: Maybe<Scalars['String']>;
    extensions?: Maybe<Array<QueryErrorExtension>>;
};
export declare type QueryErrorExtension = {
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare type QuotaInfo = {
    __typename?: 'QuotaInfo';
    contextAri: Scalars['ID'];
    encrypted: Scalars['Boolean'];
    quotaUsage: Scalars['Int'];
};
export declare type RankColumnInput = {
    boardId: Scalars['ID'];
    columnId: Scalars['ID'];
    position: Scalars['Int'];
};
export declare type RankColumnOutput = MutationResponse & {
    __typename?: 'RankColumnOutput';
    columns?: Maybe<Array<Maybe<Column>>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type RankItem = {
    __typename?: 'RankItem';
    id: Scalars['ID'];
    rank: Scalars['Float'];
};
export declare type RankingDiffPayload = {
    __typename?: 'RankingDiffPayload';
    added?: Maybe<Array<RankItem>>;
    changed?: Maybe<Array<RankItem>>;
    deleted?: Maybe<Array<RankItem>>;
};
export declare enum RateLimitingCurrency {
    TestingService = "TESTING_SERVICE",
    TrelloCurrency = "TRELLO_CURRENCY",
    DevopsContainerRelationshipsReadCurrency = "DEVOPS_CONTAINER_RELATIONSHIPS_READ_CURRENCY",
    DevopsContainerRelationshipsWriteCurrency = "DEVOPS_CONTAINER_RELATIONSHIPS_WRITE_CURRENCY",
    NaturalLanguageToJqlCurrency = "NATURAL_LANGUAGE_TO_JQL_CURRENCY",
    TeamsCurrency = "TEAMS_CURRENCY",
    TeamSearchCurrency = "TEAM_SEARCH_CURRENCY",
    TeamMembersCurrency = "TEAM_MEMBERS_CURRENCY",
    PolarisCurrency = "POLARIS_CURRENCY",
    PolarisReactionCurrency = "POLARIS_REACTION_CURRENCY",
    PolarisViewCurrency = "POLARIS_VIEW_CURRENCY",
    PolarisRankingCurrency = "POLARIS_RANKING_CURRENCY",
    PolarisPlayCurrency = "POLARIS_PLAY_CURRENCY",
    PolarisInsightCurrency = "POLARIS_INSIGHT_CURRENCY",
    PolarisSnippetCurrency = "POLARIS_SNIPPET_CURRENCY",
    PolarisProjectConfigCurrency = "POLARIS_PROJECT_CONFIG_CURRENCY",
    PolarisFieldCurrency = "POLARIS_FIELD_CURRENCY",
    PolarisViewsetCurrency = "POLARIS_VIEWSET_CURRENCY",
    PolarisCommentCurrency = "POLARIS_COMMENT_CURRENCY",
    PolarisUnfurlCurrency = "POLARIS_UNFURL_CURRENCY",
    PolarisIdeaTemplateCurrency = "POLARIS_IDEA_TEMPLATE_CURRENCY",
    PolarisIdeaCurrency = "POLARIS_IDEA_CURRENCY",
    PolarisOnboardingCurrency = "POLARIS_ONBOARDING_CURRENCY",
    PolarisBetaUserCurrency = "POLARIS_BETA_USER_CURRENCY",
    PolarisProjectQueryCurrency = "POLARIS_PROJECT_QUERY_CURRENCY",
    PolarisViewArrangementInfoQueryCurrency = "POLARIS_VIEW_ARRANGEMENT_INFO_QUERY_CURRENCY",
    PolarisViewQueryCurrency = "POLARIS_VIEW_QUERY_CURRENCY",
    PolarisInsightQueryCurrency = "POLARIS_INSIGHT_QUERY_CURRENCY",
    PolarisInsightsQueryCurrency = "POLARIS_INSIGHTS_QUERY_CURRENCY",
    PolarisInsightsWithErrorsQueryCurrency = "POLARIS_INSIGHTS_WITH_ERRORS_QUERY_CURRENCY",
    PolarisLabelsQueryCurrency = "POLARIS_LABELS_QUERY_CURRENCY",
    PolarisTermsConsentQueryCurrency = "POLARIS_TERMS_CONSENT_QUERY_CURRENCY",
    PolarisSnippetPropertiesConfigQueryCurrency = "POLARIS_SNIPPET_PROPERTIES_CONFIG_QUERY_CURRENCY",
    PolarisCollabTokenQueryCurrency = "POLARIS_COLLAB_TOKEN_QUERY_CURRENCY",
    PolarisIdeaTemplatesQueryCurrency = "POLARIS_IDEA_TEMPLATES_QUERY_CURRENCY",
    CompassSynchronizeLinkAssociationsCurrency = "COMPASS_SYNCHRONIZE_LINK_ASSOCIATIONS_CURRENCY",
    HelpObjectStoreCurrency = "HELP_OBJECT_STORE_CURRENCY",
    ForgeMetricsCurrency = "FORGE_METRICS_CURRENCY",
    ExportMetricsCurrency = "EXPORT_METRICS_CURRENCY",
    DevopsServiceReadCurrency = "DEVOPS_SERVICE_READ_CURRENCY",
    DevopsServiceWriteCurrency = "DEVOPS_SERVICE_WRITE_CURRENCY",
    TeamSearchV2Currency = "TEAM_SEARCH_V2_CURRENCY",
    TeamV2Currency = "TEAM_V2_CURRENCY",
    TeamMembersV2Currency = "TEAM_MEMBERS_V2_CURRENCY",
    HelpLayoutCurrency = "HELP_LAYOUT_CURRENCY",
    ForgeAuditLogsCurrency = "FORGE_AUDIT_LOGS_CURRENCY",
    ForgeAppContributorCurrency = "FORGE_APP_CONTRIBUTOR_CURRENCY",
    HelpCenterCurrency = "HELP_CENTER_CURRENCY",
    ForgeAlertsCurrency = "FORGE_ALERTS_CURRENCY"
}
export declare type RawStatus = {
    __typename?: 'RawStatus';
    id?: Maybe<Scalars['ID']>;
    jiraId?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
};
export declare type RefreshPolarisSnippetsInput = {
    project: Scalars['ID'];
    subject?: Maybe<Scalars['ID']>;
    synchronous?: Maybe<Scalars['Boolean']>;
};
export declare type RefreshPolarisSnippetsPayload = Payload & {
    __typename?: 'RefreshPolarisSnippetsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisRefreshJob>;
};
export declare type RefreshToken = {
    __typename?: 'RefreshToken';
    refreshTokenRotation: Scalars['Boolean'];
};
export declare type RefreshTokenInput = {
    refreshTokenRotation: Scalars['Boolean'];
};
export declare type Remote = {
    __typename?: 'Remote';
    key: Scalars['String'];
    baseUrl: Scalars['String'];
    classifications?: Maybe<Array<Classification>>;
    locations?: Maybe<Array<Scalars['String']>>;
};
export declare type RemoveAppContributorsInput = {
    appId: Scalars['ID'];
    emails?: Maybe<Array<Scalars['String']>>;
    accountIds?: Maybe<Array<Scalars['String']>>;
};
export declare type RemoveAppContributorsResponsePayload = Payload & {
    __typename?: 'RemoveAppContributorsResponsePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type RemoveCompassComponentLabelsInput = {
    componentId: Scalars['ID'];
    labelNames: Array<Scalars['String']>;
};
export declare type RemoveCompassComponentLabelsPayload = Payload & {
    __typename?: 'RemoveCompassComponentLabelsPayload';
    removedLabelNames?: Maybe<Array<Scalars['String']>>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type RemoveCompassScorecardFromComponentPayload = Payload & {
    __typename?: 'RemoveCompassScorecardFromComponentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type RemovePolarisColumnInput = {
    column: Scalars['ID'];
};
export declare type ReportsOverview = {
    __typename?: 'ReportsOverview';
    metadata: Array<Maybe<SoftwareReport>>;
};
export declare type ResolvePolarisObjectInput = {
    project: Scalars['ID'];
    issue: Scalars['ID'];
    resourceUrl: Scalars['String'];
    authToken?: Maybe<Scalars['String']>;
};
export declare type ResolvePolarisObjectPayload = Payload & {
    __typename?: 'ResolvePolarisObjectPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    response?: Maybe<ResolvedPolarisObject>;
};
export declare type ResolvedPolarisObject = {
    __typename?: 'ResolvedPolarisObject';
    statusCode: Scalars['Int'];
    externalAuth?: Maybe<Array<ResolvedPolarisObjectExternalAuth>>;
    auth?: Maybe<ResolvedPolarisObjectAuth>;
    oauthClientId?: Maybe<Scalars['String']>;
    body?: Maybe<Scalars['JSON']>;
};
export declare type ResolvedPolarisObjectAuth = {
    __typename?: 'ResolvedPolarisObjectAuth';
    hint?: Maybe<Scalars['String']>;
    type: PolarisResolvedObjectAuthType;
};
export declare type ResolvedPolarisObjectExternalAuth = {
    __typename?: 'ResolvedPolarisObjectExternalAuth';
    key: Scalars['String'];
    displayName: Scalars['String'];
    url: Scalars['String'];
};
export declare type RetentionDurationInDays = {
    __typename?: 'RetentionDurationInDays';
    min: Scalars['Float'];
    max: Scalars['Float'];
};
export declare type RoadmapAddItemInput = {
    projectId: Scalars['ID'];
    itemTypeId: Scalars['ID'];
    parentId?: Maybe<Scalars['ID']>;
    summary: Scalars['String'];
    dueDate?: Maybe<Scalars['Date']>;
    startDate?: Maybe<Scalars['Date']>;
    color?: Maybe<RoadmapPaletteColor>;
    rank?: Maybe<RoadmapAddItemRank>;
    jql?: Maybe<Scalars['String']>;
    jqlContexts?: Maybe<Array<Scalars['String']>>;
    assignee?: Maybe<Scalars['String']>;
    labels?: Maybe<Array<Scalars['String']>>;
    componentIds?: Maybe<Array<Scalars['ID']>>;
    versionIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type RoadmapAddItemPayload = Payload & {
    __typename?: 'RoadmapAddItemPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    output?: Maybe<RoadmapAddItemResponse>;
};
export declare type RoadmapAddItemRank = {
    beforeId?: Maybe<Scalars['ID']>;
};
export declare type RoadmapAddItemResponse = {
    __typename?: 'RoadmapAddItemResponse';
    id: Scalars['ID'];
    key: Scalars['String'];
    item?: Maybe<RoadmapItem>;
    matchesSource: Scalars['Boolean'];
    matchesJqlFilters: Scalars['Boolean'];
};
export declare type RoadmapAddLevelOneIssueTypeHealthcheckResolution = {
    create?: Maybe<RoadmapCreateLevelOneIssueType>;
    promote?: Maybe<RoadmapPromoteLevelOneIssueType>;
};
export declare type RoadmapBoardConfiguration = {
    __typename?: 'RoadmapBoardConfiguration';
    jql?: Maybe<Scalars['String']>;
    isUserBoardAdmin?: Maybe<Scalars['Boolean']>;
    sprints?: Maybe<Array<RoadmapSprint>>;
    isBoardJqlFilteringOutEpics?: Maybe<Scalars['Boolean']>;
    isSprintsFeatureEnabled?: Maybe<Scalars['Boolean']>;
    isChildIssuePlanningEnabled?: Maybe<Scalars['Boolean']>;
    derivedFields?: Maybe<Array<RoadmapField>>;
    childIssuePlanningMode?: Maybe<RoadmapChildIssuePlanningMode>;
};
export declare enum RoadmapChildIssuePlanningMode {
    Date = "DATE",
    Sprint = "SPRINT",
    Disabled = "DISABLED"
}
export declare type RoadmapChildItem = {
    __typename?: 'RoadmapChildItem';
    id: Scalars['ID'];
    projectId: Scalars['ID'];
    key: Scalars['String'];
    itemTypeId: Scalars['ID'];
    parentId?: Maybe<Scalars['ID']>;
    summary?: Maybe<Scalars['String']>;
    assigneeId?: Maybe<Scalars['ID']>;
    assignee?: Maybe<User>;
    dueDateRFC3339?: Maybe<Scalars['Date']>;
    startDateRFC3339?: Maybe<Scalars['Date']>;
    status?: Maybe<RoadmapItemStatus>;
    statusId?: Maybe<Scalars['ID']>;
    dependencies?: Maybe<Array<Scalars['ID']>>;
    color?: Maybe<RoadmapPaletteColor>;
    rank?: Maybe<Scalars['String']>;
    labels?: Maybe<Array<Scalars['String']>>;
    versionIds?: Maybe<Array<Scalars['ID']>>;
    sprintIds?: Maybe<Array<Scalars['ID']>>;
    componentIds?: Maybe<Array<Scalars['ID']>>;
    inferredDueDate?: Maybe<Scalars['Date']>;
    inferredStartDate?: Maybe<Scalars['Date']>;
    resolved?: Maybe<Scalars['Boolean']>;
};
export declare type RoadmapChildItemConnection = {
    __typename?: 'RoadmapChildItemConnection';
    edges: Array<Maybe<RoadmapChildItemEdge>>;
    nodes: Array<Maybe<RoadmapChildItem>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type RoadmapChildItemEdge = {
    __typename?: 'RoadmapChildItemEdge';
    cursor: Scalars['String'];
    node?: Maybe<RoadmapChildItem>;
};
export declare type RoadmapComponent = {
    __typename?: 'RoadmapComponent';
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type RoadmapConfiguration = {
    __typename?: 'RoadmapConfiguration';
    isCrossProject: Scalars['Boolean'];
    isCrossProjectInconsistent: Scalars['Boolean'];
    roadmapFeatureEnabled: Scalars['Boolean'];
    rankIssuesSupported: Scalars['Boolean'];
    dependencies?: Maybe<RoadmapDependencyConfiguration>;
    externalConfiguration?: Maybe<RoadmapExternalConfiguration>;
    projectConfigurations: Array<RoadmapProjectConfiguration>;
    projectConfiguration?: Maybe<RoadmapProjectConfiguration>;
    statusCategories: Array<RoadmapStatusCategory>;
    userConfiguration?: Maybe<RoadmapUserConfiguration>;
    boardConfiguration?: Maybe<RoadmapBoardConfiguration>;
    hierarchyConfiguration?: Maybe<RoadmapHierarchyConfiguration>;
};
export declare type RoadmapContent = {
    __typename?: 'RoadmapContent';
    configuration: RoadmapConfiguration;
    items: RoadmapItemConnection;
    levelOneItems: RoadmapLevelOneItemConnection;
    childItems: RoadmapChildItemConnection;
};
export declare type RoadmapContentLevelOneItemsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
};
export declare type RoadmapContentChildItemsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
    before?: Maybe<Scalars['String']>;
    parentIds: Array<Scalars['ID']>;
};
export declare type RoadmapCreateLevelOneIssueType = {
    epicTypeName: Scalars['String'];
    epicTypeDescription: Scalars['String'];
};
export declare type RoadmapCreationPreferences = {
    __typename?: 'RoadmapCreationPreferences';
    projectId?: Maybe<Scalars['Long']>;
    itemTypes: Scalars['JSON'];
};
export declare type RoadmapCustomFilter = {
    __typename?: 'RoadmapCustomFilter';
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type RoadmapDependencyConfiguration = {
    __typename?: 'RoadmapDependencyConfiguration';
    isDependenciesEnabled: Scalars['Boolean'];
    inwardDependencyDescription?: Maybe<Scalars['String']>;
    outwardDependencyDescription?: Maybe<Scalars['String']>;
};
export declare type RoadmapDetails = {
    __typename?: 'RoadmapDetails';
    roadmapConfiguration?: Maybe<RoadmapConfiguration>;
    roadmapItems?: Maybe<RoadmapItemConnection>;
    metadata?: Maybe<RoadmapMetadata>;
    isRoadmapFeatureEnabled: Scalars['Boolean'];
    healthcheck?: Maybe<RoadmapHealthCheck>;
    content?: Maybe<RoadmapContent>;
};
export declare enum RoadmapEpicView {
    All = "ALL",
    Completed = "COMPLETED",
    Incomplete = "INCOMPLETE"
}
export declare type RoadmapExternalConfiguration = {
    __typename?: 'RoadmapExternalConfiguration';
    externalSystem: Scalars['ID'];
    colorFields?: Maybe<Array<Maybe<Scalars['ID']>>>;
    startDateField?: Maybe<Scalars['ID']>;
    dueDateField?: Maybe<Scalars['ID']>;
    rankField?: Maybe<Scalars['ID']>;
    epicLinkField?: Maybe<Scalars['ID']>;
    epicNameField?: Maybe<Scalars['ID']>;
    sprintField?: Maybe<Scalars['ID']>;
    colorField?: Maybe<Scalars['ID']>;
};
export declare type RoadmapField = {
    __typename?: 'RoadmapField';
    id: Scalars['String'];
    values: Array<Scalars['String']>;
};
export declare type RoadmapFilterConfiguration = {
    __typename?: 'RoadmapFilterConfiguration';
    customFilters?: Maybe<Array<RoadmapCustomFilter>>;
    quickFilters?: Maybe<Array<RoadmapQuickFilter>>;
};
export declare type RoadmapHealthCheck = {
    __typename?: 'RoadmapHealthCheck';
    id?: Maybe<Scalars['ID']>;
    title: Scalars['String'];
    explanation: Scalars['String'];
    learnMore: RoadmapHealthCheckLink;
    resolution?: Maybe<RoadmapHealthCheckResolution>;
};
export declare type RoadmapHealthCheckLink = {
    __typename?: 'RoadmapHealthCheckLink';
    text: Scalars['String'];
    url: Scalars['String'];
};
export declare type RoadmapHealthCheckResolution = {
    __typename?: 'RoadmapHealthCheckResolution';
    label: Scalars['String'];
    actionId: Scalars['ID'];
    fallbackMessage: Scalars['String'];
};
export declare type RoadmapHierarchyConfiguration = {
    __typename?: 'RoadmapHierarchyConfiguration';
    levelOneName: Scalars['String'];
};
export declare type RoadmapItem = {
    __typename?: 'RoadmapItem';
    id: Scalars['ID'];
    projectId: Scalars['ID'];
    key: Scalars['String'];
    itemType: RoadmapItemType;
    itemTypeId: Scalars['Long'];
    parentId?: Maybe<Scalars['ID']>;
    summary?: Maybe<Scalars['String']>;
    assignee?: Maybe<User>;
    assigneeId?: Maybe<Scalars['ID']>;
    dueDate?: Maybe<Scalars['DateTime']>;
    dueDateRFC3339?: Maybe<Scalars['Date']>;
    startDate?: Maybe<Scalars['DateTime']>;
    startDateRFC3339?: Maybe<Scalars['Date']>;
    status?: Maybe<RoadmapItemStatus>;
    statusId?: Maybe<Scalars['ID']>;
    statusCategory?: Maybe<RoadmapItemStatusCategory>;
    createdDate?: Maybe<Scalars['DateTime']>;
    resolutionDate?: Maybe<Scalars['DateTime']>;
    dependencies?: Maybe<Array<Scalars['ID']>>;
    color?: Maybe<RoadmapPaletteColor>;
    rank?: Maybe<Scalars['String']>;
    labels?: Maybe<Array<Scalars['String']>>;
    versionIds?: Maybe<Array<Scalars['ID']>>;
    sprintIds?: Maybe<Array<Scalars['ID']>>;
    componentIds?: Maybe<Array<Scalars['ID']>>;
    inferredDueDate?: Maybe<Scalars['Date']>;
    inferredStartDate?: Maybe<Scalars['Date']>;
    resolved?: Maybe<Scalars['Boolean']>;
};
export declare type RoadmapItemConnection = {
    __typename?: 'RoadmapItemConnection';
    edges?: Maybe<Array<Maybe<RoadmapItemEdge>>>;
    nodes: Array<Maybe<RoadmapItem>>;
    pageInfo: PageInfo;
};
export declare type RoadmapItemEdge = {
    __typename?: 'RoadmapItemEdge';
    cursor: Scalars['String'];
    node?: Maybe<RoadmapItem>;
};
export declare type RoadmapItemRankInput = {
    id: Scalars['ID'];
    position: RoadmapRankPosition;
};
export declare type RoadmapItemStatus = {
    __typename?: 'RoadmapItemStatus';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    statusCategory?: Maybe<RoadmapItemStatusCategory>;
};
export declare type RoadmapItemStatusCategory = {
    __typename?: 'RoadmapItemStatusCategory';
    id: Scalars['ID'];
    key: Scalars['String'];
    name?: Maybe<Scalars['String']>;
};
export declare type RoadmapItemType = {
    __typename?: 'RoadmapItemType';
    id: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
    iconUrl?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    subtask: Scalars['Boolean'];
    avatarId?: Maybe<Scalars['ID']>;
    requiredFieldIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type RoadmapLevelOneItem = {
    __typename?: 'RoadmapLevelOneItem';
    id: Scalars['ID'];
    projectId: Scalars['ID'];
    key: Scalars['String'];
    itemTypeId: Scalars['ID'];
    parentId?: Maybe<Scalars['ID']>;
    summary?: Maybe<Scalars['String']>;
    assignee?: Maybe<User>;
    assigneeId?: Maybe<Scalars['ID']>;
    dueDateRFC3339?: Maybe<Scalars['Date']>;
    startDateRFC3339?: Maybe<Scalars['Date']>;
    status?: Maybe<RoadmapItemStatus>;
    statusId?: Maybe<Scalars['ID']>;
    dependencies?: Maybe<Array<Scalars['ID']>>;
    color?: Maybe<RoadmapPaletteColor>;
    rank?: Maybe<Scalars['String']>;
    labels?: Maybe<Array<Scalars['String']>>;
    versionIds?: Maybe<Array<Scalars['ID']>>;
    sprintIds?: Maybe<Array<Scalars['ID']>>;
    componentIds?: Maybe<Array<Scalars['ID']>>;
    inferredDueDate?: Maybe<Scalars['Date']>;
    inferredStartDate?: Maybe<Scalars['Date']>;
    resolved?: Maybe<Scalars['Boolean']>;
    childIssueCount: Scalars['Int'];
    progress: Array<RoadmapProgressEntry>;
};
export declare type RoadmapLevelOneItemConnection = {
    __typename?: 'RoadmapLevelOneItemConnection';
    edges: Array<Maybe<RoadmapLevelOneItemEdge>>;
    nodes: Array<Maybe<RoadmapLevelOneItem>>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
export declare type RoadmapLevelOneItemEdge = {
    __typename?: 'RoadmapLevelOneItemEdge';
    cursor: Scalars['String'];
    node?: Maybe<RoadmapLevelOneItem>;
};
export declare enum RoadmapLevelOneView {
    Complete12M = "COMPLETE12M",
    Complete9M = "COMPLETE9M",
    Complete6M = "COMPLETE6M",
    Complete3M = "COMPLETE3M",
    Complete1M = "COMPLETE1M",
    Incomplete = "INCOMPLETE"
}
export declare type RoadmapMetadata = {
    __typename?: 'RoadmapMetadata';
    hasExceededEpicLimit: Scalars['Boolean'];
    hasExceededIssueLimit: Scalars['Boolean'];
    corruptedIssueCount: Scalars['Int'];
};
export declare type RoadmapMutationErrorExtension = MutationErrorExtension & {
    __typename?: 'RoadmapMutationErrorExtension';
    statusCode?: Maybe<Scalars['Int']>;
    errorType?: Maybe<Scalars['String']>;
};
export declare enum RoadmapPaletteColor {
    Purple = "PURPLE",
    Blue = "BLUE",
    Green = "GREEN",
    Teal = "TEAL",
    Yellow = "YELLOW",
    Orange = "ORANGE",
    Grey = "GREY",
    DarkPurple = "DARK_PURPLE",
    DarkBlue = "DARK_BLUE",
    DarkGreen = "DARK_GREEN",
    DarkTeal = "DARK_TEAL",
    DarkYellow = "DARK_YELLOW",
    DarkOrange = "DARK_ORANGE",
    DarkGrey = "DARK_GREY"
}
export declare type RoadmapProgressEntry = {
    __typename?: 'RoadmapProgressEntry';
    statusCategoryId: Scalars['ID'];
    count: Scalars['Int'];
};
export declare type RoadmapProject = {
    __typename?: 'RoadmapProject';
    id: Scalars['ID'];
    key?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    lead?: Maybe<User>;
    hasCompletedOnboarding: Scalars['Boolean'];
    areDependenciesSupported: Scalars['Boolean'];
    inwardDependencyDescription?: Maybe<Scalars['String']>;
    outwardDependencyDescription?: Maybe<Scalars['String']>;
    epicIssueTypeId?: Maybe<Scalars['ID']>;
    startDateCustomFieldId?: Maybe<Scalars['ID']>;
    colorCustomFieldId?: Maybe<Scalars['ID']>;
    lexoRankCustomFieldId?: Maybe<Scalars['ID']>;
    itemTypes?: Maybe<Array<RoadmapItemType>>;
    permissions?: Maybe<RoadmapProjectPermissions>;
    validation?: Maybe<RoadmapProjectValidation>;
};
export declare type RoadmapProjectConfiguration = {
    __typename?: 'RoadmapProjectConfiguration';
    projectId: Scalars['ID'];
    projectKey?: Maybe<Scalars['String']>;
    projectName?: Maybe<Scalars['String']>;
    parentItemTypes: Array<RoadmapItemType>;
    childItemTypes: Array<RoadmapItemType>;
    permissions?: Maybe<RoadmapProjectPermissions>;
    validation?: Maybe<RoadmapProjectValidation>;
    defaultItemTypeId?: Maybe<Scalars['String']>;
    versions?: Maybe<Array<RoadmapVersion>>;
    components?: Maybe<Array<RoadmapComponent>>;
    isReleasesFeatureEnabled: Scalars['Boolean'];
};
export declare type RoadmapProjectPermissions = {
    __typename?: 'RoadmapProjectPermissions';
    canEditIssues: Scalars['Boolean'];
    canScheduleIssues: Scalars['Boolean'];
    canCreateIssues: Scalars['Boolean'];
    canAdministerProjects: Scalars['Boolean'];
};
export declare type RoadmapProjectValidation = {
    __typename?: 'RoadmapProjectValidation';
    hasAllFieldAssociations: Scalars['Boolean'];
    hasEpicIssueType: Scalars['Boolean'];
    hasValidHierarchy: Scalars['Boolean'];
    isRoadmapFeatureEnabled: Scalars['Boolean'];
};
export declare type RoadmapPromoteLevelOneIssueType = {
    promoteItemTypeId: Scalars['ID'];
};
export declare type RoadmapQuickFilter = {
    __typename?: 'RoadmapQuickFilter';
    id: Scalars['ID'];
    name: Scalars['String'];
    query: Scalars['String'];
};
export declare enum RoadmapRankPosition {
    Before = "BEFORE",
    After = "AFTER"
}
export declare type RoadmapResolveHealthcheckInput = {
    actionId: Scalars['ID'];
    addLevelOneIssueType?: Maybe<RoadmapAddLevelOneIssueTypeHealthcheckResolution>;
};
export declare type RoadmapResolveHealthcheckPayload = Payload & {
    __typename?: 'RoadmapResolveHealthcheckPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type RoadmapScheduleItemInput = {
    itemId: Scalars['ID'];
    dueDate?: Maybe<Scalars['Date']>;
    startDate?: Maybe<Scalars['Date']>;
};
export declare type RoadmapScheduleItemsInput = {
    scheduleRequests: Array<Maybe<RoadmapScheduleItemInput>>;
};
export declare type RoadmapScheduleItemsPayload = Payload & {
    __typename?: 'RoadmapScheduleItemsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type RoadmapSprint = {
    __typename?: 'RoadmapSprint';
    id: Scalars['ID'];
    name: Scalars['String'];
    startDate: Scalars['String'];
    startDateRFC3339: Scalars['Date'];
    endDate: Scalars['String'];
    endDateRFC3339: Scalars['Date'];
    state: RoadmapSprintState;
};
export declare enum RoadmapSprintState {
    Closed = "CLOSED",
    Active = "ACTIVE",
    Future = "FUTURE"
}
export declare type RoadmapStatusCategory = {
    __typename?: 'RoadmapStatusCategory';
    id: Scalars['ID'];
    key: Scalars['String'];
    name: Scalars['String'];
};
export declare type RoadmapSubtasks = {
    __typename?: 'RoadmapSubtasks';
    id: Scalars['ID'];
    key: Scalars['String'];
    parentId: Scalars['ID'];
    statusCategoryId: Scalars['String'];
};
export declare type RoadmapSubtasksWithStatusCategories = {
    __typename?: 'RoadmapSubtasksWithStatusCategories';
    subtasks: Array<RoadmapSubtasks>;
    statusCategories: Array<RoadmapStatusCategory>;
};
export declare enum RoadmapTimelineMode {
    Weeks = "WEEKS",
    Months = "MONTHS",
    Quarters = "QUARTERS"
}
export declare type RoadmapToggleDependencyInput = {
    dependee: Scalars['ID'];
    dependency: Scalars['ID'];
};
export declare type RoadmapToggleDependencyPayload = Payload & {
    __typename?: 'RoadmapToggleDependencyPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    output?: Maybe<RoadmapToggleDependencyResponse>;
};
export declare type RoadmapToggleDependencyResponse = {
    __typename?: 'RoadmapToggleDependencyResponse';
    dependee: Scalars['ID'];
    dependency: Scalars['ID'];
};
export declare type RoadmapUpdateItemInput = {
    itemId: Scalars['ID'];
    projectId: Scalars['ID'];
    summary?: Maybe<Scalars['String']>;
    dueDate?: Maybe<Scalars['Date']>;
    startDate?: Maybe<Scalars['Date']>;
    color?: Maybe<RoadmapPaletteColor>;
    rank?: Maybe<RoadmapItemRankInput>;
    parentId?: Maybe<Scalars['ID']>;
    sprintId?: Maybe<Scalars['ID']>;
    clearFields?: Maybe<Array<Scalars['String']>>;
};
export declare type RoadmapUpdateItemPayload = Payload & {
    __typename?: 'RoadmapUpdateItemPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    output?: Maybe<RoadmapUpdateItemResponse>;
};
export declare type RoadmapUpdateItemResponse = {
    __typename?: 'RoadmapUpdateItemResponse';
    item?: Maybe<RoadmapItem>;
};
export declare type RoadmapUpdateSettingsInput = {
    roadmapEnabled?: Maybe<Scalars['Boolean']>;
    childIssuePlanningEnabled?: Maybe<Scalars['Boolean']>;
    childIssuePlanningMode?: Maybe<RoadmapChildIssuePlanningMode>;
};
export declare type RoadmapUpdateSettingsOutput = {
    __typename?: 'RoadmapUpdateSettingsOutput';
    roadmapEnabled?: Maybe<Scalars['Boolean']>;
    childIssuePlanningEnabled?: Maybe<Scalars['Boolean']>;
    childIssuePlanningMode?: Maybe<RoadmapChildIssuePlanningMode>;
};
export declare type RoadmapUpdateSettingsPayload = Payload & {
    __typename?: 'RoadmapUpdateSettingsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    output?: Maybe<RoadmapUpdateSettingsOutput>;
};
export declare type RoadmapUserConfiguration = {
    __typename?: 'RoadmapUserConfiguration';
    hasCompletedOnboarding: Scalars['Boolean'];
    creationPreferences: RoadmapCreationPreferences;
    isDependenciesVisible: Scalars['Boolean'];
    isProgressVisible: Scalars['Boolean'];
    isWarningsVisible: Scalars['Boolean'];
    listWidth: Scalars['Long'];
    issuePanelRatio?: Maybe<Scalars['Float']>;
    timelineMode: RoadmapTimelineMode;
    epicView: RoadmapEpicView;
    levelOneView: RoadmapLevelOneView;
    levelOneViewSettings: RoadmapViewSettings;
    isReleasesVisible: Scalars['Boolean'];
    highlightedVersions: Array<Scalars['ID']>;
};
export declare type RoadmapVersion = {
    __typename?: 'RoadmapVersion';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: RoadmapVersionStatus;
    releaseDate?: Maybe<Scalars['Date']>;
};
export declare enum RoadmapVersionStatus {
    Released = "RELEASED",
    Unreleased = "UNRELEASED",
    Archived = "ARCHIVED"
}
export declare type RoadmapViewSettings = {
    __typename?: 'RoadmapViewSettings';
    period: Scalars['Int'];
    showCompleted: Scalars['Boolean'];
};
export declare type RoadmapsMutation = {
    __typename?: 'RoadmapsMutation';
    resolveRoadmapHealthcheck?: Maybe<RoadmapResolveHealthcheckPayload>;
    updateRoadmapSettings?: Maybe<RoadmapUpdateSettingsPayload>;
    addRoadmapItem?: Maybe<RoadmapAddItemPayload>;
    updateRoadmapItem?: Maybe<RoadmapUpdateItemPayload>;
    scheduleRoadmapItems?: Maybe<RoadmapScheduleItemsPayload>;
    addRoadmapDependency?: Maybe<RoadmapToggleDependencyPayload>;
    removeRoadmapDependency?: Maybe<RoadmapToggleDependencyPayload>;
};
export declare type RoadmapsMutationResolveRoadmapHealthcheckArgs = {
    sourceARI: Scalars['ID'];
    input: RoadmapResolveHealthcheckInput;
};
export declare type RoadmapsMutationUpdateRoadmapSettingsArgs = {
    sourceARI: Scalars['ID'];
    input: RoadmapUpdateSettingsInput;
};
export declare type RoadmapsMutationAddRoadmapItemArgs = {
    sourceARI: Scalars['ID'];
    input: RoadmapAddItemInput;
};
export declare type RoadmapsMutationUpdateRoadmapItemArgs = {
    sourceARI: Scalars['ID'];
    input: RoadmapUpdateItemInput;
};
export declare type RoadmapsMutationScheduleRoadmapItemsArgs = {
    sourceARI: Scalars['ID'];
    input: RoadmapScheduleItemsInput;
};
export declare type RoadmapsMutationAddRoadmapDependencyArgs = {
    sourceARI: Scalars['ID'];
    input: RoadmapToggleDependencyInput;
};
export declare type RoadmapsMutationRemoveRoadmapDependencyArgs = {
    sourceARI: Scalars['ID'];
    input: RoadmapToggleDependencyInput;
};
export declare type RoadmapsQuery = {
    __typename?: 'RoadmapsQuery';
    roadmapForSource?: Maybe<RoadmapDetails>;
    roadmapItemByIds?: Maybe<Array<Maybe<RoadmapItem>>>;
    roadmapFilterItems: Array<Scalars['ID']>;
    roadmapFilterConfiguration?: Maybe<RoadmapFilterConfiguration>;
    roadmapSubtasksByIds?: Maybe<RoadmapSubtasksWithStatusCategories>;
    roadmapDeriveFields: Array<Maybe<RoadmapField>>;
};
export declare type RoadmapsQueryRoadmapForSourceArgs = {
    sourceARI: Scalars['ID'];
    locationARI?: Maybe<Scalars['ID']>;
};
export declare type RoadmapsQueryRoadmapItemByIdsArgs = {
    sourceARI: Scalars['ID'];
    ids: Array<Scalars['ID']>;
};
export declare type RoadmapsQueryRoadmapFilterItemsArgs = {
    sourceARI: Scalars['ID'];
    quickFilterIds?: Maybe<Array<Scalars['ID']>>;
    customFilterIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type RoadmapsQueryRoadmapFilterConfigurationArgs = {
    sourceARI: Scalars['ID'];
};
export declare type RoadmapsQueryRoadmapSubtasksByIdsArgs = {
    sourceARI: Scalars['ID'];
    itemIds: Array<Scalars['ID']>;
};
export declare type RoadmapsQueryRoadmapDeriveFieldsArgs = {
    sourceARI: Scalars['ID'];
    jqlContexts?: Maybe<Array<Scalars['String']>>;
    customFilterIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type ScanPolarisProjectInput = {
    project: Scalars['ID'];
    refresh?: Maybe<Scalars['Boolean']>;
};
export declare enum Scope {
    ManageOrg = "MANAGE_ORG",
    ManageOrgPublicApis = "MANAGE_ORG_PUBLIC_APIS",
    AuthConfluenceUser = "AUTH_CONFLUENCE_USER",
    ManageDirectory = "MANAGE_DIRECTORY",
    ReadMe = "READ_ME",
    ReadAccount = "READ_ACCOUNT",
    ViewUserprofile = "VIEW_USERPROFILE",
    IdentityAtlassianExternal = "IDENTITY_ATLASSIAN_EXTERNAL",
    CompassAtlassianExternal = "COMPASS_ATLASSIAN_EXTERNAL",
    ReadCompassComponent = "READ_COMPASS_COMPONENT",
    WriteCompassComponent = "WRITE_COMPASS_COMPONENT",
    ReadCompassScorecard = "READ_COMPASS_SCORECARD",
    WriteCompassScorecard = "WRITE_COMPASS_SCORECARD",
    ReadCompassEvent = "READ_COMPASS_EVENT",
    WriteCompassEvent = "WRITE_COMPASS_EVENT",
    ReadCompassMetric = "READ_COMPASS_METRIC",
    WriteCompassMetric = "WRITE_COMPASS_METRIC",
    ConfluenceAtlassianExternal = "CONFLUENCE_ATLASSIAN_EXTERNAL",
    ReadConfluenceContentAnalytics = "READ_CONFLUENCE_CONTENT_ANALYTICS",
    ReadConfluenceAuditLog = "READ_CONFLUENCE_AUDIT_LOG",
    WriteConfluenceAuditLog = "WRITE_CONFLUENCE_AUDIT_LOG",
    ReadConfluenceConfiguration = "READ_CONFLUENCE_CONFIGURATION",
    WriteConfluenceConfiguration = "WRITE_CONFLUENCE_CONFIGURATION",
    ReadConfluencePage = "READ_CONFLUENCE_PAGE",
    WriteConfluencePage = "WRITE_CONFLUENCE_PAGE",
    DeleteConfluencePage = "DELETE_CONFLUENCE_PAGE",
    ReadConfluenceBlogpost = "READ_CONFLUENCE_BLOGPOST",
    WriteConfluenceBlogpost = "WRITE_CONFLUENCE_BLOGPOST",
    DeleteConfluenceBlogpost = "DELETE_CONFLUENCE_BLOGPOST",
    ReadConfluenceCustomContent = "READ_CONFLUENCE_CUSTOM_CONTENT",
    WriteConfluenceCustomContent = "WRITE_CONFLUENCE_CUSTOM_CONTENT",
    DeleteConfluenceCustomContent = "DELETE_CONFLUENCE_CUSTOM_CONTENT",
    ReadConfluenceAttachment = "READ_CONFLUENCE_ATTACHMENT",
    WriteConfluenceAttachment = "WRITE_CONFLUENCE_ATTACHMENT",
    DeleteConfluenceAttachment = "DELETE_CONFLUENCE_ATTACHMENT",
    ReadConfluenceComment = "READ_CONFLUENCE_COMMENT",
    WriteConfluenceComment = "WRITE_CONFLUENCE_COMMENT",
    DeleteConfluenceComment = "DELETE_CONFLUENCE_COMMENT",
    ReadConfluenceTemplate = "READ_CONFLUENCE_TEMPLATE",
    WriteConfluenceTemplate = "WRITE_CONFLUENCE_TEMPLATE",
    ReadConfluenceLabel = "READ_CONFLUENCE_LABEL",
    WriteConfluenceLabel = "WRITE_CONFLUENCE_LABEL",
    ReadConfluenceContentPermission = "READ_CONFLUENCE_CONTENT_PERMISSION",
    ReadConfluenceContentProperty = "READ_CONFLUENCE_CONTENT_PROPERTY",
    WriteConfluenceContentProperty = "WRITE_CONFLUENCE_CONTENT_PROPERTY",
    ReadConfluenceContentRestriction = "READ_CONFLUENCE_CONTENT_RESTRICTION",
    WriteConfluenceContentRestriction = "WRITE_CONFLUENCE_CONTENT_RESTRICTION",
    ReadConfluenceContentMetadata = "READ_CONFLUENCE_CONTENT_METADATA",
    ReadConfluenceWatcher = "READ_CONFLUENCE_WATCHER",
    WriteConfluenceWatcher = "WRITE_CONFLUENCE_WATCHER",
    ReadConfluenceGroup = "READ_CONFLUENCE_GROUP",
    WriteConfluenceGroup = "WRITE_CONFLUENCE_GROUP",
    ReadConfluenceInlineTask = "READ_CONFLUENCE_INLINE_TASK",
    WriteConfluenceInlineTask = "WRITE_CONFLUENCE_INLINE_TASK",
    ReadConfluenceRelation = "READ_CONFLUENCE_RELATION",
    WriteConfluenceRelation = "WRITE_CONFLUENCE_RELATION",
    ReadConfluenceSpace = "READ_CONFLUENCE_SPACE",
    WriteConfluenceSpace = "WRITE_CONFLUENCE_SPACE",
    DeleteConfluenceSpace = "DELETE_CONFLUENCE_SPACE",
    ReadConfluenceSpacePermission = "READ_CONFLUENCE_SPACE_PERMISSION",
    WriteConfluenceSpacePermission = "WRITE_CONFLUENCE_SPACE_PERMISSION",
    ReadConfluenceSpaceProperty = "READ_CONFLUENCE_SPACE_PROPERTY",
    WriteConfluenceSpaceProperty = "WRITE_CONFLUENCE_SPACE_PROPERTY",
    ReadConfluenceUserProperty = "READ_CONFLUENCE_USER_PROPERTY",
    WriteConfluenceUserProperty = "WRITE_CONFLUENCE_USER_PROPERTY",
    ReadConfluenceSpaceSetting = "READ_CONFLUENCE_SPACE_SETTING",
    WriteConfluenceSpaceSetting = "WRITE_CONFLUENCE_SPACE_SETTING",
    ReadConfluenceUser = "READ_CONFLUENCE_USER",
    ManageApp = "MANAGE_APP",
    StorageApp = "STORAGE_APP",
    ReadJiraUser = "READ_JIRA_USER",
    ReadJiraWork = "READ_JIRA_WORK",
    WriteJiraWork = "WRITE_JIRA_WORK",
    ManageJiraProject = "MANAGE_JIRA_PROJECT",
    ManageJiraConfiguration = "MANAGE_JIRA_CONFIGURATION",
    JiraAtlassianExternal = "JIRA_ATLASSIAN_EXTERNAL",
    ManageJiraDataProvider = "MANAGE_JIRA_DATA_PROVIDER",
    ManageJiraWebhook = "MANAGE_JIRA_WEBHOOK",
    ApplicationRoleRead = "APPLICATION_ROLE_READ",
    AuditLogRead = "AUDIT_LOG_READ",
    AsyncTaskDelete = "ASYNC_TASK_DELETE",
    AttachmentDelete = "ATTACHMENT_DELETE",
    AttachmentRead = "ATTACHMENT_READ",
    AttachmentWrite = "ATTACHMENT_WRITE",
    AvatarDelete = "AVATAR_DELETE",
    AvatarRead = "AVATAR_READ",
    AvatarWrite = "AVATAR_WRITE",
    CommentDelete = "COMMENT_DELETE",
    CommentPropertyDelete = "COMMENT_PROPERTY_DELETE",
    CommentPropertyRead = "COMMENT_PROPERTY_READ",
    CommentPropertyWrite = "COMMENT_PROPERTY_WRITE",
    CommentRead = "COMMENT_READ",
    CommentWrite = "COMMENT_WRITE",
    CustomFieldContextualConfigurationRead = "CUSTOM_FIELD_CONTEXTUAL_CONFIGURATION_READ",
    CustomFieldContextualConfigurationWrite = "CUSTOM_FIELD_CONTEXTUAL_CONFIGURATION_WRITE",
    DashboardDelete = "DASHBOARD_DELETE",
    DashboardPropertyDelete = "DASHBOARD_PROPERTY_DELETE",
    DashboardPropertyRead = "DASHBOARD_PROPERTY_READ",
    DashboardPropertyWrite = "DASHBOARD_PROPERTY_WRITE",
    DashboardRead = "DASHBOARD_READ",
    DashboardWrite = "DASHBOARD_WRITE",
    FieldConfigurationSchemeDelete = "FIELD_CONFIGURATION_SCHEME_DELETE",
    FieldConfigurationSchemeRead = "FIELD_CONFIGURATION_SCHEME_READ",
    FieldConfigurationSchemeWrite = "FIELD_CONFIGURATION_SCHEME_WRITE",
    FieldConfigurationDelete = "FIELD_CONFIGURATION_DELETE",
    FieldConfigurationRead = "FIELD_CONFIGURATION_READ",
    FieldConfigurationWrite = "FIELD_CONFIGURATION_WRITE",
    FieldDefaultValueRead = "FIELD_DEFAULT_VALUE_READ",
    FieldDefaultValueWrite = "FIELD_DEFAULT_VALUE_WRITE",
    FieldDelete = "FIELD_DELETE",
    FieldOptionsRead = "FIELD_OPTIONS_READ",
    FieldOptionDelete = "FIELD_OPTION_DELETE",
    FieldOptionRead = "FIELD_OPTION_READ",
    FieldOptionWrite = "FIELD_OPTION_WRITE",
    FieldRead = "FIELD_READ",
    FieldWrite = "FIELD_WRITE",
    FilterColumnDelete = "FILTER_COLUMN_DELETE",
    FilterColumnRead = "FILTER_COLUMN_READ",
    FilterColumnWrite = "FILTER_COLUMN_WRITE",
    FilterDefaultShareScopeRead = "FILTER_DEFAULT_SHARE_SCOPE_READ",
    FilterDefaultShareScopeWrite = "FILTER_DEFAULT_SHARE_SCOPE_WRITE",
    FilterDelete = "FILTER_DELETE",
    FilterRead = "FILTER_READ",
    FilterWrite = "FILTER_WRITE",
    GroupDelete = "GROUP_DELETE",
    GroupRead = "GROUP_READ",
    GroupWrite = "GROUP_WRITE",
    InstanceConfigurationRead = "INSTANCE_CONFIGURATION_READ",
    InstanceConfigurationWrite = "INSTANCE_CONFIGURATION_WRITE",
    IssueAdjustmentsRead = "ISSUE_ADJUSTMENTS_READ",
    IssueAdjustmentsWrite = "ISSUE_ADJUSTMENTS_WRITE",
    IssueAdjustmentsDelete = "ISSUE_ADJUSTMENTS_DELETE",
    IssueEventRead = "ISSUE_EVENT_READ",
    IssueFieldValuesRead = "ISSUE_FIELD_VALUES_READ",
    IssueChangelogRead = "ISSUE_CHANGELOG_READ",
    IssueDelete = "ISSUE_DELETE",
    IssueDetailsRead = "ISSUE_DETAILS_READ",
    IssueLinkDelete = "ISSUE_LINK_DELETE",
    IssueLinkTypeDelete = "ISSUE_LINK_TYPE_DELETE",
    IssueLinkTypeRead = "ISSUE_LINK_TYPE_READ",
    IssueLinkTypeWrite = "ISSUE_LINK_TYPE_WRITE",
    IssueLinkRead = "ISSUE_LINK_READ",
    IssueLinkWrite = "ISSUE_LINK_WRITE",
    IssuePropertyDelete = "ISSUE_PROPERTY_DELETE",
    IssuePropertyRead = "ISSUE_PROPERTY_READ",
    IssuePropertyWrite = "ISSUE_PROPERTY_WRITE",
    IssueRead = "ISSUE_READ",
    IssueRemoteLinkDelete = "ISSUE_REMOTE_LINK_DELETE",
    IssueRemoteLinkRead = "ISSUE_REMOTE_LINK_READ",
    IssueRemoteLinkWrite = "ISSUE_REMOTE_LINK_WRITE",
    IssueSecurityLevelRead = "ISSUE_SECURITY_LEVEL_READ",
    IssueSecuritySchemeRead = "ISSUE_SECURITY_SCHEME_READ",
    IssueStatusRead = "ISSUE_STATUS_READ",
    IssueTimeTrackingRead = "ISSUE_TIME_TRACKING_READ",
    IssueTimeTrackingWrite = "ISSUE_TIME_TRACKING_WRITE",
    IssueTransitionRead = "ISSUE_TRANSITION_READ",
    IssueTypeDelete = "ISSUE_TYPE_DELETE",
    IssueTypeHierarchyRead = "ISSUE_TYPE_HIERARCHY_READ",
    IssueTypePropertyDelete = "ISSUE_TYPE_PROPERTY_DELETE",
    IssueTypePropertyRead = "ISSUE_TYPE_PROPERTY_READ",
    IssueTypePropertyWrite = "ISSUE_TYPE_PROPERTY_WRITE",
    IssueTypeRead = "ISSUE_TYPE_READ",
    IssueTypeSchemeDelete = "ISSUE_TYPE_SCHEME_DELETE",
    IssueTypeSchemeRead = "ISSUE_TYPE_SCHEME_READ",
    IssueTypeSchemeWrite = "ISSUE_TYPE_SCHEME_WRITE",
    IssueTypeScreenSchemeDelete = "ISSUE_TYPE_SCREEN_SCHEME_DELETE",
    IssueTypeScreenSchemeRead = "ISSUE_TYPE_SCREEN_SCHEME_READ",
    IssueTypeScreenSchemeWrite = "ISSUE_TYPE_SCREEN_SCHEME_WRITE",
    IssueTypeWrite = "ISSUE_TYPE_WRITE",
    IssueVotesRead = "ISSUE_VOTES_READ",
    IssueVoteRead = "ISSUE_VOTE_READ",
    IssueVoteWrite = "ISSUE_VOTE_WRITE",
    IssueWatcherRead = "ISSUE_WATCHER_READ",
    IssueWatcherWrite = "ISSUE_WATCHER_WRITE",
    IssueWorklogDelete = "ISSUE_WORKLOG_DELETE",
    IssueWorklogPropertyDelete = "ISSUE_WORKLOG_PROPERTY_DELETE",
    IssueWorklogPropertyRead = "ISSUE_WORKLOG_PROPERTY_READ",
    IssueWorklogPropertyWrite = "ISSUE_WORKLOG_PROPERTY_WRITE",
    IssueWorklogRead = "ISSUE_WORKLOG_READ",
    IssueWorklogWrite = "ISSUE_WORKLOG_WRITE",
    IssueWrite = "ISSUE_WRITE",
    IssueMetaRead = "ISSUE_META_READ",
    JqlRead = "JQL_READ",
    JqlValidate = "JQL_VALIDATE",
    LabelRead = "LABEL_READ",
    LicenseRead = "LICENSE_READ",
    NotificationSchemeRead = "NOTIFICATION_SCHEME_READ",
    NotificationSend = "NOTIFICATION_SEND",
    PermissionDelete = "PERMISSION_DELETE",
    PermissionRead = "PERMISSION_READ",
    PermissionSchemeDelete = "PERMISSION_SCHEME_DELETE",
    PermissionSchemeRead = "PERMISSION_SCHEME_READ",
    PermissionSchemeWrite = "PERMISSION_SCHEME_WRITE",
    PermissionWrite = "PERMISSION_WRITE",
    PriorityRead = "PRIORITY_READ",
    ProjectAvatarDelete = "PROJECT_AVATAR_DELETE",
    ProjectAvatarRead = "PROJECT_AVATAR_READ",
    ProjectAvatarWrite = "PROJECT_AVATAR_WRITE",
    ProjectCategoryDelete = "PROJECT_CATEGORY_DELETE",
    ProjectCategoryRead = "PROJECT_CATEGORY_READ",
    ProjectCategoryWrite = "PROJECT_CATEGORY_WRITE",
    ProjectComponentDelete = "PROJECT_COMPONENT_DELETE",
    ProjectComponentRead = "PROJECT_COMPONENT_READ",
    ProjectComponentWrite = "PROJECT_COMPONENT_WRITE",
    ProjectEmailRead = "PROJECT_EMAIL_READ",
    ProjectEmailWrite = "PROJECT_EMAIL_WRITE",
    ProjectFeatureRead = "PROJECT_FEATURE_READ",
    ProjectFeatureWrite = "PROJECT_FEATURE_WRITE",
    ProjectPropertyDelete = "PROJECT_PROPERTY_DELETE",
    ProjectPropertyRead = "PROJECT_PROPERTY_READ",
    ProjectPropertyWrite = "PROJECT_PROPERTY_WRITE",
    ProjectRoleDelete = "PROJECT_ROLE_DELETE",
    ProjectRoleRead = "PROJECT_ROLE_READ",
    ProjectRoleWrite = "PROJECT_ROLE_WRITE",
    ProjectTypeRead = "PROJECT_TYPE_READ",
    ProjectVersionDelete = "PROJECT_VERSION_DELETE",
    ProjectVersionRead = "PROJECT_VERSION_READ",
    ProjectVersionWrite = "PROJECT_VERSION_WRITE",
    ProjectDelete = "PROJECT_DELETE",
    ProjectRead = "PROJECT_READ",
    ProjectWrite = "PROJECT_WRITE",
    ResolutionRead = "RESOLUTION_READ",
    ScreenableFieldDelete = "SCREENABLE_FIELD_DELETE",
    ScreenableFieldRead = "SCREENABLE_FIELD_READ",
    ScreenableFieldWrite = "SCREENABLE_FIELD_WRITE",
    ScreenDelete = "SCREEN_DELETE",
    ScreenFieldRead = "SCREEN_FIELD_READ",
    ScreenRead = "SCREEN_READ",
    ScreenSchemeDelete = "SCREEN_SCHEME_DELETE",
    ScreenSchemeRead = "SCREEN_SCHEME_READ",
    ScreenSchemeWrite = "SCREEN_SCHEME_WRITE",
    ScreenTabDelete = "SCREEN_TAB_DELETE",
    ScreenTabRead = "SCREEN_TAB_READ",
    ScreenTabWrite = "SCREEN_TAB_WRITE",
    ScreenWrite = "SCREEN_WRITE",
    StatusRead = "STATUS_READ",
    UserColumnsRead = "USER_COLUMNS_READ",
    UserConfigurationDelete = "USER_CONFIGURATION_DELETE",
    UserConfigurationRead = "USER_CONFIGURATION_READ",
    UserConfigurationWrite = "USER_CONFIGURATION_WRITE",
    UserPropertyDelete = "USER_PROPERTY_DELETE",
    UserPropertyRead = "USER_PROPERTY_READ",
    UserPropertyWrite = "USER_PROPERTY_WRITE",
    UserRead = "USER_READ",
    WebhookRead = "WEBHOOK_READ",
    WebhookWrite = "WEBHOOK_WRITE",
    WebhookDelete = "WEBHOOK_DELETE",
    WorkflowDelete = "WORKFLOW_DELETE",
    WorkflowPropertyDelete = "WORKFLOW_PROPERTY_DELETE",
    WorkflowPropertyRead = "WORKFLOW_PROPERTY_READ",
    WorkflowPropertyWrite = "WORKFLOW_PROPERTY_WRITE",
    WorkflowRead = "WORKFLOW_READ",
    WorkflowSchemeDelete = "WORKFLOW_SCHEME_DELETE",
    WorkflowSchemeRead = "WORKFLOW_SCHEME_READ",
    WorkflowSchemeWrite = "WORKFLOW_SCHEME_WRITE",
    WorkflowWrite = "WORKFLOW_WRITE",
    JiraExpressionsRead = "JIRA_EXPRESSIONS_READ",
    ReadServicedeskRequest = "READ_SERVICEDESK_REQUEST",
    WriteServicedeskRequest = "WRITE_SERVICEDESK_REQUEST",
    ManageServicedeskCustomer = "MANAGE_SERVICEDESK_CUSTOMER",
    ReadCustomer = "READ_CUSTOMER",
    WriteCustomer = "WRITE_CUSTOMER",
    ReadOrganization = "READ_ORGANIZATION",
    WriteOrganization = "WRITE_ORGANIZATION",
    DeleteOrganization = "DELETE_ORGANIZATION",
    ReadOrganizationUser = "READ_ORGANIZATION_USER",
    WriteOrganizationUser = "WRITE_ORGANIZATION_USER",
    DeleteOrganizationUser = "DELETE_ORGANIZATION_USER",
    ReadOrganizationProperty = "READ_ORGANIZATION_PROPERTY",
    WriteOrganizationProperty = "WRITE_ORGANIZATION_PROPERTY",
    DeleteOrganizationProperty = "DELETE_ORGANIZATION_PROPERTY",
    ReadServicedesk = "READ_SERVICEDESK",
    WriteServicedesk = "WRITE_SERVICEDESK",
    ReadServicedeskOrganization = "READ_SERVICEDESK_ORGANIZATION",
    WriteServicedeskOrganization = "WRITE_SERVICEDESK_ORGANIZATION",
    DeleteServicedeskOrganization = "DELETE_SERVICEDESK_ORGANIZATION",
    ReadServicedeskCustomer = "READ_SERVICEDESK_CUSTOMER",
    WriteServicedeskCustomer = "WRITE_SERVICEDESK_CUSTOMER",
    DeleteServicedeskCustomer = "DELETE_SERVICEDESK_CUSTOMER",
    ReadServicedeskProperty = "READ_SERVICEDESK_PROPERTY",
    WriteServicedeskProperty = "WRITE_SERVICEDESK_PROPERTY",
    DeleteServicedeskProperty = "DELETE_SERVICEDESK_PROPERTY",
    ReadRequesttype = "READ_REQUESTTYPE",
    WriteRequesttype = "WRITE_REQUESTTYPE",
    ReadRequesttypeProperty = "READ_REQUESTTYPE_PROPERTY",
    WriteRequesttypeProperty = "WRITE_REQUESTTYPE_PROPERTY",
    DeleteRequesttypeProperty = "DELETE_REQUESTTYPE_PROPERTY",
    ReadQueue = "READ_QUEUE",
    ReadRequest = "READ_REQUEST",
    WriteRequest = "WRITE_REQUEST",
    ReadRequestApproval = "READ_REQUEST_APPROVAL",
    WriteRequestApproval = "WRITE_REQUEST_APPROVAL",
    ReadRequestParticipant = "READ_REQUEST_PARTICIPANT",
    WriteRequestParticipant = "WRITE_REQUEST_PARTICIPANT",
    DeleteRequestParticipant = "DELETE_REQUEST_PARTICIPANT",
    ReadRequestAction = "READ_REQUEST_ACTION",
    ReadRequestComment = "READ_REQUEST_COMMENT",
    WriteRequestComment = "WRITE_REQUEST_COMMENT",
    ReadRequestSla = "READ_REQUEST_SLA",
    ReadRequestAttachment = "READ_REQUEST_ATTACHMENT",
    WriteRequestAttachment = "WRITE_REQUEST_ATTACHMENT",
    ReadRequestStatus = "READ_REQUEST_STATUS",
    WriteRequestStatus = "WRITE_REQUEST_STATUS",
    ReadRequestFeedback = "READ_REQUEST_FEEDBACK",
    WriteRequestFeedback = "WRITE_REQUEST_FEEDBACK",
    DeleteRequestFeedback = "DELETE_REQUEST_FEEDBACK",
    ReadRequestNotification = "READ_REQUEST_NOTIFICATION",
    WriteRequestNotification = "WRITE_REQUEST_NOTIFICATION",
    DeleteRequestNotification = "DELETE_REQUEST_NOTIFICATION",
    ReadKnowledgebase = "READ_KNOWLEDGEBASE",
    ReadJswBoardScope = "READ_JSW_BOARD_SCOPE",
    WriteJswBoardScope = "WRITE_JSW_BOARD_SCOPE",
    ReadJswBoardScopeAdmin = "READ_JSW_BOARD_SCOPE_ADMIN",
    WriteJswBoardScopeAdmin = "WRITE_JSW_BOARD_SCOPE_ADMIN",
    DeleteJswBoardScopeAdmin = "DELETE_JSW_BOARD_SCOPE_ADMIN",
    ReadJswEpic = "READ_JSW_EPIC",
    WriteJswEpic = "WRITE_JSW_EPIC",
    ReadJswIssue = "READ_JSW_ISSUE",
    WriteJswIssue = "WRITE_JSW_ISSUE",
    ReadJswSprint = "READ_JSW_SPRINT",
    WriteJswSprint = "WRITE_JSW_SPRINT",
    DeleteJswSprint = "DELETE_JSW_SPRINT",
    ReadJswSourceCode = "READ_JSW_SOURCE_CODE",
    WriteJswSourceCode = "WRITE_JSW_SOURCE_CODE",
    ReadJswFeatureFlag = "READ_JSW_FEATURE_FLAG",
    WriteJswFeatureFlag = "WRITE_JSW_FEATURE_FLAG",
    ReadJswDeployment = "READ_JSW_DEPLOYMENT",
    WriteJswDeployment = "WRITE_JSW_DEPLOYMENT",
    ReadJswBuild = "READ_JSW_BUILD",
    WriteJswBuild = "WRITE_JSW_BUILD",
    ReadJswRemoteLink = "READ_JSW_REMOTE_LINK",
    WriteJswRemoteLink = "WRITE_JSW_REMOTE_LINK",
    ReadNotifications = "READ_NOTIFICATIONS",
    WriteNotifications = "WRITE_NOTIFICATIONS",
    AdminContainer = "ADMIN_CONTAINER",
    ReadContainer = "READ_CONTAINER",
    WriteContainer = "WRITE_CONTAINER",
    MigrateConfluence = "MIGRATE_CONFLUENCE",
    ReadTeam = "READ_TEAM",
    ReadTeamMembers = "READ_TEAM_MEMBERS",
    TrelloAtlassianExternal = "TRELLO_ATLASSIAN_EXTERNAL",
    CatalogRead = "CATALOG_READ"
}
export declare type ScopeSprintIssue = {
    __typename?: 'ScopeSprintIssue';
    issueKey: Scalars['String'];
    issueSummary: Scalars['String'];
    estimate: Scalars['Float'];
};
export declare type SearchAbTest = {
    __typename?: 'SearchAbTest';
    abTestId?: Maybe<Scalars['String']>;
    experimentId?: Maybe<Scalars['String']>;
    controlId?: Maybe<Scalars['String']>;
};
export declare type SearchAnalyticsInput = {
    queryVersion?: Maybe<Scalars['Int']>;
    searchSessionId?: Maybe<Scalars['String']>;
    searchReferrerId?: Maybe<Scalars['String']>;
};
export declare type SearchBoardFilter = {
    projectARI?: Maybe<Scalars['ID']>;
    userARI?: Maybe<Scalars['ID']>;
    negateProjectFilter?: Maybe<Scalars['Boolean']>;
};
export declare enum SearchBoardProductType {
    Software = "SOFTWARE",
    Business = "BUSINESS"
}
export declare enum SearchConfluenceDocumentStatus {
    Current = "CURRENT",
    Archived = "ARCHIVED",
    Draft = "DRAFT"
}
export declare type SearchConfluenceEntity = ConfluencePage | ConfluenceBlogPost;
export declare type SearchConfluenceFilter = {
    spacesFilter?: Maybe<Array<Scalars['String']>>;
    contributorsFilter?: Maybe<Array<Scalars['String']>>;
    creatorsFilter?: Maybe<Array<Scalars['String']>>;
    labelsFilter?: Maybe<Array<Scalars['String']>>;
    ancestorIdsFilter?: Maybe<Array<Scalars['String']>>;
    range?: Maybe<Array<Maybe<SearchConfluenceRangeFilter>>>;
    containerStatus?: Maybe<Array<Maybe<SearchContainerStatus>>>;
    contentStatuses?: Maybe<Array<SearchConfluenceDocumentStatus>>;
    titleMatchOnly?: Maybe<Scalars['Boolean']>;
};
export declare type SearchConfluencePageBlogAttachment = SearchResult & {
    __typename?: 'SearchConfluencePageBlogAttachment';
    id: Scalars['ID'];
    entityId?: Maybe<Scalars['String']>;
    title: Scalars['String'];
    url: Scalars['URL'];
    iconUrl?: Maybe<Scalars['URL']>;
    type: SearchResultType;
    description: Scalars['String'];
    lastModified?: Maybe<Scalars['DateTime']>;
    excerpt?: Maybe<Scalars['String']>;
    iconCssClass?: Maybe<Scalars['String']>;
    space?: Maybe<SearchConfluenceResultSpace>;
    spaceEntity?: Maybe<ConfluenceSpace>;
    pageEntity?: Maybe<ConfluencePage>;
    confluenceEntity?: Maybe<SearchConfluenceEntity>;
};
export declare enum SearchConfluenceRangeField {
    Lastmodified = "LASTMODIFIED",
    Created = "CREATED"
}
export declare type SearchConfluenceRangeFilter = {
    field: SearchConfluenceRangeField;
    gt?: Maybe<Scalars['String']>;
    lt?: Maybe<Scalars['String']>;
};
export declare type SearchConfluenceResultSpace = {
    __typename?: 'SearchConfluenceResultSpace';
    id: Scalars['ID'];
    spaceId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    key?: Maybe<Scalars['String']>;
    webUiLink?: Maybe<Scalars['String']>;
};
export declare type SearchConfluenceSpace = SearchResult & {
    __typename?: 'SearchConfluenceSpace';
    id: Scalars['ID'];
    entityId?: Maybe<Scalars['String']>;
    title: Scalars['String'];
    url: Scalars['URL'];
    iconUrl?: Maybe<Scalars['URL']>;
    iconPath?: Maybe<Scalars['String']>;
    type: SearchResultType;
    description: Scalars['String'];
    lastModified?: Maybe<Scalars['DateTime']>;
    key?: Maybe<Scalars['String']>;
    webUiLink?: Maybe<Scalars['String']>;
    spaceEntity?: Maybe<ConfluenceSpace>;
};
export declare enum SearchContainerStatus {
    Archived = "ARCHIVED",
    Current = "CURRENT"
}
export declare type SearchDefaultResult = SearchResult & {
    __typename?: 'SearchDefaultResult';
    id: Scalars['ID'];
    title: Scalars['String'];
    url: Scalars['URL'];
    iconUrl?: Maybe<Scalars['URL']>;
    type: SearchResultType;
    description: Scalars['String'];
    lastModifiedDate?: Maybe<Scalars['DateTime']>;
};
export declare type SearchFilterInput = {
    entities: Array<Scalars['String']>;
    locations: Array<Scalars['String']>;
    confluenceFilters?: Maybe<SearchConfluenceFilter>;
    jiraFilters?: Maybe<SearchJiraFilter>;
};
export declare enum SearchIssueStatusCategory {
    Open = "OPEN",
    Done = "DONE"
}
export declare type SearchItemConnection = {
    __typename?: 'SearchItemConnection';
    edges: Array<SearchResultItemEdge>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
    abTest?: Maybe<SearchAbTest>;
};
export declare type SearchJiraFilter = {
    boardFilter?: Maybe<SearchBoardFilter>;
    projectFilter?: Maybe<SearchJiraProjectFilter>;
    issueFilter?: Maybe<SearchJiraIssueFilter>;
};
export declare type SearchJiraIssueFilter = {
    assigneeARIs?: Maybe<Array<Scalars['ID']>>;
    reporterARIs?: Maybe<Array<Scalars['ID']>>;
    projectARIs?: Maybe<Array<Scalars['ID']>>;
    statusCategories?: Maybe<Array<SearchIssueStatusCategory>>;
};
export declare type SearchJiraProjectFilter = {
    projectType?: Maybe<SearchProjectType>;
};
export declare enum SearchProjectType {
    Software = "software",
    Business = "business",
    ServiceDesk = "service_desk",
    ProductDiscovery = "product_discovery"
}
export declare type SearchQueryApi = {
    __typename?: 'SearchQueryAPI';
    search?: Maybe<SearchItemConnection>;
    recent?: Maybe<Array<SearchResult>>;
};
export declare type SearchQueryApiSearchArgs = {
    query?: Maybe<Scalars['String']>;
    filters: SearchFilterInput;
    analytics?: Maybe<SearchAnalyticsInput>;
    experience: Scalars['String'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['Int']>;
};
export declare type SearchQueryApiRecentArgs = {
    filters: SearchRecentFilterInput;
    analytics?: Maybe<SearchAnalyticsInput>;
    experience: Scalars['String'];
    limit?: Maybe<Scalars['Int']>;
};
export declare type SearchRecentFilterInput = {
    entities: Array<Scalars['String']>;
    locations: Array<Scalars['String']>;
};
export declare type SearchResult = {
    id: Scalars['ID'];
    title: Scalars['String'];
    url: Scalars['URL'];
    iconUrl?: Maybe<Scalars['URL']>;
    type: SearchResultType;
    description: Scalars['String'];
};
export declare type SearchResultItemEdge = {
    __typename?: 'SearchResultItemEdge';
    node?: Maybe<SearchResult>;
    cursor?: Maybe<Scalars['String']>;
};
export declare type SearchResultJiraBoard = SearchResult & {
    __typename?: 'SearchResultJiraBoard';
    id: Scalars['ID'];
    title: Scalars['String'];
    url: Scalars['URL'];
    iconUrl?: Maybe<Scalars['URL']>;
    type: SearchResultType;
    description: Scalars['String'];
    favourite: Scalars['Boolean'];
    boardId?: Maybe<Scalars['ID']>;
    container?: Maybe<SearchResultJiraBoardContainer>;
    product: SearchBoardProductType;
    isSimpleBoard: Scalars['Boolean'];
};
export declare type SearchResultJiraBoardContainer = SearchResultJiraBoardProjectContainer | SearchResultJiraBoardUserContainer;
export declare type SearchResultJiraBoardProjectContainer = {
    __typename?: 'SearchResultJiraBoardProjectContainer';
    projectId: Scalars['ID'];
    projectKey: Scalars['String'];
    projectName: Scalars['String'];
    projectTypeKey: SearchProjectType;
};
export declare type SearchResultJiraBoardUserContainer = {
    __typename?: 'SearchResultJiraBoardUserContainer';
    userId: Scalars['ID'];
    userAccountId: Scalars['String'];
    userName: Scalars['String'];
};
export declare type SearchResultJiraIssue = SearchResult & {
    __typename?: 'SearchResultJiraIssue';
    id: Scalars['ID'];
    title: Scalars['String'];
    url: Scalars['URL'];
    iconUrl?: Maybe<Scalars['URL']>;
    type: SearchResultType;
    description: Scalars['String'];
    issue?: Maybe<JiraIssue>;
};
export declare type SearchResultJiraProject = SearchResult & {
    __typename?: 'SearchResultJiraProject';
    id: Scalars['ID'];
    projectType: SearchProjectType;
    projectId: Scalars['String'];
    projectKey: Scalars['String'];
    title: Scalars['String'];
    url: Scalars['URL'];
    iconUrl?: Maybe<Scalars['URL']>;
    type: SearchResultType;
    description: Scalars['String'];
    favourite: Scalars['Boolean'];
    canView: Scalars['Boolean'];
    simplified: Scalars['Boolean'];
    project?: Maybe<JiraProject>;
};
export declare enum SearchResultType {
    Page = "page",
    Blogpost = "blogpost",
    Whiteboard = "whiteboard",
    Space = "space",
    Attachment = "attachment",
    Comment = "comment",
    Board = "board",
    Filter = "filter",
    Issue = "issue",
    Plan = "plan",
    Project = "project",
    Unrecognised = "unrecognised"
}
export declare type Security = {
    __typename?: 'Security';
    caiq?: Maybe<Caiq>;
    securityContact: Scalars['String'];
    isDiskEncryptionSupported?: Maybe<Scalars['Boolean']>;
    hasCompliantCertifications?: Maybe<Scalars['Boolean']>;
    compliantCertifications?: Maybe<Array<Maybe<Scalars['String']>>>;
    publicSecurityPoliciesLink?: Maybe<Scalars['String']>;
};
export declare type SecurityContainer = {
    name: Scalars['String'];
    url?: Maybe<Scalars['URL']>;
    icon?: Maybe<Scalars['URL']>;
    providerName?: Maybe<Scalars['String']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
};
export declare type SecurityWorkspace = {
    name: Scalars['String'];
    url?: Maybe<Scalars['URL']>;
    icon?: Maybe<Scalars['URL']>;
    providerName?: Maybe<Scalars['String']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
};
export declare type ServiceProvider = {
    __typename?: 'ServiceProvider';
    isAppServiceProvider: AcceptableResponse;
    endUserDataTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type SetAppEnvironmentVariableInput = {
    environment: AppEnvironmentInput;
    environmentVariable: AppEnvironmentVariableInput;
};
export declare type SetAppEnvironmentVariablePayload = Payload & {
    __typename?: 'SetAppEnvironmentVariablePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type SetAppStoredCustomEntityMutationInput = {
    key: Scalars['ID'];
    contextAri: Scalars['ID'];
    value: Scalars['JSON'];
    entityName: Scalars['String'];
};
export declare type SetAppStoredCustomEntityPayload = Payload & {
    __typename?: 'SetAppStoredCustomEntityPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type SetAppStoredEntityMutationInput = {
    key: Scalars['ID'];
    contextAri: Scalars['ID'];
    value: Scalars['JSON'];
    encrypted?: Maybe<Scalars['Boolean']>;
};
export declare type SetAppStoredEntityPayload = Payload & {
    __typename?: 'SetAppStoredEntityPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type SetBoardEstimationTypeInput = {
    featureId: Scalars['String'];
    estimationType: Scalars['String'];
};
export declare type SetColumnLimitInput = {
    boardId: Scalars['ID'];
    columnId: Scalars['ID'];
    limit?: Maybe<Scalars['Int']>;
};
export declare type SetColumnLimitOutput = MutationResponse & {
    __typename?: 'SetColumnLimitOutput';
    columns?: Maybe<Array<Maybe<Column>>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type SetColumnNameInput = {
    boardId: Scalars['ID'];
    columnId: Scalars['ID'];
    columnName: Scalars['String'];
};
export declare type SetColumnNameOutput = MutationResponse & {
    __typename?: 'SetColumnNameOutput';
    column?: Maybe<Column>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type SetEstimationTypeInput = {
    boardId: Scalars['ID'];
    estimationType: Scalars['String'];
};
export declare type SetExternalAuthCredentialsInput = {
    environment: AppEnvironmentInput;
    serviceKey: Scalars['String'];
    credentials: ExternalAuthCredentialsInput;
};
export declare type SetExternalAuthCredentialsPayload = Payload & {
    __typename?: 'SetExternalAuthCredentialsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type SetIssueMediaVisibilityInput = {
    boardId: Scalars['ID'];
    isVisible?: Maybe<Scalars['Boolean']>;
};
export declare type SetIssueMediaVisibilityOutput = MutationResponse & {
    __typename?: 'SetIssueMediaVisibilityOutput';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type SetPolarisProjectOnboardedInput = {
    projectId: Scalars['ID'];
    value: Scalars['Boolean'];
};
export declare type SetPolarisProjectOnboardedPayload = Payload & {
    __typename?: 'SetPolarisProjectOnboardedPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type SetPolarisSelectedDeliveryProjectInput = {
    projectId: Scalars['ID'];
    selectedDeliveryProjectId: Scalars['ID'];
};
export declare type SetPolarisSelectedDeliveryProjectPayload = Payload & {
    __typename?: 'SetPolarisSelectedDeliveryProjectPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type SetPolarisSnippetPropertiesConfigInput = {
    project: Scalars['ID'];
    oauthClientId: Scalars['String'];
    groupId: Scalars['String'];
    config?: Maybe<Scalars['JSON']>;
};
export declare type SetPolarisSnippetPropertiesConfigPayload = Payload & {
    __typename?: 'SetPolarisSnippetPropertiesConfigPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type SetSwimlaneStrategyInput = {
    boardId: Scalars['ID'];
    strategy: SwimlaneStrategy;
};
export declare type SetSwimlaneStrategyResponse = MutationResponse & {
    __typename?: 'SetSwimlaneStrategyResponse';
    strategy: SwimlaneStrategy;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare enum ShepherdActionType {
    Create = "CREATE",
    Delete = "DELETE",
    Export = "EXPORT",
    Login = "LOGIN",
    Read = "READ",
    Update = "UPDATE"
}
export declare type ShepherdActivity = ShepherdActorActivity | ShepherdLoginActivity | ShepherdResourceActivity;
export declare type ShepherdActivityConnection = {
    __typename?: 'ShepherdActivityConnection';
    edges?: Maybe<Array<Maybe<ShepherdActivityEdge>>>;
    pageInfo: PageInfo;
};
export declare type ShepherdActivityEdge = {
    __typename?: 'ShepherdActivityEdge';
    node?: Maybe<ShepherdActivity>;
};
export declare type ShepherdActivityHighlight = {
    __typename?: 'ShepherdActivityHighlight';
    action?: Maybe<ShepherdActionType>;
    actor?: Maybe<ShepherdUser>;
    histogram?: Maybe<Array<ShepherdActivityHistogramBucket>>;
    subject?: Maybe<ShepherdSubject>;
    time?: Maybe<ShepherdTime>;
};
export declare type ShepherdActivityHighlightInput = {
    action?: Maybe<ShepherdActionType>;
    actor?: Maybe<Scalars['ID']>;
    histogram?: Maybe<Array<Maybe<ShepherdHistogramBucketInput>>>;
    subject?: Maybe<ShepherdSubjectInput>;
    time: ShepherdTimeInput;
};
export declare type ShepherdActivityHistogramBucket = {
    __typename?: 'ShepherdActivityHistogramBucket';
    name: Scalars['String'];
    value: Scalars['Int'];
};
export declare type ShepherdActivityResult = QueryError | ShepherdActivityConnection;
export declare type ShepherdActor = {
    __typename?: 'ShepherdActor';
    aaid: Scalars['ID'];
    createdOn?: Maybe<Scalars['DateTime']>;
    mfaEnabled?: Maybe<Scalars['Boolean']>;
    productAccess?: Maybe<Array<Maybe<ShepherdActorProductAccess>>>;
    sessions?: Maybe<Array<Maybe<ShepherdActorSession>>>;
    user?: Maybe<User>;
};
export declare type ShepherdActorActivity = {
    __typename?: 'ShepherdActorActivity';
    actor: ShepherdUser;
    eventType: Scalars['String'];
    id: Scalars['String'];
    message?: Maybe<Scalars['JSON']>;
    time: Scalars['DateTime'];
};
export declare type ShepherdActorProductAccess = {
    __typename?: 'ShepherdActorProductAccess';
    cloudId: Scalars['ID'];
    cloudUrl: Scalars['String'];
    lastActiveTimestamp?: Maybe<Scalars['String']>;
    orgId?: Maybe<Scalars['ID']>;
    product: Scalars['String'];
    productRole?: Maybe<Array<Scalars['String']>>;
};
export declare type ShepherdActorResult = QueryError | ShepherdActor;
export declare type ShepherdActorSession = {
    __typename?: 'ShepherdActorSession';
    device?: Maybe<ShepherdLoginDevice>;
    lastActiveTime?: Maybe<Scalars['DateTime']>;
    loginLocation?: Maybe<ShepherdLoginLocation>;
    loginTime: Scalars['DateTime'];
    sessionId: Scalars['String'];
};
export declare type ShepherdAlert = Node & {
    __typename?: 'ShepherdAlert';
    assignee?: Maybe<ShepherdUser>;
    cloudId?: Maybe<Scalars['ID']>;
    createdOn: Scalars['DateTime'];
    description?: Maybe<ShepherdDescriptionTemplate>;
    id: Scalars['ID'];
    orgId?: Maybe<Scalars['ID']>;
    status: ShepherdAlertStatus;
    statusUpdatedOn?: Maybe<Scalars['DateTime']>;
    supportingData?: Maybe<ShepherdAlertSupportingData>;
    template?: Maybe<ShepherdAlertTemplateType>;
    title: Scalars['String'];
    updatedBy?: Maybe<ShepherdUser>;
    updatedOn?: Maybe<Scalars['DateTime']>;
    workspaceId?: Maybe<Scalars['ID']>;
};
export declare type ShepherdAlertEdge = {
    __typename?: 'ShepherdAlertEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<ShepherdAlert>;
};
export declare type ShepherdAlertQueries = {
    __typename?: 'ShepherdAlertQueries';
    byAri?: Maybe<ShepherdAlertResult>;
    byWorkspace?: Maybe<ShepherdAlertsResult>;
};
export declare type ShepherdAlertQueriesByAriArgs = {
    id: Scalars['ID'];
};
export declare type ShepherdAlertQueriesByWorkspaceArgs = {
    aaid?: Maybe<Scalars['ID']>;
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    workspaceId: Scalars['ID'];
};
export declare type ShepherdAlertResult = QueryError | ShepherdAlert;
export declare enum ShepherdAlertStatus {
    InProgress = "IN_PROGRESS",
    Triaged = "TRIAGED",
    TriagedExpectedActivity = "TRIAGED_EXPECTED_ACTIVITY",
    TriagedTruePositive = "TRIAGED_TRUE_POSITIVE",
    Untriaged = "UNTRIAGED"
}
export declare type ShepherdAlertSupportingData = {
    __typename?: 'ShepherdAlertSupportingData';
    highlight: ShepherdHighlight;
};
export declare enum ShepherdAlertTemplateType {
    AddedConfluenceGlobalPermission = "ADDED_CONFLUENCE_GLOBAL_PERMISSION",
    AddedConfluenceSpacePermission = "ADDED_CONFLUENCE_SPACE_PERMISSION",
    AddedJiraGlobalPermission = "ADDED_JIRA_GLOBAL_PERMISSION",
    AddedOrgadmin = "ADDED_ORGADMIN",
    ConfluenceDataDiscovery = "CONFLUENCE_DATA_DISCOVERY",
    ConfluencePageCrawling = "CONFLUENCE_PAGE_CRAWLING",
    ConfluencePageExports = "CONFLUENCE_PAGE_EXPORTS",
    ConfluenceSpaceExports = "CONFLUENCE_SPACE_EXPORTS",
    ConfluenceSuspiciousSearch = "CONFLUENCE_SUSPICIOUS_SEARCH",
    CreatedAuthPolicy = "CREATED_AUTH_POLICY",
    CreatedPolicy = "CREATED_POLICY",
    CreatedSamlConfig = "CREATED_SAML_CONFIG",
    CreatedTunnel = "CREATED_TUNNEL",
    CreatedUserProvisioning = "CREATED_USER_PROVISIONING",
    Default = "DEFAULT",
    DeletedAuthPolicy = "DELETED_AUTH_POLICY",
    DeletedDomain = "DELETED_DOMAIN",
    DeletedPolicy = "DELETED_POLICY",
    DeletedTunnel = "DELETED_TUNNEL",
    EcosystemAuditLogInstallationCreated = "ECOSYSTEM_AUDIT_LOG_INSTALLATION_CREATED",
    EcosystemAuditLogInstallationDeleted = "ECOSYSTEM_AUDIT_LOG_INSTALLATION_DELETED",
    EcosystemAuditLogUserGrantCreated = "ECOSYSTEM_AUDIT_LOG_USER_GRANT_CREATED",
    EnableScimSync = "ENABLE_SCIM_SYNC",
    ExportedOrgeventscsv = "EXPORTED_ORGEVENTSCSV",
    GrantAssignedJiraPermissionScheme = "GRANT_ASSIGNED_JIRA_PERMISSION_SCHEME",
    IdentityPasswordResetCompletedUser = "IDENTITY_PASSWORD_RESET_COMPLETED_USER",
    InitiatedGsyncConnection = "INITIATED_GSYNC_CONNECTION",
    JiraIssueCrawling = "JIRA_ISSUE_CRAWLING",
    OrgLoggedInAsUser = "ORG_LOGGED_IN_AS_USER",
    RotateScimDirectoryToken = "ROTATE_SCIM_DIRECTORY_TOKEN",
    TestAlert = "TEST_ALERT",
    TokenCreated = "TOKEN_CREATED",
    UpdatedAuthPolicy = "UPDATED_AUTH_POLICY",
    UpdatedPolicy = "UPDATED_POLICY",
    UpdatedSamlConfig = "UPDATED_SAML_CONFIG",
    UserAddedToBeacon = "USER_ADDED_TO_BEACON",
    UserGrantedRole = "USER_GRANTED_ROLE",
    UserRevokedRole = "USER_REVOKED_ROLE",
    VerifiedDomainVerification = "VERIFIED_DOMAIN_VERIFICATION"
}
export declare type ShepherdAlertsConnection = {
    __typename?: 'ShepherdAlertsConnection';
    edges?: Maybe<Array<Maybe<ShepherdAlertEdge>>>;
    pageInfo: PageInfo;
};
export declare type ShepherdAlertsResult = QueryError | ShepherdAlertsConnection;
export declare type ShepherdAppInfo = {
    __typename?: 'ShepherdAppInfo';
    apiVersion: Scalars['Int'];
    env: Scalars['String'];
    loginUrl: Scalars['String'];
};
export declare enum ShepherdAtlassianProduct {
    AdminHub = "ADMIN_HUB",
    Confluence = "CONFLUENCE",
    JiraSoftware = "JIRA_SOFTWARE",
    Marketplace = "MARKETPLACE"
}
export declare type ShepherdConfig = {
    __typename?: 'ShepherdConfig';
    descriptionTemplates?: Maybe<Array<Maybe<ShepherdDescriptionTemplate>>>;
};
export declare type ShepherdConfigResult = QueryError | ShepherdConfig;
export declare type ShepherdCreateAlertInput = {
    assignee?: Maybe<Scalars['ID']>;
    cloudId?: Maybe<Scalars['ID']>;
    highlight?: Maybe<ShepherdHighlightInput>;
    orgId?: Maybe<Scalars['ID']>;
    status?: Maybe<ShepherdAlertStatus>;
    template?: Maybe<ShepherdAlertTemplateType>;
    title: Scalars['String'];
};
export declare type ShepherdCreateAlertPayload = Payload & {
    __typename?: 'ShepherdCreateAlertPayload';
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<ShepherdAlert>;
    success: Scalars['Boolean'];
};
export declare type ShepherdCreateExampleAlertInput = {
    cloudId?: Maybe<Scalars['ID']>;
    orgId?: Maybe<Scalars['ID']>;
};
export declare type ShepherdCreateExampleAlertPayload = Payload & {
    __typename?: 'ShepherdCreateExampleAlertPayload';
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<ShepherdAlert>;
    success: Scalars['Boolean'];
};
export declare type ShepherdCreateSlackInput = {
    authToken: Scalars['String'];
    callbackURL: Scalars['URL'];
    channelId: Scalars['String'];
    status: ShepherdSubscriptionStatus;
    teamId: Scalars['String'];
};
export declare type ShepherdCreateSubscriptionPayload = Payload & {
    __typename?: 'ShepherdCreateSubscriptionPayload';
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<ShepherdSubscription>;
    success: Scalars['Boolean'];
};
export declare type ShepherdCreateWebhookInput = {
    authToken?: Maybe<Scalars['String']>;
    callbackURL: Scalars['URL'];
    destinationType?: Maybe<ShepherdWebhookDestinationType>;
    status?: Maybe<ShepherdSubscriptionStatus>;
    type?: Maybe<ShepherdWebhookType>;
};
export declare type ShepherdCurrentUser = {
    __typename?: 'ShepherdCurrentUser';
    isOrgAdmin?: Maybe<Scalars['Boolean']>;
    user?: Maybe<ShepherdUser>;
};
export declare type ShepherdDescriptionTemplate = {
    __typename?: 'ShepherdDescriptionTemplate';
    extendedText?: Maybe<Scalars['JSON']>;
    investigationText?: Maybe<Scalars['JSON']>;
    remediationText?: Maybe<Scalars['JSON']>;
    text?: Maybe<Scalars['JSON']>;
    type?: Maybe<ShepherdAlertTemplateType>;
};
export declare type ShepherdDetection = {
    __typename?: 'ShepherdDetection';
    description?: Maybe<Scalars['JSON']>;
    id: Scalars['ID'];
    product: ShepherdAtlassianProduct;
    scanningInfo: ShepherdDetectionScanningInfo;
    settings?: Maybe<Array<ShepherdDetectionSetting>>;
    title: Scalars['String'];
};
export declare enum ShepherdDetectionScanningFrequency {
    RealTime = "REAL_TIME",
    Scheduled = "SCHEDULED"
}
export declare type ShepherdDetectionScanningInfo = {
    __typename?: 'ShepherdDetectionScanningInfo';
    scanningFrequency: ShepherdDetectionScanningFrequency;
};
export declare type ShepherdDetectionSetting = {
    __typename?: 'ShepherdDetectionSetting';
    description?: Maybe<Scalars['JSON']>;
    id: Scalars['ID'];
    title: Scalars['String'];
    value: ShepherdDetectionSettingValueType;
};
export declare type ShepherdDetectionSettingValueType = ShepherdRateThresholdSetting;
export declare type ShepherdGenericMutationErrorExtension = MutationErrorExtension & {
    __typename?: 'ShepherdGenericMutationErrorExtension';
    errorType?: Maybe<Scalars['String']>;
    statusCode?: Maybe<Scalars['Int']>;
    type?: Maybe<ShepherdMutationErrorType>;
};
export declare type ShepherdGenericQueryErrorExtension = QueryErrorExtension & {
    __typename?: 'ShepherdGenericQueryErrorExtension';
    errorType?: Maybe<Scalars['String']>;
    statusCode?: Maybe<Scalars['Int']>;
    type?: Maybe<ShepherdQueryErrorType>;
};
export declare type ShepherdHighlight = ShepherdActivityHighlight;
export declare type ShepherdHighlightInput = {
    activityHighlight?: Maybe<ShepherdActivityHighlightInput>;
};
export declare type ShepherdHistogramBucketInput = {
    name: Scalars['String'];
    value: Scalars['Int'];
};
export declare type ShepherdLoginActivity = {
    __typename?: 'ShepherdLoginActivity';
    actor: ShepherdUser;
    city?: Maybe<Scalars['String']>;
    country?: Maybe<Scalars['String']>;
    ip?: Maybe<Scalars['String']>;
    region?: Maybe<Scalars['String']>;
    time: Scalars['DateTime'];
};
export declare type ShepherdLoginDevice = {
    __typename?: 'ShepherdLoginDevice';
    browserName?: Maybe<Scalars['String']>;
    browserVersion?: Maybe<Scalars['String']>;
    model?: Maybe<Scalars['String']>;
    osName?: Maybe<Scalars['String']>;
    osVersion?: Maybe<Scalars['String']>;
    type?: Maybe<ShepherdLoginDeviceType>;
    userAgent?: Maybe<Scalars['String']>;
    vendor?: Maybe<Scalars['String']>;
};
export declare enum ShepherdLoginDeviceType {
    Computer = "COMPUTER",
    Console = "CONSOLE",
    Embedded = "EMBEDDED",
    Mobile = "MOBILE",
    SmartTv = "SMART_TV",
    Tablet = "TABLET",
    Wearable = "WEARABLE"
}
export declare type ShepherdLoginLocation = {
    __typename?: 'ShepherdLoginLocation';
    city?: Maybe<Scalars['String']>;
    countryIsoCode?: Maybe<Scalars['String']>;
    countryName?: Maybe<Scalars['String']>;
    ipAddress?: Maybe<Scalars['String']>;
    isp?: Maybe<Scalars['String']>;
    latitude?: Maybe<Scalars['Float']>;
    longitude?: Maybe<Scalars['Float']>;
    regionIsoCode?: Maybe<Scalars['String']>;
    regionName?: Maybe<Scalars['String']>;
};
export declare type ShepherdMutation = {
    __typename?: 'ShepherdMutation';
    createAlert?: Maybe<ShepherdCreateAlertPayload>;
    createExampleAlert?: Maybe<ShepherdCreateExampleAlertPayload>;
    subscription?: Maybe<ShepherdSubscriptionMutations>;
    updateAlert?: Maybe<ShepherdUpdateAlertPayload>;
    updateAlerts?: Maybe<ShepherdUpdateAlertsPayload>;
    workspace?: Maybe<ShepherdWorkspaceMutations>;
};
export declare type ShepherdMutationCreateAlertArgs = {
    input: ShepherdCreateAlertInput;
};
export declare type ShepherdMutationCreateExampleAlertArgs = {
    input: ShepherdCreateExampleAlertInput;
};
export declare type ShepherdMutationUpdateAlertArgs = {
    id: Scalars['ID'];
    input: ShepherdUpdateAlertInput;
};
export declare type ShepherdMutationUpdateAlertsArgs = {
    ids: Array<Maybe<Scalars['ID']>>;
    input: ShepherdUpdateAlertInput;
};
export declare enum ShepherdMutationErrorType {
    BadRequest = "BAD_REQUEST",
    InternalServerError = "INTERNAL_SERVER_ERROR",
    NoProductAccess = "NO_PRODUCT_ACCESS",
    Unauthorized = "UNAUTHORIZED"
}
export declare type ShepherdQuery = {
    __typename?: 'ShepherdQuery';
    alert?: Maybe<ShepherdAlertQueries>;
    shepherdActivity?: Maybe<ShepherdActivityResult>;
    shepherdActor?: Maybe<ShepherdActorResult>;
    shepherdAlert?: Maybe<ShepherdAlertResult>;
    shepherdAppInfo: ShepherdAppInfo;
    shepherdConfig?: Maybe<ShepherdConfigResult>;
    shepherdUser?: Maybe<ShepherdUser>;
    subscriptions?: Maybe<ShepherdSubscriptionsResult>;
    workspace?: Maybe<ShepherdWorkspaceResult>;
    workspacesByUserContext?: Maybe<ShepherdWorkspaceResult>;
};
export declare type ShepherdQueryShepherdActivityArgs = {
    actions?: Maybe<Array<Maybe<ShepherdActionType>>>;
    actor?: Maybe<Scalars['ID']>;
    after?: Maybe<Scalars['String']>;
    endTime?: Maybe<Scalars['DateTime']>;
    first: Scalars['Int'];
    orgId?: Maybe<Scalars['String']>;
    startTime?: Maybe<Scalars['DateTime']>;
    subject?: Maybe<ShepherdSubjectInput>;
    workspaceId?: Maybe<Scalars['String']>;
};
export declare type ShepherdQueryShepherdActorArgs = {
    aaid: Scalars['ID'];
};
export declare type ShepherdQueryShepherdAlertArgs = {
    id: Scalars['ID'];
};
export declare type ShepherdQueryShepherdUserArgs = {
    id?: Maybe<Scalars['ID']>;
};
export declare type ShepherdQuerySubscriptionsArgs = {
    workspaceId: Scalars['ID'];
};
export declare type ShepherdQueryWorkspaceArgs = {
    cloudId?: Maybe<Scalars['ID']>;
    hostname?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['ID']>;
    orgId?: Maybe<Scalars['ID']>;
};
export declare enum ShepherdQueryErrorType {
    BadRequest = "BAD_REQUEST",
    InternalServerError = "INTERNAL_SERVER_ERROR",
    NoProductAccess = "NO_PRODUCT_ACCESS",
    Unauthorized = "UNAUTHORIZED"
}
export declare type ShepherdRateThresholdSetting = {
    __typename?: 'ShepherdRateThresholdSetting';
    currentValue?: Maybe<ShepherdRateThresholdValue>;
    defaultValue: ShepherdRateThresholdValue;
    values?: Maybe<Array<Maybe<ShepherdRateThresholdValue>>>;
};
export declare enum ShepherdRateThresholdValue {
    High = "HIGH",
    Low = "LOW",
    Medium = "MEDIUM"
}
export declare type ShepherdResourceActivity = {
    __typename?: 'ShepherdResourceActivity';
    action: ShepherdActionType;
    actor: ShepherdUser;
    id: Scalars['String'];
    resourceAri: Scalars['String'];
    resourceUrl?: Maybe<Scalars['String']>;
    time: Scalars['DateTime'];
};
export declare type ShepherdSlackEdge = ShepherdSubscriptionEdge & {
    __typename?: 'ShepherdSlackEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<ShepherdSlackSubscription>;
};
export declare type ShepherdSlackSubscription = Node & ShepherdSubscription & {
    __typename?: 'ShepherdSlackSubscription';
    callbackURL: Scalars['String'];
    channelId: Scalars['String'];
    createdBy: Scalars['String'];
    createdOn: Scalars['DateTime'];
    id: Scalars['ID'];
    status: ShepherdSubscriptionStatus;
    teamId: Scalars['String'];
    updatedBy?: Maybe<Scalars['String']>;
    updatedOn?: Maybe<Scalars['DateTime']>;
};
export declare type ShepherdSubject = {
    __typename?: 'ShepherdSubject';
    ari?: Maybe<Scalars['String']>;
    ati?: Maybe<Scalars['String']>;
    containerAri: Scalars['String'];
};
export declare type ShepherdSubjectInput = {
    ari?: Maybe<Scalars['String']>;
    ati?: Maybe<Scalars['String']>;
    containerAri: Scalars['String'];
};
export declare type ShepherdSubscription = {
    createdBy: Scalars['String'];
    createdOn: Scalars['DateTime'];
    id: Scalars['ID'];
    status: ShepherdSubscriptionStatus;
    updatedBy?: Maybe<Scalars['String']>;
    updatedOn?: Maybe<Scalars['DateTime']>;
};
export declare type ShepherdSubscriptionConnection = {
    __typename?: 'ShepherdSubscriptionConnection';
    edges?: Maybe<Array<Maybe<ShepherdSubscriptionEdge>>>;
};
export declare type ShepherdSubscriptionCreateInput = {
    slack?: Maybe<ShepherdCreateSlackInput>;
    webhook?: Maybe<ShepherdCreateWebhookInput>;
};
export declare type ShepherdSubscriptionDeleteInput = {
    hardDelete?: Maybe<Scalars['Boolean']>;
};
export declare type ShepherdSubscriptionEdge = {
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<ShepherdSubscription>;
};
export declare type ShepherdSubscriptionMutationPayload = Payload & {
    __typename?: 'ShepherdSubscriptionMutationPayload';
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<ShepherdSubscription>;
    success: Scalars['Boolean'];
};
export declare type ShepherdSubscriptionMutations = {
    __typename?: 'ShepherdSubscriptionMutations';
    create?: Maybe<ShepherdSubscriptionMutationPayload>;
    delete?: Maybe<ShepherdSubscriptionMutationPayload>;
    test?: Maybe<ShepherdSubscriptionMutationPayload>;
    update?: Maybe<ShepherdSubscriptionMutationPayload>;
};
export declare type ShepherdSubscriptionMutationsCreateArgs = {
    input: ShepherdSubscriptionCreateInput;
    workspaceId: Scalars['ID'];
};
export declare type ShepherdSubscriptionMutationsDeleteArgs = {
    id: Scalars['ID'];
    input?: Maybe<ShepherdSubscriptionDeleteInput>;
};
export declare type ShepherdSubscriptionMutationsTestArgs = {
    id: Scalars['ID'];
};
export declare type ShepherdSubscriptionMutationsUpdateArgs = {
    id: Scalars['ID'];
    input: ShepherdSubscriptionUpdateInput;
};
export declare enum ShepherdSubscriptionStatus {
    Active = "ACTIVE",
    Inactive = "INACTIVE"
}
export declare type ShepherdSubscriptionUpdateInput = {
    slack?: Maybe<ShepherdUpdateSlackInput>;
    webhook?: Maybe<ShepherdUpdateWebhookInput>;
};
export declare type ShepherdSubscriptionsResult = QueryError | ShepherdSubscriptionConnection;
export declare type ShepherdTime = {
    __typename?: 'ShepherdTime';
    end?: Maybe<Scalars['DateTime']>;
    start: Scalars['DateTime'];
};
export declare type ShepherdTimeInput = {
    end?: Maybe<Scalars['DateTime']>;
    start: Scalars['DateTime'];
};
export declare type ShepherdUpdateAlertInput = {
    assignee?: Maybe<Scalars['ID']>;
    status?: Maybe<ShepherdAlertStatus>;
};
export declare type ShepherdUpdateAlertPayload = Payload & {
    __typename?: 'ShepherdUpdateAlertPayload';
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<ShepherdAlert>;
    success: Scalars['Boolean'];
};
export declare type ShepherdUpdateAlertsPayload = Payload & {
    __typename?: 'ShepherdUpdateAlertsPayload';
    errors?: Maybe<Array<MutationError>>;
    nodes?: Maybe<Array<Maybe<ShepherdAlert>>>;
    success: Scalars['Boolean'];
};
export declare type ShepherdUpdateSlackInput = {
    authToken?: Maybe<Scalars['String']>;
    callbackURL?: Maybe<Scalars['URL']>;
    channelId?: Maybe<Scalars['String']>;
    status?: Maybe<ShepherdSubscriptionStatus>;
    teamId?: Maybe<Scalars['String']>;
};
export declare type ShepherdUpdateSubscriptionPayload = Payload & {
    __typename?: 'ShepherdUpdateSubscriptionPayload';
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<ShepherdSubscription>;
    success: Scalars['Boolean'];
};
export declare type ShepherdUpdateWebhookInput = {
    callbackURL?: Maybe<Scalars['URL']>;
    destinationType?: Maybe<ShepherdWebhookDestinationType>;
    status?: Maybe<ShepherdSubscriptionStatus>;
    type?: Maybe<ShepherdWebhookType>;
};
export declare type ShepherdUser = {
    __typename?: 'ShepherdUser';
    aaid: Scalars['ID'];
    createdOn?: Maybe<Scalars['DateTime']>;
    user?: Maybe<User>;
};
export declare enum ShepherdWebhookDestinationType {
    Default = "DEFAULT",
    MicrosoftTeams = "MICROSOFT_TEAMS"
}
export declare type ShepherdWebhookEdge = ShepherdSubscriptionEdge & {
    __typename?: 'ShepherdWebhookEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<ShepherdWebhookSubscription>;
};
export declare type ShepherdWebhookSubscription = Node & ShepherdSubscription & {
    __typename?: 'ShepherdWebhookSubscription';
    authToken: Scalars['String'];
    callbackURL: Scalars['String'];
    createdBy: Scalars['String'];
    createdOn: Scalars['DateTime'];
    destinationType: ShepherdWebhookDestinationType;
    id: Scalars['ID'];
    status: ShepherdSubscriptionStatus;
    type?: Maybe<ShepherdWebhookType>;
    updatedBy?: Maybe<Scalars['String']>;
    updatedOn?: Maybe<Scalars['DateTime']>;
};
export declare enum ShepherdWebhookType {
    Custom = "CUSTOM",
    MicrosoftTeams = "MICROSOFT_TEAMS",
    Slack = "SLACK"
}
export declare type ShepherdWorkspace = {
    __typename?: 'ShepherdWorkspace';
    cloudId: Scalars['ID'];
    cloudName?: Maybe<Scalars['String']>;
    currentUser?: Maybe<ShepherdCurrentUser>;
    detections: Array<ShepherdDetection>;
    id: Scalars['ID'];
    orgId: Scalars['ID'];
    shouldOnboard?: Maybe<Scalars['Boolean']>;
};
export declare type ShepherdWorkspaceDetectionsArgs = {
    detectionId?: Maybe<Scalars['ID']>;
    settingId?: Maybe<Scalars['ID']>;
};
export declare type ShepherdWorkspaceConnection = {
    __typename?: 'ShepherdWorkspaceConnection';
    edges?: Maybe<Array<Maybe<ShepherdWorkspaceEdge>>>;
};
export declare type ShepherdWorkspaceEdge = {
    __typename?: 'ShepherdWorkspaceEdge';
    node?: Maybe<ShepherdWorkspace>;
};
export declare type ShepherdWorkspaceMutationPayload = Payload & {
    __typename?: 'ShepherdWorkspaceMutationPayload';
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<ShepherdWorkspace>;
    success: Scalars['Boolean'];
};
export declare type ShepherdWorkspaceMutations = {
    __typename?: 'ShepherdWorkspaceMutations';
    onboard?: Maybe<ShepherdWorkspaceMutationPayload>;
    update?: Maybe<ShepherdWorkspaceMutationPayload>;
    updateDetectionSetting?: Maybe<ShepherdWorkspaceMutationPayload>;
};
export declare type ShepherdWorkspaceMutationsOnboardArgs = {
    id: Scalars['ID'];
};
export declare type ShepherdWorkspaceMutationsUpdateArgs = {
    id: Scalars['ID'];
    input: ShepherdWorkspaceUpdateInput;
};
export declare type ShepherdWorkspaceMutationsUpdateDetectionSettingArgs = {
    id: Scalars['ID'];
    input: ShepherdWorkspaceSettingUpdateInput;
};
export declare type ShepherdWorkspaceResult = QueryError | ShepherdWorkspaceConnection;
export declare type ShepherdWorkspaceSettingUpdateInput = {
    detectionId: Scalars['ID'];
    settingId: Scalars['ID'];
    value: ShepherdWorkspaceSettingValueInput;
};
export declare type ShepherdWorkspaceSettingValueInput = {
    thresholdValue?: Maybe<ShepherdRateThresholdValue>;
};
export declare type ShepherdWorkspaceUpdateInput = {
    shouldOnboard: Scalars['Boolean'];
};
export declare type SmartsContext = {
    userId: Scalars['String'];
    tenantId: Scalars['String'];
    product?: Maybe<Scalars['String']>;
    containerId?: Maybe<Scalars['String']>;
    objectId?: Maybe<Scalars['String']>;
    additionalContextList?: Maybe<Array<SmartsKeyValue>>;
};
export declare type SmartsKeyValue = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type SmartsModelRequestParams = {
    caller: Scalars['String'];
    experience: Scalars['String'];
};
export declare type SmartsQueryApi = {
    __typename?: 'SmartsQueryApi';
    recommendedContainer?: Maybe<Array<Maybe<SmartsRecommendedContainer>>>;
    recommendedUser?: Maybe<Array<Maybe<SmartsRecommendedUser>>>;
    recommendedObject?: Maybe<Array<Maybe<SmartsRecommendedObject>>>;
};
export declare type SmartsQueryApiRecommendedContainerArgs = {
    recommendationsQuery: SmartsRecommendationsQuery;
};
export declare type SmartsQueryApiRecommendedUserArgs = {
    recommendationsQuery: SmartsRecommendationsQuery;
};
export declare type SmartsQueryApiRecommendedObjectArgs = {
    recommendationsQuery: SmartsRecommendationsQuery;
};
export declare type SmartsRecommendationsQuery = {
    context: SmartsContext;
    modelRequestParams: SmartsModelRequestParams;
    sessionId?: Maybe<Scalars['String']>;
    requestingUserId: Scalars['String'];
    maxNumberOfResults?: Maybe<Scalars['Int']>;
};
export declare type SmartsRecommendedContainer = {
    __typename?: 'SmartsRecommendedContainer';
    id: Scalars['ID'];
    score?: Maybe<Scalars['Float']>;
    container?: Maybe<ConfluenceSpace>;
};
export declare type SmartsRecommendedObject = {
    __typename?: 'SmartsRecommendedObject';
    id: Scalars['ID'];
    score?: Maybe<Scalars['Float']>;
    object?: Maybe<SmartsRecommendedObjectData>;
};
export declare type SmartsRecommendedObjectData = ConfluencePage | ConfluenceBlogPost;
export declare type SmartsRecommendedUser = {
    __typename?: 'SmartsRecommendedUser';
    id: Scalars['ID'];
    score?: Maybe<Scalars['Float']>;
    user?: Maybe<User>;
};
export declare type SoftwareBoard = {
    __typename?: 'SoftwareBoard';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    columns?: Maybe<Array<Maybe<Column>>>;
    swimlaneStrategy?: Maybe<SwimlaneStrategy>;
    hasClearedCards?: Maybe<Scalars['Boolean']>;
    inlineCardCreate?: Maybe<InlineCardCreateConfig>;
    cardMedia?: Maybe<CardMediaConfig>;
    assignees?: Maybe<Array<Maybe<User>>>;
    cardTypes: Array<Maybe<CardType>>;
    cards?: Maybe<Array<Maybe<SoftwareCard>>>;
    cardChildren?: Maybe<Array<Maybe<SoftwareCard>>>;
    swimlanes: Array<Maybe<Swimlane>>;
    userSwimlanes: Array<Maybe<Swimlane>>;
    labels?: Maybe<Array<Maybe<Scalars['String']>>>;
    rankCustomFieldId?: Maybe<Scalars['String']>;
    editConfig?: Maybe<BoardEditConfig>;
    columnConfigs?: Maybe<ColumnsConfig>;
};
export declare type SoftwareBoardCardsArgs = {
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    customFilterIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type SoftwareCard = {
    __typename?: 'SoftwareCard';
    id?: Maybe<Scalars['ID']>;
    key?: Maybe<Scalars['String']>;
    summary?: Maybe<Scalars['String']>;
    labels?: Maybe<Array<Maybe<Scalars['String']>>>;
    type?: Maybe<CardType>;
    status?: Maybe<CardStatus>;
    activeSprint?: Maybe<Sprint>;
    assignee?: Maybe<User>;
    flagged?: Maybe<Scalars['Boolean']>;
    done?: Maybe<Scalars['Boolean']>;
    coverMedia?: Maybe<CardCoverMedia>;
    devStatus?: Maybe<DevStatus>;
    parentId?: Maybe<Scalars['ID']>;
    childrenIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    estimate?: Maybe<Estimate>;
    childCardsMetadata?: Maybe<ChildCardsMetadata>;
    priority?: Maybe<CardPriority>;
    dueDate?: Maybe<Scalars['String']>;
    fixVersionsIds: Array<Scalars['ID']>;
    canSplitIssue: Scalars['Boolean'];
};
export declare type SoftwareCardChildrenInfo = {
    __typename?: 'SoftwareCardChildrenInfo';
    todoStats?: Maybe<SoftwareCardChildrenInfoStats>;
    inProgressStats?: Maybe<SoftwareCardChildrenInfoStats>;
    doneStats?: Maybe<SoftwareCardChildrenInfoStats>;
    lastColumnIssueStats?: Maybe<SoftwareCardChildrenInfoStats>;
};
export declare type SoftwareCardChildrenInfoStats = {
    __typename?: 'SoftwareCardChildrenInfoStats';
    cardCount?: Maybe<Scalars['Int']>;
};
export declare type SoftwareCardTransition = {
    __typename?: 'SoftwareCardTransition';
    id?: Maybe<Scalars['ID']>;
    name: Scalars['String'];
    status?: Maybe<CardStatus>;
    originStatus?: Maybe<CardStatus>;
    cardType: CardType;
    isGlobal?: Maybe<Scalars['Boolean']>;
    isInitial?: Maybe<Scalars['Boolean']>;
    hasConditions?: Maybe<Scalars['Boolean']>;
};
export declare type SoftwareCardTypeTransition = {
    __typename?: 'SoftwareCardTypeTransition';
    transitionId?: Maybe<Scalars['ID']>;
    name: Scalars['String'];
    status?: Maybe<CardStatus>;
    originStatus?: Maybe<CardStatus>;
    cardType: CardType;
    isGlobal?: Maybe<Scalars['Boolean']>;
    isInitial?: Maybe<Scalars['Boolean']>;
    hasConditions?: Maybe<Scalars['Boolean']>;
};
export declare type SoftwareCardsDestination = {
    destination?: Maybe<SoftwareCardsDestinationEnum>;
    sprintId?: Maybe<Scalars['ID']>;
};
export declare enum SoftwareCardsDestinationEnum {
    NewSprint = "NEW_SPRINT",
    Backlog = "BACKLOG",
    ExistingSprint = "EXISTING_SPRINT"
}
export declare type SoftwareOperation = {
    __typename?: 'SoftwareOperation';
    icon?: Maybe<Icon>;
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    tooltip?: Maybe<Scalars['String']>;
    styleClass?: Maybe<Scalars['String']>;
};
export declare type SoftwareProject = {
    __typename?: 'SoftwareProject';
    id?: Maybe<Scalars['ID']>;
    key?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    cardTypes?: Maybe<Array<Maybe<CardType>>>;
};
export declare type SoftwareProjectCardTypesArgs = {
    hierarchyLevelType?: Maybe<CardHierarchyLevelEnumType>;
};
export declare type SoftwareReport = {
    __typename?: 'SoftwareReport';
    id: Scalars['ID'];
    key: Scalars['String'];
    localisedName: Scalars['String'];
    localisedDescription: Scalars['String'];
    group: Scalars['String'];
    imageUri: Scalars['String'];
    urlName: Scalars['String'];
    isApplicable: Scalars['Boolean'];
    inapplicableReason?: Maybe<Scalars['String']>;
    inapplicableDescription?: Maybe<Scalars['String']>;
};
export declare type SoftwareReports = {
    __typename?: 'SoftwareReports';
    overview?: Maybe<ReportsOverview>;
    cumulativeFlowDiagram?: Maybe<CumulativeFlowDiagram>;
    burndownChart: BurndownChart;
};
export declare type SoftwareSprintMetadata = {
    __typename?: 'SoftwareSprintMetadata';
    numCompletedIssues?: Maybe<Scalars['Int']>;
    numOpenIssues?: Maybe<Scalars['Int']>;
    top100CompletedCardKeysWithIncompleteChildren?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare enum SortDirection {
    Asc = "ASC",
    Desc = "DESC"
}
export declare enum SortOrder {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type SplitIssueInput = {
    originalIssue: OriginalSplitIssue;
    newIssues: Array<Maybe<NewSplitIssueRequest>>;
};
export declare type SplitIssueOutput = MutationResponse & {
    __typename?: 'SplitIssueOutput';
    newIssues?: Maybe<Array<Maybe<NewSplitIssueResponse>>>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type Sprint = BaseSprint & {
    __typename?: 'Sprint';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    goal?: Maybe<Scalars['String']>;
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
    daysRemaining?: Maybe<Scalars['Int']>;
    cards: Array<Maybe<SoftwareCard>>;
    sprintState: SprintState;
    sprintMetadata?: Maybe<SoftwareSprintMetadata>;
};
export declare type SprintCardsArgs = {
    cardIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    customFilterIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type SprintEndData = {
    __typename?: 'SprintEndData';
    timestamp: Scalars['DateTime'];
    issueList: Array<Maybe<ScopeSprintIssue>>;
    remainingEstimate: Scalars['Float'];
};
export declare enum SprintReportsEstimationStatisticType {
    StoryPoints = "STORY_POINTS",
    IssueCount = "ISSUE_COUNT",
    OriginalEstimate = "ORIGINAL_ESTIMATE"
}
export declare type SprintReportsFilters = {
    __typename?: 'SprintReportsFilters';
    sprints: Array<Maybe<Sprint>>;
    estimationStatistic: Array<Maybe<SprintReportsEstimationStatisticType>>;
};
export declare type SprintResponse = MutationResponse & {
    __typename?: 'SprintResponse';
    sprint?: Maybe<Sprint>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
};
export declare type SprintScopeChangeData = {
    __typename?: 'SprintScopeChangeData';
    timestamp: Scalars['DateTime'];
    issueKey: Scalars['String'];
    issueSummary: Scalars['String'];
    eventType: Scalars['SprintScopeChangeEventType'];
    scope: Scalars['Float'];
    completion: Scalars['Float'];
    remaining: Scalars['Float'];
    estimate?: Maybe<Scalars['Float']>;
    prevCompletion: Scalars['Float'];
    prevScope: Scalars['Float'];
    prevRemaining: Scalars['Float'];
    prevEstimate?: Maybe<Scalars['Float']>;
};
export declare type SprintStartData = {
    __typename?: 'SprintStartData';
    timestamp: Scalars['DateTime'];
    issueList: Array<Maybe<ScopeSprintIssue>>;
    scopeEstimate: Scalars['Float'];
};
export declare enum SprintState {
    Active = "ACTIVE",
    Future = "FUTURE",
    Closed = "CLOSED"
}
export declare type SprintWithStatistics = BaseSprint & {
    __typename?: 'SprintWithStatistics';
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    goal?: Maybe<Scalars['String']>;
    defaultStartDate?: Maybe<Scalars['DateTime']>;
    defaultEndDate?: Maybe<Scalars['DateTime']>;
    startDate?: Maybe<Scalars['DateTime']>;
    endDate?: Maybe<Scalars['DateTime']>;
    sprintState: SprintState;
    sprintMetadata?: Maybe<SoftwareSprintMetadata>;
    incompleteCardsDestinations?: Maybe<Array<Maybe<InCompleteCardsDestination>>>;
};
export declare type StartSprintInput = {
    boardId: Scalars['ID'];
    sprintId: Scalars['ID'];
    name: Scalars['String'];
    goal?: Maybe<Scalars['String']>;
    startDate: Scalars['String'];
    endDate: Scalars['String'];
};
export declare type Storage = {
    __typename?: 'Storage';
    hosted?: Maybe<HostedStorage>;
    remotes?: Maybe<Array<Remote>>;
};
export declare type Subscription = {
    __typename?: 'Subscription';
    trello: TrelloSubscriptionApi;
    devOps?: Maybe<AriGraphSubscriptions>;
    onJiraIssueCreatedForUser?: Maybe<JiraOnIssueCreatedForUserResponseType>;
    testing?: Maybe<TestingSubscription>;
};
export declare type SubscriptionOnJiraIssueCreatedForUserArgs = {
    cloudId: Scalars['ID'];
    accountId: Scalars['ID'];
    projectType?: JiraProjectType;
    filter?: JiraProjectFilterInput;
};
export declare enum SubscriptionEventSources {
    Streamhub = "STREAMHUB",
    Producer = "PRODUCER"
}
export declare type SupportRequest = {
    __typename?: 'SupportRequest';
    id: Scalars['ID'];
    summary?: Maybe<Scalars['String']>;
    description: Scalars['String'];
    projectName: Scalars['String'];
    requestTypeName: Scalars['String'];
    createdDate: SupportRequestDisplayableDateTime;
    status: SupportRequestStatus;
    reporter: SupportRequestUser;
    participants: Array<SupportRequestUser>;
    fields: Array<SupportRequestField>;
    defaultFields: Array<SupportRequestField>;
    experienceFields?: Maybe<Array<SupportRequestField>>;
    comments?: Maybe<SupportRequestComments>;
    statuses: SupportRequestStatuses;
    transitions?: Maybe<SupportRequestTransitions>;
    targetScreen: Scalars['String'];
    tracAttachmentComponentsEnabled?: Maybe<Scalars['Boolean']>;
    lastComment: SupportRequestComments;
    relatedRequests?: Maybe<Array<Maybe<SupportRequest>>>;
    capabilities?: Maybe<Array<Scalars['String']>>;
    sourceId?: Maybe<Scalars['String']>;
    activities: SupportRequestActivities;
};
export declare type SupportRequestCommentsArgs = {
    offset?: Maybe<Scalars['Int']>;
    size?: Maybe<Scalars['Int']>;
};
export declare type SupportRequestStatusesArgs = {
    offset?: Maybe<Scalars['Int']>;
    size?: Maybe<Scalars['Int']>;
};
export declare type SupportRequestTransitionsArgs = {
    offset?: Maybe<Scalars['Int']>;
    size?: Maybe<Scalars['Int']>;
};
export declare type SupportRequestLastCommentArgs = {
    offset?: Maybe<Scalars['Int']>;
    size?: Maybe<Scalars['Int']>;
};
export declare type SupportRequestActivitiesArgs = {
    offset?: Maybe<Scalars['Int']>;
    size?: Maybe<Scalars['Int']>;
};
export declare type SupportRequestActivities = {
    __typename?: 'SupportRequestActivities';
    offset: Scalars['Int'];
    limit: Scalars['Int'];
    total: Scalars['Int'];
    values?: Maybe<Array<SupportRequestActivity>>;
};
export declare type SupportRequestActivity = {
    __typename?: 'SupportRequestActivity';
    comment?: Maybe<SupportRequestComment>;
    status?: Maybe<SupportRequestActivityStatus>;
};
export declare type SupportRequestActivityStatus = {
    __typename?: 'SupportRequestActivityStatus';
    text: Scalars['String'];
    resolution?: Maybe<Scalars['String']>;
    createdDate?: Maybe<SupportRequestDisplayableDateTime>;
};
export declare type SupportRequestAddCommentInput = {
    message: Scalars['String'];
    issueKey: Scalars['String'];
};
export declare type SupportRequestAdditionalTicketData = {
    parentIssueIdOrKey?: Maybe<Scalars['String']>;
    operationType?: Maybe<Scalars['String']>;
};
export declare type SupportRequestCatalogMutationApi = {
    __typename?: 'SupportRequestCatalogMutationApi';
    addComment?: Maybe<SupportRequestComment>;
    updateMigrationTask?: Maybe<Array<Maybe<Scalars['JSON']>>>;
    statusTransition?: Maybe<Scalars['Boolean']>;
    removeRequestParticipants?: Maybe<SupportRequestParticipants>;
    addRequestParticipants?: Maybe<SupportRequestParticipants>;
    removeSupportRequestOrganizations?: Maybe<Array<SupportRequestOrganization>>;
    addSupportRequestOrganizations?: Maybe<Array<SupportRequestOrganization>>;
    createNamedContactOperationRequest?: Maybe<SupportRequestTicket>;
    updateSupportRequest?: Maybe<SupportRequest>;
    createTicket?: Maybe<SupportRequestCreateTicketResponse>;
    supportRequestContext?: Maybe<SupportRequestContextMutationApi>;
};
export declare type SupportRequestCatalogMutationApiAddCommentArgs = {
    input?: Maybe<SupportRequestAddCommentInput>;
};
export declare type SupportRequestCatalogMutationApiUpdateMigrationTaskArgs = {
    input?: Maybe<SupportRequestMigrationTaskInput>;
};
export declare type SupportRequestCatalogMutationApiStatusTransitionArgs = {
    input?: Maybe<SupportRequestTransitionInput>;
};
export declare type SupportRequestCatalogMutationApiRemoveRequestParticipantsArgs = {
    input: SupportRequestParticipantsInput;
};
export declare type SupportRequestCatalogMutationApiAddRequestParticipantsArgs = {
    input: SupportRequestParticipantsInput;
};
export declare type SupportRequestCatalogMutationApiRemoveSupportRequestOrganizationsArgs = {
    input: SupportRequestOrganizationsInput;
};
export declare type SupportRequestCatalogMutationApiAddSupportRequestOrganizationsArgs = {
    input: SupportRequestOrganizationsInput;
};
export declare type SupportRequestCatalogMutationApiCreateNamedContactOperationRequestArgs = {
    emails: Array<Scalars['String']>;
    organizationId?: Maybe<Scalars['String']>;
    sen?: Maybe<Scalars['String']>;
    operation: SupportRequestNamedContactOperation;
};
export declare type SupportRequestCatalogMutationApiUpdateSupportRequestArgs = {
    input: SupportRequestUpdateInput;
};
export declare type SupportRequestCatalogMutationApiCreateTicketArgs = {
    summary: Scalars['String'];
    description: Scalars['String'];
    fields?: Maybe<Array<Maybe<SupportRequestTicketFields>>>;
    additionalData?: Maybe<SupportRequestAdditionalTicketData>;
};
export declare type SupportRequestCatalogQueryApi = {
    __typename?: 'SupportRequestCatalogQueryApi';
    me?: Maybe<SupportRequestPage>;
    supportRequest?: Maybe<SupportRequest>;
    users?: Maybe<SupportRequestUsers>;
    supportRequestContext?: Maybe<SupportRequestContextQueryApi>;
};
export declare type SupportRequestCatalogQueryApiSupportRequestArgs = {
    key: Scalars['ID'];
};
export declare type SupportRequestComment = {
    __typename?: 'SupportRequestComment';
    author: SupportRequestUser;
    message: Scalars['String'];
    createdDate: SupportRequestDisplayableDateTime;
    mentionedUsers: Array<SupportRequestUser>;
};
export declare type SupportRequestComments = {
    __typename?: 'SupportRequestComments';
    offset: Scalars['Int'];
    limit: Scalars['Int'];
    size: Scalars['Int'];
    lastPage: Scalars['Boolean'];
    values: Array<SupportRequestComment>;
};
export declare type SupportRequestContactRelation = {
    __typename?: 'SupportRequestContactRelation';
    openRequest?: Maybe<SupportRequestTicket>;
    contact?: Maybe<SupportRequestUser>;
};
export declare type SupportRequestContextMutationApi = {
    __typename?: 'SupportRequestContextMutationApi';
    setNotifications: SupportRequestNotification;
};
export declare type SupportRequestContextMutationApiSetNotificationsArgs = {
    input: SupportRequestContextSetNotificationInput;
};
export declare type SupportRequestContextQueryApi = {
    __typename?: 'SupportRequestContextQueryApi';
    getNotificationStatus?: Maybe<SupportRequestNotification>;
};
export declare type SupportRequestContextQueryApiGetNotificationStatusArgs = {
    key: Scalars['ID'];
};
export declare type SupportRequestContextSetNotificationInput = {
    requestKey: Scalars['String'];
    status: Scalars['Boolean'];
};
export declare type SupportRequestCreateTicketResponse = {
    __typename?: 'SupportRequestCreateTicketResponse';
    ticketKey?: Maybe<Scalars['String']>;
    success?: Maybe<Scalars['Boolean']>;
    message?: Maybe<Scalars['String']>;
};
export declare type SupportRequestDisplayableDateTime = {
    __typename?: 'SupportRequestDisplayableDateTime';
    dateTime: Scalars['String'];
    friendly: Scalars['String'];
    epochMillis: Scalars['Long'];
};
export declare type SupportRequestField = {
    __typename?: 'SupportRequestField';
    id: Scalars['String'];
    label: Scalars['String'];
    value?: Maybe<SupportRequestFieldValue>;
    dataType?: Maybe<SupportRequestFieldDataType>;
    editable?: Maybe<Scalars['Boolean']>;
};
export declare enum SupportRequestFieldDataType {
    String = "STRING",
    Number = "NUMBER",
    Boolean = "BOOLEAN",
    Date = "DATE"
}
export declare type SupportRequestFieldValue = {
    __typename?: 'SupportRequestFieldValue';
    value?: Maybe<Scalars['String']>;
};
export declare type SupportRequestHierarchyRequest = {
    __typename?: 'SupportRequestHierarchyRequest';
    id: Scalars['ID'];
    summary?: Maybe<Scalars['String']>;
    description: Scalars['String'];
    requestTypeName: Scalars['String'];
    createdDate: SupportRequestDisplayableDateTime;
    status: SupportRequestStatus;
    reporter: SupportRequestUser;
    participants: Array<SupportRequestUser>;
    parent?: Maybe<SupportRequestHierarchyRequest>;
    children?: Maybe<Array<SupportRequestHierarchyRequest>>;
    targetScreen: Scalars['String'];
};
export declare type SupportRequestHierarchyRequests = {
    __typename?: 'SupportRequestHierarchyRequests';
    total: Scalars['Int'];
    page: Array<SupportRequestHierarchyRequest>;
};
export declare type SupportRequestLastComment = {
    __typename?: 'SupportRequestLastComment';
    offset: Scalars['Int'];
    values: Array<SupportRequestComment>;
};
export declare type SupportRequestMigrationTaskInput = {
    requestKey: Scalars['String'];
    taskName: Scalars['String'];
    comment?: Maybe<Scalars['String']>;
    completedByPartner: Scalars['Boolean'];
};
export declare enum SupportRequestNamedContactOperation {
    Add = "ADD",
    Remove = "REMOVE"
}
export declare type SupportRequestNamedContactRelation = {
    __typename?: 'SupportRequestNamedContactRelation';
    orgId?: Maybe<Scalars['String']>;
    orgName?: Maybe<Scalars['String']>;
    sen?: Maybe<Scalars['String']>;
    contactRelations?: Maybe<Array<Maybe<SupportRequestContactRelation>>>;
};
export declare type SupportRequestNamedContactRelations = {
    __typename?: 'SupportRequestNamedContactRelations';
    cloudEnterpriseRelations?: Maybe<Array<Maybe<SupportRequestNamedContactRelation>>>;
    premierSupportRelations?: Maybe<Array<Maybe<SupportRequestNamedContactRelation>>>;
};
export declare type SupportRequestNotification = {
    __typename?: 'SupportRequestNotification';
    status?: Maybe<Scalars['Boolean']>;
};
export declare type SupportRequestOrganization = {
    __typename?: 'SupportRequestOrganization';
    id: Scalars['Int'];
    name: Scalars['String'];
};
export declare type SupportRequestOrganizationsInput = {
    requestKey: Scalars['String'];
    orgIds?: Maybe<Array<Scalars['Int']>>;
};
export declare type SupportRequestPage = {
    __typename?: 'SupportRequestPage';
    profile?: Maybe<SupportRequestUser>;
    requests?: Maybe<SupportRequests>;
    migrationRequests?: Maybe<SupportRequestHierarchyRequests>;
    namedContactRelations?: Maybe<SupportRequestNamedContactRelations>;
};
export declare type SupportRequestPageRequestsArgs = {
    searchTerm?: Maybe<Scalars['String']>;
    ownership?: Maybe<SupportRequestQueryOwnership>;
    status?: Maybe<SupportRequestQueryStatusCategory>;
    offset?: Scalars['Int'];
    size?: Scalars['Int'];
    project?: Maybe<Scalars['String']>;
    requestType?: Maybe<Scalars['String']>;
    backend?: Maybe<Array<Scalars['String']>>;
};
export declare type SupportRequestPageMigrationRequestsArgs = {
    ownership?: Maybe<SupportRequestQueryOwnership>;
    status?: Maybe<SupportRequestQueryStatusCategory>;
    offset?: Scalars['Int'];
    size?: Scalars['Int'];
};
export declare type SupportRequestParticipants = {
    __typename?: 'SupportRequestParticipants';
    offset: Scalars['Int'];
    limit: Scalars['Int'];
    size: Scalars['Int'];
    lastPage: Scalars['Boolean'];
    values: Array<SupportRequestUser>;
};
export declare type SupportRequestParticipantsInput = {
    requestKey: Scalars['String'];
    aaids?: Maybe<Array<Scalars['String']>>;
    gsacUsernames?: Maybe<Array<Scalars['String']>>;
};
export declare enum SupportRequestQueryOwnership {
    Reporter = "REPORTER",
    Participant = "PARTICIPANT"
}
export declare enum SupportRequestQueryStatusCategory {
    Open = "OPEN",
    Done = "DONE"
}
export declare type SupportRequestStatus = {
    __typename?: 'SupportRequestStatus';
    category: SupportRequestStatusCategory;
    text: Scalars['String'];
    createdDate?: Maybe<SupportRequestDisplayableDateTime>;
};
export declare enum SupportRequestStatusCategory {
    Open = "OPEN",
    InProgress = "IN_PROGRESS",
    Done = "DONE"
}
export declare type SupportRequestStatuses = {
    __typename?: 'SupportRequestStatuses';
    offset: Scalars['Int'];
    limit: Scalars['Int'];
    size: Scalars['Int'];
    lastPage: Scalars['Boolean'];
    values: Array<SupportRequestStatus>;
};
export declare type SupportRequestTicket = {
    __typename?: 'SupportRequestTicket';
    issueKey?: Maybe<Scalars['String']>;
    statusName?: Maybe<Scalars['String']>;
    categoryKey?: Maybe<Scalars['String']>;
};
export declare type SupportRequestTicketFields = {
    fieldId: Scalars['Long'];
    fieldValue: Scalars['String'];
    dataType: SupportRequestFieldDataType;
};
export declare type SupportRequestTransition = {
    __typename?: 'SupportRequestTransition';
    id: Scalars['String'];
    name: Scalars['String'];
};
export declare type SupportRequestTransitionInput = {
    requestKey: Scalars['String'];
    transitionId: Scalars['ID'];
    comment?: Maybe<Scalars['String']>;
};
export declare type SupportRequestTransitions = {
    __typename?: 'SupportRequestTransitions';
    offset: Scalars['Int'];
    limit: Scalars['Int'];
    size: Scalars['Int'];
    lastPage: Scalars['Boolean'];
    values: Array<SupportRequestTransition>;
};
export declare type SupportRequestUpdateFieldInput = {
    id: Scalars['String'];
    value: Scalars['String'];
};
export declare type SupportRequestUpdateInput = {
    requestKey: Scalars['ID'];
    experienceFields?: Maybe<Array<SupportRequestUpdateFieldInput>>;
};
export declare type SupportRequestUser = {
    __typename?: 'SupportRequestUser';
    user?: Maybe<User>;
    username?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    userType?: Maybe<SupportRequestUserType>;
};
export declare enum SupportRequestUserType {
    Customer = "CUSTOMER",
    Partner = "PARTNER"
}
export declare type SupportRequestUsers = {
    __typename?: 'SupportRequestUsers';
    searchUsers: Array<SupportRequestUser>;
    searchOrganizations: Array<SupportRequestOrganization>;
};
export declare type SupportRequestUsersSearchUsersArgs = {
    query?: Maybe<Scalars['String']>;
    requestKey?: Maybe<Scalars['String']>;
};
export declare type SupportRequestUsersSearchOrganizationsArgs = {
    query?: Maybe<Scalars['String']>;
    requestKey?: Maybe<Scalars['String']>;
};
export declare type SupportRequests = {
    __typename?: 'SupportRequests';
    total: Scalars['Int'];
    page: Array<SupportRequest>;
};
export declare type SurfacePlatformQueryApi = {
    __typename?: 'SurfacePlatformQueryApi';
    surface?: Maybe<SurfacePlatformSurface>;
    surfaceV2?: Maybe<SurfacePlatformSurfaceV2>;
};
export declare type SurfacePlatformQueryApiSurfaceArgs = {
    context?: Maybe<Scalars['JSON']>;
    id: Scalars['ID'];
};
export declare type SurfacePlatformQueryApiSurfaceV2Args = {
    context?: Maybe<Scalars['JSON']>;
    key: Scalars['String'];
    type: Scalars['String'];
};
export declare type SurfacePlatformSurface = {
    __typename?: 'SurfacePlatformSurface';
    channels?: Maybe<Array<Maybe<Scalars['String']>>>;
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    locale?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    version?: Maybe<Scalars['String']>;
    zones?: Maybe<Scalars['JSON']>;
};
export declare type SurfacePlatformSurfaceV2 = {
    __typename?: 'SurfacePlatformSurfaceV2';
    channel?: Maybe<Scalars['String']>;
    definitionVersion?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    fields?: Maybe<Scalars['JSON']>;
    key?: Maybe<Scalars['String']>;
    label?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
    revision?: Maybe<Scalars['Int']>;
    type?: Maybe<Scalars['String']>;
    zones?: Maybe<Scalars['JSON']>;
};
export declare type Swimlane = {
    __typename?: 'Swimlane';
    id?: Maybe<Scalars['ID']>;
    iconUrl?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    allowedCardTypes?: Maybe<Array<CardType>>;
    columnsInSwimlane?: Maybe<Array<Maybe<ColumnInSwimlane>>>;
};
export declare enum SwimlaneStrategy {
    None = "NONE",
    Assignee = "ASSIGNEE",
    Issueparent = "ISSUEPARENT",
    Issuechildren = "ISSUECHILDREN"
}
export declare type Team = Node & {
    __typename?: 'Team';
    id: Scalars['ID'];
    organizationId?: Maybe<Scalars['String']>;
    creator?: Maybe<User>;
    state?: Maybe<TeamState>;
    displayName?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    membershipSetting?: Maybe<MembershipSetting>;
    smallHeaderImageUrl?: Maybe<Scalars['String']>;
    largeHeaderImageUrl?: Maybe<Scalars['String']>;
    smallAvatarImageUrl?: Maybe<Scalars['String']>;
    largeAvatarImageUrl?: Maybe<Scalars['String']>;
    members?: Maybe<TeamMemberConnection>;
};
export declare type TeamMembersArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Scalars['Int'];
    state?: Array<MembershipState>;
};
export declare type TeamMember = {
    __typename?: 'TeamMember';
    member?: Maybe<User>;
    state?: Maybe<MembershipState>;
    role?: Maybe<MembershipRole>;
};
export declare type TeamMemberConnection = {
    __typename?: 'TeamMemberConnection';
    edges?: Maybe<Array<Maybe<TeamMemberEdge>>>;
    nodes?: Maybe<Array<Maybe<TeamMember>>>;
    pageInfo: PageInfo;
};
export declare type TeamMemberConnectionV2 = {
    __typename?: 'TeamMemberConnectionV2';
    edges?: Maybe<Array<Maybe<TeamMemberEdgeV2>>>;
    nodes?: Maybe<Array<Maybe<TeamMemberV2>>>;
    pageInfo: PageInfo;
};
export declare type TeamMemberEdge = {
    __typename?: 'TeamMemberEdge';
    node?: Maybe<TeamMember>;
    cursor: Scalars['String'];
};
export declare type TeamMemberEdgeV2 = {
    __typename?: 'TeamMemberEdgeV2';
    node?: Maybe<TeamMemberV2>;
    cursor: Scalars['String'];
};
export declare type TeamMemberV2 = {
    __typename?: 'TeamMemberV2';
    member?: Maybe<User>;
    state?: Maybe<TeamMembershipState>;
    role?: Maybe<TeamMembershipRole>;
};
export declare type TeamMembershipFilter = {
    memberIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare enum TeamMembershipRole {
    Regular = "REGULAR",
    Admin = "ADMIN"
}
export declare enum TeamMembershipSetting {
    Open = "OPEN",
    MemberInvite = "MEMBER_INVITE"
}
export declare enum TeamMembershipState {
    FullMember = "FULL_MEMBER",
    Alumni = "ALUMNI",
    RequestingToJoin = "REQUESTING_TO_JOIN"
}
export declare type TeamQuery = {
    __typename?: 'TeamQuery';
    teamV2?: Maybe<TeamV2>;
    teamSearchV2?: Maybe<TeamSearchResultConnectionV2>;
    team?: Maybe<Team>;
    teamSearch?: Maybe<TeamSearchResultConnection>;
};
export declare type TeamQueryTeamV2Args = {
    id: Scalars['ID'];
    siteId: Scalars['String'];
};
export declare type TeamQueryTeamSearchV2Args = {
    organizationId: Scalars['ID'];
    siteId: Scalars['String'];
    filter?: Maybe<TeamSearchFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    sortBy?: Maybe<Array<Maybe<TeamSort>>>;
};
export declare type TeamQueryTeamArgs = {
    id: Scalars['ID'];
};
export declare type TeamQueryTeamSearchArgs = {
    organizationId: Scalars['ID'];
    filter?: Maybe<TeamSearchFilter>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    sortBy?: Maybe<Array<Maybe<TeamSort>>>;
};
export declare type TeamSearchFilter = {
    query?: Maybe<Scalars['String']>;
    membership?: Maybe<TeamMembershipFilter>;
};
export declare type TeamSearchResult = {
    __typename?: 'TeamSearchResult';
    team?: Maybe<Team>;
    memberCount?: Maybe<Scalars['Int']>;
    includesYou?: Maybe<Scalars['Boolean']>;
};
export declare type TeamSearchResultConnection = {
    __typename?: 'TeamSearchResultConnection';
    edges?: Maybe<Array<Maybe<TeamSearchResultEdge>>>;
    nodes?: Maybe<Array<Maybe<TeamSearchResult>>>;
    pageInfo?: Maybe<PageInfo>;
};
export declare type TeamSearchResultConnectionV2 = {
    __typename?: 'TeamSearchResultConnectionV2';
    edges?: Maybe<Array<Maybe<TeamSearchResultEdgeV2>>>;
    nodes?: Maybe<Array<Maybe<TeamSearchResultV2>>>;
    pageInfo?: Maybe<PageInfo>;
};
export declare type TeamSearchResultEdge = {
    __typename?: 'TeamSearchResultEdge';
    node?: Maybe<TeamSearchResult>;
    cursor: Scalars['String'];
};
export declare type TeamSearchResultEdgeV2 = {
    __typename?: 'TeamSearchResultEdgeV2';
    node?: Maybe<TeamSearchResultV2>;
    cursor: Scalars['String'];
};
export declare type TeamSearchResultV2 = {
    __typename?: 'TeamSearchResultV2';
    team?: Maybe<TeamV2>;
    memberCount?: Maybe<Scalars['Int']>;
    includesYou?: Maybe<Scalars['Boolean']>;
};
export declare type TeamSort = {
    field: TeamSortField;
    order?: Maybe<TeamSortOrder>;
};
export declare enum TeamSortField {
    Id = "ID",
    DisplayName = "DISPLAY_NAME",
    State = "STATE"
}
export declare enum TeamSortOrder {
    Asc = "ASC",
    Desc = "DESC"
}
export declare enum TeamState {
    Active = "ACTIVE",
    Disbanded = "DISBANDED",
    Purged = "PURGED"
}
export declare enum TeamStateV2 {
    Active = "ACTIVE",
    Purged = "PURGED"
}
export declare type TeamV2 = Node & {
    __typename?: 'TeamV2';
    id: Scalars['ID'];
    organizationId?: Maybe<Scalars['ID']>;
    creator?: Maybe<User>;
    state?: Maybe<TeamStateV2>;
    displayName?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    membershipSetting?: Maybe<TeamMembershipSetting>;
    smallHeaderImageUrl?: Maybe<Scalars['String']>;
    largeHeaderImageUrl?: Maybe<Scalars['String']>;
    smallAvatarImageUrl?: Maybe<Scalars['String']>;
    largeAvatarImageUrl?: Maybe<Scalars['String']>;
    members?: Maybe<TeamMemberConnectionV2>;
};
export declare type TeamV2MembersArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Scalars['Int'];
    state?: Array<TeamMembershipState>;
};
export declare type TenantContext = {
    __typename?: 'TenantContext';
    cloudId?: Maybe<Scalars['ID']>;
    hostName?: Maybe<Scalars['String']>;
    cloudUrl?: Maybe<Scalars['URL']>;
    orgId?: Maybe<Scalars['ID']>;
    customDomains?: Maybe<Array<TenantContextCustomDomain>>;
};
export declare type TenantContextCustomDomain = {
    __typename?: 'TenantContextCustomDomain';
    product?: Maybe<Scalars['String']>;
    hostName?: Maybe<Scalars['String']>;
};
export declare type Testing = {
    __typename?: 'Testing';
    books?: Maybe<Array<Maybe<Book>>>;
    authors?: Maybe<Array<Maybe<Author>>>;
    echo?: Maybe<Scalars['String']>;
};
export declare type TestingBooksArgs = {
    howMany?: Maybe<Scalars['Int']>;
};
export declare type TestingAuthorsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type TestingEchoArgs = {
    message?: Maybe<Scalars['String']>;
};
export declare type TestingActivityItem = Node & {
    __typename?: 'TestingActivityItem';
    id: Scalars['ID'];
};
export declare type TestingSubscription = {
    __typename?: 'TestingSubscription';
    onTestingActivityItemUpdate?: Maybe<TestingActivityItem>;
};
export declare type TestingSubscriptionOnTestingActivityItemUpdateArgs = {
    issueId: Scalars['ID'];
};
export declare type ThirdPartyDetails = {
    __typename?: 'ThirdPartyDetails';
    name: Scalars['String'];
    link: Scalars['String'];
    purpose: Scalars['String'];
    thirdPartyCountries: Array<Maybe<Scalars['String']>>;
};
export declare type ThirdPartyInformation = {
    __typename?: 'ThirdPartyInformation';
    isEndUserDataShared: Scalars['Boolean'];
    dataSubProcessors?: Maybe<Scalars['String']>;
    thirdPartyDetails?: Maybe<Array<Maybe<ThirdPartyDetails>>>;
};
export declare type ThirdPartyRepositoryInput = {
    id: Scalars['ID'];
    webUrl?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    avatar?: Maybe<AvatarInput>;
};
export declare type ThirdPartySecurityContainer = SecurityContainer & Node & {
    __typename?: 'ThirdPartySecurityContainer';
    id: Scalars['ID'];
    name: Scalars['String'];
    url?: Maybe<Scalars['URL']>;
    icon?: Maybe<Scalars['URL']>;
    providerName?: Maybe<Scalars['String']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
};
export declare type ThirdPartySecurityWorkspace = SecurityWorkspace & Node & {
    __typename?: 'ThirdPartySecurityWorkspace';
    id: Scalars['ID'];
    name: Scalars['String'];
    url?: Maybe<Scalars['URL']>;
    icon?: Maybe<Scalars['URL']>;
    providerName?: Maybe<Scalars['String']>;
    lastUpdated?: Maybe<Scalars['DateTime']>;
};
export declare type TimeSeriesPoint = {
    __typename?: 'TimeSeriesPoint';
    id: Scalars['ID'];
    x: Scalars['DateTime'];
    y: Scalars['Int'];
};
export declare type ToggleBoardFeatureInput = {
    featureId: Scalars['String'];
    enabled: Scalars['Boolean'];
};
export declare type ToggleBoardFeatureOutput = MutationResponse & {
    __typename?: 'ToggleBoardFeatureOutput';
    featureGroups: BoardFeatureGroupConnection;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type Toolchain = {
    __typename?: 'Toolchain';
    containers?: Maybe<ToolchainContainerConnection>;
    workspaces?: Maybe<ToolchainWorkspaceConnection>;
    syncStatus?: Maybe<ToolchainSyncStatus>;
    check3LO?: Maybe<ToolchainCheck3Lo>;
};
export declare type ToolchainContainersArgs = {
    cloudId?: Maybe<Scalars['ID']>;
    providerId?: Maybe<Scalars['String']>;
    workspaceId?: Maybe<Scalars['ID']>;
    query?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ToolchainWorkspacesArgs = {
    cloudId: Scalars['ID'];
    providerId: Scalars['String'];
    query?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type ToolchainSyncStatusArgs = {
    cloudId: Scalars['ID'];
    providerId: Scalars['String'];
    jiraProjectId: Scalars['ID'];
    containerId: Scalars['ID'];
};
export declare type ToolchainCheck3LoArgs = {
    cloudId: Scalars['ID'];
    providerId: Scalars['String'];
};
export declare type ToolchainAssociateContainerInput = {
    jiraProjectId: Scalars['ID'];
    workspaceId?: Maybe<Scalars['ID']>;
    containerId: Scalars['ID'];
};
export declare type ToolchainAssociateContainersInput = {
    cloudId: Scalars['ID'];
    providerId: Scalars['ID'];
    associations: Array<ToolchainAssociateContainerInput>;
};
export declare type ToolchainAssociateContainersPayload = Payload & {
    __typename?: 'ToolchainAssociateContainersPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    containers?: Maybe<Array<ToolchainAssociatedContainer>>;
};
export declare type ToolchainAssociatedContainer = DevOpsDocument | DevOpsRepository;
export declare type ToolchainCheck3Lo = {
    __typename?: 'ToolchainCheck3LO';
    authorized: Scalars['Boolean'];
};
export declare type ToolchainContainer = Node & {
    __typename?: 'ToolchainContainer';
    id: Scalars['ID'];
    name: Scalars['String'];
    workspace?: Maybe<ToolchainContainerWorkspaceDetails>;
};
export declare type ToolchainContainerConnection = {
    __typename?: 'ToolchainContainerConnection';
    edges?: Maybe<Array<Maybe<ToolchainContainerEdge>>>;
    nodes?: Maybe<Array<Maybe<ToolchainContainer>>>;
    pageInfo: PageInfo;
};
export declare type ToolchainContainerEdge = {
    __typename?: 'ToolchainContainerEdge';
    cursor: Scalars['String'];
    node?: Maybe<ToolchainContainer>;
};
export declare type ToolchainContainerWorkspaceDetails = {
    __typename?: 'ToolchainContainerWorkspaceDetails';
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type ToolchainCreateContainerInput = {
    cloudId: Scalars['ID'];
    providerId?: Maybe<Scalars['ID']>;
    workspaceId?: Maybe<Scalars['ID']>;
    name: Scalars['String'];
    type?: Maybe<Scalars['String']>;
};
export declare type ToolchainCreateContainerPayload = Payload & {
    __typename?: 'ToolchainCreateContainerPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    createdContainer?: Maybe<ToolchainContainer>;
};
export declare type ToolchainDisassociateContainerInput = {
    jiraProjectId: Scalars['ID'];
    containerId: Scalars['ID'];
};
export declare type ToolchainDisassociateContainersInput = {
    cloudId: Scalars['ID'];
    providerId: Scalars['ID'];
    disassociations: Array<ToolchainDisassociateContainerInput>;
};
export declare type ToolchainDisassociateContainersPayload = Payload & {
    __typename?: 'ToolchainDisassociateContainersPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type ToolchainMutation = {
    __typename?: 'ToolchainMutation';
    associateContainers?: Maybe<ToolchainAssociateContainersPayload>;
    disassociateContainers?: Maybe<ToolchainDisassociateContainersPayload>;
    createContainer?: Maybe<ToolchainCreateContainerPayload>;
};
export declare type ToolchainMutationAssociateContainersArgs = {
    input: ToolchainAssociateContainersInput;
};
export declare type ToolchainMutationDisassociateContainersArgs = {
    input: ToolchainDisassociateContainersInput;
};
export declare type ToolchainMutationCreateContainerArgs = {
    input: ToolchainCreateContainerInput;
};
export declare enum ToolchainSyncState {
    InProgress = "IN_PROGRESS",
    Complete = "COMPLETE",
    Error = "ERROR"
}
export declare type ToolchainSyncStatus = {
    __typename?: 'ToolchainSyncStatus';
    state: ToolchainSyncState;
    errorKey?: Maybe<Scalars['String']>;
};
export declare type ToolchainWorkspace = Node & {
    __typename?: 'ToolchainWorkspace';
    id: Scalars['ID'];
    name: Scalars['String'];
    canCreateContainer: Scalars['Boolean'];
};
export declare type ToolchainWorkspaceConnection = {
    __typename?: 'ToolchainWorkspaceConnection';
    edges?: Maybe<Array<Maybe<ToolchainWorkspaceEdge>>>;
    nodes?: Maybe<Array<Maybe<ToolchainWorkspace>>>;
    pageInfo: PageInfo;
};
export declare type ToolchainWorkspaceEdge = {
    __typename?: 'ToolchainWorkspaceEdge';
    cursor: Scalars['String'];
    node?: Maybe<ToolchainWorkspace>;
};
export declare type TownsquareComment = Node & {
    __typename?: 'TownsquareComment';
    creator?: Maybe<User>;
    id: Scalars['ID'];
    url?: Maybe<Scalars['String']>;
    uuid?: Maybe<Scalars['String']>;
    container?: Maybe<TownsquareCommentContainer>;
};
export declare type TownsquareCommentConnection = {
    __typename?: 'TownsquareCommentConnection';
    edges?: Maybe<Array<Maybe<TownsquareCommentEdge>>>;
    pageInfo: PageInfo;
};
export declare type TownsquareCommentContainer = TownsquareGoal | TownsquareProject;
export declare type TownsquareCommentEdge = {
    __typename?: 'TownsquareCommentEdge';
    cursor: Scalars['String'];
    node?: Maybe<TownsquareComment>;
};
export declare type TownsquareGoal = Node & {
    __typename?: 'TownsquareGoal';
    archived: Scalars['Boolean'];
    iconData?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    key: Scalars['String'];
    name: Scalars['String'];
    uuid: Scalars['String'];
    owner?: Maybe<User>;
    url?: Maybe<Scalars['String']>;
    dueDate?: Maybe<TownsquareTargetDate>;
    state?: Maybe<TownsquareGoalState>;
};
export declare type TownsquareGoalConnection = {
    __typename?: 'TownsquareGoalConnection';
    edges?: Maybe<Array<Maybe<TownsquareGoalEdge>>>;
    pageInfo: PageInfo;
};
export declare type TownsquareGoalEdge = {
    __typename?: 'TownsquareGoalEdge';
    cursor: Scalars['String'];
    node?: Maybe<TownsquareGoal>;
};
export declare enum TownsquareGoalSortEnum {
    CreationDateAsc = "CREATION_DATE_ASC",
    CreationDateDesc = "CREATION_DATE_DESC",
    HierarchyAsc = "HIERARCHY_ASC",
    HierarchyDesc = "HIERARCHY_DESC",
    HierarchyLevelAsc = "HIERARCHY_LEVEL_ASC",
    HierarchyLevelDesc = "HIERARCHY_LEVEL_DESC",
    IdAsc = "ID_ASC",
    IdDesc = "ID_DESC",
    LatestUpdateDateAsc = "LATEST_UPDATE_DATE_ASC",
    LatestUpdateDateDesc = "LATEST_UPDATE_DATE_DESC",
    MemberCountAsc = "MEMBER_COUNT_ASC",
    MemberCountDesc = "MEMBER_COUNT_DESC",
    NameAsc = "NAME_ASC",
    NameDesc = "NAME_DESC",
    ProjectCountAsc = "PROJECT_COUNT_ASC",
    ProjectCountDesc = "PROJECT_COUNT_DESC",
    ScoreAsc = "SCORE_ASC",
    ScoreDesc = "SCORE_DESC",
    TargetDateAsc = "TARGET_DATE_ASC",
    TargetDateDesc = "TARGET_DATE_DESC",
    WatchingAsc = "WATCHING_ASC",
    WatchingDesc = "WATCHING_DESC"
}
export declare type TownsquareGoalState = {
    __typename?: 'TownsquareGoalState';
    label?: Maybe<Scalars['String']>;
    score?: Maybe<Scalars['Float']>;
    value?: Maybe<TownsquareGoalStateValue>;
};
export declare enum TownsquareGoalStateValue {
    Archived = "archived",
    AtRisk = "at_risk",
    Done = "done",
    OffTrack = "off_track",
    OnTrack = "on_track",
    Paused = "paused",
    Pending = "pending"
}
export declare type TownsquareProject = Node & {
    __typename?: 'TownsquareProject';
    archived: Scalars['Boolean'];
    iconData?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    key: Scalars['String'];
    name: Scalars['String'];
    uuid: Scalars['String'];
    owner?: Maybe<User>;
    url?: Maybe<Scalars['String']>;
    dueDate?: Maybe<TownsquareTargetDate>;
    state?: Maybe<TownsquareProjectState>;
};
export declare type TownsquareProjectConnection = {
    __typename?: 'TownsquareProjectConnection';
    edges?: Maybe<Array<Maybe<TownsquareProjectEdge>>>;
    pageInfo: PageInfo;
};
export declare type TownsquareProjectEdge = {
    __typename?: 'TownsquareProjectEdge';
    cursor: Scalars['String'];
    node?: Maybe<TownsquareProject>;
};
export declare enum TownsquareProjectSortEnum {
    CreationDateAsc = "CREATION_DATE_ASC",
    CreationDateDesc = "CREATION_DATE_DESC",
    IdAsc = "ID_ASC",
    IdDesc = "ID_DESC",
    LatestUpdateDateAsc = "LATEST_UPDATE_DATE_ASC",
    LatestUpdateDateDesc = "LATEST_UPDATE_DATE_DESC",
    NameAsc = "NAME_ASC",
    NameDesc = "NAME_DESC",
    StartDateAsc = "START_DATE_ASC",
    StartDateDesc = "START_DATE_DESC",
    StatusAsc = "STATUS_ASC",
    StatusDesc = "STATUS_DESC",
    TargetDateAsc = "TARGET_DATE_ASC",
    TargetDateDesc = "TARGET_DATE_DESC",
    WatchingAsc = "WATCHING_ASC",
    WatchingDesc = "WATCHING_DESC"
}
export declare type TownsquareProjectState = {
    __typename?: 'TownsquareProjectState';
    label?: Maybe<Scalars['String']>;
    value?: Maybe<TownsquareProjectStateValue>;
};
export declare enum TownsquareProjectStateValue {
    Archived = "archived",
    AtRisk = "at_risk",
    Done = "done",
    OffTrack = "off_track",
    OnTrack = "on_track",
    Paused = "paused",
    Pending = "pending"
}
export declare type TownsquareQueryApi = {
    __typename?: 'TownsquareQueryApi';
    project?: Maybe<TownsquareProject>;
    goal?: Maybe<TownsquareGoal>;
    projectsByAri?: Maybe<Array<Maybe<TownsquareProject>>>;
    goalsByAri?: Maybe<Array<Maybe<TownsquareGoal>>>;
    commentsByAri?: Maybe<Array<Maybe<TownsquareComment>>>;
    projectSearch?: Maybe<TownsquareProjectConnection>;
    goalSearch?: Maybe<TownsquareGoalConnection>;
    projectTql?: Maybe<TownsquareProjectConnection>;
    goalTql?: Maybe<TownsquareGoalConnection>;
};
export declare type TownsquareQueryApiProjectArgs = {
    ari: Scalars['String'];
};
export declare type TownsquareQueryApiGoalArgs = {
    ari: Scalars['String'];
};
export declare type TownsquareQueryApiProjectsByAriArgs = {
    aris?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type TownsquareQueryApiGoalsByAriArgs = {
    aris?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type TownsquareQueryApiCommentsByAriArgs = {
    aris?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type TownsquareQueryApiProjectSearchArgs = {
    after?: Maybe<Scalars['String']>;
    cloudId: Scalars['String'];
    first?: Maybe<Scalars['Int']>;
    phase?: Maybe<Array<Maybe<Scalars['String']>>>;
    q?: Maybe<Scalars['String']>;
    sort?: Maybe<Array<Maybe<TownsquareProjectSortEnum>>>;
};
export declare type TownsquareQueryApiGoalSearchArgs = {
    after?: Maybe<Scalars['String']>;
    cloudId: Scalars['String'];
    first?: Maybe<Scalars['Int']>;
    q?: Maybe<Scalars['String']>;
    sort?: Maybe<Array<Maybe<TownsquareGoalSortEnum>>>;
};
export declare type TownsquareQueryApiProjectTqlArgs = {
    q: Scalars['String'];
    cloudId: Scalars['String'];
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    sort?: Maybe<Array<Maybe<TownsquareProjectSortEnum>>>;
};
export declare type TownsquareQueryApiGoalTqlArgs = {
    q: Scalars['String'];
    cloudId: Scalars['String'];
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    sort?: Maybe<Array<Maybe<TownsquareGoalSortEnum>>>;
};
export declare type TownsquareTag = Node & {
    __typename?: 'TownsquareTag';
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type TownsquareTagConnection = {
    __typename?: 'TownsquareTagConnection';
    count: Scalars['Int'];
    edges?: Maybe<Array<Maybe<TownsquareTagEdge>>>;
    pageInfo: PageInfo;
};
export declare type TownsquareTagEdge = {
    __typename?: 'TownsquareTagEdge';
    cursor: Scalars['String'];
    node?: Maybe<TownsquareTag>;
};
export declare type TownsquareTargetDate = {
    __typename?: 'TownsquareTargetDate';
    confidence?: Maybe<TownsquareTargetDateType>;
    dateRange?: Maybe<TownsquareTargetDateRange>;
    label?: Maybe<Scalars['String']>;
};
export declare type TownsquareTargetDateRange = {
    __typename?: 'TownsquareTargetDateRange';
    end?: Maybe<Scalars['DateTime']>;
    start?: Maybe<Scalars['DateTime']>;
};
export declare enum TownsquareTargetDateType {
    Day = "DAY",
    Month = "MONTH",
    Quarter = "QUARTER"
}
export declare type TownsquareTeam = Node & {
    __typename?: 'TownsquareTeam';
    avatarUrl?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type TransitionFilter = {
    from: Scalars['String'];
    to: Scalars['String'];
};
export declare type TrelloAddHelloMutationResponse = Payload & {
    __typename?: 'TrelloAddHelloMutationResponse';
    errors?: Maybe<Array<MutationError>>;
    hello: Scalars['String'];
    success: Scalars['Boolean'];
};
export declare type TrelloAttachment = {
    __typename?: 'TrelloAttachment';
    bytes?: Maybe<Scalars['Float']>;
    date?: Maybe<Scalars['DateTime']>;
    edgeColor?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    isUpload?: Maybe<Scalars['Boolean']>;
    mimeType?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    objectId: Scalars['ID'];
    position?: Maybe<Scalars['Float']>;
    url?: Maybe<Scalars['URL']>;
};
export declare type TrelloAttachmentConnection = {
    __typename?: 'TrelloAttachmentConnection';
    edges?: Maybe<Array<TrelloAttachmentEdge>>;
    nodes?: Maybe<Array<TrelloAttachment>>;
    pageInfo: PageInfo;
};
export declare type TrelloAttachmentEdge = {
    __typename?: 'TrelloAttachmentEdge';
    cursor: Scalars['String'];
    node: TrelloAttachment;
};
export declare type TrelloBoard = Node & {
    __typename?: 'TrelloBoard';
    closed: Scalars['Boolean'];
    galleryInfo?: Maybe<TrelloTemplateGalleryItemInfo>;
    id: Scalars['ID'];
    lastActivityAt?: Maybe<Scalars['DateTime']>;
    limits?: Maybe<TrelloBoardLimits>;
    lists?: Maybe<TrelloListConnection>;
    name: Scalars['String'];
    objectId: Scalars['ID'];
    prefs: TrelloBoardPrefs;
    shortLink: Scalars['TrelloShortLink'];
    url?: Maybe<Scalars['URL']>;
    viewer?: Maybe<TrelloBoardViewer>;
    workspace?: Maybe<TrelloWorkspace>;
};
export declare type TrelloBoardListsArgs = {
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<TrelloListFilterInput>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloBoardAttachmentsLimits = {
    __typename?: 'TrelloBoardAttachmentsLimits';
    perBoard?: Maybe<TrelloLimitProps>;
    perCard?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardBackground = {
    __typename?: 'TrelloBoardBackground';
    bottomColor?: Maybe<Scalars['String']>;
    brightness?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['String']>;
    image?: Maybe<Scalars['String']>;
    imageScaled?: Maybe<Array<TrelloScaleProps>>;
    tile?: Maybe<Scalars['Boolean']>;
    topColor?: Maybe<Scalars['String']>;
};
export declare type TrelloBoardBackgroundUpdatedDeltas = {
    __typename?: 'TrelloBoardBackgroundUpdatedDeltas';
    bottomColor?: Maybe<Scalars['Boolean']>;
    brightness?: Maybe<Scalars['Boolean']>;
    color?: Maybe<Scalars['Boolean']>;
    image?: Maybe<Scalars['Boolean']>;
    imageScaled?: Maybe<Scalars['Boolean']>;
    title?: Maybe<Scalars['Boolean']>;
    topColor?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloBoardBoardsLimits = {
    __typename?: 'TrelloBoardBoardsLimits';
    totalAccessRequestsPerBoard?: Maybe<TrelloLimitProps>;
    totalMembersPerBoard?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardCardsLimits = {
    __typename?: 'TrelloBoardCardsLimits';
    openPerBoard?: Maybe<TrelloLimitProps>;
    openPerList?: Maybe<TrelloLimitProps>;
    totalPerBoard?: Maybe<TrelloLimitProps>;
    totalPerList?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardCheckItemsLimits = {
    __typename?: 'TrelloBoardCheckItemsLimits';
    perChecklist?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardChecklistsLimits = {
    __typename?: 'TrelloBoardChecklistsLimits';
    perBoard?: Maybe<TrelloLimitProps>;
    perCard?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardCustomFieldOptionsLimits = {
    __typename?: 'TrelloBoardCustomFieldOptionsLimits';
    perField?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardCustomFieldsLimits = {
    __typename?: 'TrelloBoardCustomFieldsLimits';
    perBoard?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardEdge = {
    __typename?: 'TrelloBoardEdge';
    cursor: Scalars['String'];
    node: TrelloBoard;
};
export declare type TrelloBoardLabelsLimits = {
    __typename?: 'TrelloBoardLabelsLimits';
    perBoard?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardLimits = {
    __typename?: 'TrelloBoardLimits';
    attachments?: Maybe<TrelloBoardAttachmentsLimits>;
    boards?: Maybe<TrelloBoardBoardsLimits>;
    cards?: Maybe<TrelloBoardCardsLimits>;
    checkItems?: Maybe<TrelloBoardCheckItemsLimits>;
    checklists?: Maybe<TrelloBoardChecklistsLimits>;
    customFieldOptions?: Maybe<TrelloBoardCustomFieldOptionsLimits>;
    customFields?: Maybe<TrelloBoardCustomFieldsLimits>;
    labels?: Maybe<TrelloBoardLabelsLimits>;
    lists?: Maybe<TrelloBoardListsLimits>;
    reactions?: Maybe<TrelloBoardReactionsLimits>;
    stickers?: Maybe<TrelloBoardStickersLimits>;
};
export declare type TrelloBoardListsLimits = {
    __typename?: 'TrelloBoardListsLimits';
    openPerBoard?: Maybe<TrelloLimitProps>;
    totalPerBoard?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardPrefs = {
    __typename?: 'TrelloBoardPrefs';
    background?: Maybe<TrelloBoardBackground>;
    canInvite?: Maybe<Scalars['Boolean']>;
    hideVotes?: Maybe<Scalars['Boolean']>;
    isTemplate?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloBoardPrefsUpdatedDeltas = {
    __typename?: 'TrelloBoardPrefsUpdatedDeltas';
    background?: Maybe<TrelloBoardBackgroundUpdatedDeltas>;
    canInvite?: Maybe<Scalars['Boolean']>;
    hideVotes?: Maybe<Scalars['Boolean']>;
    isTemplate?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloBoardReactionsLimits = {
    __typename?: 'TrelloBoardReactionsLimits';
    perAction?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardStickersLimits = {
    __typename?: 'TrelloBoardStickersLimits';
    perCard?: Maybe<TrelloLimitProps>;
};
export declare type TrelloBoardUpdated = {
    __typename?: 'TrelloBoardUpdated';
    _deltas?: Maybe<TrelloBoardUpdatedDeltas>;
    closed?: Maybe<Scalars['Boolean']>;
    lists?: Maybe<TrelloListUpdatedConnection>;
    name?: Maybe<Scalars['String']>;
    prefs?: Maybe<TrelloBoardPrefs>;
};
export declare type TrelloBoardUpdatedDeltas = {
    __typename?: 'TrelloBoardUpdatedDeltas';
    closed?: Maybe<Scalars['Boolean']>;
    lists?: Maybe<TrelloListUpdatedConnectionDeltas>;
    name?: Maybe<Scalars['Boolean']>;
    prefs?: Maybe<TrelloBoardPrefsUpdatedDeltas>;
};
export declare type TrelloBoardViewer = {
    __typename?: 'TrelloBoardViewer';
    lastSeenAt?: Maybe<Scalars['DateTime']>;
    starred: Scalars['Boolean'];
};
export declare type TrelloCard = Node & {
    __typename?: 'TrelloCard';
    attachments?: Maybe<TrelloAttachmentConnection>;
    badges?: Maybe<TrelloCardBadges>;
    checklists?: Maybe<TrelloChecklistConnection>;
    closed?: Maybe<Scalars['Boolean']>;
    cover?: Maybe<TrelloCardCover>;
    customFieldItems?: Maybe<TrelloCustomFieldItemConnection>;
    description?: Maybe<TrelloDescription>;
    due?: Maybe<TrelloCardDueInfo>;
    id: Scalars['ID'];
    isTemplate?: Maybe<Scalars['Boolean']>;
    labels?: Maybe<TrelloLabelConnection>;
    lastActivityAt?: Maybe<Scalars['DateTime']>;
    limits?: Maybe<TrelloCardLimits>;
    list?: Maybe<TrelloList>;
    location?: Maybe<TrelloCardLocation>;
    name?: Maybe<Scalars['String']>;
    objectId: Scalars['ID'];
    pluginData?: Maybe<TrelloPluginDataConnection>;
    position?: Maybe<Scalars['Float']>;
    role?: Maybe<TrelloCardRole>;
    shortId?: Maybe<Scalars['Int']>;
    shortLink?: Maybe<Scalars['TrelloShortLink']>;
    shortUrl?: Maybe<Scalars['URL']>;
    startedAt?: Maybe<Scalars['DateTime']>;
    stickers?: Maybe<TrelloStickerConnection>;
    url?: Maybe<Scalars['URL']>;
};
export declare type TrelloCardAttachmentsArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardChecklistsArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardCustomFieldItemsArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardLabelsArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardPluginDataArgs = {
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<TrelloPluginDataFilterInput>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardStickersArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardAttachmentsByType = {
    __typename?: 'TrelloCardAttachmentsByType';
    trello?: Maybe<TrelloCardAttachmentsCount>;
};
export declare type TrelloCardAttachmentsCount = {
    __typename?: 'TrelloCardAttachmentsCount';
    board?: Maybe<Scalars['Int']>;
    card?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardBadgeDueInfo = {
    __typename?: 'TrelloCardBadgeDueInfo';
    at?: Maybe<Scalars['DateTime']>;
    complete?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloCardBadges = {
    __typename?: 'TrelloCardBadges';
    attachments?: Maybe<Scalars['Int']>;
    attachmentsByType?: Maybe<TrelloCardAttachmentsByType>;
    checkItems?: Maybe<Scalars['Int']>;
    checkItemsChecked?: Maybe<Scalars['Int']>;
    checkItemsEarliestDue?: Maybe<Scalars['DateTime']>;
    comments?: Maybe<Scalars['Int']>;
    description?: Maybe<Scalars['Boolean']>;
    due?: Maybe<TrelloCardBadgeDueInfo>;
    location?: Maybe<Scalars['Boolean']>;
    startedAt?: Maybe<Scalars['DateTime']>;
    viewer?: Maybe<TrelloCardViewer>;
    votes?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardConnection = {
    __typename?: 'TrelloCardConnection';
    edges?: Maybe<Array<TrelloCardEdge>>;
    nodes?: Maybe<Array<TrelloCard>>;
    pageInfo: PageInfo;
};
export declare type TrelloCardCoordinates = {
    __typename?: 'TrelloCardCoordinates';
    latitude: Scalars['Float'];
    longitude: Scalars['Float'];
};
export declare type TrelloCardCover = {
    __typename?: 'TrelloCardCover';
    attachment?: Maybe<TrelloAttachment>;
    brightness?: Maybe<TrelloCardCoverBrightness>;
    color?: Maybe<TrelloCardCoverColor>;
    edgeColor?: Maybe<Scalars['String']>;
    plugin?: Maybe<TrelloPlugin>;
    previews?: Maybe<TrelloImagePreviewConnection>;
    sharedSourceUrl?: Maybe<Scalars['URL']>;
    size?: Maybe<TrelloCardCoverSize>;
    uploadedBackground?: Maybe<TrelloUploadedBackground>;
};
export declare type TrelloCardCoverPreviewsArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
};
export declare enum TrelloCardCoverBrightness {
    Dark = "DARK",
    Light = "LIGHT"
}
export declare enum TrelloCardCoverColor {
    Black = "BLACK",
    Blue = "BLUE",
    Green = "GREEN",
    Lime = "LIME",
    Orange = "ORANGE",
    Pink = "PINK",
    Purple = "PURPLE",
    Red = "RED",
    Sky = "SKY",
    Yellow = "YELLOW"
}
export declare enum TrelloCardCoverSize {
    Full = "FULL",
    Normal = "NORMAL"
}
export declare type TrelloCardCoverUpdated = {
    __typename?: 'TrelloCardCoverUpdated';
    brightness?: Maybe<TrelloCardCoverBrightness>;
    color?: Maybe<TrelloCardCoverColor>;
    edgeColor?: Maybe<Scalars['String']>;
    plugin?: Maybe<TrelloPlugin>;
    previews?: Maybe<TrelloImagePreviewUpdatedConnection>;
    sharedSourceUrl?: Maybe<Scalars['URL']>;
    size?: Maybe<TrelloCardCoverSize>;
};
export declare type TrelloCardDueInfo = {
    __typename?: 'TrelloCardDueInfo';
    at?: Maybe<Scalars['DateTime']>;
    complete?: Maybe<Scalars['Boolean']>;
    reminder?: Maybe<Scalars['Int']>;
};
export declare type TrelloCardEdge = {
    __typename?: 'TrelloCardEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<TrelloCard>;
};
export declare type TrelloCardLimit = {
    __typename?: 'TrelloCardLimit';
    perCard?: Maybe<TrelloLimitProps>;
};
export declare type TrelloCardLimits = {
    __typename?: 'TrelloCardLimits';
    attachments?: Maybe<TrelloCardLimit>;
    checklists?: Maybe<TrelloCardLimit>;
    stickers?: Maybe<TrelloCardLimit>;
};
export declare type TrelloCardLocation = {
    __typename?: 'TrelloCardLocation';
    address?: Maybe<Scalars['String']>;
    coordinates?: Maybe<TrelloCardCoordinates>;
    name?: Maybe<Scalars['String']>;
};
export declare enum TrelloCardRole {
    Board = "BOARD",
    Link = "LINK",
    Mirror = "MIRROR",
    Separator = "SEPARATOR"
}
export declare type TrelloCardUpdated = {
    __typename?: 'TrelloCardUpdated';
    closed?: Maybe<Scalars['Boolean']>;
    cover?: Maybe<TrelloCardCoverUpdated>;
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    labels?: Maybe<TrelloLabelUpdatedConnection>;
    lastActivityAt?: Maybe<Scalars['DateTime']>;
    name?: Maybe<Scalars['String']>;
    position?: Maybe<Scalars['Float']>;
};
export declare type TrelloCardUpdatedConnection = {
    __typename?: 'TrelloCardUpdatedConnection';
    nodes?: Maybe<Array<TrelloCardUpdated>>;
};
export declare type TrelloCardUpdatedConnectionDeltas = {
    __typename?: 'TrelloCardUpdatedConnectionDeltas';
    nodes: Array<TrelloCardUpdatedDeltas>;
};
export declare type TrelloCardUpdatedDeltas = {
    __typename?: 'TrelloCardUpdatedDeltas';
    closed?: Maybe<Scalars['Boolean']>;
    description?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Boolean']>;
    name?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloCardViewer = {
    __typename?: 'TrelloCardViewer';
    subscribed?: Maybe<Scalars['Boolean']>;
    voted?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloChecklist = {
    __typename?: 'TrelloChecklist';
    board?: Maybe<TrelloBoard>;
    card?: Maybe<TrelloCard>;
    name?: Maybe<Scalars['String']>;
    objectId: Scalars['ID'];
    position?: Maybe<Scalars['Float']>;
};
export declare type TrelloChecklistConnection = {
    __typename?: 'TrelloChecklistConnection';
    edges?: Maybe<Array<TrelloChecklistEdge>>;
    nodes?: Maybe<Array<TrelloChecklist>>;
    pageInfo: PageInfo;
};
export declare type TrelloChecklistEdge = {
    __typename?: 'TrelloChecklistEdge';
    cursor: Scalars['String'];
    node: TrelloChecklist;
};
export declare type TrelloCustomFieldItem = {
    __typename?: 'TrelloCustomFieldItem';
    model?: Maybe<TrelloCard>;
    objectId: Scalars['ID'];
    value?: Maybe<TrelloCustomFieldItemValueInfo>;
};
export declare type TrelloCustomFieldItemConnection = {
    __typename?: 'TrelloCustomFieldItemConnection';
    edges?: Maybe<Array<TrelloCustomFieldItemEdge>>;
    nodes?: Maybe<Array<TrelloCustomFieldItem>>;
    pageInfo: PageInfo;
};
export declare type TrelloCustomFieldItemEdge = {
    __typename?: 'TrelloCustomFieldItemEdge';
    cursor: Scalars['String'];
    node: TrelloCustomFieldItem;
};
export declare type TrelloCustomFieldItemValueInfo = {
    __typename?: 'TrelloCustomFieldItemValueInfo';
    checked?: Maybe<Scalars['Boolean']>;
    date?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['ID']>;
    number?: Maybe<Scalars['Float']>;
    text?: Maybe<Scalars['String']>;
};
export declare type TrelloDescription = {
    __typename?: 'TrelloDescription';
    customData?: Maybe<TrelloDescriptionData>;
    text?: Maybe<Scalars['String']>;
};
export declare type TrelloDescriptionCustomEmoji = {
    __typename?: 'TrelloDescriptionCustomEmoji';
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
};
export declare type TrelloDescriptionCustomEmojiConnection = {
    __typename?: 'TrelloDescriptionCustomEmojiConnection';
    edges?: Maybe<Array<TrelloDescriptionCustomEmojiEdge>>;
    nodes?: Maybe<Array<TrelloDescriptionCustomEmoji>>;
    pageInfo: PageInfo;
};
export declare type TrelloDescriptionCustomEmojiEdge = {
    __typename?: 'TrelloDescriptionCustomEmojiEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<TrelloDescriptionCustomEmoji>;
};
export declare type TrelloDescriptionData = {
    __typename?: 'TrelloDescriptionData';
    emojis?: Maybe<TrelloDescriptionCustomEmojiConnection>;
};
export declare type TrelloDescriptionDataEmojisArgs = {
    after?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloHelloInput = {
    hello: Scalars['String'];
};
export declare type TrelloImagePreview = {
    __typename?: 'TrelloImagePreview';
    bytes?: Maybe<Scalars['Float']>;
    height?: Maybe<Scalars['Float']>;
    scaled?: Maybe<Scalars['Boolean']>;
    url?: Maybe<Scalars['URL']>;
    width?: Maybe<Scalars['Float']>;
};
export declare type TrelloImagePreviewConnection = {
    __typename?: 'TrelloImagePreviewConnection';
    edges?: Maybe<Array<TrelloImagePreviewEdge>>;
    nodes?: Maybe<Array<TrelloImagePreview>>;
    pageInfo: PageInfo;
};
export declare type TrelloImagePreviewEdge = {
    __typename?: 'TrelloImagePreviewEdge';
    cursor: Scalars['String'];
    node: TrelloImagePreview;
};
export declare type TrelloImagePreviewUpdatedConnection = {
    __typename?: 'TrelloImagePreviewUpdatedConnection';
    nodes?: Maybe<Array<TrelloImagePreview>>;
};
export declare type TrelloLabel = {
    __typename?: 'TrelloLabel';
    color?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    objectId: Scalars['ID'];
    uses?: Maybe<Scalars['Int']>;
};
export declare type TrelloLabelConnection = {
    __typename?: 'TrelloLabelConnection';
    edges?: Maybe<Array<TrelloLabelEdge>>;
    nodes?: Maybe<Array<TrelloLabel>>;
    pageInfo: PageInfo;
};
export declare type TrelloLabelEdge = {
    __typename?: 'TrelloLabelEdge';
    cursor: Scalars['String'];
    node: TrelloLabel;
};
export declare type TrelloLabelUpdatedConnection = {
    __typename?: 'TrelloLabelUpdatedConnection';
    nodes: Array<TrelloLabel>;
};
export declare type TrelloLimitProps = {
    __typename?: 'TrelloLimitProps';
    count?: Maybe<Scalars['Int']>;
    disableAt: Scalars['Int'];
    status: Scalars['String'];
    warnAt: Scalars['Int'];
};
export declare type TrelloList = Node & {
    __typename?: 'TrelloList';
    board?: Maybe<TrelloBoard>;
    cards?: Maybe<TrelloCardConnection>;
    closed: Scalars['Boolean'];
    creationMethod: Scalars['String'];
    id: Scalars['ID'];
    limits?: Maybe<TrelloListLimits>;
    name: Scalars['String'];
    objectId: Scalars['ID'];
    position: Scalars['Float'];
    softLimit?: Maybe<Scalars['Int']>;
    viewer?: Maybe<TrelloListViewer>;
};
export declare type TrelloListCardsArgs = {
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<TrelloListCardFilterInput>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloListCardFilterInput = {
    closed?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloListCardLimits = {
    __typename?: 'TrelloListCardLimits';
    openPerList?: Maybe<TrelloLimitProps>;
    totalPerList?: Maybe<TrelloLimitProps>;
};
export declare type TrelloListConnection = {
    __typename?: 'TrelloListConnection';
    edges?: Maybe<Array<TrelloListEdge>>;
    nodes?: Maybe<Array<TrelloList>>;
    pageInfo: PageInfo;
};
export declare type TrelloListEdge = {
    __typename?: 'TrelloListEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<TrelloList>;
};
export declare type TrelloListFilterInput = {
    closed?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloListLimits = {
    __typename?: 'TrelloListLimits';
    cards?: Maybe<TrelloListCardLimits>;
};
export declare type TrelloListUpdated = {
    __typename?: 'TrelloListUpdated';
    cards?: Maybe<TrelloCardUpdatedConnection>;
    closed?: Maybe<Scalars['Boolean']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    position?: Maybe<Scalars['Float']>;
    softLimit?: Maybe<Scalars['Int']>;
};
export declare type TrelloListUpdatedConnection = {
    __typename?: 'TrelloListUpdatedConnection';
    nodes?: Maybe<Array<TrelloListUpdated>>;
};
export declare type TrelloListUpdatedConnectionDeltas = {
    __typename?: 'TrelloListUpdatedConnectionDeltas';
    nodes?: Maybe<Array<TrelloListUpdatedDeltas>>;
};
export declare type TrelloListUpdatedDeltas = {
    __typename?: 'TrelloListUpdatedDeltas';
    cards?: Maybe<TrelloCardUpdatedConnectionDeltas>;
    closed?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Boolean']>;
    name?: Maybe<Scalars['Boolean']>;
    position?: Maybe<Scalars['Boolean']>;
    softLimit?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloListViewer = {
    __typename?: 'TrelloListViewer';
    subscribed?: Maybe<Scalars['Boolean']>;
};
export declare type TrelloMutationApi = {
    __typename?: 'TrelloMutationApi';
    addHello?: Maybe<TrelloAddHelloMutationResponse>;
};
export declare type TrelloMutationApiAddHelloArgs = {
    input: TrelloHelloInput;
};
export declare type TrelloPlugin = {
    __typename?: 'TrelloPlugin';
    objectId?: Maybe<Scalars['ID']>;
};
export declare type TrelloPluginData = {
    __typename?: 'TrelloPluginData';
    access?: Maybe<TrelloPluginDataAccess>;
    objectId: Scalars['ID'];
    plugin?: Maybe<TrelloPlugin>;
    scope?: Maybe<TrelloPluginDataScope>;
    value?: Maybe<Scalars['String']>;
};
export declare enum TrelloPluginDataAccess {
    Private = "PRIVATE",
    Shared = "SHARED"
}
export declare type TrelloPluginDataConnection = {
    __typename?: 'TrelloPluginDataConnection';
    edges?: Maybe<Array<TrelloPluginDataEdge>>;
    nodes?: Maybe<Array<TrelloPluginData>>;
    pageInfo: PageInfo;
};
export declare type TrelloPluginDataEdge = {
    __typename?: 'TrelloPluginDataEdge';
    cursor: Scalars['String'];
    node: TrelloPluginData;
};
export declare type TrelloPluginDataFilterInput = {
    access?: Maybe<Scalars['String']>;
    plugins?: Maybe<Array<Scalars['ID']>>;
};
export declare enum TrelloPluginDataScope {
    Board = "BOARD",
    Card = "CARD",
    Organization = "ORGANIZATION"
}
export declare type TrelloQueryApi = {
    __typename?: 'TrelloQueryApi';
    board?: Maybe<TrelloBoard>;
    card?: Maybe<TrelloCard>;
    echo?: Maybe<Scalars['String']>;
    list?: Maybe<TrelloList>;
    recentBoardsByIds?: Maybe<Array<Maybe<TrelloBoard>>>;
    templateCategories?: Maybe<Array<TrelloTemplateGalleryCategory>>;
    templateGallery?: Maybe<TrelloTemplateGalleryConnection>;
    templateLanguages?: Maybe<Array<TrelloTemplateGalleryLanguage>>;
    myRecentCards?: Maybe<TrelloRecentCardConnection>;
};
export declare type TrelloQueryApiBoardArgs = {
    id: Scalars['ID'];
};
export declare type TrelloQueryApiCardArgs = {
    id: Scalars['ID'];
};
export declare type TrelloQueryApiListArgs = {
    id: Scalars['ID'];
};
export declare type TrelloQueryApiRecentBoardsByIdsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type TrelloQueryApiTemplateGalleryArgs = {
    after?: Maybe<Scalars['String']>;
    filter?: Maybe<TrelloTemplateGalleryFilterInput>;
    first?: Maybe<Scalars['Int']>;
};
export declare type TrelloQueryApiMyRecentCardsArgs = {
    accountId?: Maybe<Scalars['ID']>;
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type TrelloRecentCard = Node & {
    __typename?: 'TrelloRecentCard';
    id: Scalars['ID'];
    closed?: Maybe<Scalars['Boolean']>;
    dueComplete?: Maybe<Scalars['Boolean']>;
    dateLastActivity?: Maybe<Scalars['DateTime']>;
    description?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['URL']>;
    isTemplate?: Maybe<Scalars['Boolean']>;
    board?: Maybe<TrelloBoard>;
    list?: Maybe<TrelloList>;
    card?: Maybe<TrelloCard>;
    listAri?: Maybe<Scalars['ID']>;
    cardAri?: Maybe<Scalars['ID']>;
    boardAri?: Maybe<Scalars['ID']>;
};
export declare type TrelloRecentCardConnection = {
    __typename?: 'TrelloRecentCardConnection';
    edges?: Maybe<Array<TrelloRecentCardEdge>>;
    nodes?: Maybe<Array<TrelloRecentCard>>;
    pageInfo: PageInfo;
};
export declare type TrelloRecentCardEdge = {
    __typename?: 'TrelloRecentCardEdge';
    cursor?: Maybe<Scalars['String']>;
    node?: Maybe<TrelloRecentCard>;
};
export declare type TrelloScaleProps = {
    __typename?: 'TrelloScaleProps';
    height?: Maybe<Scalars['Int']>;
    url?: Maybe<Scalars['String']>;
    width?: Maybe<Scalars['Int']>;
};
export declare type TrelloSticker = {
    __typename?: 'TrelloSticker';
    image?: Maybe<Scalars['String']>;
    left?: Maybe<Scalars['Float']>;
    objectId: Scalars['ID'];
    rotate?: Maybe<Scalars['Float']>;
    top?: Maybe<Scalars['Float']>;
    url?: Maybe<Scalars['URL']>;
    zIndex?: Maybe<Scalars['Int']>;
};
export declare type TrelloStickerConnection = {
    __typename?: 'TrelloStickerConnection';
    edges?: Maybe<Array<TrelloStickerEdge>>;
    nodes?: Maybe<Array<TrelloSticker>>;
    pageInfo: PageInfo;
};
export declare type TrelloStickerEdge = {
    __typename?: 'TrelloStickerEdge';
    cursor: Scalars['String'];
    node: TrelloSticker;
};
export declare type TrelloSubscriptionApi = {
    __typename?: 'TrelloSubscriptionApi';
    onBoardUpdated?: Maybe<TrelloBoardUpdated>;
};
export declare type TrelloSubscriptionApiOnBoardUpdatedArgs = {
    id: Scalars['ID'];
};
export declare type TrelloTemplateGalleryCategory = {
    __typename?: 'TrelloTemplateGalleryCategory';
    key: Scalars['String'];
};
export declare type TrelloTemplateGalleryConnection = {
    __typename?: 'TrelloTemplateGalleryConnection';
    edges: Array<TrelloBoardEdge>;
    nodes: Array<TrelloBoard>;
    pageInfo: PageInfo;
};
export declare type TrelloTemplateGalleryFilterInput = {
    category?: Maybe<Scalars['String']>;
    language: Scalars['String'];
    supportedPowerUps?: Maybe<Array<Scalars['ID']>>;
};
export declare type TrelloTemplateGalleryItemInfo = {
    __typename?: 'TrelloTemplateGalleryItemInfo';
    avatarShape?: Maybe<Scalars['String']>;
    avatarUrl?: Maybe<Scalars['String']>;
    blurb?: Maybe<Scalars['String']>;
    byline?: Maybe<Scalars['String']>;
    category: TrelloTemplateGalleryCategory;
    id?: Maybe<Scalars['ID']>;
    language: TrelloTemplateGalleryLanguage;
    stats?: Maybe<TrelloTemplateGalleryItemStats>;
};
export declare type TrelloTemplateGalleryItemStats = {
    __typename?: 'TrelloTemplateGalleryItemStats';
    copyCount: Scalars['Int'];
    viewCount: Scalars['Int'];
};
export declare type TrelloTemplateGalleryLanguage = {
    __typename?: 'TrelloTemplateGalleryLanguage';
    description: Scalars['String'];
    enabled: Scalars['Boolean'];
    language: Scalars['String'];
    locale: Scalars['String'];
    localizedDescription: Scalars['String'];
};
export declare type TrelloUploadedBackground = {
    __typename?: 'TrelloUploadedBackground';
    objectId: Scalars['ID'];
};
export declare type TrelloWorkspace = Node & {
    __typename?: 'TrelloWorkspace';
    displayName: Scalars['String'];
    id: Scalars['ID'];
    objectId: Scalars['ID'];
};
export declare type TunnelDefinitionsInput = {
    faasTunnelUrl?: Maybe<Scalars['URL']>;
    customUI?: Maybe<Array<Maybe<CustomUiTunnelDefinitionInput>>>;
};
export declare type UnarchivePolarisInsightsPayload = Payload & {
    __typename?: 'UnarchivePolarisInsightsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UnassignIssueParentInput = {
    boardId: Scalars['ID'];
    issueIds: Array<Scalars['ID']>;
};
export declare type UnassignIssueParentOutput = MutationResponse & {
    __typename?: 'UnassignIssueParentOutput';
    boardScope?: Maybe<BoardScope>;
    statusCode: Scalars['Int'];
    success: Scalars['Boolean'];
    message: Scalars['String'];
    clientMutationId?: Maybe<Scalars['ID']>;
};
export declare type UnlinkExternalSourceInput = {
    cloudId: Scalars['ID'];
    ecosystemAppId: Scalars['ID'];
    externalSource: Scalars['String'];
};
export declare type UnlinkExternalSourcePayload = Payload & {
    __typename?: 'UnlinkExternalSourcePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UnwatchMarketplaceAppPayload = Payload & {
    __typename?: 'UnwatchMarketplaceAppPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdateAppDetailsInput = {
    appId: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    privacyPolicy?: Maybe<Scalars['String']>;
    contactLink?: Maybe<Scalars['String']>;
    avatarFileId?: Maybe<Scalars['String']>;
};
export declare type UpdateAppDetailsResponse = Payload & {
    __typename?: 'UpdateAppDetailsResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    app?: Maybe<App>;
};
export declare type UpdateAppHostServiceScopesInput = {
    appId: Scalars['ID'];
    environmentKey: Scalars['String'];
    serviceId: Scalars['ID'];
    scopes?: Maybe<Array<Scalars['String']>>;
};
export declare type UpdateAppHostServiceScopesResponsePayload = Payload & {
    __typename?: 'UpdateAppHostServiceScopesResponsePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    app?: Maybe<App>;
    appEnvironmentVersion?: Maybe<AppEnvironmentVersion>;
};
export declare type UpdateAppOwnershipInput = {
    appAri: Scalars['String'];
    newOwner: Scalars['String'];
};
export declare type UpdateAppOwnershipResponsePayload = Payload & {
    __typename?: 'UpdateAppOwnershipResponsePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdateAtlassianOAuthClientInput = {
    clientID: Scalars['ID'];
    callbacks?: Maybe<Array<Scalars['String']>>;
    refreshToken?: Maybe<RefreshTokenInput>;
};
export declare type UpdateAtlassianOAuthClientResponse = Payload & {
    __typename?: 'UpdateAtlassianOAuthClientResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdateCompassComponentDataManagerMetadataInput = {
    componentId: Scalars['ID'];
    externalSourceURL?: Maybe<Scalars['URL']>;
    lastSyncEvent?: Maybe<ComponentSyncEventInput>;
};
export declare type UpdateCompassComponentDataManagerMetadataPayload = Payload & {
    __typename?: 'UpdateCompassComponentDataManagerMetadataPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type UpdateCompassComponentInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    ownerId?: Maybe<Scalars['ID']>;
    fields?: Maybe<Array<UpdateCompassFieldInput>>;
    customFields?: Maybe<Array<CompassCustomFieldInput>>;
};
export declare type UpdateCompassComponentLinkInput = {
    componentId: Scalars['ID'];
    link: UpdateCompassLinkInput;
};
export declare type UpdateCompassComponentLinkPayload = Payload & {
    __typename?: 'UpdateCompassComponentLinkPayload';
    updatedComponentLink?: Maybe<CompassLink>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type UpdateCompassComponentPayload = Payload & {
    __typename?: 'UpdateCompassComponentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type UpdateCompassComponentTypeInput = {
    id: Scalars['ID'];
    type?: Maybe<CompassComponentType>;
    typeId?: Maybe<Scalars['ID']>;
};
export declare type UpdateCompassComponentTypePayload = Payload & {
    __typename?: 'UpdateCompassComponentTypePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    componentDetails?: Maybe<CompassComponent>;
};
export declare type UpdateCompassFieldInput = {
    definition: Scalars['ID'];
    value: CompassFieldValueInput;
};
export declare type UpdateCompassHasDescriptionScorecardCriteriaInput = {
    id: Scalars['ID'];
    weight?: Maybe<Scalars['Int']>;
};
export declare type UpdateCompassHasFieldScorecardCriteriaInput = {
    id: Scalars['ID'];
    weight?: Maybe<Scalars['Int']>;
    fieldDefinitionId?: Maybe<Scalars['ID']>;
};
export declare type UpdateCompassHasLinkScorecardCriteriaInput = {
    id: Scalars['ID'];
    weight?: Maybe<Scalars['Int']>;
    linkType?: Maybe<CompassLinkType>;
    textComparator?: Maybe<CompassCriteriaTextComparatorOptions>;
    textComparatorValue?: Maybe<Scalars['String']>;
};
export declare type UpdateCompassHasMetricValueCriteriaInput = {
    id: Scalars['ID'];
    weight?: Maybe<Scalars['Int']>;
    metricDefinitionId?: Maybe<Scalars['ID']>;
    comparatorValue?: Maybe<Scalars['Float']>;
    comparator?: Maybe<CompassCriteriaNumberComparatorOptions>;
};
export declare type UpdateCompassHasOwnerScorecardCriteriaInput = {
    id: Scalars['ID'];
    weight?: Maybe<Scalars['Int']>;
};
export declare type UpdateCompassLinkInput = {
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    type?: Maybe<CompassLinkType>;
    url?: Maybe<Scalars['URL']>;
};
export declare type UpdateCompassScorecardCriteriaInput = {
    hasLink?: Maybe<UpdateCompassHasLinkScorecardCriteriaInput>;
    hasField?: Maybe<UpdateCompassHasFieldScorecardCriteriaInput>;
    hasDescription?: Maybe<UpdateCompassHasDescriptionScorecardCriteriaInput>;
    hasOwner?: Maybe<UpdateCompassHasOwnerScorecardCriteriaInput>;
    hasMetricValue?: Maybe<UpdateCompassHasMetricValueCriteriaInput>;
    hasCustomTextValue?: Maybe<CompassUpdateHasCustomTextFieldScorecardCriteriaInput>;
    hasCustomBooleanValue?: Maybe<CompassUpdateHasCustomBooleanFieldScorecardCriteriaInput>;
    hasCustomNumberValue?: Maybe<CompassUpdateHasCustomNumberFieldScorecardCriteriaInput>;
};
export declare type UpdateCompassScorecardCriteriasInput = {
    criterias: Array<UpdateCompassScorecardCriteriaInput>;
};
export declare type UpdateCompassScorecardCriteriasPayload = Payload & {
    __typename?: 'UpdateCompassScorecardCriteriasPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    scorecard?: Maybe<CompassScorecard>;
};
export declare type UpdateCompassScorecardInput = {
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    ownerId?: Maybe<Scalars['ID']>;
    componentTypeIds?: Maybe<Array<Scalars['ID']>>;
    importance?: Maybe<CompassScorecardImportance>;
    componentLabelNames?: Maybe<Array<Scalars['String']>>;
    componentTierValues?: Maybe<Array<Scalars['String']>>;
    createCriteria?: Maybe<Array<CreateCompassScorecardCriteriaInput>>;
    updateCriteria?: Maybe<Array<UpdateCompassScorecardCriteriaInput>>;
    deleteCriteria?: Maybe<Array<DeleteCompassScorecardCriteriaInput>>;
};
export declare type UpdateCompassScorecardPayload = Payload & {
    __typename?: 'UpdateCompassScorecardPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    scorecardDetails?: Maybe<CompassScorecard>;
};
export declare type UpdateCustomFilterInput = {
    boardId: Scalars['ID'];
    id: Scalars['ID'];
    name: Scalars['String'];
    jql: Scalars['String'];
    description?: Maybe<Scalars['String']>;
};
export declare type UpdateDevOpsContainerRelationshipEntityPropertiesInput = {
    id: Scalars['ID'];
    properties: Array<DevOpsContainerRelationshipEntityPropertyInput>;
};
export declare type UpdateDevOpsContainerRelationshipEntityPropertiesPayload = Payload & {
    __typename?: 'UpdateDevOpsContainerRelationshipEntityPropertiesPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type UpdateDevOpsContainerRelationshipEntityPropertiesPayloadPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type UpdateDevOpsServiceAndJiraProjectRelationshipInput = {
    id: Scalars['ID'];
    revision: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
};
export declare type UpdateDevOpsServiceAndJiraProjectRelationshipPayload = Payload & {
    __typename?: 'UpdateDevOpsServiceAndJiraProjectRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    serviceAndJiraProjectRelationship?: Maybe<DevOpsServiceAndJiraProjectRelationship>;
};
export declare type UpdateDevOpsServiceAndOpsgenieTeamRelationshipInput = {
    id: Scalars['ID'];
    revision: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
};
export declare type UpdateDevOpsServiceAndOpsgenieTeamRelationshipPayload = Payload & {
    __typename?: 'UpdateDevOpsServiceAndOpsgenieTeamRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    serviceAndOpsgenieTeamRelationship?: Maybe<DevOpsServiceAndOpsgenieTeamRelationship>;
};
export declare type UpdateDevOpsServiceAndRepositoryRelationshipInput = {
    id: Scalars['ID'];
    revision: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
};
export declare type UpdateDevOpsServiceAndRepositoryRelationshipPayload = Payload & {
    __typename?: 'UpdateDevOpsServiceAndRepositoryRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    serviceAndRepositoryRelationship?: Maybe<DevOpsServiceAndRepositoryRelationship>;
};
export declare type UpdateDevOpsServiceEntityPropertiesInput = {
    id: Scalars['ID'];
    properties: Array<DevOpsServiceEntityPropertyInput>;
};
export declare type UpdateDevOpsServiceEntityPropertiesPayload = Payload & {
    __typename?: 'UpdateDevOpsServiceEntityPropertiesPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    properties?: Maybe<Scalars['JSON']>;
};
export declare type UpdateDevOpsServiceEntityPropertiesPayloadPropertiesArgs = {
    keys: Array<Scalars['String']>;
};
export declare type UpdateDevOpsServiceInput = {
    id: Scalars['ID'];
    revision: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<DevOpsServiceEntityPropertyInput>>;
    serviceTier: Scalars['ID'];
};
export declare type UpdateDevOpsServicePayload = Payload & {
    __typename?: 'UpdateDevOpsServicePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    service?: Maybe<DevOpsService>;
};
export declare type UpdateDevOpsServiceRelationshipInput = {
    id: Scalars['ID'];
    revision: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
};
export declare type UpdateDevOpsServiceRelationshipPayload = Payload & {
    __typename?: 'UpdateDevOpsServiceRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    serviceRelationship?: Maybe<DevOpsServiceRelationship>;
};
export declare type UpdateDeveloperLogAccessInput = {
    contextIds: Array<Scalars['ID']>;
    appId: Scalars['ID'];
    environmentType: AppEnvironmentType;
    shouldHaveAccess: Scalars['Boolean'];
};
export declare type UpdateDeveloperLogAccessPayload = Payload & {
    __typename?: 'UpdateDeveloperLogAccessPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdateJiraProjectAndOpsgenieTeamRelationshipInput = {
    id: Scalars['ID'];
    revision: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
};
export declare type UpdateJiraProjectAndOpsgenieTeamRelationshipPayload = Payload & {
    __typename?: 'UpdateJiraProjectAndOpsgenieTeamRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jiraProjectAndOpsgenieTeamRelationship?: Maybe<JiraProjectAndOpsgenieTeamRelationship>;
};
export declare type UpdateJiraProjectAndRepositoryRelationshipInput = {
    id: Scalars['ID'];
    thirdPartyRepository?: Maybe<ThirdPartyRepositoryInput>;
    revision: Scalars['ID'];
    description?: Maybe<Scalars['String']>;
};
export declare type UpdateJiraProjectAndRepositoryRelationshipPayload = Payload & {
    __typename?: 'UpdateJiraProjectAndRepositoryRelationshipPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jiraProjectAndRepositoryRelationship?: Maybe<JiraProjectAndRepositoryRelationship>;
};
export declare type UpdatePolarisCalculatedFieldInput = {
    project: Scalars['ID'];
    field: Scalars['ID'];
    label: Scalars['String'];
    formula: Scalars['JSON'];
    presentation?: Maybe<PolarisPresentationInput>;
};
export declare type UpdatePolarisCalculatedFieldPayload = Payload & {
    __typename?: 'UpdatePolarisCalculatedFieldPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisIdeaField>;
};
export declare type UpdatePolarisCommentInput = {
    id: Scalars['ID'];
    delete?: Maybe<Scalars['Boolean']>;
    content?: Maybe<Scalars['JSON']>;
};
export declare type UpdatePolarisCommentPayload = Payload & {
    __typename?: 'UpdatePolarisCommentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisComment>;
};
export declare type UpdatePolarisDecorationInput = {
    valueRules: Array<PolarisValueRuleInput>;
    valueDecoration: PolarisValueDecorationInput;
};
export declare type UpdatePolarisDecorationPayload = Payload & {
    __typename?: 'UpdatePolarisDecorationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisDecoration>;
};
export declare type UpdatePolarisFieldDescriptionInput = {
    field: Scalars['ID'];
    ideaType: Scalars['ID'];
    description: Scalars['String'];
};
export declare type UpdatePolarisFieldDescriptionPayload = Payload & {
    __typename?: 'UpdatePolarisFieldDescriptionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisIdeaField>;
};
export declare type UpdatePolarisFieldEmojiInput = {
    field: Scalars['ID'];
    ideaType: Scalars['ID'];
    emoji?: Maybe<Scalars['String']>;
};
export declare type UpdatePolarisFieldEmojiPayload = Payload & {
    __typename?: 'UpdatePolarisFieldEmojiPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisIdeaField>;
};
export declare type UpdatePolarisFieldOptionWeightInput = {
    project: Scalars['ID'];
    field: Scalars['ID'];
    option: Scalars['ID'];
    weight: Scalars['Int'];
};
export declare type UpdatePolarisFieldOptionWeightPayload = Payload & {
    __typename?: 'UpdatePolarisFieldOptionWeightPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdatePolarisIdeaInput = {
    archived?: Maybe<Scalars['Boolean']>;
    lastCommentsViewedTimestamp?: Maybe<Scalars['String']>;
    lastInsightsViewedTimestamp?: Maybe<Scalars['String']>;
};
export declare type UpdatePolarisIdeaPayload = Payload & {
    __typename?: 'UpdatePolarisIdeaPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisIdea>;
};
export declare type UpdatePolarisIdeaTemplateInput = {
    id: Scalars['ID'];
    project: Scalars['ID'];
    title: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    template?: Maybe<Scalars['JSON']>;
};
export declare type UpdatePolarisIdeaTemplatePayload = Payload & {
    __typename?: 'UpdatePolarisIdeaTemplatePayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdatePolarisInsightInput = {
    description?: Maybe<Scalars['JSON']>;
    snippets?: Maybe<Array<UpdatePolarisSnippetInput>>;
};
export declare type UpdatePolarisInsightPayload = Payload & {
    __typename?: 'UpdatePolarisInsightPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisInsight>;
};
export declare type UpdatePolarisMatrixAxis = {
    dimension: Scalars['String'];
    field: Scalars['ID'];
    fieldOptions?: Maybe<Array<PolarisGroupValueInput>>;
    reversed?: Maybe<Scalars['Boolean']>;
};
export declare type UpdatePolarisMatrixConfig = {
    axes?: Maybe<Array<UpdatePolarisMatrixAxis>>;
};
export declare type UpdatePolarisPlayContribution = {
    amount?: Maybe<Scalars['Int']>;
    comment?: Maybe<Scalars['ID']>;
    content?: Maybe<Scalars['JSON']>;
};
export declare type UpdatePolarisPlayContributionPayload = {
    __typename?: 'UpdatePolarisPlayContributionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisPlayContribution>;
};
export declare type UpdatePolarisPlayInput = {
    id: Scalars['ID'];
    parameters?: Maybe<Scalars['JSON']>;
};
export declare type UpdatePolarisPlayPayload = {
    __typename?: 'UpdatePolarisPlayPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisPlay>;
};
export declare type UpdatePolarisSnippetInput = {
    id?: Maybe<Scalars['ID']>;
    oauthClientId?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    data?: Maybe<Scalars['JSON']>;
    setProperties?: Maybe<Scalars['JSON']>;
    deleteProperties?: Maybe<Array<Scalars['String']>>;
};
export declare type UpdatePolarisTermsConsentInput = {
    cloudID: Scalars['String'];
    url: Scalars['URL'];
    displayedText: Scalars['String'];
    marketingConsent: Scalars['Boolean'];
    locale: Scalars['String'];
};
export declare type UpdatePolarisTermsConsentPayload = Payload & {
    __typename?: 'UpdatePolarisTermsConsentPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdatePolarisTimelineConfig = {
    startDateField?: Maybe<Scalars['ID']>;
    dueDateField?: Maybe<Scalars['ID']>;
    mode?: Maybe<PolarisTimelineMode>;
    startTimestamp?: Maybe<Scalars['String']>;
    endTimestamp?: Maybe<Scalars['String']>;
};
export declare type UpdatePolarisViewArrangementInfoPayload = Payload & {
    __typename?: 'UpdatePolarisViewArrangementInfoPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdatePolarisViewInput = {
    view?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    emoji?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['JSON']>;
    jql?: Maybe<Scalars['String']>;
    userJql?: Maybe<Scalars['String']>;
    tableColumnSizes?: Maybe<Array<PolarisViewTableColumnSizeInput>>;
    fieldRollups?: Maybe<Array<PolarisViewFieldRollupInput>>;
    fields?: Maybe<Array<Scalars['ID']>>;
    groupBy?: Maybe<Scalars['ID']>;
    groupValues?: Maybe<Array<PolarisGroupValueInput>>;
    verticalGroupBy?: Maybe<Scalars['ID']>;
    verticalGroupValues?: Maybe<Array<PolarisGroupValueInput>>;
    sort?: Maybe<Array<PolarisSortFieldInput>>;
    filter?: Maybe<Array<PolarisViewFilterInput>>;
    hidden?: Maybe<Array<Scalars['ID']>>;
    lastViewedTimestamp?: Maybe<Scalars['String']>;
    lastCommentsViewedTimestamp?: Maybe<Scalars['String']>;
    timelineConfig?: Maybe<UpdatePolarisTimelineConfig>;
    matrixConfig?: Maybe<UpdatePolarisMatrixConfig>;
    sortMode?: Maybe<PolarisViewSortMode>;
    hideEmptyGroups?: Maybe<Scalars['Boolean']>;
    hideEmptyColumns?: Maybe<Scalars['Boolean']>;
    enabledAutoSave?: Maybe<Scalars['Boolean']>;
    layoutType?: Maybe<PolarisViewLayoutType>;
};
export declare type UpdatePolarisViewPayload = Payload & {
    __typename?: 'UpdatePolarisViewPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisView>;
};
export declare type UpdatePolarisViewRankInput = {
    container?: Maybe<Scalars['ID']>;
    rank: Scalars['Int'];
};
export declare type UpdatePolarisViewRankV2Payload = Payload & {
    __typename?: 'UpdatePolarisViewRankV2Payload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisViewSet>;
};
export declare type UpdatePolarisViewSetInput = {
    viewSet: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export declare type UpdatePolarisViewSetPayload = Payload & {
    __typename?: 'UpdatePolarisViewSetPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    node?: Maybe<PolarisViewSet>;
};
export declare type UpdatePolarisViewTimestampPayload = Payload & {
    __typename?: 'UpdatePolarisViewTimestampPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type UpdateUserInstallationRulesInput = {
    cloudId: Scalars['ID'];
    rule: UserInstallationRuleValue;
};
export declare type User = {
    id: Scalars['ID'];
    accountId: Scalars['ID'];
    canonicalAccountId: Scalars['ID'];
    accountStatus: AccountStatus;
    name: Scalars['String'];
    picture: Scalars['URL'];
};
export declare type UserAuthTokenForExtensionInput = {
    extensionId: Scalars['ID'];
    contextIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type UserAuthTokenForExtensionResponse = Payload & {
    __typename?: 'UserAuthTokenForExtensionResponse';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    authToken?: Maybe<AuthToken>;
};
export declare type UserConsent = {
    __typename?: 'UserConsent';
    oauthClientId: Scalars['ID'];
    appId: Scalars['ID'];
    environmentId: Scalars['ID'];
    versionId: Scalars['ID'];
};
export declare type UserConsentExtension = {
    __typename?: 'UserConsentExtension';
    user: UserConsentExtensionUser;
    appEnvironmentVersion: UserConsentExtensionAppEnvironmentVersion;
    consentedAt: Scalars['DateTime'];
};
export declare type UserConsentExtensionAppEnvironmentVersion = {
    __typename?: 'UserConsentExtensionAppEnvironmentVersion';
    id: Scalars['ID'];
};
export declare type UserConsentExtensionUser = {
    __typename?: 'UserConsentExtensionUser';
    aaid: Scalars['ID'];
};
export declare type UserGrant = {
    __typename?: 'UserGrant';
    id: Scalars['ID'];
    accountId: Scalars['ID'];
    oauthClientId: Scalars['ID'];
    appId?: Maybe<Scalars['ID']>;
    appDetails?: Maybe<UserGrantAppDetails>;
    scopes?: Maybe<Array<Maybe<AppHostServiceScope>>>;
};
export declare type UserGrantAppDetails = {
    __typename?: 'UserGrantAppDetails';
    name: Scalars['String'];
    description: Scalars['String'];
    avatarUrl?: Maybe<Scalars['String']>;
    vendorName?: Maybe<Scalars['String']>;
    contactLink?: Maybe<Scalars['String']>;
    privacyPolicyLink?: Maybe<Scalars['String']>;
    termsOfServiceLink?: Maybe<Scalars['String']>;
};
export declare type UserGrantConnection = {
    __typename?: 'UserGrantConnection';
    edges?: Maybe<Array<Maybe<UserGrantEdge>>>;
    nodes?: Maybe<Array<Maybe<UserGrant>>>;
    pageInfo: UserGrantPageInfo;
};
export declare type UserGrantEdge = {
    __typename?: 'UserGrantEdge';
    cursor: Scalars['String'];
    node?: Maybe<UserGrant>;
};
export declare type UserGrantPageInfo = {
    __typename?: 'UserGrantPageInfo';
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
    startCursor?: Maybe<Scalars['String']>;
    endCursor?: Maybe<Scalars['String']>;
};
export declare enum UserInstallationRuleValue {
    Allow = "allow",
    Deny = "deny"
}
export declare type UserInstallationRules = {
    __typename?: 'UserInstallationRules';
    rule: UserInstallationRuleValue;
};
export declare type UserInstallationRulesPayload = Payload & {
    __typename?: 'UserInstallationRulesPayload';
    rule?: Maybe<UserInstallationRuleValue>;
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type VirtualAgentChannelConfig = {
    __typename?: 'VirtualAgentChannelConfig';
    triage?: Maybe<VirtualAgentSlackChannel>;
    test?: Maybe<VirtualAgentSlackChannel>;
    production?: Maybe<Array<Maybe<VirtualAgentSlackChannel>>>;
    jsmChatContext?: Maybe<VirtualAgentJsmChatContext>;
};
export declare type VirtualAgentConfiguration = Node & {
    __typename?: 'VirtualAgentConfiguration';
    id: Scalars['ID'];
    respondToQueries: Scalars['Boolean'];
    intentRuleProjections?: Maybe<VirtualAgentIntentRuleProjectionsConnection>;
    intentRuleProjection?: Maybe<VirtualAgentIntentRuleProjectionResult>;
    virtualAgentStatisticsProjection?: Maybe<VirtualAgentStatisticsProjection>;
    standardFlowEditors?: Maybe<VirtualAgentFlowEditorsConnection>;
    flowEditorFlow?: Maybe<VirtualAgentFlowEditor>;
    properties?: Maybe<VirtualAgentProperties>;
    virtualAgentChannelConfig?: Maybe<VirtualAgentChannelConfig>;
};
export declare type VirtualAgentConfigurationIntentRuleProjectionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentConfigurationIntentRuleProjectionArgs = {
    intentId: Scalars['String'];
};
export declare type VirtualAgentConfigurationVirtualAgentStatisticsProjectionArgs = {
    startDate?: Maybe<Scalars['String']>;
    endDate?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentConfigurationStandardFlowEditorsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentConfigurationFlowEditorFlowArgs = {
    flowRevisionId: Scalars['String'];
};
export declare type VirtualAgentConfigurationResult = VirtualAgentConfiguration | VirtualAgentQueryError;
export declare type VirtualAgentCreateChatChannelInput = {
    isTriageChannel: Scalars['Boolean'];
    isVirtualAgentTestChannel: Scalars['Boolean'];
};
export declare type VirtualAgentCreateChatChannelPayload = Payload & {
    __typename?: 'VirtualAgentCreateChatChannelPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    channel?: Maybe<VirtualAgentSlackChannel>;
};
export declare type VirtualAgentCreateConfigurationInput = {
    respondToQueries?: Maybe<Scalars['Boolean']>;
};
export declare type VirtualAgentCreateConfigurationPayload = Payload & {
    __typename?: 'VirtualAgentCreateConfigurationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    virtualAgentConfiguration?: Maybe<VirtualAgentConfiguration>;
};
export declare type VirtualAgentCreateIntentRuleProjectionInput = {
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    questions?: Maybe<Array<Scalars['String']>>;
    confirmationMessage?: Maybe<Scalars['String']>;
    suggestionButtonText?: Maybe<Scalars['String']>;
    templateId?: Maybe<Scalars['String']>;
    templateType?: Maybe<VirtualAgentIntentTemplateType>;
};
export declare type VirtualAgentCreateIntentRuleProjectionPayload = Payload & {
    __typename?: 'VirtualAgentCreateIntentRuleProjectionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    intentRuleProjection?: Maybe<VirtualAgentIntentRuleProjection>;
};
export declare type VirtualAgentDeleteIntentRuleProjectionPayload = Payload & {
    __typename?: 'VirtualAgentDeleteIntentRuleProjectionPayload';
    id: Scalars['ID'];
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type VirtualAgentFeatures = {
    __typename?: 'VirtualAgentFeatures';
    isVirtualAgentAvailable?: Maybe<Scalars['Boolean']>;
    isAiEnabledInAdminHub?: Maybe<Scalars['Boolean']>;
};
export declare type VirtualAgentFeaturesResult = VirtualAgentFeatures | VirtualAgentQueryError;
export declare type VirtualAgentFlowEditor = Node & {
    __typename?: 'VirtualAgentFlowEditor';
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    group?: Maybe<Scalars['String']>;
    jsonRepresentation?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentFlowEditorAction = {
    actionType: Scalars['String'];
    payload: Scalars['JSON'];
};
export declare type VirtualAgentFlowEditorActionInput = {
    jsonRepresentation: Scalars['String'];
    actions: Array<VirtualAgentFlowEditorAction>;
};
export declare type VirtualAgentFlowEditorActionPayload = Payload & {
    __typename?: 'VirtualAgentFlowEditorActionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    jsonRepresentation?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentFlowEditorEdge = {
    __typename?: 'VirtualAgentFlowEditorEdge';
    cursor: Scalars['String'];
    node?: Maybe<VirtualAgentFlowEditor>;
};
export declare type VirtualAgentFlowEditorInput = {
    name?: Maybe<Scalars['String']>;
    group?: Maybe<Scalars['String']>;
    jsonRepresentation: Scalars['String'];
};
export declare type VirtualAgentFlowEditorPayload = Payload & {
    __typename?: 'VirtualAgentFlowEditorPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    virtualAgentFlowEditor?: Maybe<VirtualAgentFlowEditor>;
};
export declare type VirtualAgentFlowEditorResult = VirtualAgentFlowEditor | VirtualAgentQueryError;
export declare type VirtualAgentFlowEditorsConnection = {
    __typename?: 'VirtualAgentFlowEditorsConnection';
    edges?: Maybe<Array<VirtualAgentFlowEditorEdge>>;
    nodes?: Maybe<Array<Maybe<VirtualAgentFlowEditor>>>;
    pageInfo?: Maybe<PageInfo>;
};
export declare type VirtualAgentGlobalStatisticsProjection = {
    __typename?: 'VirtualAgentGlobalStatisticsProjection';
    totalTraffic?: Maybe<Scalars['Int']>;
    assistanceRate?: Maybe<Scalars['Float']>;
    resolutionRate?: Maybe<Scalars['Float']>;
    averageCsat?: Maybe<Scalars['Float']>;
};
export declare type VirtualAgentIntentProjection = Node & {
    __typename?: 'VirtualAgentIntentProjection';
    id: Scalars['ID'];
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    questionProjections?: Maybe<VirtualAgentIntentQuestionProjectionsConnection>;
};
export declare type VirtualAgentIntentProjectionQuestionProjectionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentIntentProjectionResult = VirtualAgentIntentProjection | VirtualAgentQueryError;
export declare type VirtualAgentIntentQuestionProjection = Node & {
    __typename?: 'VirtualAgentIntentQuestionProjection';
    id: Scalars['ID'];
    text: Scalars['String'];
};
export declare type VirtualAgentIntentQuestionProjectionEdge = {
    __typename?: 'VirtualAgentIntentQuestionProjectionEdge';
    cursor: Scalars['String'];
    node?: Maybe<VirtualAgentIntentQuestionProjection>;
};
export declare type VirtualAgentIntentQuestionProjectionsConnection = {
    __typename?: 'VirtualAgentIntentQuestionProjectionsConnection';
    edges?: Maybe<Array<VirtualAgentIntentQuestionProjectionEdge>>;
    nodes?: Maybe<Array<Maybe<VirtualAgentIntentQuestionProjection>>>;
    pageInfo: PageInfo;
};
export declare type VirtualAgentIntentRuleProjection = Node & {
    __typename?: 'VirtualAgentIntentRuleProjection';
    id: Scalars['ID'];
    isEnabled: Scalars['Boolean'];
    intentProjection?: Maybe<VirtualAgentIntentProjectionResult>;
    flowJsonRepresentation?: Maybe<Scalars['String']>;
    flowEditor?: Maybe<VirtualAgentFlowEditorResult>;
    confirmationMessage?: Maybe<Scalars['String']>;
    suggestionButtonText?: Maybe<Scalars['String']>;
    intentStatisticsProjection?: Maybe<VirtualAgentIntentStatisticsProjection>;
};
export declare type VirtualAgentIntentRuleProjectionIntentStatisticsProjectionArgs = {
    startDate?: Maybe<Scalars['String']>;
    endDate?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentIntentRuleProjectionEdge = {
    __typename?: 'VirtualAgentIntentRuleProjectionEdge';
    cursor: Scalars['String'];
    node?: Maybe<VirtualAgentIntentRuleProjection>;
};
export declare type VirtualAgentIntentRuleProjectionResult = VirtualAgentIntentRuleProjection | VirtualAgentQueryError;
export declare type VirtualAgentIntentRuleProjectionsConnection = {
    __typename?: 'VirtualAgentIntentRuleProjectionsConnection';
    edges?: Maybe<Array<VirtualAgentIntentRuleProjectionEdge>>;
    nodes?: Maybe<Array<Maybe<VirtualAgentIntentRuleProjection>>>;
    pageInfo: PageInfo;
};
export declare type VirtualAgentIntentRuleProjectionsFilter = {
    virtualAgentConfigurationId: Scalars['ID'];
};
export declare type VirtualAgentIntentStatisticsProjection = {
    __typename?: 'VirtualAgentIntentStatisticsProjection';
    totalTraffic?: Maybe<Scalars['Int']>;
    trafficPercentageOfAllAssisted?: Maybe<Scalars['Float']>;
    resolutionRate?: Maybe<Scalars['Float']>;
    averageCsat?: Maybe<Scalars['Float']>;
};
export declare type VirtualAgentIntentTemplate = Node & {
    __typename?: 'VirtualAgentIntentTemplate';
    id: Scalars['ID'];
    type: VirtualAgentIntentTemplateType;
    name: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    questions?: Maybe<Array<Scalars['String']>>;
};
export declare type VirtualAgentIntentTemplateEdge = {
    __typename?: 'VirtualAgentIntentTemplateEdge';
    cursor: Scalars['String'];
    node?: Maybe<VirtualAgentIntentTemplate>;
};
export declare enum VirtualAgentIntentTemplateType {
    Standard = "STANDARD",
    Discovered = "DISCOVERED",
    Shared = "SHARED"
}
export declare type VirtualAgentIntentTemplatesConnection = {
    __typename?: 'VirtualAgentIntentTemplatesConnection';
    edges?: Maybe<Array<VirtualAgentIntentTemplateEdge>>;
    nodes?: Maybe<Array<VirtualAgentIntentTemplate>>;
    pageInfo: PageInfo;
};
export declare type VirtualAgentJsmChatContext = {
    __typename?: 'VirtualAgentJSMChatContext';
    connectivityState: Scalars['String'];
    slackSetupLink?: Maybe<Scalars['String']>;
    errorMessage?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentMutationApi = {
    __typename?: 'VirtualAgentMutationApi';
    createVirtualAgentConfiguration?: Maybe<VirtualAgentCreateConfigurationPayload>;
    updateVirtualAgentConfiguration?: Maybe<VirtualAgentUpdateConfigurationPayload>;
    createIntentRuleProjection?: Maybe<VirtualAgentCreateIntentRuleProjectionPayload>;
    updateIntentRuleProjection?: Maybe<VirtualAgentUpdateIntentRuleProjectionPayload>;
    updateIntentRuleProjectionQuestions?: Maybe<VirtualAgentUpdateIntentRuleProjectionQuestionsPayload>;
    deleteIntentRuleProjection?: Maybe<VirtualAgentDeleteIntentRuleProjectionPayload>;
    updateFlowEditorFlow?: Maybe<VirtualAgentFlowEditorPayload>;
    handleFlowEditorActions?: Maybe<VirtualAgentFlowEditorActionPayload>;
    createChatChannel?: Maybe<VirtualAgentCreateChatChannelPayload>;
    updateChatChannel?: Maybe<VirtualAgentUpdateChatChannelPayload>;
};
export declare type VirtualAgentMutationApiCreateVirtualAgentConfigurationArgs = {
    jiraProjectId: Scalars['ID'];
    input?: Maybe<VirtualAgentCreateConfigurationInput>;
};
export declare type VirtualAgentMutationApiUpdateVirtualAgentConfigurationArgs = {
    virtualAgentConfigurationId: Scalars['ID'];
    input: VirtualAgentUpdateConfigurationInput;
};
export declare type VirtualAgentMutationApiCreateIntentRuleProjectionArgs = {
    virtualAgentConfigurationId: Scalars['ID'];
    input: VirtualAgentCreateIntentRuleProjectionInput;
};
export declare type VirtualAgentMutationApiUpdateIntentRuleProjectionArgs = {
    virtualAgentIntentRuleProjectionId: Scalars['ID'];
    input: VirtualAgentUpdateIntentRuleProjectionInput;
};
export declare type VirtualAgentMutationApiUpdateIntentRuleProjectionQuestionsArgs = {
    virtualAgentIntentRuleProjectionId: Scalars['ID'];
    input: VirtualAgentUpdateIntentRuleProjectionQuestionsInput;
};
export declare type VirtualAgentMutationApiDeleteIntentRuleProjectionArgs = {
    virtualAgentIntentRuleProjectionId: Scalars['ID'];
};
export declare type VirtualAgentMutationApiUpdateFlowEditorFlowArgs = {
    virtualAgentFlowEditorId: Scalars['ID'];
    input: VirtualAgentFlowEditorInput;
};
export declare type VirtualAgentMutationApiHandleFlowEditorActionsArgs = {
    virtualAgentFlowEditorId: Scalars['ID'];
    input: VirtualAgentFlowEditorActionInput;
};
export declare type VirtualAgentMutationApiCreateChatChannelArgs = {
    virtualAgentConfigurationId: Scalars['ID'];
    input: VirtualAgentCreateChatChannelInput;
};
export declare type VirtualAgentMutationApiUpdateChatChannelArgs = {
    virtualAgentConfigurationId: Scalars['ID'];
    input: VirtualAgentUpdateChatChannelInput;
};
export declare type VirtualAgentProperties = {
    __typename?: 'VirtualAgentProperties';
    defaultJiraRequestTypeId?: Maybe<Scalars['String']>;
    isAiResponsesEnabled?: Maybe<Scalars['Boolean']>;
};
export declare type VirtualAgentPropertiesInput = {
    defaultJiraRequestTypeId?: Maybe<Scalars['String']>;
    isAiResponsesEnabled?: Maybe<Scalars['Boolean']>;
};
export declare type VirtualAgentQueryApi = {
    __typename?: 'VirtualAgentQueryApi';
    virtualAgentConfigurationByProjectId?: Maybe<VirtualAgentConfigurationResult>;
    intentRuleProjections?: Maybe<VirtualAgentIntentRuleProjectionsConnection>;
    validateRequestType?: Maybe<VirtualAgentRequestTypeConnectionStatus>;
    virtualAgentFeatures?: Maybe<VirtualAgentFeaturesResult>;
    intentTemplatesByProjectId?: Maybe<VirtualAgentIntentTemplatesConnection>;
};
export declare type VirtualAgentQueryApiVirtualAgentConfigurationByProjectIdArgs = {
    jiraProjectId: Scalars['ID'];
};
export declare type VirtualAgentQueryApiIntentRuleProjectionsArgs = {
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    filter: VirtualAgentIntentRuleProjectionsFilter;
};
export declare type VirtualAgentQueryApiValidateRequestTypeArgs = {
    jiraProjectId: Scalars['ID'];
    requestTypeId: Scalars['String'];
};
export declare type VirtualAgentQueryApiVirtualAgentFeaturesArgs = {
    cloudId: Scalars['ID'];
};
export declare type VirtualAgentQueryApiIntentTemplatesByProjectIdArgs = {
    jiraProjectId: Scalars['ID'];
    first?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentQueryError = {
    __typename?: 'VirtualAgentQueryError';
    id: Scalars['ID'];
    identifier?: Maybe<Scalars['ID']>;
    message?: Maybe<Scalars['String']>;
    extensions?: Maybe<Array<QueryErrorExtension>>;
};
export declare type VirtualAgentRequestTypeConnectionStatus = {
    __typename?: 'VirtualAgentRequestTypeConnectionStatus';
    connectionStatus?: Maybe<Scalars['String']>;
    hasUnsupportedFields?: Maybe<Scalars['Boolean']>;
    hasRequiredFields?: Maybe<Scalars['Boolean']>;
};
export declare type VirtualAgentSlackChannel = {
    __typename?: 'VirtualAgentSlackChannel';
    id?: Maybe<Scalars['String']>;
    slackChannelId?: Maybe<Scalars['String']>;
    channelName?: Maybe<Scalars['String']>;
    isVirtualAgentChannel?: Maybe<Scalars['Boolean']>;
    isVirtualAgentTestChannel?: Maybe<Scalars['Boolean']>;
    channelLink?: Maybe<Scalars['String']>;
    isAiResponsesChannel?: Maybe<Scalars['Boolean']>;
};
export declare type VirtualAgentStatisticsPercentageChangeProjection = {
    __typename?: 'VirtualAgentStatisticsPercentageChangeProjection';
    traffic?: Maybe<Scalars['Float']>;
    assistance?: Maybe<Scalars['Float']>;
    resolution?: Maybe<Scalars['Float']>;
    csat?: Maybe<Scalars['Float']>;
};
export declare type VirtualAgentStatisticsProjection = {
    __typename?: 'VirtualAgentStatisticsProjection';
    globalStatistics?: Maybe<VirtualAgentGlobalStatisticsProjection>;
    statisticsPercentageChange?: Maybe<VirtualAgentStatisticsPercentageChangeProjection>;
};
export declare type VirtualAgentUpdateChatChannelInput = {
    halpChannelId: Scalars['String'];
    isVirtualAgentChannel: Scalars['Boolean'];
    isAiResponsesChannel?: Maybe<Scalars['Boolean']>;
};
export declare type VirtualAgentUpdateChatChannelPayload = Payload & {
    __typename?: 'VirtualAgentUpdateChatChannelPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    channel?: Maybe<VirtualAgentSlackChannel>;
};
export declare type VirtualAgentUpdateConfigurationInput = {
    respondToQueries?: Maybe<Scalars['Boolean']>;
    properties?: Maybe<VirtualAgentPropertiesInput>;
};
export declare type VirtualAgentUpdateConfigurationPayload = Payload & {
    __typename?: 'VirtualAgentUpdateConfigurationPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    virtualAgentConfiguration?: Maybe<VirtualAgentConfiguration>;
};
export declare type VirtualAgentUpdateIntentRuleProjectionInput = {
    isEnabled?: Maybe<Scalars['Boolean']>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    confirmationMessage?: Maybe<Scalars['String']>;
    suggestionButtonText?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentUpdateIntentRuleProjectionPayload = Payload & {
    __typename?: 'VirtualAgentUpdateIntentRuleProjectionPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    intentRuleProjection?: Maybe<VirtualAgentIntentRuleProjection>;
};
export declare type VirtualAgentUpdateIntentRuleProjectionQuestionsInput = {
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    addedQuestions?: Maybe<Array<Scalars['String']>>;
    updatedQuestions?: Maybe<Array<VirtualAgentUpdatedQuestionInput>>;
    deletedQuestions?: Maybe<Array<Scalars['ID']>>;
    confirmationMessage?: Maybe<Scalars['String']>;
    suggestionButtonText?: Maybe<Scalars['String']>;
};
export declare type VirtualAgentUpdateIntentRuleProjectionQuestionsPayload = Payload & {
    __typename?: 'VirtualAgentUpdateIntentRuleProjectionQuestionsPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
    intentRuleProjection?: Maybe<VirtualAgentIntentRuleProjection>;
    createdAndUpdatedQuestions?: Maybe<Array<VirtualAgentIntentQuestionProjection>>;
    deletedQuestions?: Maybe<Array<Scalars['ID']>>;
};
export declare type VirtualAgentUpdatedQuestionInput = {
    id: Scalars['ID'];
    question: Scalars['String'];
};
export declare type WatchMarketplaceAppPayload = Payload & {
    __typename?: 'WatchMarketplaceAppPayload';
    success: Scalars['Boolean'];
    errors?: Maybe<Array<MutationError>>;
};
export declare type WebTriggerUrl = Node & {
    __typename?: 'WebTriggerUrl';
    id: Scalars['ID'];
    appId: Scalars['ID'];
    envId: Scalars['ID'];
    triggerKey: Scalars['String'];
    extensionId: Scalars['ID'];
    contextId: Scalars['ID'];
    url: Scalars['URL'];
    product?: Maybe<Scalars['String']>;
    tenantContext?: Maybe<TenantContext>;
};
export declare type WebTriggerUrlInput = {
    appId: Scalars['ID'];
    envId: Scalars['ID'];
    triggerKey: Scalars['String'];
    contextId: Scalars['ID'];
};
export declare type _AppliedDirective = {
    __typename?: '_AppliedDirective';
    name: Scalars['String'];
    args: Array<_DirectiveArgument>;
};
export declare type _DirectiveArgument = {
    __typename?: '_DirectiveArgument';
    name: Scalars['String'];
    value: Scalars['String'];
};
export declare enum SourceBillingType {
    Hams = "HAMS",
    Ccp = "CCP"
}
//# sourceMappingURL=graphql-types.d.ts.map