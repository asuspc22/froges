"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppEnvironmentsGraphqlClient = exports.MissingAppEnvironmentError = exports.MissingAppError = void 0;
const ui_1 = require("../ui");
const error_handling_1 = require("../shared/error-handling");
class MissingAppError extends error_handling_1.UserError {
    constructor() {
        super(ui_1.Text.env.error.appNotExist);
    }
}
exports.MissingAppError = MissingAppError;
class MissingAppEnvironmentError extends error_handling_1.UserError {
    constructor(envKey) {
        super(ui_1.Text.env.error.envNotExist(envKey));
    }
}
exports.MissingAppEnvironmentError = MissingAppEnvironmentError;
class AppEnvironmentsGraphqlClient {
    constructor(graphqlClient) {
        this.graphqlClient = graphqlClient;
    }
    async getAppEnvironmentId(appId, environmentKey) {
        const query = `
      query forge_cli_getApplicationEnvironmentId($id: ID!, $key: String!) {
        app(id: $id) {
          environmentByKey(key: $key) {
            id
          }
        }
      }
    `;
        const result = await this.graphqlClient.query(query, {
            id: appId,
            key: environmentKey
        });
        if (!result.app) {
            throw new MissingAppError();
        }
        if (!result.app.environmentByKey) {
            throw new MissingAppEnvironmentError(environmentKey);
        }
        return result.app.environmentByKey.id;
    }
    async getAppEnvironmentDetails(appAri, environmentKey) {
        const query = `
      query forge_cli_getApplicationEnvironmentId($id: ID!, $key: String!) {
        app(id: $id) {
          name
          environmentByKey(key: $key) {
            id
            type
          }
        }
      }
    `;
        const result = await this.graphqlClient.query(query, {
            id: appAri,
            key: environmentKey
        });
        if (!result.app) {
            throw new MissingAppError();
        }
        if (!result.app.environmentByKey) {
            throw new MissingAppEnvironmentError(environmentKey);
        }
        return {
            name: result.app.name,
            appAri,
            environmentKey,
            environmentType: result.app.environmentByKey.type
        };
    }
}
exports.AppEnvironmentsGraphqlClient = AppEnvironmentsGraphqlClient;
