"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MinimalGraphQLRunner = exports.GraphqlError = exports.GraphQLProviderServiceError = exports.OutdatedClientVersionError = exports.GraphQLAuthenticationError = void 0;
const graphql_request_1 = require("graphql-request");
const index_1 = require("../index");
const shared_1 = require("../shared");
const ui_1 = require("../ui");
class GraphQLAuthenticationError extends shared_1.UserError {
}
exports.GraphQLAuthenticationError = GraphQLAuthenticationError;
const isOutdatedClientVersionError = (error) => { var _a; return (_a = error.message) === null || _a === void 0 ? void 0 : _a.includes('client version is outdated'); };
class OutdatedClientVersionError extends shared_1.UserError {
    constructor() {
        super(ui_1.Text.graphQL.outdatedClientVersion);
    }
}
exports.OutdatedClientVersionError = OutdatedClientVersionError;
class GraphQLProviderServiceError extends shared_1.BaseError {
    constructor(userError, requestId, errors) {
        super(requestId, `${ui_1.Text.graphQL.error}: ${JSON.stringify(errors)}, requestId=${requestId || 'unknown'}`);
        this.userError = userError;
    }
    isUserError() {
        return this.userError;
    }
}
exports.GraphQLProviderServiceError = GraphQLProviderServiceError;
class GraphqlError extends Error {
    constructor(data, requestId) {
        super(`${ui_1.Text.graphQL.error}: ${JSON.stringify(data)}, requestId=${requestId || 'unknown'}`);
    }
}
exports.GraphqlError = GraphqlError;
class MinimalGraphQLRunner {
    constructor(authenticator, endpoint, cliDetails) {
        this.authenticator = authenticator;
        this.endpoint = endpoint;
        this.cliDetails = cliDetails;
    }
    async run(query, variables) {
        const { data, errors, extensions, headers, status } = await this.rawRequestWithoutClientError(query, variables);
        if (status === 401) {
            const errorMessage = this.authenticator.getInstructionsWhenInvalid();
            throw new GraphQLAuthenticationError(errorMessage);
        }
        const requestId = this.getRequestId(extensions, headers);
        if (errors) {
            if (errors.find((e) => isOutdatedClientVersionError(e))) {
                throw new OutdatedClientVersionError();
            }
            const { statusCode } = (0, index_1.getError)(errors);
            const isUserError = statusCode && statusCode >= 400 && statusCode < 500 ? true : false;
            throw new GraphQLProviderServiceError(isUserError, requestId, errors);
        }
        if (status !== 200) {
            throw new GraphqlError(data, requestId);
        }
        return {
            requestId,
            response: data
        };
    }
    getAuthenticatedClient(endpoint, authorizationHeader) {
        return new graphql_request_1.GraphQLClient(endpoint, {
            headers: this.getHeaders(authorizationHeader)
        });
    }
    getHeaders(authorizationHeader) {
        return Object.assign(Object.assign(Object.assign({}, authorizationHeader), (this.cliDetails ? { 'user-agent': `${this.getClientName()}/${this.getClientVersion()}` } : {})), {
            'atl-client-name': `${this.getClientName()}`,
            'atl-client-version': `${this.getClientVersion()}`
        });
    }
    getClientName() {
        var _a;
        return ((_a = this.cliDetails) === null || _a === void 0 ? void 0 : _a.name) || '@forge/cli';
    }
    getClientVersion() {
        var _a;
        return ((_a = this.cliDetails) === null || _a === void 0 ? void 0 : _a.version) || 'unknown';
    }
    async rawRequestWithoutClientError(query, variables) {
        const authorizationHeader = await this.authenticator.getAuthorizationHeader();
        const client = this.getAuthenticatedClient(this.endpoint, authorizationHeader);
        try {
            return await client.rawRequest(query, variables);
        }
        catch (error) {
            if (error.response) {
                return error.response;
            }
            else {
                throw error;
            }
        }
    }
    getRequestId(extensions, headers) {
        return ((extensions && extensions.gateway && extensions.gateway.request_id) ||
            (headers && headers.get('x-request-id')) ||
            (headers && headers.get('x-trace-id')) ||
            undefined);
    }
}
exports.MinimalGraphQLRunner = MinimalGraphQLRunner;
