"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutationAwareGraphQLClient = exports.GraphQlMutationError = exports.UnexpectedGraphQlResponseError = void 0;
const shared_1 = require("../shared");
class UnexpectedGraphQlResponseError extends shared_1.BaseError {
}
exports.UnexpectedGraphQlResponseError = UnexpectedGraphQlResponseError;
class GraphQlMutationError extends UnexpectedGraphQlResponseError {
    constructor(message, { requestId, code, statusCode }) {
        super(requestId, message);
        this.getCode = () => {
            return this.code;
        };
        this.getStatusCode = () => {
            return this.statusCode;
        };
        this.getRequestId = () => {
            return this.requestId;
        };
        this.code = code || 'GENERIC_GRAPHQL_MUTATION_ERROR';
        this.statusCode = statusCode;
        this.requestId = requestId;
    }
    isUserError() {
        return Boolean(this.statusCode && this.statusCode >= 400 && this.statusCode < 500);
    }
}
exports.GraphQlMutationError = GraphQlMutationError;
class MutationAwareGraphQLClient {
    constructor(runner) {
        this.runner = runner;
    }
    async mutate(query, variables) {
        const { requestId, response } = await this.runner.run(query, variables);
        if (!response) {
            throw new UnexpectedGraphQlResponseError(`(requestId: ${requestId || 'unknown'})`);
        }
        const mutationLabel = Object.keys(response)[0];
        if (!mutationLabel || !response[mutationLabel]) {
            throw new UnexpectedGraphQlResponseError(`(requestId: ${requestId || 'unknown'})`);
        }
        const mutationResponse = response[mutationLabel];
        if (!mutationResponse) {
            throw new UnexpectedGraphQlResponseError(`(requestId: ${requestId || 'unknown'})`);
        }
        return {
            response: { [mutationLabel]: mutationResponse },
            requestId
        };
    }
    async query(query, variables) {
        const { response, requestId } = await this.runner.run(query, variables);
        return Object.assign(Object.assign({}, response), { requestId });
    }
}
exports.MutationAwareGraphQLClient = MutationAwareGraphQLClient;
