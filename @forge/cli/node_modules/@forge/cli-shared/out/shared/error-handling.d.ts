import { Logger } from '../ui';
export declare class BaseError extends Error implements ErrorWithAnalytics {
    protected readonly requestId?: string | undefined;
    constructor(requestId?: string | undefined, message?: string);
    getAttributes(): Record<string, any>;
    isUserError(): boolean;
}
export declare class UserError extends BaseError {
    constructor(message?: string, requestId?: string | undefined);
    isUserError(): boolean;
}
export declare class HiddenError extends BaseError {
    constructor(message?: string, requestId?: string | undefined);
}
export declare const exitOnError: (logger: Logger, error?: Error, hint?: string | null) => Promise<never>;
export declare const wrapError: (error: unknown) => Error;
export declare const assertIsError: (error: unknown) => asserts error is Error;
export interface ErrorWithAnalytics {
    getAttributes: () => Record<string, string | string[] | boolean>;
}
export declare const isErrorWithAnalytics: (e: any) => e is ErrorWithAnalytics;
export declare class ValidationError extends UserError {
}
export declare class BundlerTSError extends UserError {
}
export interface TunnelErrorDetails {
    __tunnel_error__: true;
    name: string;
    attributes: Record<string, string | string[] | boolean>;
}
export declare class ApplicationCompileError extends UserError {
    readonly error: Error;
    constructor(error: Error);
}
//# sourceMappingURL=error-handling.d.ts.map