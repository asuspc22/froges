"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listTSConfigIncludeExclude = exports.listGitIgnoreFiles = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const array_prototype_flatmap_1 = tslib_1.__importDefault(require("array.prototype.flatmap"));
const typescript_1 = require("typescript");
const listGitIgnoreFiles = async (fileSystemReader, gitIgnorePath = '.gitignore') => {
    var _a;
    const gitignoreContents = ((_a = fileSystemReader
        .readFile(gitIgnorePath)) === null || _a === void 0 ? void 0 : _a.trim().split('\n').filter((glob) => glob.trim() !== '')) || [];
    return (0, array_prototype_flatmap_1.default)(await Promise.all(gitignoreContents.map((glob) => {
        if (fileSystemReader.hasGlobSpecialChars(glob)) {
            return fileSystemReader.readGlob(glob);
        }
        else {
            return [glob];
        }
    })), (x) => x);
};
exports.listGitIgnoreFiles = listGitIgnoreFiles;
const processTSConfigGlobList = async (fileSystemReader, globList) => {
    if (!globList) {
        return [];
    }
    const relativePaths = await Promise.all(globList.map((glob) => fileSystemReader.readGlob(glob)));
    return (0, array_prototype_flatmap_1.default)(relativePaths, (pathsFromSingleGlob) => pathsFromSingleGlob.map((relativePath) => path_1.default.resolve('./', relativePath)));
};
const listTSConfigIncludeExclude = async (fileSystemReader, tsConfigPath = 'tsconfig.json') => {
    const { config } = (0, typescript_1.readConfigFile)(tsConfigPath, fileSystemReader.readFile);
    if (!config) {
        return { include: [], exclude: [] };
    }
    return {
        include: await processTSConfigGlobList(fileSystemReader, config === null || config === void 0 ? void 0 : config.include),
        exclude: await processTSConfigGlobList(fileSystemReader, config === null || config === void 0 ? void 0 : config.exclude)
    };
};
exports.listTSConfigIncludeExclude = listTSConfigIncludeExclude;
