import { Document } from 'yaml';
import { FileSystemReader, FileSystemWriter } from '../file-system';
import { ConfigReader, ConfigWriter } from './';
import { ManifestSchema, Resources } from '@forge/manifest';
import { UserError } from '../shared';
import { RuntimeType } from '../runtimes';
export declare class ResourceDefinitionMissingError extends UserError {
    constructor(resources: string[]);
}
export interface Handler {
    module: string;
    func: string;
}
export interface ConfigInteractor {
    getAppHandlers(): Promise<Array<Handler>>;
    snapshotsEnabled(): Promise<boolean>;
}
export declare type Resource = Resources[0];
export declare type ResourceType = 'customUI' | 'nativeUI' | 'default';
export interface ResourceDetails extends Resource {
    resourceType: ResourceType;
}
export declare class ConfigFile implements ConfigReader, ConfigWriter, ConfigInteractor {
    private readonly fileReader;
    private readonly fileWriter;
    constructor(fileReader: FileSystemReader, fileWriter: FileSystemWriter);
    getAppHandlers(): Promise<Array<Handler>>;
    readConfig(): Promise<ManifestSchema>;
    readConfigToDocument(): Promise<Document.Parsed | undefined>;
    snapshotsEnabled(): Promise<boolean>;
    runtimeType(): Promise<RuntimeType>;
    private makeManifestUnique;
    prependAppNameToModules(name: string): Promise<void>;
    writeToConfigFile<K extends string, V extends object>(configKey: K, config: V): Promise<void>;
    private getHostedResourceModules;
    private assertNoMissingResources;
    private getRemoteFromEgressPermission;
    private instanceOfRemote;
    getEgressPermissions(): Promise<{
        type: string;
        domains: string[] | undefined;
    }[]>;
    getAuthProviders(): Promise<Record<string, {
        key: string;
        name: string;
    }>>;
    getResources(resourceTypes?: ResourceType[]): Promise<ResourceDetails[]>;
    getConnectKey(): Promise<string | undefined>;
    private getResourceType;
}
//# sourceMappingURL=config-file.d.ts.map