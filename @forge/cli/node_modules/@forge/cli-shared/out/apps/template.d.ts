import { ZipAccessor } from '../file-system';
import { Logger } from '../ui';
export declare class NoTemplateError extends Error {
    constructor(template: string);
}
export declare class InvalidTemplateArchiveError extends Error {
}
export interface TemplateDownloader {
    download(template: string, zipFile: string): Promise<void>;
}
export interface TemplateExtractor {
    extract(zipFile: string, destDirectory: string): Promise<void>;
}
export interface TemplateLister {
    getAvailableTemplates(): Promise<string[]>;
}
export interface Templater extends TemplateLister {
    downloadAndExtract(template: string, directory: string): Promise<void>;
}
export declare class TemplateServiceDownloader implements TemplateDownloader {
    download(template: string, zipFile: string): Promise<void>;
    private buildZipUrl;
}
export declare class ZipTemplateExtractor implements TemplateExtractor {
    private readonly zipAccessor;
    constructor(zipAccessor: ZipAccessor);
    extract(zipFile: string, destDirectory: string): Promise<void>;
    private moveArchiveFilesToDirectory;
}
export declare class TemplateFetchError extends Error {
    constructor();
}
export declare class TemplateServiceLister implements TemplateLister {
    private isValidTemplateMapEntry;
    private isValidTemplatesResponse;
    getAvailableTemplates(): Promise<string[]>;
}
export declare class ComposableTemplater implements Templater {
    private readonly downloader;
    private readonly extractor;
    private readonly lister;
    private readonly logger;
    constructor(downloader: TemplateDownloader, extractor: TemplateExtractor, lister: TemplateLister, logger: Logger);
    downloadAndExtract(template: string, directory: string): Promise<void>;
    getAvailableTemplates(): Promise<string[]>;
}
//# sourceMappingURL=template.d.ts.map