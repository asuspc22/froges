import { ConfigSectionWriter } from '../config';
import { Logger } from '../ui';
import { AppDetails } from './app-config';
export interface CreateAppClientInput {
    name: string;
    description?: string;
}
export interface CreateAppResult {
    id: string;
    environments: {
        key: string;
    }[];
}
export interface CreateAppClient {
    createApp(input: CreateAppClientInput): Promise<CreateAppResult>;
}
export declare type RegisterAppResult = {
    environments: string[];
    analytics: {
        appId: string;
        appName: string;
    };
};
export declare class RegisterAppCommand {
    private readonly appClient;
    private readonly appConfigWriter;
    private readonly logger;
    constructor(appClient: CreateAppClient, appConfigWriter: ConfigSectionWriter<AppDetails>, logger: Logger);
    execute(input: CreateAppClientInput, shouldPrependAppName?: boolean): Promise<RegisterAppResult>;
    registerApp(input: CreateAppClientInput, directory: string, shouldPrependAppName: boolean): Promise<CreateAppResult>;
}
//# sourceMappingURL=register-app.d.ts.map