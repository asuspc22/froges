"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CachedConf = void 0;
const tslib_1 = require("tslib");
const conf_1 = tslib_1.__importDefault(require("conf"));
const isThenable = (input) => input && typeof input.then === 'function';
class CachedConf {
    constructor(arg) {
        if (typeof arg === 'string') {
            this.conf = new conf_1.default({
                projectName: arg
            });
        }
        else {
            this.conf = arg;
        }
    }
    get(key) {
        const result = this.conf.get(key);
        if (!result) {
            return undefined;
        }
        if (result.expiry && Date.now() > result.expiry) {
            return undefined;
        }
        return result.value;
    }
    set(key, value, age) {
        this.conf.set(key, {
            value,
            expiry: age ? Date.now() + age : undefined
        });
    }
    delete(key) {
        this.conf.delete(key);
    }
    cached(key, getter, age) {
        const cached = this.get(key);
        if (cached) {
            return cached;
        }
        const valuePromise = getter();
        if (isThenable(valuePromise)) {
            return valuePromise.then((value) => {
                this.set(key, value, age);
                return value;
            });
        }
        else {
            this.set(key, valuePromise, age);
            return valuePromise;
        }
    }
    static getCache(projectName) {
        return new CachedConf(projectName);
    }
    static memoryCache() {
        return new CachedConf(new Map());
    }
}
exports.CachedConf = CachedConf;
