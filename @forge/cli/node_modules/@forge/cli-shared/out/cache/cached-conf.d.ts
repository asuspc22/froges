interface CachedValue<E> {
    value: E;
    expiry: number | undefined;
}
interface ConfStore {
    get(key: string): CachedValue<any> | undefined;
    set(key: string, value: CachedValue<any>): void;
    delete(key: string): void;
}
export declare class CachedConf {
    private readonly conf;
    constructor(projectName: string);
    constructor(store: ConfStore);
    get<T = string | object>(key: string): T | undefined;
    set<T = string | object>(key: string, value: T, age?: number): void;
    delete(key: string): void;
    cached<T = string | object>(key: string, getter: () => T, age?: number): T;
    cached<T = string | object>(key: string, getter: () => Promise<T>, age?: number): Promise<T>;
    static getCache(projectName: string): CachedConf;
    static memoryCache(): CachedConf;
}
export {};
//# sourceMappingURL=cached-conf.d.ts.map