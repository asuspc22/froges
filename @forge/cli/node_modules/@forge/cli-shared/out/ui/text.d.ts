import { URL } from 'url';
import { AppEnvironmentType } from '../graphql/graphql-types';
export interface AddedScope {
    name: string;
    requiresInteractiveConsent?: boolean;
}
export declare const capitalise: (word: string) => string;
export declare const Text: {
    error: {
        noKeytar: string;
        noTokenStored: string;
        keytarAccessError: {
            other: (message: string) => string;
            mac: (message: string) => string;
            linux: (message: string) => string;
            windows: (message: string) => string;
        };
        outdatedCLIVersion: (installed: string, latest: string) => string;
        outdatedNodeVersion: (compatibleNodeVersion: string, currentNodeVersion: string) => string;
        invalidProduct: string;
        invalidSite: string;
        invalidTokenInKeytar: string;
        invalidTokenInEnv: (instructionsUrl: string, emailVar: string, tokenVar: string) => string;
        promptInputRequired: string;
        noExecutableFile: string;
        unhandledRejection: (reason: any, promise: Promise<any>) => string;
        resourceDefinitionMissing: (resourceKeys: string[]) => string;
        resourceDirectoryMissing: (resourceKey: string, directory: string) => string;
        resourceDirectoryEmpty: (resourceKey: string, directory: string) => string;
        templateFetchFailed: string;
        handlerFormat: (handler: string) => string;
    };
    warning: {
        plaintextCredentialsFound: (url: string) => string;
        plaintextCredentialsMigrated: string;
        plaintextCredentialsNotMigrated: string;
        unsupportedNodeVersion: (_userNodeVersion: string, supportedNodeVersions: string) => string;
    };
    installationContext: {
        overviewProduct: string;
        promptProduct: string;
        overviewSite: string;
        promptSite: string;
        promptWorkspace: string;
    };
    upgradeContext: {
        overview: string;
        promptInstallation: string;
    };
    optionSite: string;
    optionProduct: (supportedProducts: string[]) => string;
    optionVerbose: string;
    optionJson: string;
    invalidCmd: (command: string) => string;
    invalidCmdHelp: string;
    rerunningWithVerbose: string;
    ctrlC: string;
    graphQL: {
        request: (url: string, query: string, variables: string) => string;
        response: (result: string, requestId?: string) => string;
        error: string;
        outdatedClientVersion: string;
    };
    snapshot: {
        error: (errorCode: string, errorMessage: string) => string;
        timeout: string;
    };
    hostedResources: {
        error: (errorMessage: string) => string;
        missingEntrypoint: string;
        missingEntrypointWithResourceDetails: (resourceKey: string, directory: string) => string;
        malformedEntrypoint: string;
        malformedEntrypointWithKey: (resourceKey: string) => string;
        lambdaTimeout: string;
    };
    bundle: {
        detectedChanges: string;
        errors: (errors: string[]) => string;
        failed: string;
        finished: string;
        warnings: (warnings: string[]) => string;
    };
    config: {
        missing: string;
        invalid: string;
        manifest: {
            invalid: string;
        };
    };
    autocomplete: {
        cmd: {
            desc: string;
        };
        confirmInstalling: string;
        installing: string;
        uninstalling: string;
        postinstall: string;
        error: {
            badArg: (arg: string | undefined) => string;
            unsupportedShell: string;
            unsupportedNodeVersion: string;
        };
    };
    login: {
        cmd: string;
        optionEmail: string;
        optionToken: string;
        introText: string;
        promptEmail: string;
        url: (link: string) => string;
        promptToken: string;
        checking: string;
        nextStep: string;
        success: (name: string) => string;
        error: string;
    };
    logout: {
        cmd: string;
        loggedOut: string;
    };
    whoami: {
        cmd: string;
        success: {
            containerToken: (ciTokenKey: string) => string;
            personalCredentials: (email: string, name: string, accountId: string) => string;
        };
        error: {
            personalCredentialsEnv: (emailKey: string, apiTokenKey: string) => string;
            personalCredentialsKeytar: string;
        };
    };
    feedback: {
        cmd: string;
        description: string;
        success: string;
        action: {
            start: string;
            enterFeedbackPrompt: string;
            sendingFeedbackProgress: string;
            error: string;
            success: string;
        };
    };
    create: {
        cmd: {
            desc: string;
            start: string;
            success: (appName: string) => string;
            successDetails: (directory: string, validEnvironmentOptions: string[]) => string;
        };
        intro: (givenDirectory: string) => string;
        introWithCurrentDirectory: (currentDirectory: string) => string;
        optionTemplate: string;
        optionDirectory: string;
        overviewAppName: string;
        overviewTemplates: string;
        waitTemplates: string;
        promptName: string;
        promptCategory: string;
        promptTemplate: string;
        taskTemplate: {
            title: string;
            downloading: (template: string) => string;
            extracting: string;
        };
        taskRegister: string;
        taskCreateEnvironments: string;
        taskPackages: string;
        error: {
            dirtyDirectory: string;
            app: {
                creation: string;
            };
            directory: {
                exists: (path: string) => string;
            };
            name: {
                tooLong: () => string;
            };
            template: {
                download: (template: string) => string;
                notFound: (template: string) => string;
                noTemplates: string;
                unexpectedArchiveFormat: string;
            };
            packages: {
                installFail: string;
            };
        };
    };
    register: {
        intro: string;
        cmd: {
            desc: string;
            start: string;
            success: (appName: string) => string;
            successDetails: (validEnvironmentOptions: string[]) => string;
        };
        confirmQuestion: string;
    };
    env: {
        option: string;
        invalid: string;
        developmentOnly: (envKey: string) => string;
        error: {
            appOwnerNotExist: string;
            appNotExist: string;
            envNotExist: (envKey: string) => string;
        };
        displayEnvironment: (envKey: string, envType: AppEnvironmentType) => string;
        warn: {
            envWillBeCreated: (envKey: string) => string;
        };
        confirm: string;
    };
    defaultEnv: {
        info: string;
        prompt: string;
        warn: string;
        confirm: string;
        setSuccess: (envKey: string, envType: AppEnvironmentType) => string;
        createAndSetSuccess: (envKey: string, envType: AppEnvironmentType) => string;
        settingsInfo: string;
    };
    varsSet: {
        cmd: {
            desc: string;
            start: string;
            success: string;
        };
        overview: (environment: string, environmentType: AppEnvironmentType) => string;
        encryptInfo: string;
        promptEncrypt: string;
        keyInfo: string;
        promptKey: string;
        promptValue: string;
        optionSecret: string;
        yes: string;
        no: string;
    };
    varsUnset: {
        cmd: {
            desc: string;
            start: (environment: string, envType: AppEnvironmentType) => string;
            success: (key: string) => string;
        };
    };
    varsList: {
        hint: string;
        cmd: string;
        empty: (environment: string, envType: AppEnvironmentType) => string;
        encryptedValue: string;
        overview: (environment: string, envType: AppEnvironmentType) => string;
        postfix: string;
    };
    providers: {
        desc: string;
    };
    configureProvider: {
        cmd: {
            desc: string;
            start: string;
            success: string;
        };
        overview: (environment: string) => string;
        providerKeyInfo: string;
        noProviders: string;
        promptProviderKey: string;
        optionClientSecret: string;
        promptClientSecret: string;
    };
    environment: {
        desc: string;
    };
    createEnvironment: {
        cmd: {
            desc: string;
            start: string;
            success: (envKey: string, envType: AppEnvironmentType) => string;
        };
        overview: string;
        promptEnvironmentKey: string;
        successMessage: string;
        optionEnvironmentKey: string;
    };
    listEnvironment: {
        cmd: {
            desc: string;
        };
        overview: string;
    };
    deleteEnvironment: {
        cmd: {
            desc: string;
            start: string;
        };
        overview: string;
        info: string;
        prompt: string;
        confirmationInfo: string;
        promptConfirmation: string;
        individualSuccessMessage: (envKey: string, envType: AppEnvironmentType) => string;
        successMessage: string;
        optionEnvironmentKey: string;
        warningMessage: string;
        noEnvironmentMessage: string;
        hasInstallationError: (envKey: string) => string;
    };
    storage: {
        cmd: {
            desc: string;
        };
    };
    entitiesIndexes: {
        cmd: {
            desc: string;
        };
    };
    entitiesIndexesList: {
        cmd: {
            desc: string;
        };
        missingEntities: string;
    };
    contributors: {
        desc: string;
    };
    addContributor: {
        cmd: {
            desc: string;
            start: string;
            success: string;
        };
        overview: string;
        optionSkipConfirmation: string;
        optionContributorEmail: string;
        contributorEmailInfo: string;
        promptContributorEmail: string;
        confirmationInfo: string;
        learnMore: string;
        promptConfirmation: string;
    };
    listContributors: {
        cmd: {
            desc: string;
        };
        banner: string;
        noContributors: string;
        appOwner: string;
        userInactive: string;
        missingAppContributors: string;
    };
    removeContributors: {
        cmd: {
            desc: string;
            start: string;
            success: string;
        };
        overview: string;
        optionSkipConfirmation: string;
        optionContributorEmail: string;
        promptContributorEmail: string;
        confirmationInfo: string;
        promptConfirmation: string;
        commandSuccessMessage: (name: string[]) => string;
        addContributorMessage: string;
    };
    artifact: {
        error: {
            noDeployUrl: string;
            noPresignedUrls: string;
            noUploadId: string;
            noManifestInZip: (manifestFilename: string) => string;
            noManifestAtPath: (path: string) => string;
            empty: string;
            invalidYaml: (manifestFilename: string) => string;
        };
    };
    upload: {
        error: {
            notFound: (path: string) => string;
            empty: (path: string) => string;
            status: (status: number, responseBody: string) => string;
        };
    };
    deploy: {
        cmd: {
            desc: string;
            start1: (envKey: string, envType: AppEnvironmentType) => string;
            start2: (appName: string, envKey: string, envType: AppEnvironmentType) => string;
            success: string;
            successDetails: (appName: string, envKey: string, envType: AppEnvironmentType) => string;
            distributePageLink: (appId: string) => string;
        };
        taskLint: {
            lintError: string;
            lintWarning: (numWarnings: number) => string;
        };
        taskListInstallation: {
            listInstallationError: string;
        };
        connectKeyChange: {
            continueChange: string;
            continueDelete: string;
            mpacAppConnectKeyChangeAnalyticsError: string;
            mpacAppConnectKeyChangeError: (mpacAppKey: string, connectKey: string) => string;
            connectKeyChangeWarning: (environment: string, migrationKey: string, connectKey: string) => string;
            connectKeyDeleteWarning: (environment: string) => string;
        };
        taskPackage: {
            title: string;
            archiverWarning: (err: Error) => string;
            packageBundledFiles: string;
            packageFile: (fileName: string, filePath: string | null) => string;
            archiveCreated: (archivePath: string) => string;
        };
        taskUpload: {
            title: string;
            uploadingArchive: (uploadUrl: string) => string;
            uploadingResources: () => string;
        };
        taskDeploy: {
            serverStepStarted: (name: string) => string;
            serverStepFailed: string;
        };
        error: {
            notFound: string;
        };
        outdatedInstallations: string;
        listIndexes: (environment: string) => string;
        reindexingInProgress: {
            continueDeployment: string;
            successfulDeployment: string;
        };
        egressURL: {
            invalidURLError: (cause: string) => string;
            tooManyURLCharactersError: (cause: string) => string;
            tooManyUrlsError: (cause: string) => string;
        };
    };
    install: {
        cmd: {
            description: string;
            start: (envKey: string, envType: AppEnvironmentType) => string;
            end: (displayTick: boolean) => string;
        };
        booleanToScope: (isLatest: boolean) => string;
        banner: string;
        optionConfirmScopes: string;
        optionUpgrade: string;
        listScopes: (scopes: AddedScope[]) => string;
        listEgressAddresses: (egressAddresses: string[]) => string;
        permissionMismatchCommandSuggestion: (environment: string) => string;
        permissionsMismatch: (environment: string) => string;
        multiProductScopesDetected: (productsToInstall: string[], productsToUpgrade: string[], site: string, environment: string) => string;
        promptForPermissionsConfirmation: (permissionsMismatchInDevelopment: boolean) => string;
        success: {
            banner: (envKey: string, envType: AppEnvironmentType, product: string, site: string) => string;
        };
        error: {
            invalidAtlassianSite: (url: URL) => string;
            invalidWorkspace: (url: URL) => string;
            url: (url: string) => string;
            site: (url: string) => string;
            alreadyInstalledError: string;
            serverSideInstallationError: (message: string) => string;
            noDeploymentFound: (environment: string) => string;
            permissionsDeniedInstructions: (requestId: string, appId: string) => string;
        };
        security: {
            banner: (site: string) => string;
            questions: string[];
            notTrustedApp: {
                warn: (site: string) => string;
                confirmApproval: string;
                corpSecurityHelpdesk: string;
            };
        };
        authorization: {
            banner: string;
            link: (link: string) => string;
            openBrowser: string;
        };
    };
    upgrade: {
        banner: string;
        cmd: {
            start: (envKey: string, envType: AppEnvironmentType) => string;
            end: (displayTick: boolean) => string;
            error: string;
        };
        listScopes: (scopes: AddedScope[]) => string;
        listEgressAddresses: (egressAddresses: string[]) => string;
        permissionsMismatch: (environment: string) => string;
        promptForPermissionsConfirmation: (permissionsMismatchInDevelopment: boolean) => string;
        success: {
            banner: (envKey: string, envType: AppEnvironmentType, product: string, site: string) => string;
        };
        alreadyUpdated: {
            spinner: string;
            banner: (environment: string, product: string, site: string) => string;
        };
        error: {
            serverSideInstallationError: (message: string) => string;
        };
    };
    installList: {
        cmd: string;
        banner: string;
        noResourceId: string;
        noInstallations: string;
    };
    tunnel: {
        cmd: string;
        optionDebugger: string;
        preamble: string;
        startingTunnel: (environmentKey: string, envType: AppEnvironmentType) => string;
        startedServer: (port: number, isDebug: boolean) => string;
        startedTunnel: (tunnelUrl: string) => string;
        stoppingTunnel: string;
        stoppedTunnel: string;
        tunnelStatusChange: (status: string) => string;
        snapshotting: string;
        snapshottingNoLogs: string;
        startedInspector: (serverAddress: string) => string;
        inspectorUnsupported: string;
        invoke: (requestId: string, handler: string) => string;
        invocationTimeout: (timeout: number) => string;
        customUI: {
            fileServed: (filename: string, resourceKey: string) => string;
            fileProxied: (filename: string, resourceKey: string, tunnelPort: number) => string;
            warning: {
                cspViolation: (localUrl: string, violation: string) => string;
            };
        };
        pullDockerProgress: (percentCompleted: number) => string;
        pullDockerSuccess: string;
        preBundleTask: (title: string) => string;
        lintFailed: string;
        bundlingHeader: string;
        bundlingSucceeded: string;
        resourcesBundlingSucceeded: string;
        functionsBundlingSucceeded: string;
        error: {
            create: (message: string) => string;
            delete: (message: string) => string;
            ngrok: string;
            handler: {
                notFound: (handler: string) => string;
            };
            pullDocker: string;
            tunnelPackageMissing: string;
            dockerNotInstalled: (dockerDownloadLink: string) => string;
            dockerOutOfDate: (dockerDownloadLink: string) => string;
            dockerDaemonNotRunning: (err: string, isVerbose: boolean) => string;
            dockerPullFailed: (err: string) => string;
            serverNotStartedOnPort: (tunnelPort: number) => string;
        };
    };
    installationId: {
        prompt: string;
        errors: {
            invalid: string;
            notFound: (installationId: string) => string;
        };
    };
    uninstall: {
        cmd: {
            desc: string;
            start: string;
            success: (isMulti: boolean) => "Uninstalling...\n\n" | "Uninstalled\n\n";
        };
        interactive: {
            desc: string;
            progressInfo: string;
            done: string;
        };
        info: string;
        done: (product: string, domain: string, environment: string, isMulti: boolean) => string;
        failed: (product: string, domain: string, environment: string) => string;
        missingUninstallTask: string;
    };
    webtrigger: {
        cmd: string;
        copy: (url: string) => string;
        optionFuncKey: string;
        overviewFuncKey: string;
        promptFuncKey: string;
        error: {
            funcKey: string;
            noWebtriggers: string;
            creationError: (message: string) => string;
        };
    };
    logs: {
        cmd: string;
        optionInvocation: string;
        optionLimit: string;
        optionGroup: string;
        optionSince: string;
        invalidSinceOption: (since: string) => string;
    };
    lint: {
        blurb: string;
        cmd: string;
        running: string;
        noProblems: string;
        noFixableProblem: string;
        noFixableProblems: string;
        filename: import("chalk").Chalk & {
            supportsColor: import("chalk").ColorSupport;
        };
        linterFailed: (linterClass: string, failure: string) => string;
        fixed: (numFixableErrors: number, numFixableWarnings: number) => string;
        fixFollowUp: string;
        error: (line: number, column: number, message: string, reference: string) => string;
        summary: (numErrors: number, numWarnings: number, numFixableErrors: number, numFixableWarnings: number) => string;
        fixSummary: (numErrors: number, numFixableErrors: number, numFixableWarnings: number) => string;
        warning: (line: number, column: number, message: string, reference: string) => string;
    };
    stub: {
        error: (newName: string, oldName: string) => string;
    };
    customPrompts: {
        table: {
            promptMessage: (message: string) => string;
            headerMessage: (message: string, singleOption: boolean) => string;
        };
        singleSelectionTable: {
            doneHeaderMessage: (message: string) => string;
            decorateSelected: (site: string) => string;
        };
    };
    variables: {
        description: string;
    };
    settings: {
        description: string;
        analytics: {
            banner: string;
            promptMessage: string;
        };
        set: {
            description: <T extends readonly string[]>(choices: T) => string;
            invalidSetting: <T_1 extends readonly string[]>(choices: T_1) => string;
            invalidValue: string;
            success: (setting: string, value: string) => string;
        };
        list: {
            description: string;
        };
        usageAnalytics: {
            description: string;
        };
        defaultEnvironment: {
            description: string;
            info: string;
        };
    };
    nonInteractive: {
        description: string;
        error: {
            missingRequiredOption: (command: string, requiredOptions: string[]) => string;
            missingAnalyticsPreferences: string;
        };
    };
};
//# sourceMappingURL=text.d.ts.map