"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupRequestContext = exports.createLicenseContext = exports.createPrincipal = exports.isAccountIdDefined = exports.createInstallationContext = void 0;
const tslib_1 = require("tslib");
const ARI = tslib_1.__importStar(require("@forge/util/packages/cs-ari"));
function wrapWithBrackets(value) {
    return value !== undefined ? `{${value}}` : undefined;
}
function createInstallationContext(cfg) {
    const { contextAri } = cfg.meta;
    const ari = ARI.parse(contextAri);
    if (ari.resourceType === 'project') {
        return { projectId: ari.resourceId, installContext: contextAri };
    }
    if (ari.resourceType === 'workspace') {
        let workspaceId = ari.resourceId;
        if (ari.resourceOwner === 'bitbucket') {
            workspaceId = wrapWithBrackets(ari.resourceId);
        }
        return { workspaceId, installContext: contextAri };
    }
    return { installContext: contextAri };
}
exports.createInstallationContext = createInstallationContext;
function isAccountIdDefined(accountId) {
    return accountId !== undefined && accountId !== 'undefined';
}
exports.isAccountIdDefined = isAccountIdDefined;
function createPrincipal(cfg) {
    const accountId = cfg.meta.aaid;
    return isAccountIdDefined(accountId) ? { accountId } : undefined;
}
exports.createPrincipal = createPrincipal;
function createLicenseContext(cfg) {
    var _a;
    const { license } = cfg.meta;
    if (license) {
        return {
            license: {
                isActive: (_a = license.isActive) !== null && _a !== void 0 ? _a : false
            }
        };
    }
}
exports.createLicenseContext = createLicenseContext;
function setupRequestContext(cfg) {
    return Object.assign(Object.assign({ principal: createPrincipal(cfg) }, createLicenseContext(cfg)), createInstallationContext(cfg));
}
exports.setupRequestContext = setupRequestContext;
