import { ConsoleMethod } from '../logger';
export interface InspectorSessionCallbacks {
    onMessageFromFrontend: (messge: any) => void;
    onSessionStop: () => void;
}
export interface InspectorSessionControls {
    sendMessageToFrontend: (messge: any) => void;
    stopSession: () => void;
}
export declare type InspectorSessionCallbacksSupplier = (controls: InspectorSessionControls) => InspectorSessionCallbacks;
export interface Inspector {
    startServer: (port?: number) => string;
    stopServer: () => Promise<void>;
    isServerStopped: () => boolean;
    startSession: (callbacksSupplier: InspectorSessionCallbacksSupplier) => InspectorSessionControls | undefined;
    logConsole: (method: ConsoleMethod, ...args: any[]) => void;
}
export declare const SETUP_METHODS: string[];
export declare class ChromeInspector implements Inspector {
    static DENY_CODE: number;
    static DENY_REASON: string;
    static FORCE_RESET_FRONTEND_STATE_EVENTS: string[];
    private wss?;
    private callbacks?;
    private frontendMsgsForNewSandbox;
    startServer(port?: number): string;
    stopServer(): Promise<void>;
    isServerStopped(): boolean;
    startSession(callbacksSupplier: InspectorSessionCallbacksSupplier): InspectorSessionControls | undefined;
    logConsole(method: ConsoleMethod, ...args: any[]): void;
    getWebsocketPort(): number;
    private sendMessageToFrontend;
    private stopSession;
    private forceResetFrontendState;
    private addMessageForNewSandbox;
    private deliverMessagesForNewSandbox;
}
export declare const notImplementedInspector: Inspector;
//# sourceMappingURL=inspector.d.ts.map