"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.p3LogEvent = exports.invokeNetworkRequestFinishEvent = exports.invokeNetworkRequestStartEvent = exports.getHostname = exports.isNonEmptyArray = exports.EVENT_NETWORK_REQUEST_FINISH = exports.EVENT_NETWORK_REQUEST_START = exports.EVENT_P3_LOG = exports.StaticInvocationEventEmitter = void 0;
const events_1 = require("events");
const url_1 = require("url");
class InvocationEventEmitter extends events_1.EventEmitter {
}
exports.StaticInvocationEventEmitter = new InvocationEventEmitter();
exports.EVENT_P3_LOG = 'p3-log';
exports.EVENT_NETWORK_REQUEST_START = 'network-request-start';
exports.EVENT_NETWORK_REQUEST_FINISH = 'network-request-finish';
function isNonEmptyArray(arr) {
    return arr.length > 0;
}
exports.isNonEmptyArray = isNonEmptyArray;
function getHostname(url) {
    let host;
    try {
        host = new url_1.URL(url).hostname;
    }
    catch (e) {
        host = '';
    }
    return host;
}
exports.getHostname = getHostname;
function invokeNetworkRequestStartEvent(invocation, networkEvent) {
    const eventData = {
        invocationId: invocation.getInvocationId(),
        hostname: getHostname(networkEvent.url),
        request: {
            body: networkEvent.request.body,
            headers: networkEvent.request.headers
        }
    };
    exports.StaticInvocationEventEmitter.emit(exports.EVENT_NETWORK_REQUEST_START, eventData);
}
exports.invokeNetworkRequestStartEvent = invokeNetworkRequestStartEvent;
function invokeNetworkRequestFinishEvent(invocation, networkEvent) {
    const eventData = {
        invocationId: invocation.getInvocationId(),
        hostname: getHostname(networkEvent.url),
        response: networkEvent.response,
        error: networkEvent.error
    };
    exports.StaticInvocationEventEmitter.emit(exports.EVENT_NETWORK_REQUEST_FINISH, eventData);
}
exports.invokeNetworkRequestFinishEvent = invokeNetworkRequestFinishEvent;
function p3LogEvent(invocation, logLevel, logArguments) {
    const eventData = {
        invocationId: invocation.getInvocationId(),
        logLevel,
        logArguments
    };
    exports.StaticInvocationEventEmitter.emit(exports.EVENT_P3_LOG, eventData);
}
exports.p3LogEvent = p3LogEvent;
