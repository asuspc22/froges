"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvocationRequest = exports.xenInvocationRequestFactory = void 0;
const tslib_1 = require("tslib");
const app_manifest_1 = require("../app-manifest");
const feature_flag_1 = require("../feature-flag");
const ARI = tslib_1.__importStar(require("@forge/util/packages/cs-ari"));
const __1 = require("..");
class XenInvocationRequestImpl {
    constructor(request, invocationId) {
        this.request = request;
        this.invocationId = invocationId;
    }
    getFeatureFlags() {
        if (!this.featureFlags) {
            this.featureFlags = feature_flag_1.FeatureFlags.fromRequestMetaData(this.request._meta);
        }
        return this.featureFlags;
    }
    isFeatureFlagEnabled(flag) {
        return this.getFeatureFlags().isFeatureFlagEnabled(flag);
    }
    getInvocationId() {
        return this.invocationId;
    }
    getAppId() {
        return this.request._meta.appContext.appId;
    }
    getEnvironmentId() {
        return this.request._meta.appContext.environmentId;
    }
    getCloudId() {
        return ARI.parse(this.request._meta.contextAri).cloudId;
    }
    getContextAri() {
        return this.request._meta.contextAri;
    }
    getRmsConfig() {
        return this.request._meta.rms;
    }
    getInvocationResourceOwner() {
        return ARI.parse(this.request._meta.contextAri).resourceOwner;
    }
    getWorkspaceId() {
        const ari = ARI.parse(this.request._meta.contextAri);
        return ari.resourceType === 'workspace' ? ari.resourceId : undefined;
    }
    getAppVersion() {
        return this.request._meta.appContext.appVersion;
    }
    getLimits() {
        return this.request._meta.limits;
    }
    getAppToken() {
        return this.request._meta.appToken;
    }
    getProxy() {
        var _a;
        if (!this.isFeatureFlagEnabled(feature_flag_1.XEN_RUNTIME_ENABLE_EGRESS_PROXY)) {
            return undefined;
        }
        return (_a = this.request._meta) === null || _a === void 0 ? void 0 : _a.proxy;
    }
    getAllTokens() {
        return this.request._meta.tokens;
    }
    getUserVariables() {
        return this.request.variables;
    }
    getHandler() {
        return this.request.handler;
    }
    getBody() {
        return this.request.body;
    }
    getLicense() {
        return this.request._meta.license;
    }
    getEgressAllowList() {
        return this.request._meta.fetchAllowList;
    }
    getTracing() {
        return this.request._meta.tracing;
    }
    __deprecatedGetMeta() {
        return this.request._meta;
    }
}
function xenInvocationRequestFactory(invocation) {
    const { request, ctx: { requestId } } = invocation;
    const externalRequestBody = (0, __1.validateInvocation)(request);
    return new XenInvocationRequestImpl(externalRequestBody, requestId);
}
exports.xenInvocationRequestFactory = xenInvocationRequestFactory;
class InvocationRequest {
    constructor(sandboxConfig, xenInvocationRequest, manifest) {
        this.sandboxConfig = sandboxConfig;
        this.xenInvocationRequest = xenInvocationRequest;
        this.manifest = manifest;
        this.thirdPartyAuthTokenReferences = this.getThirdPartyTokenReferences();
    }
    static async setup(sandboxConfig, xenInvocationRequest) {
        const manifest = await app_manifest_1.AppManifest.fromFile(sandboxConfig.appPath);
        return this.setupSync(sandboxConfig, xenInvocationRequest, manifest);
    }
    static setupSync(sandboxConfig, xenInvocationRequest, manifest) {
        return new InvocationRequest(sandboxConfig, xenInvocationRequest, manifest);
    }
    getAppAri() {
        return this.manifest.manifest.app.id;
    }
    isFeatureFlagEnabled(flag) {
        return this.xenInvocationRequest.isFeatureFlagEnabled(flag);
    }
    getAppId() {
        return this.xenInvocationRequest.getAppId();
    }
    getEnvironmentId() {
        return this.xenInvocationRequest.getEnvironmentId();
    }
    getEgressAllowList() {
        return this.xenInvocationRequest.getEgressAllowList();
    }
    getHostForRemote(remote) {
        return this.manifest.getHostForRemote(remote);
    }
    getDefaultRemoteForProvider(provider) {
        return this.manifest.getDefaultRemoteForProvider(provider);
    }
    getExternalAuthProviderConfig(provider) {
        return this.manifest.getExternalAuthProviderConfig(provider);
    }
    getSandboxConfig() {
        return this.sandboxConfig;
    }
    getInvocationId() {
        return this.xenInvocationRequest.getInvocationId();
    }
    getCloudId() {
        return this.xenInvocationRequest.getCloudId();
    }
    getWorkspaceId() {
        return this.xenInvocationRequest.getWorkspaceId();
    }
    getContextAri() {
        return this.xenInvocationRequest.getContextAri();
    }
    getRmsConfig() {
        return this.xenInvocationRequest.getRmsConfig();
    }
    getInvocationResourceOwner() {
        return this.xenInvocationRequest.getInvocationResourceOwner();
    }
    getAppToken() {
        return this.xenInvocationRequest.getAppToken();
    }
    getProxy() {
        return this.xenInvocationRequest.getProxy();
    }
    getTokenForService(requestedServiceKey, tokenId) {
        return this.getAllTokens().find(({ service, id }) => service === requestedServiceKey && (!tokenId || id === tokenId));
    }
    getTokenIDsForService(serviceKey) {
        return this.getAllTokens()
            .filter(({ service }) => service === serviceKey)
            .map((token) => token.id);
    }
    getAllTokens() {
        return this.xenInvocationRequest.getAllTokens();
    }
    getAtlassianTokenServiceKey() {
        return 'atlassian-token-service-key';
    }
    getAtlassianServiceToken() {
        const { token } = this.getTokenForService(this.getAtlassianTokenServiceKey()) || {};
        return token;
    }
    getAppTokenKey() {
        return '__atlassian-app-token';
    }
    getThirdPartyTokenReferenceList(serviceKey) {
        var _a;
        return (((_a = this.thirdPartyAuthTokenReferences) === null || _a === void 0 ? void 0 : _a.filter((ref) => ref.serviceKey === serviceKey).map((service) => service.reference)) || []);
    }
    getThirdPartyTokenReferences() {
        return this.getThirdPartyTokens().map(({ service, token }, index) => {
            const reference = `${service}-${index + 1}`;
            return {
                reference,
                token,
                serviceKey: service
            };
        });
    }
    getThirdPartyTokens() {
        return this.getAllTokens().filter(({ service }) => service !== this.getAtlassianTokenServiceKey());
    }
    getThirdPartyToken(serviceKey) {
        var _a, _b;
        return (_b = (_a = this.thirdPartyAuthTokenReferences) === null || _a === void 0 ? void 0 : _a.find((ref) => ref.reference === serviceKey || ref.serviceKey === serviceKey)) === null || _b === void 0 ? void 0 : _b.token;
    }
    getAppVersion() {
        return this.xenInvocationRequest.getAppVersion();
    }
    getLimits() {
        return this.xenInvocationRequest.getLimits();
    }
    getLicense() {
        return this.xenInvocationRequest.getLicense();
    }
    getTracing() {
        return this.xenInvocationRequest.getTracing();
    }
}
exports.InvocationRequest = InvocationRequest;
