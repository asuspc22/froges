"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeSandbox = void 0;
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const path_1 = require("path");
const readline_1 = tslib_1.__importDefault(require("readline"));
const uuid_1 = tslib_1.__importDefault(require("uuid"));
const invocation_event_1 = require("./invocation-event");
const RUNNER = (0, path_1.join)(__dirname, '..', '..', 'out', 'sandbox', 'sandbox-runner.js');
class NodeSandbox {
    constructor({ appPath, modName, handler }) {
        this.name = `${modName}.${handler}`;
        const fileName = `${appPath}/${modName}.js`;
        this.callbacks = new Map();
        this.process = (0, child_process_1.fork)(RUNNER, [fileName, handler], {
            stdio: ['ignore', 'pipe', 2, 'ipc']
        });
        readline_1.default.createInterface(this.process.stdout).on('line', (line) => {
            const message = JSON.parse(line);
            this.handleOutput(message);
        });
        this.process.on('message', (message) => {
            var _a;
            const requestId = message.requestId;
            const result = message.result;
            (_a = this.callbacks.get(requestId)) === null || _a === void 0 ? void 0 : _a(result);
        });
    }
    handleOutput(output) {
        if (output.invocationId) {
            const p3LogEvent = output;
            invocation_event_1.StaticInvocationEventEmitter.emit(invocation_event_1.EVENT_P3_LOG, p3LogEvent);
        }
    }
    async execute(xenInvocationRequest, invocationLimits, inspector) {
        const lambdaEvent = {
            _meta: xenInvocationRequest.__deprecatedGetMeta(),
            body: xenInvocationRequest.getBody(),
            variables: xenInvocationRequest.getUserVariables()
        };
        const requestId = (0, uuid_1.default)();
        return new Promise((resolve, reject) => {
            this.callbacks.set(requestId, (result) => {
                this.callbacks.delete(requestId);
                resolve(result);
            });
            const lambdaContext = { awsRequestId: requestId };
            this.process.send({ lambdaEvent, lambdaContext });
        });
    }
    stop() {
        this.process.kill();
    }
}
exports.NodeSandbox = NodeSandbox;
