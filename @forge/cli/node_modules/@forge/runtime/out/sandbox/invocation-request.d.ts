import { SandboxConfig } from '.';
import { AppManifest, AuthProviderType } from '../app-manifest';
import { ExternalRequestBody, ExternalRequestVariable, Invocation, Metadata } from '../request';
export interface ServiceToken {
    id: string;
    service: string;
    token: string;
}
export interface ProxyInformation {
    token: string;
    url: string;
}
export interface RmsConfig {
    url: string;
    host: string;
}
declare type Limit = Metadata['limits'];
declare type InvocationBody = ExternalRequestBody['body'];
declare type AppLicenseState = Metadata['license'];
export interface BaseInvocationRequest {
    isFeatureFlagEnabled(flag: string): boolean;
    getAppId(): string;
    getEnvironmentId(): string;
    getInvocationId(): string;
    getCloudId(): string | undefined;
    getWorkspaceId(): string | undefined;
    getContextAri(): string;
    getAppVersion(): string;
    getLimits(): Limit;
    getAppToken(): string | undefined;
    getProxy(): ProxyInformation | undefined;
    getInvocationResourceOwner(): string;
    getAllTokens(): ServiceToken[];
    getLicense(): AppLicenseState | undefined;
    getEgressAllowList(): string[] | undefined;
    getTracing(): {
        traceId: string;
        spanId: string;
    };
    getRmsConfig(): RmsConfig | undefined;
}
export interface XenInvocationRequest extends BaseInvocationRequest {
    getUserVariables(): ExternalRequestVariable[] | undefined;
    getHandler(): string;
    getBody(): InvocationBody;
    __deprecatedGetMeta(): Metadata;
}
export declare function xenInvocationRequestFactory(invocation: Invocation): XenInvocationRequest;
export declare class InvocationRequest implements BaseInvocationRequest {
    private sandboxConfig;
    private xenInvocationRequest;
    private manifest;
    static setup(sandboxConfig: SandboxConfig, xenInvocationRequest: XenInvocationRequest): Promise<InvocationRequest>;
    static setupSync(sandboxConfig: SandboxConfig, xenInvocationRequest: XenInvocationRequest, manifest: AppManifest): InvocationRequest;
    private thirdPartyAuthTokenReferences;
    constructor(sandboxConfig: SandboxConfig, xenInvocationRequest: XenInvocationRequest, manifest: AppManifest);
    getAppAri(): string;
    isFeatureFlagEnabled(flag: string): boolean;
    getAppId(): string;
    getEnvironmentId(): string;
    getEgressAllowList(): string[] | undefined;
    getHostForRemote(remote: string): string | undefined;
    getDefaultRemoteForProvider(provider: string): string | undefined;
    getExternalAuthProviderConfig(provider: string): undefined | AuthProviderType;
    protected getSandboxConfig(): SandboxConfig;
    getInvocationId(): string;
    getCloudId(): string | undefined;
    getWorkspaceId(): string | undefined;
    getContextAri(): string;
    getRmsConfig(): RmsConfig | undefined;
    getInvocationResourceOwner(): string;
    getAppToken(): string | undefined;
    getProxy(): ProxyInformation | undefined;
    getTokenForService(requestedServiceKey: string, tokenId?: string): ServiceToken | undefined;
    getTokenIDsForService(serviceKey: string): string[];
    getAllTokens(): ServiceToken[];
    getAtlassianTokenServiceKey(): string;
    getAtlassianServiceToken(): string | undefined;
    getAppTokenKey(): string;
    getThirdPartyTokenReferenceList(serviceKey: string): string[];
    getThirdPartyTokenReferences(): {
        reference: string;
        token: string;
        serviceKey: string;
    }[];
    getThirdPartyTokens(): ServiceToken[];
    getThirdPartyToken(serviceKey: string): string | undefined;
    getAppVersion(): string;
    getLimits(): Limit;
    getLicense(): AppLicenseState | undefined;
    getTracing(): {
        traceId: string;
        spanId: string;
    };
}
export {};
//# sourceMappingURL=invocation-request.d.ts.map