"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryMetrics = void 0;
const in_memory_counter_metric_1 = require("./in-memory-counter-metric");
const in_memory_event_metric_1 = require("./in-memory-event-metric");
const in_memory_gauge_metric_1 = require("./in-memory-gauge-metric");
const in_memory_timed_metric_1 = require("./in-memory-timed-metric");
class InMemoryMetrics {
    constructor(tags = {}) {
        this._timers = [];
        this._counters = new Map();
        this._gauges = new Map();
        this._children = new Map();
        this._events = [];
        this._tags = tags;
    }
    getTimers() {
        return this._timers;
    }
    getCounters() {
        return this._counters;
    }
    getEvents() {
        return this._events;
    }
    getGauges() {
        return this._gauges;
    }
    getChildren() {
        return this._children;
    }
    child(name, tags) {
        if (!this._children.has(name)) {
            const child = new InMemoryMetrics();
            Object.assign(child._tags, this._tags);
            Object.assign(child._tags, tags);
            this._children.set(name, child);
        }
        return this._children.get(name);
    }
    counter(name, tags) {
        if (!this._counters.has(name)) {
            const counter = new in_memory_counter_metric_1.InMemoryCounterMetric(name, Object.assign(Object.assign({}, this._tags), tags));
            this._counters.set(name, counter);
        }
        return this._counters.get(name);
    }
    event(title, description) {
        this._events.push(new in_memory_event_metric_1.InMemoryEventMetric(title, description));
    }
    gauge(name, tags) {
        if (!this._gauges.has(name)) {
            const gauge = new in_memory_gauge_metric_1.InMemoryGaugeMetric(name, Object.assign(Object.assign({}, this._tags), tags));
            this._gauges.set(name, gauge);
        }
        return this._gauges.get(name);
    }
    timing(name, tags) {
        const timer = new in_memory_timed_metric_1.InMemoryTimedMetric(name, Object.assign(Object.assign({}, this._tags), tags));
        this._timers.push(timer);
        return timer;
    }
}
exports.InMemoryMetrics = InMemoryMetrics;
