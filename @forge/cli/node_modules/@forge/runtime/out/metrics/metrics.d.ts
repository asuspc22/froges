import { Counter, Gauge, Metrics, Tags, Timing } from '@forge/util/packages/metrics-interface';
import { XenInvocationRequest } from '../sandbox/invocation-request';
import { InMemoryMetrics } from './in-memory-metrics';
export { InMemoryMetrics };
export declare enum MetricType {
    TimerMetric = "timer",
    CounterMetric = "counter",
    GaugeMetric = "gauge",
    EventMetric = "event"
}
export interface Metric {
    name: string;
    type: MetricType;
    value: number | string;
    tags: Tags;
}
export interface DefaultMetricsRecord {
    getName(): string;
    getTags(): Tags;
}
export interface TimedMetricsRecord extends DefaultMetricsRecord, Timing {
    getTime(): number;
}
export interface CounterMetricsRecord extends DefaultMetricsRecord, Counter {
    getCount(): number;
}
export interface GaugeMetricsRecord extends DefaultMetricsRecord, Gauge {
    getValue(): number;
}
export interface EventMetricsRecord extends DefaultMetricsRecord {
    getDescription(): string;
}
export declare class MetricsCollector {
    private readonly _metrics;
    constructor(_metrics: Metrics);
    metrics(): Metrics;
    collectMetrics(): Metric[];
    static collect(metrics: Metrics, prefix?: string | undefined): Metric[];
    wrapInMetrics(options: {
        name: string;
        tags?: Tags;
    }, callback: () => Promise<any>): Promise<any>;
}
export declare const createMetricsCollector: (xenInvocationRequest: XenInvocationRequest) => {
    collector: MetricsCollector;
    enabled: boolean;
};
//# sourceMappingURL=metrics.d.ts.map