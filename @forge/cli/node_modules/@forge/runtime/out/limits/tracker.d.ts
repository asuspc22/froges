import { BaseInvocationRequest } from '../sandbox/invocation-request';
export declare const Limit: {
    readonly InvocationLogEntryCount: "forge-invocation-log-entry-count";
    readonly FetchRequestLimit: "forge-fetch-request-count";
};
export interface LimitsTracker {
    incrementCount(limitKey: LimitKey, by?: number): void;
    getCount(limitKey: LimitKey): number;
    getLimit(limitKey: LimitKey): number | undefined;
    hasCountRemaining(limitKey: LimitKey): boolean;
}
export declare type LimitKey = typeof Limit[keyof typeof Limit];
declare type LimitType = {
    [x in LimitKey]?: number;
};
declare type LimitCounter = {
    [x in LimitKey]?: number;
};
declare class PerInvocationLimitsTracker implements LimitsTracker {
    limits: LimitType;
    limitCount: LimitCounter;
    constructor(limits: LimitType | undefined);
    incrementCount(limitKey: LimitKey, by?: number): void;
    getCount(limitKey: LimitKey): number;
    getLimit(limitKey: LimitKey): number | undefined;
    hasCountRemaining(limitKey: LimitKey): boolean;
}
export declare const perInvocationLimitsTrackerFactory: (request: BaseInvocationRequest) => PerInvocationLimitsTracker;
export {};
//# sourceMappingURL=tracker.d.ts.map