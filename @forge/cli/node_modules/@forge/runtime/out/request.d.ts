import * as t from 'io-ts';
declare const MetadataType: t.IntersectionC<[t.TypeC<{
    apiAuth: t.TypeC<{
        env: t.StringC;
        objects: t.StringC;
    }>;
    clientId: t.StringC;
    contextAri: t.StringC;
    tokens: t.ArrayC<t.TypeC<{
        id: t.StringC;
        service: t.StringC;
        token: t.StringC;
    }>>;
    appContext: t.TypeC<{
        appId: t.StringC;
        environmentId: t.StringC;
        appVersion: t.StringC;
        functionKey: t.StringC;
        moduleType: t.StringC;
        moduleKey: t.StringC;
    }>;
    tracing: t.TypeC<{
        traceId: t.StringC;
        spanId: t.StringC;
    }>;
}>, t.PartialC<{
    aaid: t.StringC;
    featureFlags: t.ArrayC<t.StringC>;
    appToken: t.StringC;
    proxy: t.IntersectionC<[t.TypeC<{
        token: t.StringC;
        url: t.StringC;
    }>, t.PartialC<{
        host: t.StringC;
    }>]>;
    rms: t.TypeC<{
        url: t.StringC;
        host: t.StringC;
    }>;
    limits: t.RecordC<t.StringC, t.NumberC>;
    license: t.PartialC<{
        isActive: t.BooleanC;
    }>;
    fetchAllowList: t.ArrayC<t.StringC>;
}>]>;
declare const VariableType: t.TypeC<{
    secure: t.BooleanC;
    key: t.StringC;
    value: t.UnionC<[t.StringC, t.UndefinedC]>;
}>;
export declare const ExternalRequestBodyType: t.IntersectionC<[t.TypeC<{
    _meta: t.IntersectionC<[t.TypeC<{
        apiAuth: t.TypeC<{
            env: t.StringC;
            objects: t.StringC;
        }>;
        clientId: t.StringC;
        contextAri: t.StringC;
        tokens: t.ArrayC<t.TypeC<{
            id: t.StringC;
            service: t.StringC;
            token: t.StringC;
        }>>;
        appContext: t.TypeC<{
            appId: t.StringC;
            environmentId: t.StringC;
            appVersion: t.StringC;
            functionKey: t.StringC;
            moduleType: t.StringC;
            moduleKey: t.StringC;
        }>;
        tracing: t.TypeC<{
            traceId: t.StringC;
            spanId: t.StringC;
        }>;
    }>, t.PartialC<{
        aaid: t.StringC;
        featureFlags: t.ArrayC<t.StringC>;
        appToken: t.StringC;
        proxy: t.IntersectionC<[t.TypeC<{
            token: t.StringC;
            url: t.StringC;
        }>, t.PartialC<{
            host: t.StringC;
        }>]>;
        rms: t.TypeC<{
            url: t.StringC;
            host: t.StringC;
        }>;
        limits: t.RecordC<t.StringC, t.NumberC>;
        license: t.PartialC<{
            isActive: t.BooleanC;
        }>;
        fetchAllowList: t.ArrayC<t.StringC>;
    }>]>;
    body: t.UnknownRecordC;
    handler: t.StringC;
}>, t.PartialC<{
    variables: t.ArrayC<t.TypeC<{
        secure: t.BooleanC;
        key: t.StringC;
        value: t.UnionC<[t.StringC, t.UndefinedC]>;
    }>>;
}>]>;
export declare const InvocationType: t.TypeC<{
    request: t.IntersectionC<[t.TypeC<{
        _meta: t.IntersectionC<[t.TypeC<{
            apiAuth: t.TypeC<{
                env: t.StringC;
                objects: t.StringC;
            }>;
            clientId: t.StringC;
            contextAri: t.StringC;
            tokens: t.ArrayC<t.TypeC<{
                id: t.StringC;
                service: t.StringC;
                token: t.StringC;
            }>>;
            appContext: t.TypeC<{
                appId: t.StringC;
                environmentId: t.StringC;
                appVersion: t.StringC;
                functionKey: t.StringC;
                moduleType: t.StringC;
                moduleKey: t.StringC;
            }>;
            tracing: t.TypeC<{
                traceId: t.StringC;
                spanId: t.StringC;
            }>;
        }>, t.PartialC<{
            aaid: t.StringC;
            featureFlags: t.ArrayC<t.StringC>;
            appToken: t.StringC;
            proxy: t.IntersectionC<[t.TypeC<{
                token: t.StringC;
                url: t.StringC;
            }>, t.PartialC<{
                host: t.StringC;
            }>]>;
            rms: t.TypeC<{
                url: t.StringC;
                host: t.StringC;
            }>;
            limits: t.RecordC<t.StringC, t.NumberC>;
            license: t.PartialC<{
                isActive: t.BooleanC;
            }>;
            fetchAllowList: t.ArrayC<t.StringC>;
        }>]>;
        body: t.UnknownRecordC;
        handler: t.StringC;
    }>, t.PartialC<{
        variables: t.ArrayC<t.TypeC<{
            secure: t.BooleanC;
            key: t.StringC;
            value: t.UnionC<[t.StringC, t.UndefinedC]>;
        }>>;
    }>]>;
    ctx: t.TypeC<{
        requestId: t.StringC;
        timeout: t.NumberC;
        traceId: t.StringC;
    }>;
}>;
export declare type ExternalRequestVariable = t.TypeOf<typeof VariableType>;
export declare type Invocation = t.TypeOf<typeof InvocationType>;
export declare type Metadata = t.TypeOf<typeof MetadataType>;
export declare type ExternalRequestBody = t.TypeOf<typeof ExternalRequestBodyType>;
export {};
//# sourceMappingURL=request.d.ts.map