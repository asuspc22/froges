"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvocationType = exports.ExternalRequestBodyType = void 0;
const tslib_1 = require("tslib");
const t = tslib_1.__importStar(require("io-ts"));
const MetadataType = t.intersection([
    t.type({
        apiAuth: t.type({
            env: t.string,
            objects: t.string
        }),
        clientId: t.string,
        contextAri: t.string,
        tokens: t.array(t.type({
            id: t.string,
            service: t.string,
            token: t.string
        })),
        appContext: t.type({
            appId: t.string,
            environmentId: t.string,
            appVersion: t.string,
            functionKey: t.string,
            moduleType: t.string,
            moduleKey: t.string
        }),
        tracing: t.type({
            traceId: t.string,
            spanId: t.string
        })
    }),
    t.partial({
        aaid: t.string,
        featureFlags: t.array(t.string),
        appToken: t.string,
        proxy: t.intersection([
            t.type({
                token: t.string,
                url: t.string
            }),
            t.partial({
                host: t.string
            })
        ]),
        rms: t.type({
            url: t.string,
            host: t.string
        }),
        limits: t.record(t.string, t.number),
        license: t.partial({
            isActive: t.boolean
        }),
        fetchAllowList: t.array(t.string)
    })
]);
const VariableType = t.type({
    secure: t.boolean,
    key: t.string,
    value: t.union([t.string, t.undefined])
});
exports.ExternalRequestBodyType = t.intersection([
    t.type({
        _meta: MetadataType,
        body: t.Dictionary,
        handler: t.string
    }),
    t.partial({
        variables: t.array(VariableType)
    })
]);
exports.InvocationType = t.type({
    request: exports.ExternalRequestBodyType,
    ctx: t.type({
        requestId: t.string,
        timeout: t.number,
        traceId: t.string
    })
});
