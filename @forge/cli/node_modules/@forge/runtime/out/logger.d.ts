export declare enum LogLevel {
    DEBUG = 20,
    INFO = 30,
    WARN = 40,
    ERROR = 50,
    FATAL = 60
}
export declare const CONSOLE_LEVEL_METHODS: readonly ["debug", "info", "warn", "error"];
export declare const CONSOLE_METHODS: readonly ["debug", "info", "warn", "error", "log"];
export declare type ConsoleMethod = typeof CONSOLE_METHODS[number];
export declare enum LogType {
    HEADER = "header",
    FOOTER = "footer",
    LOG = "log"
}
export declare type LogHeader = {
    type: LogType.HEADER;
    id: string;
    appId: string;
    environmentId: string;
    appVersion: string;
    installationContext: string;
    functionKey: string;
    moduleType: string;
    moduleKey: string;
    b3: string;
    featureFlags: string[];
    runtime: string;
};
export declare type LogFooter = {
    type: LogType.FOOTER;
    id: string;
    success: boolean;
    logMetadata: {
        bytes: number;
        truncated: boolean;
        errorCount: number;
    };
    outboundCalls: {
        count: number;
        stargateCount: number;
        externalCount: number;
        rejectedCount: number;
        bytesOut: number;
        bytesIn: number;
        msWaiting: number;
    };
    function: {
        bytesIn: number;
        bytesOut: number;
        durationMs: number;
        mem: number;
    };
};
export declare type LogLine = {
    type: LogType.LOG;
    id: string;
    msg: string | undefined;
    P: 3;
    ts: number;
    lvl: number;
    '*': any;
};
export declare type HeadedLogLine = Omit<LogHeader, 'type'> & LogLine;
//# sourceMappingURL=logger.d.ts.map